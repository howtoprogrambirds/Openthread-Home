
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	e8 5b 00 21 19 5c 00 01 6d e4 00 01 79 5c 00 01     .[.!.\..m...y\..
 1000010:	79 5c 00 01 79 5c 00 01 79 5c 00 01 00 00 00 00     y\..y\..y\......
	...
 100002c:	69 5a 00 01 79 5c 00 01 00 00 00 00 11 5a 00 01     iZ..y\.......Z..
 100003c:	33 e4 00 01                                         3...

01000040 <_irq_vector_table>:
 1000040:	f1 5b 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     .[...[...[...[..
 1000050:	f1 5b 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     .[...[...[...[..
 1000060:	3b e7 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     ;....[...[...[..
 1000070:	0b e7 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     .....[...[...[..
 1000080:	f1 5b 00 01 25 e7 00 01 f1 5b 00 01 f1 5b 00 01     .[..%....[...[..
 1000090:	f1 5b 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     .[...[...[...[..
 10000a0:	f1 5b 00 01 f1 5b 00 01 f1 5b 00 01 f1 5b 00 01     .[...[...[...[..
 10000b0:	f1 5b 00 01 f1 5b 00 01                             .[...[..

Disassembly of section text:

010000b8 <__aeabi_uldivmod>:
 10000b8:	b953      	cbnz	r3, 10000d0 <__aeabi_uldivmod+0x18>
 10000ba:	b94a      	cbnz	r2, 10000d0 <__aeabi_uldivmod+0x18>
 10000bc:	2900      	cmp	r1, #0
 10000be:	bf08      	it	eq
 10000c0:	2800      	cmpeq	r0, #0
 10000c2:	bf1c      	itt	ne
 10000c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 10000c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 10000cc:	f000 b980 	b.w	10003d0 <__aeabi_idiv0>
 10000d0:	f1ad 0c08 	sub.w	ip, sp, #8
 10000d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 10000d8:	f000 f806 	bl	10000e8 <__udivmoddi4>
 10000dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 10000e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10000e4:	b004      	add	sp, #16
 10000e6:	4770      	bx	lr

010000e8 <__udivmoddi4>:
 10000e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10000ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 10000ee:	460d      	mov	r5, r1
 10000f0:	4604      	mov	r4, r0
 10000f2:	460f      	mov	r7, r1
 10000f4:	2b00      	cmp	r3, #0
 10000f6:	d147      	bne.n	1000188 <__udivmoddi4+0xa0>
 10000f8:	428a      	cmp	r2, r1
 10000fa:	4694      	mov	ip, r2
 10000fc:	d95f      	bls.n	10001be <__udivmoddi4+0xd6>
 10000fe:	fab2 f382 	clz	r3, r2
 1000102:	b143      	cbz	r3, 1000116 <__udivmoddi4+0x2e>
 1000104:	f1c3 0120 	rsb	r1, r3, #32
 1000108:	409f      	lsls	r7, r3
 100010a:	fa02 fc03 	lsl.w	ip, r2, r3
 100010e:	409c      	lsls	r4, r3
 1000110:	fa20 f101 	lsr.w	r1, r0, r1
 1000114:	430f      	orrs	r7, r1
 1000116:	ea4f 451c 	mov.w	r5, ip, lsr #16
 100011a:	fa1f fe8c 	uxth.w	lr, ip
 100011e:	0c22      	lsrs	r2, r4, #16
 1000120:	fbb7 f1f5 	udiv	r1, r7, r5
 1000124:	fb05 7711 	mls	r7, r5, r1, r7
 1000128:	fb01 f00e 	mul.w	r0, r1, lr
 100012c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 1000130:	4290      	cmp	r0, r2
 1000132:	d908      	bls.n	1000146 <__udivmoddi4+0x5e>
 1000134:	eb1c 0202 	adds.w	r2, ip, r2
 1000138:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 100013c:	d202      	bcs.n	1000144 <__udivmoddi4+0x5c>
 100013e:	4290      	cmp	r0, r2
 1000140:	f200 8134 	bhi.w	10003ac <__udivmoddi4+0x2c4>
 1000144:	4639      	mov	r1, r7
 1000146:	1a12      	subs	r2, r2, r0
 1000148:	b2a4      	uxth	r4, r4
 100014a:	fbb2 f0f5 	udiv	r0, r2, r5
 100014e:	fb05 2210 	mls	r2, r5, r0, r2
 1000152:	fb00 fe0e 	mul.w	lr, r0, lr
 1000156:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 100015a:	45a6      	cmp	lr, r4
 100015c:	d908      	bls.n	1000170 <__udivmoddi4+0x88>
 100015e:	eb1c 0404 	adds.w	r4, ip, r4
 1000162:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 1000166:	d202      	bcs.n	100016e <__udivmoddi4+0x86>
 1000168:	45a6      	cmp	lr, r4
 100016a:	f200 8119 	bhi.w	10003a0 <__udivmoddi4+0x2b8>
 100016e:	4610      	mov	r0, r2
 1000170:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 1000174:	eba4 040e 	sub.w	r4, r4, lr
 1000178:	2100      	movs	r1, #0
 100017a:	b11e      	cbz	r6, 1000184 <__udivmoddi4+0x9c>
 100017c:	40dc      	lsrs	r4, r3
 100017e:	2300      	movs	r3, #0
 1000180:	e9c6 4300 	strd	r4, r3, [r6]
 1000184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000188:	428b      	cmp	r3, r1
 100018a:	d908      	bls.n	100019e <__udivmoddi4+0xb6>
 100018c:	2e00      	cmp	r6, #0
 100018e:	f000 80fb 	beq.w	1000388 <__udivmoddi4+0x2a0>
 1000192:	2100      	movs	r1, #0
 1000194:	e9c6 0500 	strd	r0, r5, [r6]
 1000198:	4608      	mov	r0, r1
 100019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100019e:	fab3 f183 	clz	r1, r3
 10001a2:	2900      	cmp	r1, #0
 10001a4:	d14b      	bne.n	100023e <__udivmoddi4+0x156>
 10001a6:	42ab      	cmp	r3, r5
 10001a8:	f0c0 80f1 	bcc.w	100038e <__udivmoddi4+0x2a6>
 10001ac:	4282      	cmp	r2, r0
 10001ae:	f240 80ee 	bls.w	100038e <__udivmoddi4+0x2a6>
 10001b2:	4608      	mov	r0, r1
 10001b4:	2e00      	cmp	r6, #0
 10001b6:	d0e5      	beq.n	1000184 <__udivmoddi4+0x9c>
 10001b8:	e9c6 4700 	strd	r4, r7, [r6]
 10001bc:	e7e2      	b.n	1000184 <__udivmoddi4+0x9c>
 10001be:	b902      	cbnz	r2, 10001c2 <__udivmoddi4+0xda>
 10001c0:	deff      	udf	#255	; 0xff
 10001c2:	fab2 f382 	clz	r3, r2
 10001c6:	2b00      	cmp	r3, #0
 10001c8:	f040 809d 	bne.w	1000306 <__udivmoddi4+0x21e>
 10001cc:	1a8d      	subs	r5, r1, r2
 10001ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 10001d2:	b297      	uxth	r7, r2
 10001d4:	2101      	movs	r1, #1
 10001d6:	fbb5 f2fe 	udiv	r2, r5, lr
 10001da:	fb0e 5012 	mls	r0, lr, r2, r5
 10001de:	0c25      	lsrs	r5, r4, #16
 10001e0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 10001e4:	fb07 f002 	mul.w	r0, r7, r2
 10001e8:	42a8      	cmp	r0, r5
 10001ea:	d90f      	bls.n	100020c <__udivmoddi4+0x124>
 10001ec:	eb1c 0505 	adds.w	r5, ip, r5
 10001f0:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 10001f4:	bf2c      	ite	cs
 10001f6:	f04f 0901 	movcs.w	r9, #1
 10001fa:	f04f 0900 	movcc.w	r9, #0
 10001fe:	42a8      	cmp	r0, r5
 1000200:	d903      	bls.n	100020a <__udivmoddi4+0x122>
 1000202:	f1b9 0f00 	cmp.w	r9, #0
 1000206:	f000 80ce 	beq.w	10003a6 <__udivmoddi4+0x2be>
 100020a:	4642      	mov	r2, r8
 100020c:	1a2d      	subs	r5, r5, r0
 100020e:	b2a4      	uxth	r4, r4
 1000210:	fbb5 f0fe 	udiv	r0, r5, lr
 1000214:	fb0e 5510 	mls	r5, lr, r0, r5
 1000218:	fb00 f707 	mul.w	r7, r0, r7
 100021c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 1000220:	42a7      	cmp	r7, r4
 1000222:	d908      	bls.n	1000236 <__udivmoddi4+0x14e>
 1000224:	eb1c 0404 	adds.w	r4, ip, r4
 1000228:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 100022c:	d202      	bcs.n	1000234 <__udivmoddi4+0x14c>
 100022e:	42a7      	cmp	r7, r4
 1000230:	f200 80b3 	bhi.w	100039a <__udivmoddi4+0x2b2>
 1000234:	4628      	mov	r0, r5
 1000236:	1be4      	subs	r4, r4, r7
 1000238:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 100023c:	e79d      	b.n	100017a <__udivmoddi4+0x92>
 100023e:	f1c1 0720 	rsb	r7, r1, #32
 1000242:	408b      	lsls	r3, r1
 1000244:	fa05 f401 	lsl.w	r4, r5, r1
 1000248:	fa22 fc07 	lsr.w	ip, r2, r7
 100024c:	40fd      	lsrs	r5, r7
 100024e:	408a      	lsls	r2, r1
 1000250:	ea4c 0c03 	orr.w	ip, ip, r3
 1000254:	fa20 f307 	lsr.w	r3, r0, r7
 1000258:	ea4f 491c 	mov.w	r9, ip, lsr #16
 100025c:	431c      	orrs	r4, r3
 100025e:	fa1f fe8c 	uxth.w	lr, ip
 1000262:	fa00 f301 	lsl.w	r3, r0, r1
 1000266:	0c20      	lsrs	r0, r4, #16
 1000268:	fbb5 f8f9 	udiv	r8, r5, r9
 100026c:	fb09 5518 	mls	r5, r9, r8, r5
 1000270:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 1000274:	fb08 f00e 	mul.w	r0, r8, lr
 1000278:	42a8      	cmp	r0, r5
 100027a:	d90f      	bls.n	100029c <__udivmoddi4+0x1b4>
 100027c:	eb1c 0505 	adds.w	r5, ip, r5
 1000280:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 1000284:	bf2c      	ite	cs
 1000286:	f04f 0b01 	movcs.w	fp, #1
 100028a:	f04f 0b00 	movcc.w	fp, #0
 100028e:	42a8      	cmp	r0, r5
 1000290:	d903      	bls.n	100029a <__udivmoddi4+0x1b2>
 1000292:	f1bb 0f00 	cmp.w	fp, #0
 1000296:	f000 808c 	beq.w	10003b2 <__udivmoddi4+0x2ca>
 100029a:	46d0      	mov	r8, sl
 100029c:	1a2d      	subs	r5, r5, r0
 100029e:	b2a4      	uxth	r4, r4
 10002a0:	fbb5 f0f9 	udiv	r0, r5, r9
 10002a4:	fb09 5510 	mls	r5, r9, r0, r5
 10002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 10002ac:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 10002b0:	45ae      	cmp	lr, r5
 10002b2:	d907      	bls.n	10002c4 <__udivmoddi4+0x1dc>
 10002b4:	eb1c 0505 	adds.w	r5, ip, r5
 10002b8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 10002bc:	d201      	bcs.n	10002c2 <__udivmoddi4+0x1da>
 10002be:	45ae      	cmp	lr, r5
 10002c0:	d87e      	bhi.n	10003c0 <__udivmoddi4+0x2d8>
 10002c2:	4620      	mov	r0, r4
 10002c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 10002c8:	eba5 050e 	sub.w	r5, r5, lr
 10002cc:	fba0 9802 	umull	r9, r8, r0, r2
 10002d0:	4545      	cmp	r5, r8
 10002d2:	464c      	mov	r4, r9
 10002d4:	46c6      	mov	lr, r8
 10002d6:	d302      	bcc.n	10002de <__udivmoddi4+0x1f6>
 10002d8:	d106      	bne.n	10002e8 <__udivmoddi4+0x200>
 10002da:	454b      	cmp	r3, r9
 10002dc:	d204      	bcs.n	10002e8 <__udivmoddi4+0x200>
 10002de:	3801      	subs	r0, #1
 10002e0:	ebb9 0402 	subs.w	r4, r9, r2
 10002e4:	eb68 0e0c 	sbc.w	lr, r8, ip
 10002e8:	2e00      	cmp	r6, #0
 10002ea:	d06f      	beq.n	10003cc <__udivmoddi4+0x2e4>
 10002ec:	1b1a      	subs	r2, r3, r4
 10002ee:	eb65 050e 	sbc.w	r5, r5, lr
 10002f2:	fa22 f301 	lsr.w	r3, r2, r1
 10002f6:	fa05 f707 	lsl.w	r7, r5, r7
 10002fa:	40cd      	lsrs	r5, r1
 10002fc:	2100      	movs	r1, #0
 10002fe:	431f      	orrs	r7, r3
 1000300:	e9c6 7500 	strd	r7, r5, [r6]
 1000304:	e73e      	b.n	1000184 <__udivmoddi4+0x9c>
 1000306:	fa02 fc03 	lsl.w	ip, r2, r3
 100030a:	f1c3 0020 	rsb	r0, r3, #32
 100030e:	fa01 f203 	lsl.w	r2, r1, r3
 1000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 1000316:	40c1      	lsrs	r1, r0
 1000318:	fa24 f500 	lsr.w	r5, r4, r0
 100031c:	fa1f f78c 	uxth.w	r7, ip
 1000320:	409c      	lsls	r4, r3
 1000322:	4315      	orrs	r5, r2
 1000324:	fbb1 f0fe 	udiv	r0, r1, lr
 1000328:	0c2a      	lsrs	r2, r5, #16
 100032a:	fb0e 1110 	mls	r1, lr, r0, r1
 100032e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 1000332:	fb00 f107 	mul.w	r1, r0, r7
 1000336:	4291      	cmp	r1, r2
 1000338:	d90e      	bls.n	1000358 <__udivmoddi4+0x270>
 100033a:	eb1c 0202 	adds.w	r2, ip, r2
 100033e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 1000342:	bf2c      	ite	cs
 1000344:	f04f 0901 	movcs.w	r9, #1
 1000348:	f04f 0900 	movcc.w	r9, #0
 100034c:	4291      	cmp	r1, r2
 100034e:	d902      	bls.n	1000356 <__udivmoddi4+0x26e>
 1000350:	f1b9 0f00 	cmp.w	r9, #0
 1000354:	d031      	beq.n	10003ba <__udivmoddi4+0x2d2>
 1000356:	4640      	mov	r0, r8
 1000358:	1a52      	subs	r2, r2, r1
 100035a:	b2ad      	uxth	r5, r5
 100035c:	fbb2 f1fe 	udiv	r1, r2, lr
 1000360:	fb0e 2211 	mls	r2, lr, r1, r2
 1000364:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 1000368:	fb01 f207 	mul.w	r2, r1, r7
 100036c:	42aa      	cmp	r2, r5
 100036e:	d907      	bls.n	1000380 <__udivmoddi4+0x298>
 1000370:	eb1c 0505 	adds.w	r5, ip, r5
 1000374:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 1000378:	d201      	bcs.n	100037e <__udivmoddi4+0x296>
 100037a:	42aa      	cmp	r2, r5
 100037c:	d823      	bhi.n	10003c6 <__udivmoddi4+0x2de>
 100037e:	4641      	mov	r1, r8
 1000380:	1aad      	subs	r5, r5, r2
 1000382:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1000386:	e726      	b.n	10001d6 <__udivmoddi4+0xee>
 1000388:	4631      	mov	r1, r6
 100038a:	4630      	mov	r0, r6
 100038c:	e6fa      	b.n	1000184 <__udivmoddi4+0x9c>
 100038e:	1a84      	subs	r4, r0, r2
 1000390:	eb65 0303 	sbc.w	r3, r5, r3
 1000394:	2001      	movs	r0, #1
 1000396:	461f      	mov	r7, r3
 1000398:	e70c      	b.n	10001b4 <__udivmoddi4+0xcc>
 100039a:	4464      	add	r4, ip
 100039c:	3802      	subs	r0, #2
 100039e:	e74a      	b.n	1000236 <__udivmoddi4+0x14e>
 10003a0:	4464      	add	r4, ip
 10003a2:	3802      	subs	r0, #2
 10003a4:	e6e4      	b.n	1000170 <__udivmoddi4+0x88>
 10003a6:	3a02      	subs	r2, #2
 10003a8:	4465      	add	r5, ip
 10003aa:	e72f      	b.n	100020c <__udivmoddi4+0x124>
 10003ac:	3902      	subs	r1, #2
 10003ae:	4462      	add	r2, ip
 10003b0:	e6c9      	b.n	1000146 <__udivmoddi4+0x5e>
 10003b2:	f1a8 0802 	sub.w	r8, r8, #2
 10003b6:	4465      	add	r5, ip
 10003b8:	e770      	b.n	100029c <__udivmoddi4+0x1b4>
 10003ba:	3802      	subs	r0, #2
 10003bc:	4462      	add	r2, ip
 10003be:	e7cb      	b.n	1000358 <__udivmoddi4+0x270>
 10003c0:	3802      	subs	r0, #2
 10003c2:	4465      	add	r5, ip
 10003c4:	e77e      	b.n	10002c4 <__udivmoddi4+0x1dc>
 10003c6:	3902      	subs	r1, #2
 10003c8:	4465      	add	r5, ip
 10003ca:	e7d9      	b.n	1000380 <__udivmoddi4+0x298>
 10003cc:	4631      	mov	r1, r6
 10003ce:	e6d9      	b.n	1000184 <__udivmoddi4+0x9c>

010003d0 <__aeabi_idiv0>:
 10003d0:	4770      	bx	lr
 10003d2:	bf00      	nop

010003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
 10003d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 10003d6:	4c0a      	ldr	r4, [pc, #40]	; (1000400 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x2c>)
 10003d8:	4615      	mov	r5, r2
 10003da:	461e      	mov	r6, r3
 10003dc:	69a4      	ldr	r4, [r4, #24]
 10003de:	b114      	cbz	r4, 10003e6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x12>
 10003e0:	47a0      	blx	r4
 10003e2:	b002      	add	sp, #8
 10003e4:	bd70      	pop	{r4, r5, r6, pc}
 10003e6:	f10d 0007 	add.w	r0, sp, #7
 10003ea:	f88d 4007 	strb.w	r4, [sp, #7]
 10003ee:	f004 f929 	bl	1004644 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
 10003f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 10003f6:	4620      	mov	r0, r4
 10003f8:	1aed      	subs	r5, r5, r3
 10003fa:	7035      	strb	r5, [r6, #0]
 10003fc:	e7f1      	b.n	10003e2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xe>
 10003fe:	bf00      	nop
 1000400:	21000278 	.word	0x21000278

01000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
 1000404:	4b01      	ldr	r3, [pc, #4]	; (100040c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
 1000406:	7918      	ldrb	r0, [r3, #4]
 1000408:	4770      	bx	lr
 100040a:	bf00      	nop
 100040c:	21000298 	.word	0x21000298

01000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
 1000410:	4b04      	ldr	r3, [pc, #16]	; (1000424 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
 1000412:	791a      	ldrb	r2, [r3, #4]
 1000414:	4282      	cmp	r2, r0
 1000416:	bf83      	ittte	hi
 1000418:	681b      	ldrhi	r3, [r3, #0]
 100041a:	2224      	movhi	r2, #36	; 0x24
 100041c:	fb02 3000 	mlahi	r0, r2, r0, r3
 1000420:	2000      	movls	r0, #0
 1000422:	4770      	bx	lr
 1000424:	21000298 	.word	0x21000298

01000428 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA>:
 1000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100042c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1000514 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xec>
 1000430:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
 1000434:	b2ed      	uxtb	r5, r5
 1000436:	f105 0908 	add.w	r9, r5, #8
 100043a:	eb08 0389 	add.w	r3, r8, r9, lsl #2
 100043e:	785c      	ldrb	r4, [r3, #1]
 1000440:	2c20      	cmp	r4, #32
 1000442:	d04a      	beq.n	10004da <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xb2>
 1000444:	4e31      	ldr	r6, [pc, #196]	; (100050c <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe4>)
 1000446:	4f32      	ldr	r7, [pc, #200]	; (1000510 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe8>)
 1000448:	016d      	lsls	r5, r5, #5
 100044a:	192b      	adds	r3, r5, r4
 100044c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 1000450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 1000454:	3b01      	subs	r3, #1
 1000456:	2b05      	cmp	r3, #5
 1000458:	d852      	bhi.n	1000500 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xd8>
 100045a:	e8df f003 	tbb	[pc, r3]
 100045e:	5103      	.short	0x5103
 1000460:	03444751 	.word	0x03444751
 1000464:	f04f 0a07 	mov.w	sl, #7
 1000468:	b10e      	cbz	r6, 100046e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x46>
 100046a:	e000      	b.n	100046e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x46>
 100046c:	bf00      	nop
 100046e:	f3ef 8210 	mrs	r2, PRIMASK
 1000472:	b672      	cpsid	i
 1000474:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 1000478:	192b      	adds	r3, r5, r4
 100047a:	f899 1002 	ldrb.w	r1, [r9, #2]
 100047e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 1000482:	42a1      	cmp	r1, r4
 1000484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1000488:	f889 3001 	strb.w	r3, [r9, #1]
 100048c:	d027      	beq.n	10004de <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xb6>
 100048e:	b91a      	cbnz	r2, 1000498 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x70>
 1000490:	b10f      	cbz	r7, 1000496 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x6e>
 1000492:	e000      	b.n	1000496 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x6e>
 1000494:	bf00      	nop
 1000496:	b662      	cpsie	i
 1000498:	192b      	adds	r3, r5, r4
 100049a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 100049e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 10004a2:	b332      	cbz	r2, 10004f2 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xca>
 10004a4:	2a06      	cmp	r2, #6
 10004a6:	d024      	beq.n	10004f2 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xca>
 10004a8:	2a03      	cmp	r2, #3
 10004aa:	d022      	beq.n	10004f2 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xca>
 10004ac:	2a05      	cmp	r2, #5
 10004ae:	d020      	beq.n	10004f2 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xca>
 10004b0:	2201      	movs	r2, #1
 10004b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 10004b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 10004ba:	4651      	mov	r1, sl
 10004bc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 10004c0:	e9d4 302d 	ldrd	r3, r0, [r4, #180]	; 0xb4
 10004c4:	4798      	blx	r3
 10004c6:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
 10004ca:	b2ed      	uxtb	r5, r5
 10004cc:	f105 0908 	add.w	r9, r5, #8
 10004d0:	eb08 0389 	add.w	r3, r8, r9, lsl #2
 10004d4:	785c      	ldrb	r4, [r3, #1]
 10004d6:	2c20      	cmp	r4, #32
 10004d8:	d1b6      	bne.n	1000448 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x20>
 10004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10004de:	2320      	movs	r3, #32
 10004e0:	f889 3002 	strb.w	r3, [r9, #2]
 10004e4:	e7d3      	b.n	100048e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x66>
 10004e6:	f04f 0a03 	mov.w	sl, #3
 10004ea:	e7bd      	b.n	1000468 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x40>
 10004ec:	f04f 0a02 	mov.w	sl, #2
 10004f0:	e7ba      	b.n	1000468 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x40>
 10004f2:	4425      	add	r5, r4
 10004f4:	2301      	movs	r3, #1
 10004f6:	eb08 0545 	add.w	r5, r8, r5, lsl #1
 10004fa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 10004fe:	e7da      	b.n	10004b6 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x8e>
 1000500:	f640 01d8 	movw	r1, #2264	; 0x8d8
 1000504:	2070      	movs	r0, #112	; 0x70
 1000506:	f003 fa0f 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100050a:	bf00      	nop
	...
 1000514:	210002a0 	.word	0x210002a0

01000518 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>:
 1000518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100051c:	4d34      	ldr	r5, [pc, #208]	; (10005f0 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xd8>)
 100051e:	4607      	mov	r7, r0
 1000520:	f100 0808 	add.w	r8, r0, #8
 1000524:	7fab      	ldrb	r3, [r5, #30]
 1000526:	f815 4028 	ldrb.w	r4, [r5, r8, lsl #2]
 100052a:	2b00      	cmp	r3, #0
 100052c:	bf14      	ite	ne
 100052e:	2600      	movne	r6, #0
 1000530:	2602      	moveq	r6, #2
 1000532:	f002 f9b3 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000536:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
 100053a:	ea4f 1c47 	mov.w	ip, r7, lsl #5
 100053e:	2120      	movs	r1, #32
 1000540:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 1000544:	eb0c 0e04 	add.w	lr, ip, r4
 1000548:	00db      	lsls	r3, r3, #3
 100054a:	eb05 0e4e 	add.w	lr, r5, lr, lsl #1
 100054e:	3308      	adds	r3, #8
 1000550:	f852 9003 	ldr.w	r9, [r2, r3]
 1000554:	4413      	add	r3, r2
 1000556:	eba9 0900 	sub.w	r9, r9, r0
 100055a:	685b      	ldr	r3, [r3, #4]
 100055c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
 1000560:	1a1b      	subs	r3, r3, r0
 1000562:	4556      	cmp	r6, sl
 1000564:	ea43 0309 	orr.w	r3, r3, r9
 1000568:	d807      	bhi.n	100057a <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x62>
 100056a:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 100056e:	d104      	bne.n	100057a <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x62>
 1000570:	2920      	cmp	r1, #32
 1000572:	d109      	bne.n	1000588 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x70>
 1000574:	4620      	mov	r0, r4
 1000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100057a:	f89e 3035 	ldrb.w	r3, [lr, #53]	; 0x35
 100057e:	4621      	mov	r1, r4
 1000580:	2b20      	cmp	r3, #32
 1000582:	d030      	beq.n	10005e6 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xce>
 1000584:	461c      	mov	r4, r3
 1000586:	e7db      	b.n	1000540 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x28>
 1000588:	017f      	lsls	r7, r7, #5
 100058a:	f815 6028 	ldrb.w	r6, [r5, r8, lsl #2]
 100058e:	2004      	movs	r0, #4
 1000590:	187b      	adds	r3, r7, r1
 1000592:	4632      	mov	r2, r6
 1000594:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 1000598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 100059c:	f805 3028 	strb.w	r3, [r5, r8, lsl #2]
 10005a0:	e000      	b.n	10005a4 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x8c>
 10005a2:	4622      	mov	r2, r4
 10005a4:	18bb      	adds	r3, r7, r2
 10005a6:	4291      	cmp	r1, r2
 10005a8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 10005ac:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 10005b0:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
 10005b4:	d1f5      	bne.n	10005a2 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x8a>
 10005b6:	eb05 0188 	add.w	r1, r5, r8, lsl #2
 10005ba:	788b      	ldrb	r3, [r1, #2]
 10005bc:	b2db      	uxtb	r3, r3
 10005be:	2b20      	cmp	r3, #32
 10005c0:	d014      	beq.n	10005ec <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xd4>
 10005c2:	443b      	add	r3, r7
 10005c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 10005c8:	f883 6035 	strb.w	r6, [r3, #53]	; 0x35
 10005cc:	4417      	add	r7, r2
 10005ce:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 10005d2:	2320      	movs	r3, #32
 10005d4:	4620      	mov	r0, r4
 10005d6:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 10005da:	f888 2002 	strb.w	r2, [r8, #2]
 10005de:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 10005e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10005e6:	4621      	mov	r1, r4
 10005e8:	461c      	mov	r4, r3
 10005ea:	e7c1      	b.n	1000570 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x58>
 10005ec:	704e      	strb	r6, [r1, #1]
 10005ee:	e7ed      	b.n	10005cc <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xb4>
 10005f0:	210002a0 	.word	0x210002a0

010005f4 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ>:
 10005f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10005f8:	b085      	sub	sp, #20
 10005fa:	4698      	mov	r8, r3
 10005fc:	3308      	adds	r3, #8
 10005fe:	4691      	mov	r9, r2
 1000600:	468a      	mov	sl, r1
 1000602:	f10d 020b 	add.w	r2, sp, #11
 1000606:	a903      	add	r1, sp, #12
 1000608:	461c      	mov	r4, r3
 100060a:	9301      	str	r3, [sp, #4]
 100060c:	f001 feea 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1000610:	f8df b208 	ldr.w	fp, [pc, #520]	; 100081c <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x228>
 1000614:	9a03      	ldr	r2, [sp, #12]
 1000616:	f81b 4024 	ldrb.w	r4, [fp, r4, lsl #2]
 100061a:	4491      	add	r9, r2
 100061c:	2c20      	cmp	r4, #32
 100061e:	f029 437f 	bic.w	r3, r9, #4278190080	; 0xff000000
 1000622:	9300      	str	r3, [sp, #0]
 1000624:	f000 8084 	beq.w	1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 1000628:	f8da 0000 	ldr.w	r0, [sl]
 100062c:	f10b 07b4 	add.w	r7, fp, #180	; 0xb4
 1000630:	4e79      	ldr	r6, [pc, #484]	; (1000818 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x224>)
 1000632:	4601      	mov	r1, r0
 1000634:	0065      	lsls	r5, r4, #1
 1000636:	192a      	adds	r2, r5, r4
 1000638:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 100063c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 1000640:	1a8a      	subs	r2, r1, r2
 1000642:	0212      	lsls	r2, r2, #8
 1000644:	32ff      	adds	r2, #255	; 0xff
 1000646:	db3d      	blt.n	10006c4 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0xd0>
 1000648:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 100064c:	b343      	cbz	r3, 10006a0 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0xac>
 100064e:	eb05 0904 	add.w	r9, r5, r4
 1000652:	eb0b 09c9 	add.w	r9, fp, r9, lsl #3
 1000656:	f8b9 30c6 	ldrh.w	r3, [r9, #198]	; 0xc6
 100065a:	bb0b      	cbnz	r3, 10006a0 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0xac>
 100065c:	f8d9 00bc 	ldr.w	r0, [r9, #188]	; 0xbc
 1000660:	f001 feb2 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1000664:	f8b9 30c6 	ldrh.w	r3, [r9, #198]	; 0xc6
 1000668:	f899 20c4 	ldrb.w	r2, [r9, #196]	; 0xc4
 100066c:	42b0      	cmp	r0, r6
 100066e:	f103 0301 	add.w	r3, r3, #1
 1000672:	4413      	add	r3, r2
 1000674:	4403      	add	r3, r0
 1000676:	f200 80ca 	bhi.w	100080e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x21a>
 100067a:	42b3      	cmp	r3, r6
 100067c:	f300 8094 	bgt.w	10007a8 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x1b4>
 1000680:	2b00      	cmp	r3, #0
 1000682:	da03      	bge.n	100068c <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x98>
 1000684:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 1000688:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 100068c:	4618      	mov	r0, r3
 100068e:	f001 fed3 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1000692:	f8da 1000 	ldr.w	r1, [sl]
 1000696:	1a08      	subs	r0, r1, r0
 1000698:	0200      	lsls	r0, r0, #8
 100069a:	f5b0 5f4c 	cmp.w	r0, #13056	; 0x3300
 100069e:	db11      	blt.n	10006c4 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0xd0>
 10006a0:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 10006a4:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 10006a8:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 10006ac:	2c20      	cmp	r4, #32
 10006ae:	d03f      	beq.n	1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 10006b0:	0065      	lsls	r5, r4, #1
 10006b2:	192b      	adds	r3, r5, r4
 10006b4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 10006b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 10006bc:	1acb      	subs	r3, r1, r3
 10006be:	021b      	lsls	r3, r3, #8
 10006c0:	33ff      	adds	r3, #255	; 0xff
 10006c2:	dac1      	bge.n	1000648 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x54>
 10006c4:	eb05 0904 	add.w	r9, r5, r4
 10006c8:	f8da 2004 	ldr.w	r2, [sl, #4]
 10006cc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 10006d0:	f109 0908 	add.w	r9, r9, #8
 10006d4:	f857 3009 	ldr.w	r3, [r7, r9]
 10006d8:	eb07 0109 	add.w	r1, r7, r9
 10006dc:	1a9b      	subs	r3, r3, r2
 10006de:	021b      	lsls	r3, r3, #8
 10006e0:	33ff      	adds	r3, #255	; 0xff
 10006e2:	db29      	blt.n	1000738 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x144>
 10006e4:	894b      	ldrh	r3, [r1, #10]
 10006e6:	b31b      	cbz	r3, 1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 10006e8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 10006ec:	bb03      	cbnz	r3, 1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 10006ee:	f8da 0000 	ldr.w	r0, [sl]
 10006f2:	f001 fe69 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 10006f6:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 10006fa:	f89a 2008 	ldrb.w	r2, [sl, #8]
 10006fe:	42b0      	cmp	r0, r6
 1000700:	f103 0301 	add.w	r3, r3, #1
 1000704:	4413      	add	r3, r2
 1000706:	4403      	add	r3, r0
 1000708:	f200 8081 	bhi.w	100080e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x21a>
 100070c:	42b3      	cmp	r3, r6
 100070e:	dc46      	bgt.n	100079e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x1aa>
 1000710:	2b00      	cmp	r3, #0
 1000712:	da03      	bge.n	100071c <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x128>
 1000714:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 1000718:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 100071c:	4618      	mov	r0, r3
 100071e:	f001 fe8b 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1000722:	f857 3009 	ldr.w	r3, [r7, r9]
 1000726:	1a18      	subs	r0, r3, r0
 1000728:	0200      	lsls	r0, r0, #8
 100072a:	f5b0 5f4c 	cmp.w	r0, #13056	; 0x3300
 100072e:	db03      	blt.n	1000738 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x144>
 1000730:	2001      	movs	r0, #1
 1000732:	b005      	add	sp, #20
 1000734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000738:	4425      	add	r5, r4
 100073a:	f89a 300c 	ldrb.w	r3, [sl, #12]
 100073e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 1000742:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
 1000746:	429a      	cmp	r2, r3
 1000748:	d909      	bls.n	100075e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x16a>
 100074a:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 100074e:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 1000752:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 1000756:	2c20      	cmp	r4, #32
 1000758:	d0ea      	beq.n	1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 100075a:	0065      	lsls	r5, r4, #1
 100075c:	e7b2      	b.n	10006c4 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0xd0>
 100075e:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
 1000762:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 1000766:	b912      	cbnz	r2, 100076e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x17a>
 1000768:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 100076c:	bb0a      	cbnz	r2, 10007b2 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x1be>
 100076e:	9b00      	ldr	r3, [sp, #0]
 1000770:	1ae2      	subs	r2, r4, r3
 1000772:	0212      	lsls	r2, r2, #8
 1000774:	32ff      	adds	r2, #255	; 0xff
 1000776:	da46      	bge.n	1000806 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x212>
 1000778:	9b01      	ldr	r3, [sp, #4]
 100077a:	e9da 1200 	ldrd	r1, r2, [sl]
 100077e:	1a52      	subs	r2, r2, r1
 1000780:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
 1000784:	4422      	add	r2, r4
 1000786:	f8ca 1000 	str.w	r1, [sl]
 100078a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 100078e:	f8ca 2004 	str.w	r2, [sl, #4]
 1000792:	f81b 4023 	ldrb.w	r4, [fp, r3, lsl #2]
 1000796:	2c20      	cmp	r4, #32
 1000798:	f47f af4c 	bne.w	1000634 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x40>
 100079c:	e7c8      	b.n	1000730 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x13c>
 100079e:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 10007a2:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 10007a6:	e7b9      	b.n	100071c <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x128>
 10007a8:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 10007ac:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 10007b0:	e76c      	b.n	100068c <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x98>
 10007b2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 10007b6:	f001 fe07 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 10007ba:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
 10007be:	f895 10c4 	ldrb.w	r1, [r5, #196]	; 0xc4
 10007c2:	42b0      	cmp	r0, r6
 10007c4:	f102 0201 	add.w	r2, r2, #1
 10007c8:	440a      	add	r2, r1
 10007ca:	4402      	add	r2, r0
 10007cc:	d81f      	bhi.n	100080e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x21a>
 10007ce:	42b2      	cmp	r2, r6
 10007d0:	dc14      	bgt.n	10007fc <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x208>
 10007d2:	2a00      	cmp	r2, #0
 10007d4:	da03      	bge.n	10007de <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x1ea>
 10007d6:	f102 52f4 	add.w	r2, r2, #511705088	; 0x1e800000
 10007da:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
 10007de:	4610      	mov	r0, r2
 10007e0:	f001 fe2a 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10007e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 10007e8:	1a21      	subs	r1, r4, r0
 10007ea:	0209      	lsls	r1, r1, #8
 10007ec:	f5b1 5f4c 	cmp.w	r1, #13056	; 0x3300
 10007f0:	dabd      	bge.n	100076e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x17a>
 10007f2:	f100 0233 	add.w	r2, r0, #51	; 0x33
 10007f6:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 10007fa:	e7b8      	b.n	100076e <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x17a>
 10007fc:	f102 4261 	add.w	r2, r2, #3774873600	; 0xe1000000
 1000800:	f502 02f7 	add.w	r2, r2, #8093696	; 0x7b8000
 1000804:	e7eb      	b.n	10007de <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ+0x1ea>
 1000806:	2000      	movs	r0, #0
 1000808:	b005      	add	sp, #20
 100080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100080e:	f240 6116 	movw	r1, #1558	; 0x616
 1000812:	2070      	movs	r0, #112	; 0x70
 1000814:	f003 f888 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000818:	1e847fff 	.word	0x1e847fff
 100081c:	210002a0 	.word	0x210002a0

01000820 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ>:
 1000820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1000824:	460d      	mov	r5, r1
 1000826:	4614      	mov	r4, r2
 1000828:	7809      	ldrb	r1, [r1, #0]
 100082a:	4606      	mov	r6, r0
 100082c:	f895 900b 	ldrb.w	r9, [r5, #11]
 1000830:	461f      	mov	r7, r3
 1000832:	7aa8      	ldrb	r0, [r5, #10]
 1000834:	b083      	sub	sp, #12
 1000836:	892b      	ldrh	r3, [r5, #8]
 1000838:	3208      	adds	r2, #8
 100083a:	73a1      	strb	r1, [r4, #14]
 100083c:	f884 900d 	strb.w	r9, [r4, #13]
 1000840:	7320      	strb	r0, [r4, #12]
 1000842:	8163      	strh	r3, [r4, #10]
 1000844:	f8d5 8004 	ldr.w	r8, [r5, #4]
 1000848:	bb01      	cbnz	r1, 100088c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x6c>
 100084a:	68ed      	ldr	r5, [r5, #12]
 100084c:	494c      	ldr	r1, [pc, #304]	; (1000980 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x160>)
 100084e:	1e68      	subs	r0, r5, #1
 1000850:	428d      	cmp	r5, r1
 1000852:	eba0 0003 	sub.w	r0, r0, r3
 1000856:	f200 8089 	bhi.w	100096c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x14c>
 100085a:	4288      	cmp	r0, r1
 100085c:	dc7a      	bgt.n	1000954 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x134>
 100085e:	2800      	cmp	r0, #0
 1000860:	db65      	blt.n	100092e <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x10e>
 1000862:	4621      	mov	r1, r4
 1000864:	f001 fdbe 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1000868:	6823      	ldr	r3, [r4, #0]
 100086a:	eb05 0008 	add.w	r0, r5, r8
 100086e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000872:	6023      	str	r3, [r4, #0]
 1000874:	f1b9 0f00 	cmp.w	r9, #0
 1000878:	d154      	bne.n	1000924 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x104>
 100087a:	307b      	adds	r0, #123	; 0x7b
 100087c:	f001 fddc 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1000880:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1000884:	6060      	str	r0, [r4, #4]
 1000886:	b003      	add	sp, #12
 1000888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 100088c:	483c      	ldr	r0, [pc, #240]	; (1000980 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x160>)
 100088e:	4621      	mov	r1, r4
 1000890:	1ac0      	subs	r0, r0, r3
 1000892:	f001 fda7 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1000896:	6823      	ldr	r3, [r4, #0]
 1000898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 100089c:	6023      	str	r3, [r4, #0]
 100089e:	f1b9 0f00 	cmp.w	r9, #0
 10008a2:	d139      	bne.n	1000918 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xf8>
 10008a4:	f108 007b 	add.w	r0, r8, #123	; 0x7b
 10008a8:	f001 fdc6 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10008ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 10008b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1000984 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x164>
 10008b4:	f10d 0203 	add.w	r2, sp, #3
 10008b8:	6060      	str	r0, [r4, #4]
 10008ba:	a901      	add	r1, sp, #4
 10008bc:	8960      	ldrh	r0, [r4, #10]
 10008be:	f001 fd91 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10008c2:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 10008c6:	2b20      	cmp	r3, #32
 10008c8:	d036      	beq.n	1000938 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x118>
 10008ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 10008ce:	8961      	ldrh	r1, [r4, #10]
 10008d0:	3306      	adds	r3, #6
 10008d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 10008d6:	6820      	ldr	r0, [r4, #0]
 10008d8:	f201 7127 	addw	r1, r1, #1831	; 0x727
 10008dc:	6863      	ldr	r3, [r4, #4]
 10008de:	6022      	str	r2, [r4, #0]
 10008e0:	1a1b      	subs	r3, r3, r0
 10008e2:	4413      	add	r3, r2
 10008e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10008e8:	6063      	str	r3, [r4, #4]
 10008ea:	68e8      	ldr	r0, [r5, #12]
 10008ec:	4288      	cmp	r0, r1
 10008ee:	d308      	bcc.n	1000902 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xe2>
 10008f0:	463b      	mov	r3, r7
 10008f2:	4632      	mov	r2, r6
 10008f4:	4621      	mov	r1, r4
 10008f6:	f7ff fe7d 	bl	10005f4 <sym_MN2IQSMW6GONTATSB4VKMFQSXJ67NM5LHCIJSKQ>
 10008fa:	2800      	cmp	r0, #0
 10008fc:	d1c3      	bne.n	1000886 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x66>
 10008fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 1000902:	4433      	add	r3, r6
 1000904:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000908:	1a9b      	subs	r3, r3, r2
 100090a:	6026      	str	r6, [r4, #0]
 100090c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000910:	6063      	str	r3, [r4, #4]
 1000912:	b003      	add	sp, #12
 1000914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1000918:	f1b9 0f01 	cmp.w	r9, #1
 100091c:	d12b      	bne.n	1000976 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x156>
 100091e:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 1000922:	e7c1      	b.n	10008a8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x88>
 1000924:	f1b9 0f01 	cmp.w	r9, #1
 1000928:	d125      	bne.n	1000976 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x156>
 100092a:	305a      	adds	r0, #90	; 0x5a
 100092c:	e7a6      	b.n	100087c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x5c>
 100092e:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
 1000932:	f500 2090 	add.w	r0, r0, #294912	; 0x48000
 1000936:	e794      	b.n	1000862 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x42>
 1000938:	8961      	ldrh	r1, [r4, #10]
 100093a:	f106 090a 	add.w	r9, r6, #10
 100093e:	b971      	cbnz	r1, 100095e <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x13e>
 1000940:	f898 03b5 	ldrb.w	r0, [r8, #949]	; 0x3b5
 1000944:	9b01      	ldr	r3, [sp, #4]
 1000946:	4298      	cmp	r0, r3
 1000948:	d901      	bls.n	100094e <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x12e>
 100094a:	1ac0      	subs	r0, r0, r3
 100094c:	4481      	add	r9, r0
 100094e:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
 1000952:	e7c0      	b.n	10008d6 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xb6>
 1000954:	f100 4061 	add.w	r0, r0, #3774873600	; 0xe1000000
 1000958:	f500 00f7 	add.w	r0, r0, #8093696	; 0x7b8000
 100095c:	e781      	b.n	1000862 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x42>
 100095e:	f002 fce3 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1000962:	b908      	cbnz	r0, 1000968 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x148>
 1000964:	f106 093c 	add.w	r9, r6, #60	; 0x3c
 1000968:	8961      	ldrh	r1, [r4, #10]
 100096a:	e7e9      	b.n	1000940 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x120>
 100096c:	f240 6116 	movw	r1, #1558	; 0x616
 1000970:	2070      	movs	r0, #112	; 0x70
 1000972:	f002 ffd9 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000976:	f240 61be 	movw	r1, #1726	; 0x6be
 100097a:	2070      	movs	r0, #112	; 0x70
 100097c:	f002 ffd4 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000980:	1e847fff 	.word	0x1e847fff
 1000984:	210002a0 	.word	0x210002a0

01000988 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>:
 1000988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100098c:	4614      	mov	r4, r2
 100098e:	b095      	sub	sp, #84	; 0x54
 1000990:	4db6      	ldr	r5, [pc, #728]	; (1000c6c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2e4>)
 1000992:	4683      	mov	fp, r0
 1000994:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 1000998:	9106      	str	r1, [sp, #24]
 100099a:	f001 ff79 	bl	1002890 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
 100099e:	f105 01b4 	add.w	r1, r5, #180	; 0xb4
 10009a2:	00e4      	lsls	r4, r4, #3
 10009a4:	f8d5 23b8 	ldr.w	r2, [r5, #952]	; 0x3b8
 10009a8:	9001      	str	r0, [sp, #4]
 10009aa:	2001      	movs	r0, #1
 10009ac:	192b      	adds	r3, r5, r4
 10009ae:	3408      	adds	r4, #8
 10009b0:	6010      	str	r0, [r2, #0]
 10009b2:	ae0f      	add	r6, sp, #60	; 0x3c
 10009b4:	33bc      	adds	r3, #188	; 0xbc
 10009b6:	190f      	adds	r7, r1, r4
 10009b8:	f851 8004 	ldr.w	r8, [r1, r4]
 10009bc:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 10009c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 10009c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 10009c6:	687b      	ldr	r3, [r7, #4]
 10009c8:	4640      	mov	r0, r8
 10009ca:	f109 0401 	add.w	r4, r9, #1
 10009ce:	9307      	str	r3, [sp, #28]
 10009d0:	7a3b      	ldrb	r3, [r7, #8]
 10009d2:	461e      	mov	r6, r3
 10009d4:	9308      	str	r3, [sp, #32]
 10009d6:	f001 fcf7 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 10009da:	4ba5      	ldr	r3, [pc, #660]	; (1000c70 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2e8>)
 10009dc:	4434      	add	r4, r6
 10009de:	4298      	cmp	r0, r3
 10009e0:	4404      	add	r4, r0
 10009e2:	f200 82fe 	bhi.w	1000fe2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x65a>
 10009e6:	429c      	cmp	r4, r3
 10009e8:	f300 80f5 	bgt.w	1000bd6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x24e>
 10009ec:	2c00      	cmp	r4, #0
 10009ee:	f2c0 80bb 	blt.w	1000b68 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1e0>
 10009f2:	7f6b      	ldrb	r3, [r5, #29]
 10009f4:	7f2f      	ldrb	r7, [r5, #28]
 10009f6:	9302      	str	r3, [sp, #8]
 10009f8:	f1b9 0f00 	cmp.w	r9, #0
 10009fc:	d004      	beq.n	1000a08 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x80>
 10009fe:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 1000a02:	2a00      	cmp	r2, #0
 1000a04:	f000 80f3 	beq.w	1000bee <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x266>
 1000a08:	f895 c3b4 	ldrb.w	ip, [r5, #948]	; 0x3b4
 1000a0c:	f00c 03fd 	and.w	r3, ip, #253	; 0xfd
 1000a10:	2b01      	cmp	r3, #1
 1000a12:	d048      	beq.n	1000aa6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x11e>
 1000a14:	2000      	movs	r0, #0
 1000a16:	ebb9 0300 	subs.w	r3, r9, r0
 1000a1a:	4602      	mov	r2, r0
 1000a1c:	4682      	mov	sl, r0
 1000a1e:	bf18      	it	ne
 1000a20:	2301      	movne	r3, #1
 1000a22:	9305      	str	r3, [sp, #20]
 1000a24:	2f00      	cmp	r7, #0
 1000a26:	bf0b      	itete	eq
 1000a28:	4639      	moveq	r1, r7
 1000a2a:	2102      	movne	r1, #2
 1000a2c:	463b      	moveq	r3, r7
 1000a2e:	2300      	movne	r3, #0
 1000a30:	9103      	str	r1, [sp, #12]
 1000a32:	9901      	ldr	r1, [sp, #4]
 1000a34:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 1000a38:	d06f      	beq.n	1000b1a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x192>
 1000a3a:	eba8 0101 	sub.w	r1, r8, r1
 1000a3e:	0209      	lsls	r1, r1, #8
 1000a40:	29ff      	cmp	r1, #255	; 0xff
 1000a42:	dd6a      	ble.n	1000b1a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x192>
 1000a44:	2b00      	cmp	r3, #0
 1000a46:	f040 80f1 	bne.w	1000c2c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2a4>
 1000a4a:	f8dd b004 	ldr.w	fp, [sp, #4]
 1000a4e:	4619      	mov	r1, r3
 1000a50:	f04f 0e01 	mov.w	lr, #1
 1000a54:	2800      	cmp	r0, #0
 1000a56:	d165      	bne.n	1000b24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x19c>
 1000a58:	9704      	str	r7, [sp, #16]
 1000a5a:	2f00      	cmp	r7, #0
 1000a5c:	d162      	bne.n	1000b24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x19c>
 1000a5e:	9903      	ldr	r1, [sp, #12]
 1000a60:	2001      	movs	r0, #1
 1000a62:	4471      	add	r1, lr
 1000a64:	9003      	str	r0, [sp, #12]
 1000a66:	2b00      	cmp	r3, #0
 1000a68:	d164      	bne.n	1000b34 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1ac>
 1000a6a:	9802      	ldr	r0, [sp, #8]
 1000a6c:	2800      	cmp	r0, #0
 1000a6e:	f040 808c 	bne.w	1000b8a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x202>
 1000a72:	eba8 0e02 	sub.w	lr, r8, r2
 1000a76:	f02e 467f 	bic.w	r6, lr, #4278190080	; 0xff000000
 1000a7a:	eba6 000b 	sub.w	r0, r6, fp
 1000a7e:	0200      	lsls	r0, r0, #8
 1000a80:	bf48      	it	mi
 1000a82:	30ff      	addmi	r0, #255	; 0xff
 1000a84:	ebb1 2f20 	cmp.w	r1, r0, asr #8
 1000a88:	f340 80f5 	ble.w	1000c76 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ee>
 1000a8c:	b11a      	cbz	r2, 1000a96 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x10e>
 1000a8e:	f1bc 0f03 	cmp.w	ip, #3
 1000a92:	f040 80de 	bne.w	1000c52 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ca>
 1000a96:	2f00      	cmp	r7, #0
 1000a98:	f040 80d8 	bne.w	1000c4c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2c4>
 1000a9c:	2400      	movs	r4, #0
 1000a9e:	4620      	mov	r0, r4
 1000aa0:	b015      	add	sp, #84	; 0x54
 1000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000aa6:	f8b5 a3b6 	ldrh.w	sl, [r5, #950]	; 0x3b6
 1000aaa:	45d1      	cmp	r9, sl
 1000aac:	ebaa 0609 	sub.w	r6, sl, r9
 1000ab0:	f080 81ac 	bcs.w	1000e0c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x484>
 1000ab4:	2300      	movs	r3, #0
 1000ab6:	4a6e      	ldr	r2, [pc, #440]	; (1000c70 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2e8>)
 1000ab8:	1e60      	subs	r0, r4, #1
 1000aba:	4294      	cmp	r4, r2
 1000abc:	eba0 000a 	sub.w	r0, r0, sl
 1000ac0:	f200 828f 	bhi.w	1000fe2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x65a>
 1000ac4:	4290      	cmp	r0, r2
 1000ac6:	f300 8185 	bgt.w	1000dd4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x44c>
 1000aca:	2800      	cmp	r0, #0
 1000acc:	da03      	bge.n	1000ad6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x14e>
 1000ace:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
 1000ad2:	f500 2090 	add.w	r0, r0, #294912	; 0x48000
 1000ad6:	9303      	str	r3, [sp, #12]
 1000ad8:	f119 0300 	adds.w	r3, r9, #0
 1000adc:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 1000ae0:	a90b      	add	r1, sp, #44	; 0x2c
 1000ae2:	bf18      	it	ne
 1000ae4:	2301      	movne	r3, #1
 1000ae6:	9305      	str	r3, [sp, #20]
 1000ae8:	f001 fc7c 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1000aec:	9b05      	ldr	r3, [sp, #20]
 1000aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 1000af0:	2e1d      	cmp	r6, #29
 1000af2:	bfd4      	ite	le
 1000af4:	2300      	movle	r3, #0
 1000af6:	f003 0301 	andgt.w	r3, r3, #1
 1000afa:	f895 c3b4 	ldrb.w	ip, [r5, #948]	; 0x3b4
 1000afe:	eba8 0202 	sub.w	r2, r8, r2
 1000b02:	4618      	mov	r0, r3
 1000b04:	9b03      	ldr	r3, [sp, #12]
 1000b06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 1000b0a:	2b00      	cmp	r3, #0
 1000b0c:	d08a      	beq.n	1000a24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x9c>
 1000b0e:	2132      	movs	r1, #50	; 0x32
 1000b10:	9103      	str	r1, [sp, #12]
 1000b12:	9901      	ldr	r1, [sp, #4]
 1000b14:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 1000b18:	d18f      	bne.n	1000a3a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xb2>
 1000b1a:	2103      	movs	r1, #3
 1000b1c:	f04f 0e04 	mov.w	lr, #4
 1000b20:	2800      	cmp	r0, #0
 1000b22:	d099      	beq.n	1000a58 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xd0>
 1000b24:	9803      	ldr	r0, [sp, #12]
 1000b26:	2600      	movs	r6, #0
 1000b28:	4401      	add	r1, r0
 1000b2a:	2001      	movs	r0, #1
 1000b2c:	e9cd 6003 	strd	r6, r0, [sp, #12]
 1000b30:	2b00      	cmp	r3, #0
 1000b32:	d09a      	beq.n	1000a6a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xe2>
 1000b34:	9b02      	ldr	r3, [sp, #8]
 1000b36:	2b00      	cmp	r3, #0
 1000b38:	d13b      	bne.n	1000bb2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x22a>
 1000b3a:	eba8 0602 	sub.w	r6, r8, r2
 1000b3e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000b42:	eba6 030b 	sub.w	r3, r6, fp
 1000b46:	021b      	lsls	r3, r3, #8
 1000b48:	bf48      	it	mi
 1000b4a:	33ff      	addmi	r3, #255	; 0xff
 1000b4c:	ebb1 2f23 	cmp.w	r1, r3, asr #8
 1000b50:	f340 8090 	ble.w	1000c74 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ec>
 1000b54:	2a00      	cmp	r2, #0
 1000b56:	d0a1      	beq.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000b58:	f04f 0a00 	mov.w	sl, #0
 1000b5c:	f1bc 0f03 	cmp.w	ip, #3
 1000b60:	4652      	mov	r2, sl
 1000b62:	4657      	mov	r7, sl
 1000b64:	d09a      	beq.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000b66:	e7e8      	b.n	1000b3a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1b2>
 1000b68:	f104 54f4 	add.w	r4, r4, #511705088	; 0x1e800000
 1000b6c:	7f6b      	ldrb	r3, [r5, #29]
 1000b6e:	7f2f      	ldrb	r7, [r5, #28]
 1000b70:	f504 2490 	add.w	r4, r4, #294912	; 0x48000
 1000b74:	9302      	str	r3, [sp, #8]
 1000b76:	f1b9 0f00 	cmp.w	r9, #0
 1000b7a:	f43f af45 	beq.w	1000a08 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x80>
 1000b7e:	e73e      	b.n	10009fe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x76>
 1000b80:	2f00      	cmp	r7, #0
 1000b82:	d08b      	beq.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000b84:	3902      	subs	r1, #2
 1000b86:	2200      	movs	r2, #0
 1000b88:	4617      	mov	r7, r2
 1000b8a:	eba8 0602 	sub.w	r6, r8, r2
 1000b8e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000b92:	eba6 000b 	sub.w	r0, r6, fp
 1000b96:	0200      	lsls	r0, r0, #8
 1000b98:	bf48      	it	mi
 1000b9a:	30ff      	addmi	r0, #255	; 0xff
 1000b9c:	ebb1 2f20 	cmp.w	r1, r0, asr #8
 1000ba0:	dd69      	ble.n	1000c76 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ee>
 1000ba2:	2a00      	cmp	r2, #0
 1000ba4:	d0ec      	beq.n	1000b80 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1f8>
 1000ba6:	b107      	cbz	r7, 1000baa <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x222>
 1000ba8:	3902      	subs	r1, #2
 1000baa:	f04f 0a00 	mov.w	sl, #0
 1000bae:	e7ea      	b.n	1000b86 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1fe>
 1000bb0:	4652      	mov	r2, sl
 1000bb2:	eba8 0602 	sub.w	r6, r8, r2
 1000bb6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000bba:	eba6 030b 	sub.w	r3, r6, fp
 1000bbe:	021b      	lsls	r3, r3, #8
 1000bc0:	bf48      	it	mi
 1000bc2:	33ff      	addmi	r3, #255	; 0xff
 1000bc4:	ebb1 2f23 	cmp.w	r1, r3, asr #8
 1000bc8:	dd54      	ble.n	1000c74 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ec>
 1000bca:	f04f 0a00 	mov.w	sl, #0
 1000bce:	4657      	mov	r7, sl
 1000bd0:	2a00      	cmp	r2, #0
 1000bd2:	d1ed      	bne.n	1000bb0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x228>
 1000bd4:	e762      	b.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000bd6:	f104 4461 	add.w	r4, r4, #3774873600	; 0xe1000000
 1000bda:	7f6b      	ldrb	r3, [r5, #29]
 1000bdc:	7f2f      	ldrb	r7, [r5, #28]
 1000bde:	f504 04f7 	add.w	r4, r4, #8093696	; 0x7b8000
 1000be2:	9302      	str	r3, [sp, #8]
 1000be4:	f1b9 0f00 	cmp.w	r9, #0
 1000be8:	f43f af0e 	beq.w	1000a08 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x80>
 1000bec:	e707      	b.n	10009fe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x76>
 1000bee:	9203      	str	r2, [sp, #12]
 1000bf0:	f002 fb9a 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1000bf4:	2800      	cmp	r0, #0
 1000bf6:	f47f af07 	bne.w	1000a08 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x80>
 1000bfa:	f895 c3b4 	ldrb.w	ip, [r5, #948]	; 0x3b4
 1000bfe:	9a03      	ldr	r2, [sp, #12]
 1000c00:	f00c 03fd 	and.w	r3, ip, #253	; 0xfd
 1000c04:	2b01      	cmp	r3, #1
 1000c06:	f000 80ec 	beq.w	1000de2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x45a>
 1000c0a:	9b01      	ldr	r3, [sp, #4]
 1000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 1000c10:	f000 810a 	beq.w	1000e28 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4a0>
 1000c14:	eba8 0303 	sub.w	r3, r8, r3
 1000c18:	021b      	lsls	r3, r3, #8
 1000c1a:	2bff      	cmp	r3, #255	; 0xff
 1000c1c:	f340 8104 	ble.w	1000e28 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4a0>
 1000c20:	2301      	movs	r3, #1
 1000c22:	4682      	mov	sl, r0
 1000c24:	4602      	mov	r2, r0
 1000c26:	9305      	str	r3, [sp, #20]
 1000c28:	2332      	movs	r3, #50	; 0x32
 1000c2a:	9303      	str	r3, [sp, #12]
 1000c2c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 1000c30:	9304      	str	r3, [sp, #16]
 1000c32:	b1a3      	cbz	r3, 1000c5e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2d6>
 1000c34:	2f00      	cmp	r7, #0
 1000c36:	f040 80d2 	bne.w	1000dde <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x456>
 1000c3a:	2800      	cmp	r0, #0
 1000c3c:	f000 810b 	beq.w	1000e56 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4ce>
 1000c40:	4639      	mov	r1, r7
 1000c42:	2300      	movs	r3, #0
 1000c44:	f8dd b004 	ldr.w	fp, [sp, #4]
 1000c48:	9303      	str	r3, [sp, #12]
 1000c4a:	e773      	b.n	1000b34 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1ac>
 1000c4c:	3902      	subs	r1, #2
 1000c4e:	2700      	movs	r7, #0
 1000c50:	e711      	b.n	1000a76 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xee>
 1000c52:	b107      	cbz	r7, 1000c56 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ce>
 1000c54:	3902      	subs	r1, #2
 1000c56:	2200      	movs	r2, #0
 1000c58:	46c6      	mov	lr, r8
 1000c5a:	4692      	mov	sl, r2
 1000c5c:	e7f7      	b.n	1000c4e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2c6>
 1000c5e:	4619      	mov	r1, r3
 1000c60:	2301      	movs	r3, #1
 1000c62:	f8dd b004 	ldr.w	fp, [sp, #4]
 1000c66:	469e      	mov	lr, r3
 1000c68:	e6f4      	b.n	1000a54 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xcc>
 1000c6a:	bf00      	nop
 1000c6c:	210002a0 	.word	0x210002a0
 1000c70:	1e847fff 	.word	0x1e847fff
 1000c74:	2301      	movs	r3, #1
 1000c76:	2a00      	cmp	r2, #0
 1000c78:	bf08      	it	eq
 1000c7a:	4646      	moveq	r6, r8
 1000c7c:	9309      	str	r3, [sp, #36]	; 0x24
 1000c7e:	f001 fe0d 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1000c84:	1a30      	subs	r0, r6, r0
 1000c86:	0200      	lsls	r0, r0, #8
 1000c88:	f5b0 5f78 	cmp.w	r0, #15872	; 0x3e00
 1000c8c:	f280 80d6 	bge.w	1000e3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4b4>
 1000c90:	9a06      	ldr	r2, [sp, #24]
 1000c92:	2a01      	cmp	r2, #1
 1000c94:	f000 80b2 	beq.w	1000dfc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x474>
 1000c98:	9a01      	ldr	r2, [sp, #4]
 1000c9a:	1e70      	subs	r0, r6, #1
 1000c9c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 1000ca0:	bf14      	ite	ne
 1000ca2:	469b      	movne	fp, r3
 1000ca4:	f043 0b01 	orreq.w	fp, r3, #1
 1000ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1000cac:	f1bb 0f00 	cmp.w	fp, #0
 1000cb0:	f000 80d8 	beq.w	1000e64 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4dc>
 1000cb4:	f04f 0b00 	mov.w	fp, #0
 1000cb8:	9001      	str	r0, [sp, #4]
 1000cba:	f001 fc3b 	bl	1002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000cbe:	9b01      	ldr	r3, [sp, #4]
 1000cc0:	9903      	ldr	r1, [sp, #12]
 1000cc2:	1af3      	subs	r3, r6, r3
 1000cc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 1000cc8:	4291      	cmp	r1, r2
 1000cca:	f63f aee7 	bhi.w	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000cce:	9a07      	ldr	r2, [sp, #28]
 1000cd0:	9901      	ldr	r1, [sp, #4]
 1000cd2:	1a52      	subs	r2, r2, r1
 1000cd4:	4313      	orrs	r3, r2
 1000cd6:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 1000cda:	f47f aedf 	bne.w	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000cde:	4608      	mov	r0, r1
 1000ce0:	f001 fb72 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1000ce4:	4ac1      	ldr	r2, [pc, #772]	; (1000fec <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x664>)
 1000ce6:	1a23      	subs	r3, r4, r0
 1000ce8:	4293      	cmp	r3, r2
 1000cea:	f240 80c8 	bls.w	1000e7e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4f6>
 1000cee:	1b01      	subs	r1, r0, r4
 1000cf0:	4291      	cmp	r1, r2
 1000cf2:	f240 814b 	bls.w	1000f8c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x604>
 1000cf6:	4abe      	ldr	r2, [pc, #760]	; (1000ff0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x668>)
 1000cf8:	4293      	cmp	r3, r2
 1000cfa:	f200 80bd 	bhi.w	1000e78 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4f0>
 1000cfe:	4291      	cmp	r1, r2
 1000d00:	f240 819b 	bls.w	100103a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x6b2>
 1000d04:	1a20      	subs	r0, r4, r0
 1000d06:	4bbb      	ldr	r3, [pc, #748]	; (1000ff4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x66c>)
 1000d08:	18c3      	adds	r3, r0, r3
 1000d0a:	9303      	str	r3, [sp, #12]
 1000d0c:	7fab      	ldrb	r3, [r5, #30]
 1000d0e:	b953      	cbnz	r3, 1000d26 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x39e>
 1000d10:	45ca      	cmp	sl, r9
 1000d12:	9a04      	ldr	r2, [sp, #16]
 1000d14:	4653      	mov	r3, sl
 1000d16:	bf38      	it	cc
 1000d18:	464b      	movcc	r3, r9
 1000d1a:	b902      	cbnz	r2, 1000d1e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x396>
 1000d1c:	331e      	adds	r3, #30
 1000d1e:	9a03      	ldr	r2, [sp, #12]
 1000d20:	4293      	cmp	r3, r2
 1000d22:	f280 818f 	bge.w	1001044 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x6bc>
 1000d26:	9b06      	ldr	r3, [sp, #24]
 1000d28:	2b01      	cmp	r3, #1
 1000d2a:	d005      	beq.n	1000d38 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3b0>
 1000d2c:	2002      	movs	r0, #2
 1000d2e:	f001 fe73 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d32:	2001      	movs	r0, #1
 1000d34:	f001 fe70 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d38:	45ca      	cmp	sl, r9
 1000d3a:	f200 80b2 	bhi.w	1000ea2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x51a>
 1000d3e:	f0c0 8107 	bcc.w	1000f50 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x5c8>
 1000d42:	ea5a 0009 	orrs.w	r0, sl, r9
 1000d46:	f040 8164 	bne.w	1001012 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x68a>
 1000d4a:	2301      	movs	r3, #1
 1000d4c:	2203      	movs	r2, #3
 1000d4e:	9903      	ldr	r1, [sp, #12]
 1000d50:	f001 fdaa 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000d54:	2800      	cmp	r0, #0
 1000d56:	f000 809d 	beq.w	1000e94 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x50c>
 1000d5a:	f895 802d 	ldrb.w	r8, [r5, #45]	; 0x2d
 1000d5e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 1000d62:	f1b8 0f00 	cmp.w	r8, #0
 1000d66:	f000 8118 	beq.w	1000f9a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x612>
 1000d6a:	46b0      	mov	r8, r6
 1000d6c:	f1bb 0f00 	cmp.w	fp, #0
 1000d70:	f040 80ba 	bne.w	1000ee8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x560>
 1000d74:	2b00      	cmp	r3, #0
 1000d76:	f000 8121 	beq.w	1000fbc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x634>
 1000d7a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 1000d7e:	b15b      	cbz	r3, 1000d98 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x410>
 1000d80:	4b9d      	ldr	r3, [pc, #628]	; (1000ff8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x670>)
 1000d82:	2201      	movs	r2, #1
 1000d84:	2005      	movs	r0, #5
 1000d86:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1000d8a:	f001 fe45 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d8e:	f002 f923 	bl	1002fd8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
 1000d92:	2300      	movs	r3, #0
 1000d94:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 1000d98:	9907      	ldr	r1, [sp, #28]
 1000d9a:	2200      	movs	r2, #0
 1000d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1000da0:	ae0c      	add	r6, sp, #48	; 0x30
 1000da2:	9110      	str	r1, [sp, #64]	; 0x40
 1000da4:	9908      	ldr	r1, [sp, #32]
 1000da6:	940d      	str	r4, [sp, #52]	; 0x34
 1000da8:	2401      	movs	r4, #1
 1000daa:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 1000dae:	9902      	ldr	r1, [sp, #8]
 1000db0:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 1000db4:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
 1000db8:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 1000dbc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 1000dc0:	920c      	str	r2, [sp, #48]	; 0x30
 1000dc2:	930e      	str	r3, [sp, #56]	; 0x38
 1000dc4:	4d8d      	ldr	r5, [pc, #564]	; (1000ffc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x674>)
 1000dc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 1000dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1000dca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1000dce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 1000dd2:	e664      	b.n	1000a9e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x116>
 1000dd4:	f100 4061 	add.w	r0, r0, #3774873600	; 0xe1000000
 1000dd8:	f500 00f7 	add.w	r0, r0, #8093696	; 0x7b8000
 1000ddc:	e67b      	b.n	1000ad6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x14e>
 1000dde:	2102      	movs	r1, #2
 1000de0:	e72f      	b.n	1000c42 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2ba>
 1000de2:	f8b5 a3b6 	ldrh.w	sl, [r5, #950]	; 0x3b6
 1000de6:	45ca      	cmp	sl, r9
 1000de8:	ebaa 0609 	sub.w	r6, sl, r9
 1000dec:	f63f ae63 	bhi.w	1000ab6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x12e>
 1000df0:	2e1d      	cmp	r6, #29
 1000df2:	9305      	str	r3, [sp, #20]
 1000df4:	bfd4      	ite	le
 1000df6:	2000      	movle	r0, #0
 1000df8:	2001      	movgt	r0, #1
 1000dfa:	e688      	b.n	1000b0e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x186>
 1000dfc:	9b01      	ldr	r3, [sp, #4]
 1000dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 1000e02:	f000 8101 	beq.w	1001008 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x680>
 1000e06:	f04f 0b00 	mov.w	fp, #0
 1000e0a:	e758      	b.n	1000cbe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x336>
 1000e0c:	f119 0300 	adds.w	r3, r9, #0
 1000e10:	f04f 0200 	mov.w	r2, #0
 1000e14:	bf18      	it	ne
 1000e16:	2301      	movne	r3, #1
 1000e18:	9305      	str	r3, [sp, #20]
 1000e1a:	2e1d      	cmp	r6, #29
 1000e1c:	bfd4      	ite	le
 1000e1e:	2300      	movle	r3, #0
 1000e20:	f003 0301 	andgt.w	r3, r3, #1
 1000e24:	4618      	mov	r0, r3
 1000e26:	e5fd      	b.n	1000a24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x9c>
 1000e28:	4602      	mov	r2, r0
 1000e2a:	2301      	movs	r3, #1
 1000e2c:	4682      	mov	sl, r0
 1000e2e:	2032      	movs	r0, #50	; 0x32
 1000e30:	2103      	movs	r1, #3
 1000e32:	f04f 0e04 	mov.w	lr, #4
 1000e36:	9305      	str	r3, [sp, #20]
 1000e38:	9003      	str	r0, [sp, #12]
 1000e3a:	e60d      	b.n	1000a58 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xd0>
 1000e3c:	1e73      	subs	r3, r6, #1
 1000e3e:	f119 0b00 	adds.w	fp, r9, #0
 1000e42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000e46:	bf18      	it	ne
 1000e48:	f04f 0b01 	movne.w	fp, #1
 1000e4c:	4618      	mov	r0, r3
 1000e4e:	9301      	str	r3, [sp, #4]
 1000e50:	f001 fb70 	bl	1002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000e54:	e733      	b.n	1000cbe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x336>
 1000e56:	2301      	movs	r3, #1
 1000e58:	f8dd b004 	ldr.w	fp, [sp, #4]
 1000e5c:	9704      	str	r7, [sp, #16]
 1000e5e:	9303      	str	r3, [sp, #12]
 1000e60:	4619      	mov	r1, r3
 1000e62:	e667      	b.n	1000b34 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1ac>
 1000e64:	1a13      	subs	r3, r2, r0
 1000e66:	021b      	lsls	r3, r3, #8
 1000e68:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 1000e6c:	f280 8091 	bge.w	1000f92 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x60a>
 1000e70:	2bff      	cmp	r3, #255	; 0xff
 1000e72:	f77f af24 	ble.w	1000cbe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x336>
 1000e76:	e611      	b.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000e78:	4b61      	ldr	r3, [pc, #388]	; (1001000 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x678>)
 1000e7a:	4423      	add	r3, r4
 1000e7c:	1a1b      	subs	r3, r3, r0
 1000e7e:	9303      	str	r3, [sp, #12]
 1000e80:	e744      	b.n	1000d0c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x384>
 1000e82:	2301      	movs	r3, #1
 1000e84:	9903      	ldr	r1, [sp, #12]
 1000e86:	2203      	movs	r2, #3
 1000e88:	eba1 0109 	sub.w	r1, r1, r9
 1000e8c:	4618      	mov	r0, r3
 1000e8e:	f001 fd0b 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000e92:	b9a8      	cbnz	r0, 1000ec0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x538>
 1000e94:	2002      	movs	r0, #2
 1000e96:	f001 fdbf 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000e9a:	2001      	movs	r0, #1
 1000e9c:	f001 fdbc 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000ea0:	e5fc      	b.n	1000a9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000ea2:	9b03      	ldr	r3, [sp, #12]
 1000ea4:	2203      	movs	r2, #3
 1000ea6:	2002      	movs	r0, #2
 1000ea8:	eba3 010a 	sub.w	r1, r3, sl
 1000eac:	2301      	movs	r3, #1
 1000eae:	f001 fcfb 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000eb2:	f080 0001 	eor.w	r0, r0, #1
 1000eb6:	b2c3      	uxtb	r3, r0
 1000eb8:	9304      	str	r3, [sp, #16]
 1000eba:	9b05      	ldr	r3, [sp, #20]
 1000ebc:	2b00      	cmp	r3, #0
 1000ebe:	d1e0      	bne.n	1000e82 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4fa>
 1000ec0:	2301      	movs	r3, #1
 1000ec2:	2203      	movs	r2, #3
 1000ec4:	9903      	ldr	r1, [sp, #12]
 1000ec6:	2000      	movs	r0, #0
 1000ec8:	f001 fcee 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000ecc:	2800      	cmp	r0, #0
 1000ece:	d0e1      	beq.n	1000e94 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x50c>
 1000ed0:	9b04      	ldr	r3, [sp, #16]
 1000ed2:	2b00      	cmp	r3, #0
 1000ed4:	d07d      	beq.n	1000fd2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x64a>
 1000ed6:	2700      	movs	r7, #0
 1000ed8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 1000edc:	f1b9 0f00 	cmp.w	r9, #0
 1000ee0:	f47f af44 	bne.w	1000d6c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3e4>
 1000ee4:	4646      	mov	r6, r8
 1000ee6:	e738      	b.n	1000d5a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3d2>
 1000ee8:	2b00      	cmp	r3, #0
 1000eea:	d174      	bne.n	1000fd6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x64e>
 1000eec:	9b01      	ldr	r3, [sp, #4]
 1000eee:	2601      	movs	r6, #1
 1000ef0:	f8df a104 	ldr.w	sl, [pc, #260]	; 1000ff8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x670>
 1000ef4:	2203      	movs	r2, #3
 1000ef6:	f1a3 0132 	sub.w	r1, r3, #50	; 0x32
 1000efa:	2005      	movs	r0, #5
 1000efc:	2300      	movs	r3, #0
 1000efe:	f8ca 6508 	str.w	r6, [sl, #1288]	; 0x508
 1000f02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 1000f06:	f001 fccf 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000f0a:	2800      	cmp	r0, #0
 1000f0c:	f000 8090 	beq.w	1001030 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x6a8>
 1000f10:	2005      	movs	r0, #5
 1000f12:	f001 fd65 	bl	10029e0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
 1000f16:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 1000f1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 1000f1e:	4939      	ldr	r1, [pc, #228]	; (1001004 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x67c>)
 1000f20:	6003      	str	r3, [r0, #0]
 1000f22:	600b      	str	r3, [r1, #0]
 1000f24:	f8ca 6504 	str.w	r6, [sl, #1284]	; 0x504
 1000f28:	2a00      	cmp	r2, #0
 1000f2a:	d04d      	beq.n	1000fc8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x640>
 1000f2c:	9b03      	ldr	r3, [sp, #12]
 1000f2e:	eba3 0109 	sub.w	r1, r3, r9
 1000f32:	3919      	subs	r1, #25
 1000f34:	2900      	cmp	r1, #0
 1000f36:	dd76      	ble.n	1001026 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x69e>
 1000f38:	2203      	movs	r2, #3
 1000f3a:	2301      	movs	r3, #1
 1000f3c:	4610      	mov	r0, r2
 1000f3e:	f001 fcb3 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000f42:	2800      	cmp	r0, #0
 1000f44:	d06a      	beq.n	100101c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x694>
 1000f46:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8
 1000f4a:	2200      	movs	r2, #0
 1000f4c:	601a      	str	r2, [r3, #0]
 1000f4e:	e723      	b.n	1000d98 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x410>
 1000f50:	2301      	movs	r3, #1
 1000f52:	9903      	ldr	r1, [sp, #12]
 1000f54:	2203      	movs	r2, #3
 1000f56:	4618      	mov	r0, r3
 1000f58:	eba1 0109 	sub.w	r1, r1, r9
 1000f5c:	f001 fca4 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000f60:	f1ba 0f00 	cmp.w	sl, #0
 1000f64:	bf0c      	ite	eq
 1000f66:	2300      	moveq	r3, #0
 1000f68:	f000 0301 	andne.w	r3, r0, #1
 1000f6c:	9304      	str	r3, [sp, #16]
 1000f6e:	2b00      	cmp	r3, #0
 1000f70:	d08f      	beq.n	1000e92 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x50a>
 1000f72:	9b03      	ldr	r3, [sp, #12]
 1000f74:	2203      	movs	r2, #3
 1000f76:	2002      	movs	r0, #2
 1000f78:	eba3 010a 	sub.w	r1, r3, sl
 1000f7c:	2301      	movs	r3, #1
 1000f7e:	f001 fc93 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000f82:	2300      	movs	r3, #0
 1000f84:	9304      	str	r3, [sp, #16]
 1000f86:	2800      	cmp	r0, #0
 1000f88:	d19a      	bne.n	1000ec0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x538>
 1000f8a:	e783      	b.n	1000e94 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x50c>
 1000f8c:	424b      	negs	r3, r1
 1000f8e:	9303      	str	r3, [sp, #12]
 1000f90:	e6bc      	b.n	1000d0c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x384>
 1000f92:	9001      	str	r0, [sp, #4]
 1000f94:	f001 face 	bl	1002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000f98:	e691      	b.n	1000cbe <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x336>
 1000f9a:	b92b      	cbnz	r3, 1000fa8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x620>
 1000f9c:	46b0      	mov	r8, r6
 1000f9e:	f1bb 0f00 	cmp.w	fp, #0
 1000fa2:	f43f aef9 	beq.w	1000d98 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x410>
 1000fa6:	e7a1      	b.n	1000eec <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x564>
 1000fa8:	f001 ffde 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1000fac:	f885 802c 	strb.w	r8, [r5, #44]	; 0x2c
 1000fb0:	46b0      	mov	r8, r6
 1000fb2:	f1bb 0f00 	cmp.w	fp, #0
 1000fb6:	f43f aee0 	beq.w	1000d7a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3f2>
 1000fba:	e797      	b.n	1000eec <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x564>
 1000fbc:	f001 ff60 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1000fc0:	2301      	movs	r3, #1
 1000fc2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 1000fc6:	e6d8      	b.n	1000d7a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3f2>
 1000fc8:	f001 fff8 	bl	1002fbc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
 1000fcc:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
 1000fd0:	e7ac      	b.n	1000f2c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x5a4>
 1000fd2:	46b0      	mov	r8, r6
 1000fd4:	e780      	b.n	1000ed8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x550>
 1000fd6:	f001 ffc7 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1000fda:	2300      	movs	r3, #0
 1000fdc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 1000fe0:	e784      	b.n	1000eec <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x564>
 1000fe2:	f240 6116 	movw	r1, #1558	; 0x616
 1000fe6:	2070      	movs	r0, #112	; 0x70
 1000fe8:	f002 fc9e 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000fec:	07a11fff 	.word	0x07a11fff
 1000ff0:	1e847fff 	.word	0x1e847fff
 1000ff4:	e17b8000 	.word	0xe17b8000
 1000ff8:	4100f000 	.word	0x4100f000
 1000ffc:	210002a0 	.word	0x210002a0
 1001000:	1e848000 	.word	0x1e848000
 1001004:	41005080 	.word	0x41005080
 1001008:	f640 110c 	movw	r1, #2316	; 0x90c
 100100c:	2070      	movs	r0, #112	; 0x70
 100100e:	f002 fc8b 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001012:	f640 1176 	movw	r1, #2422	; 0x976
 1001016:	2070      	movs	r0, #112	; 0x70
 1001018:	f002 fc86 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100101c:	f640 2173 	movw	r1, #2675	; 0xa73
 1001020:	2070      	movs	r0, #112	; 0x70
 1001022:	f002 fc81 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001026:	f640 2168 	movw	r1, #2664	; 0xa68
 100102a:	2070      	movs	r0, #112	; 0x70
 100102c:	f002 fc7c 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001030:	f240 3152 	movw	r1, #850	; 0x352
 1001034:	2070      	movs	r0, #112	; 0x70
 1001036:	f002 fc77 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100103a:	f640 310b 	movw	r1, #2827	; 0xb0b
 100103e:	2070      	movs	r0, #112	; 0x70
 1001040:	f002 fc72 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001044:	f640 213f 	movw	r1, #2623	; 0xa3f
 1001048:	2070      	movs	r0, #112	; 0x70
 100104a:	f002 fc6d 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100104e:	bf00      	nop

01001050 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI>:
 1001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1001054:	4c43      	ldr	r4, [pc, #268]	; (1001164 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x114>)
 1001056:	f101 0708 	add.w	r7, r1, #8
 100105a:	460e      	mov	r6, r1
 100105c:	4680      	mov	r8, r0
 100105e:	f814 5027 	ldrb.w	r5, [r4, r7, lsl #2]
 1001062:	2d20      	cmp	r5, #32
 1001064:	d134      	bne.n	10010d0 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x80>
 1001066:	4b40      	ldr	r3, [pc, #256]	; (1001168 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x118>)
 1001068:	b10b      	cbz	r3, 100106e <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x1e>
 100106a:	e000      	b.n	100106e <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x1e>
 100106c:	bf00      	nop
 100106e:	f001 fc15 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1001072:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1001076:	2b20      	cmp	r3, #32
 1001078:	d006      	beq.n	1001088 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x38>
 100107a:	68e3      	ldr	r3, [r4, #12]
 100107c:	f1c3 0302 	rsb	r3, r3, #2
 1001080:	4403      	add	r3, r0
 1001082:	021b      	lsls	r3, r3, #8
 1001084:	2bff      	cmp	r3, #255	; 0xff
 1001086:	dc28      	bgt.n	10010da <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x8a>
 1001088:	2d20      	cmp	r5, #32
 100108a:	d00c      	beq.n	10010a6 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x56>
 100108c:	4641      	mov	r1, r8
 100108e:	462a      	mov	r2, r5
 1001090:	f7ff fc7a 	bl	1000988 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>
 1001094:	b3b8      	cbz	r0, 1001106 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xb6>
 1001096:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 100109a:	2300      	movs	r3, #0
 100109c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 10010a0:	70fb      	strb	r3, [r7, #3]
 10010a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10010a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 10010aa:	bb33      	cbnz	r3, 10010fa <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xaa>
 10010ac:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 10010b0:	b9b3      	cbnz	r3, 10010e0 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x90>
 10010b2:	2004      	movs	r0, #4
 10010b4:	f001 fcb0 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 10010b8:	f001 fd3c 	bl	1002b34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 10010bc:	2120      	movs	r1, #32
 10010be:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 10010c2:	2200      	movs	r2, #0
 10010c4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 10010c8:	2001      	movs	r0, #1
 10010ca:	601a      	str	r2, [r3, #0]
 10010cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10010d0:	4608      	mov	r0, r1
 10010d2:	f7ff fa21 	bl	1000518 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>
 10010d6:	4285      	cmp	r5, r0
 10010d8:	d0c5      	beq.n	1001066 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x16>
 10010da:	2000      	movs	r0, #0
 10010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10010e0:	4b22      	ldr	r3, [pc, #136]	; (100116c <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x11c>)
 10010e2:	2201      	movs	r2, #1
 10010e4:	2005      	movs	r0, #5
 10010e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 10010ea:	f001 fc95 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 10010ee:	f001 ff73 	bl	1002fd8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
 10010f2:	2300      	movs	r3, #0
 10010f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 10010f8:	e7db      	b.n	10010b2 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x62>
 10010fa:	f001 ff35 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 10010fe:	2300      	movs	r3, #0
 1001100:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 1001104:	e7d2      	b.n	10010ac <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x5c>
 1001106:	0176      	lsls	r6, r6, #5
 1001108:	f814 c027 	ldrb.w	ip, [r4, r7, lsl #2]
 100110c:	2104      	movs	r1, #4
 100110e:	1973      	adds	r3, r6, r5
 1001110:	4662      	mov	r2, ip
 1001112:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 100111a:	f804 3027 	strb.w	r3, [r4, r7, lsl #2]
 100111e:	e000      	b.n	1001122 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xd2>
 1001120:	461a      	mov	r2, r3
 1001122:	18b3      	adds	r3, r6, r2
 1001124:	4295      	cmp	r5, r2
 1001126:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100112a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
 100112e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001132:	d1f5      	bne.n	1001120 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xd0>
 1001134:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 1001138:	788b      	ldrb	r3, [r1, #2]
 100113a:	b2db      	uxtb	r3, r3
 100113c:	2b20      	cmp	r3, #32
 100113e:	d00e      	beq.n	100115e <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x10e>
 1001140:	4433      	add	r3, r6
 1001142:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001146:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
 100114a:	4416      	add	r6, r2
 100114c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 1001150:	2320      	movs	r3, #32
 1001152:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 1001156:	70ba      	strb	r2, [r7, #2]
 1001158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 100115c:	e7a1      	b.n	10010a2 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x52>
 100115e:	f881 c001 	strb.w	ip, [r1, #1]
 1001162:	e7f2      	b.n	100114a <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xfa>
 1001164:	210002a0 	.word	0x210002a0
 1001168:	00000000 	.word	0x00000000
 100116c:	4100f000 	.word	0x4100f000

01001170 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
 1001170:	2000      	movs	r0, #0
 1001172:	f242 0120 	movw	r1, #8224	; 0x2020
 1001176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100117a:	b538      	push	{r3, r4, r5, lr}
 100117c:	4c1a      	ldr	r4, [pc, #104]	; (10011e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
 100117e:	2520      	movs	r5, #32
 1001180:	4603      	mov	r3, r0
 1001182:	8421      	strh	r1, [r4, #32]
 1001184:	f104 0134 	add.w	r1, r4, #52	; 0x34
 1001188:	60a2      	str	r2, [r4, #8]
 100118a:	4602      	mov	r2, r0
 100118c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 1001190:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 1001194:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 1001198:	6020      	str	r0, [r4, #0]
 100119a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 100119e:	77a0      	strb	r0, [r4, #30]
 10011a0:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
 10011a4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 10011a8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 10011ac:	83a0      	strh	r0, [r4, #28]
 10011ae:	85a0      	strh	r0, [r4, #44]	; 0x2c
 10011b0:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
 10011b4:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 10011b8:	3301      	adds	r3, #1
 10011ba:	2b20      	cmp	r3, #32
 10011bc:	d1fa      	bne.n	10011b4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x44>
 10011be:	23ff      	movs	r3, #255	; 0xff
 10011c0:	2501      	movs	r5, #1
 10011c2:	480a      	ldr	r0, [pc, #40]	; (10011ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
 10011c4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 10011c8:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
 10011cc:	f002 fc26 	bl	1003a1c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 10011d0:	f884 03bd 	strb.w	r0, [r4, #957]	; 0x3bd
 10011d4:	f002 fc8a 	bl	1003aec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
 10011d8:	f8c4 03b8 	str.w	r0, [r4, #952]	; 0x3b8
 10011dc:	f001 f948 	bl	1002470 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
 10011e0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 10011e4:	bd38      	pop	{r3, r4, r5, pc}
 10011e6:	bf00      	nop
 10011e8:	210002a0 	.word	0x210002a0
 10011ec:	01000429 	.word	0x01000429

010011f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
 10011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10011f4:	4cc0      	ldr	r4, [pc, #768]	; (10014f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x308>)
 10011f6:	b083      	sub	sp, #12
 10011f8:	f001 fb50 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 10011fc:	4605      	mov	r5, r0
 10011fe:	f001 fc99 	bl	1002b34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 1001202:	68a3      	ldr	r3, [r4, #8]
 1001204:	3301      	adds	r3, #1
 1001206:	d002      	beq.n	100120e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e>
 1001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100120c:	60a3      	str	r3, [r4, #8]
 100120e:	7fa3      	ldrb	r3, [r4, #30]
 1001210:	2b00      	cmp	r3, #0
 1001212:	f000 8104 	beq.w	100141e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22e>
 1001216:	7e63      	ldrb	r3, [r4, #25]
 1001218:	2b00      	cmp	r3, #0
 100121a:	f000 8089 	beq.w	1001330 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>
 100121e:	f001 faa9 	bl	1002774 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
 1001222:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 1001226:	2a00      	cmp	r2, #0
 1001228:	f040 815c 	bne.w	10014e4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2f4>
 100122c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001230:	2101      	movs	r1, #1
 1001232:	2b20      	cmp	r3, #32
 1001234:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
 1001238:	f000 8159 	beq.w	10014ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2fe>
 100123c:	2120      	movs	r1, #32
 100123e:	f894 33b4 	ldrb.w	r3, [r4, #948]	; 0x3b4
 1001242:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 1001246:	3b02      	subs	r3, #2
 1001248:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
 100124c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 1001250:	fa5f fa8a 	uxtb.w	sl, sl
 1001254:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
 1001258:	2b01      	cmp	r3, #1
 100125a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 100125e:	fa5f f888 	uxtb.w	r8, r8
 1001262:	bf8c      	ite	hi
 1001264:	2300      	movhi	r3, #0
 1001266:	2301      	movls	r3, #1
 1001268:	6022      	str	r2, [r4, #0]
 100126a:	f108 0608 	add.w	r6, r8, #8
 100126e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 1001272:	7723      	strb	r3, [r4, #28]
 1001274:	f814 3026 	ldrb.w	r3, [r4, r6, lsl #2]
 1001278:	428b      	cmp	r3, r1
 100127a:	d009      	beq.n	1001290 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
 100127c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001280:	00db      	lsls	r3, r3, #3
 1001282:	eb04 0903 	add.w	r9, r4, r3
 1001286:	f899 20ca 	ldrb.w	r2, [r9, #202]	; 0xca
 100128a:	2a01      	cmp	r2, #1
 100128c:	f000 80fb 	beq.w	1001486 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x296>
 1001290:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1001508 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x318>
 1001294:	ea4f 1748 	mov.w	r7, r8, lsl #5
 1001298:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
 100129c:	f814 5026 	ldrb.w	r5, [r4, r6, lsl #2]
 10012a0:	2d20      	cmp	r5, #32
 10012a2:	d004      	beq.n	10012ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xbe>
 10012a4:	4640      	mov	r0, r8
 10012a6:	f7ff f937 	bl	1000518 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>
 10012aa:	4285      	cmp	r5, r0
 10012ac:	d1f6      	bne.n	100129c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
 10012ae:	f1b9 0f00 	cmp.w	r9, #0
 10012b2:	d001      	beq.n	10012b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xc8>
 10012b4:	e000      	b.n	10012b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xc8>
 10012b6:	bf00      	nop
 10012b8:	f001 faf0 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 10012bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 10012c0:	2b20      	cmp	r3, #32
 10012c2:	d006      	beq.n	10012d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xe2>
 10012c4:	68e3      	ldr	r3, [r4, #12]
 10012c6:	f1c3 0302 	rsb	r3, r3, #2
 10012ca:	4403      	add	r3, r0
 10012cc:	021b      	lsls	r3, r3, #8
 10012ce:	2bff      	cmp	r3, #255	; 0xff
 10012d0:	dce4      	bgt.n	100129c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
 10012d2:	2d20      	cmp	r5, #32
 10012d4:	d032      	beq.n	100133c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14c>
 10012d6:	462a      	mov	r2, r5
 10012d8:	2101      	movs	r1, #1
 10012da:	f7ff fb55 	bl	1000988 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>
 10012de:	2800      	cmp	r0, #0
 10012e0:	d061      	beq.n	10013a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b6>
 10012e2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 10012e6:	2200      	movs	r2, #0
 10012e8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 10012ec:	70da      	strb	r2, [r3, #3]
 10012ee:	eb07 030a 	add.w	r3, r7, sl
 10012f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10012f6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 10012fa:	2a02      	cmp	r2, #2
 10012fc:	d03a      	beq.n	1001374 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x184>
 10012fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 1001302:	2201      	movs	r2, #1
 1001304:	7873      	ldrb	r3, [r6, #1]
 1001306:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 100130a:	2b20      	cmp	r3, #32
 100130c:	d003      	beq.n	1001316 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
 100130e:	f894 03bd 	ldrb.w	r0, [r4, #957]	; 0x3bd
 1001312:	f002 fb9f 	bl	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1001316:	7f23      	ldrb	r3, [r4, #28]
 1001318:	2b00      	cmp	r3, #0
 100131a:	f040 80a9 	bne.w	1001470 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x280>
 100131e:	f002 fbdd 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 1001322:	b110      	cbz	r0, 100132a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
 1001324:	4b75      	ldr	r3, [pc, #468]	; (10014fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x30c>)
 1001326:	2200      	movs	r2, #0
 1001328:	601a      	str	r2, [r3, #0]
 100132a:	b003      	add	sp, #12
 100132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1001330:	1ce8      	adds	r0, r5, #3
 1001332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1001336:	f001 f8fd 	bl	1002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 100133a:	e772      	b.n	1001222 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x32>
 100133c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 1001340:	2b00      	cmp	r3, #0
 1001342:	d166      	bne.n	1001412 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x222>
 1001344:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 1001348:	2b00      	cmp	r3, #0
 100134a:	d155      	bne.n	10013f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x208>
 100134c:	2004      	movs	r0, #4
 100134e:	f001 fb63 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1001352:	f001 fbef 	bl	1002b34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 1001356:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 100135a:	2200      	movs	r2, #0
 100135c:	2120      	movs	r1, #32
 100135e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 1001362:	601a      	str	r2, [r3, #0]
 1001364:	eb07 030a 	add.w	r3, r7, sl
 1001368:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100136c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 1001370:	2a02      	cmp	r2, #2
 1001372:	d1c4      	bne.n	10012fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10e>
 1001374:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 1001378:	2006      	movs	r0, #6
 100137a:	788a      	ldrb	r2, [r1, #2]
 100137c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 1001380:	b2d3      	uxtb	r3, r2
 1001382:	2b20      	cmp	r3, #32
 1001384:	d07c      	beq.n	1001480 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x290>
 1001386:	443b      	add	r3, r7
 1001388:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100138c:	f883 a035 	strb.w	sl, [r3, #53]	; 0x35
 1001390:	4457      	add	r7, sl
 1001392:	2220      	movs	r2, #32
 1001394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 1001398:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 100139c:	f883 a002 	strb.w	sl, [r3, #2]
 10013a0:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 10013a4:	e7ab      	b.n	10012fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10e>
 10013a6:	197b      	adds	r3, r7, r5
 10013a8:	f814 0026 	ldrb.w	r0, [r4, r6, lsl #2]
 10013ac:	2104      	movs	r1, #4
 10013ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10013b2:	4602      	mov	r2, r0
 10013b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 10013b8:	f804 3026 	strb.w	r3, [r4, r6, lsl #2]
 10013bc:	e000      	b.n	10013c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1d0>
 10013be:	461a      	mov	r2, r3
 10013c0:	18bb      	adds	r3, r7, r2
 10013c2:	4295      	cmp	r5, r2
 10013c4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10013c8:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
 10013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 10013d0:	d1f5      	bne.n	10013be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ce>
 10013d2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 10013d6:	b2db      	uxtb	r3, r3
 10013d8:	2b20      	cmp	r3, #32
 10013da:	d04e      	beq.n	100147a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x28a>
 10013dc:	443b      	add	r3, r7
 10013de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10013e2:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 10013e6:	18bb      	adds	r3, r7, r2
 10013e8:	2120      	movs	r1, #32
 10013ea:	f88b 2002 	strb.w	r2, [fp, #2]
 10013ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10013f2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
 10013f6:	e751      	b.n	100129c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
 10013f8:	4b41      	ldr	r3, [pc, #260]	; (1001500 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x310>)
 10013fa:	2201      	movs	r2, #1
 10013fc:	2005      	movs	r0, #5
 10013fe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1001402:	f001 fb09 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1001406:	f001 fde7 	bl	1002fd8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
 100140a:	2300      	movs	r3, #0
 100140c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 1001410:	e79c      	b.n	100134c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15c>
 1001412:	f001 fda9 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1001416:	2300      	movs	r3, #0
 1001418:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 100141c:	e792      	b.n	1001344 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x154>
 100141e:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
 1001422:	f44f 710c 	mov.w	r1, #560	; 0x230
 1001426:	1ac0      	subs	r0, r0, r3
 1001428:	0200      	lsls	r0, r0, #8
 100142a:	bf48      	it	mi
 100142c:	30ff      	addmi	r0, #255	; 0xff
 100142e:	1200      	asrs	r0, r0, #8
 1001430:	f003 f919 	bl	1004666 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
 1001434:	6923      	ldr	r3, [r4, #16]
 1001436:	4403      	add	r3, r0
 1001438:	1aeb      	subs	r3, r5, r3
 100143a:	021b      	lsls	r3, r3, #8
 100143c:	33ff      	adds	r3, #255	; 0xff
 100143e:	f6ff aeea 	blt.w	1001216 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x26>
 1001442:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 1001446:	2108      	movs	r1, #8
 1001448:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 100144c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1001450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001454:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 1001458:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 100145c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 1001460:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 1001464:	4798      	blx	r3
 1001466:	f240 4143 	movw	r1, #1091	; 0x443
 100146a:	2070      	movs	r0, #112	; 0x70
 100146c:	f002 fa5c 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001470:	f001 fbaa 	bl	1002bc8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
 1001474:	2300      	movs	r3, #0
 1001476:	83a3      	strh	r3, [r4, #28]
 1001478:	e751      	b.n	100131e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12e>
 100147a:	f88b 0001 	strb.w	r0, [fp, #1]
 100147e:	e7b2      	b.n	10013e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1f6>
 1001480:	f881 a001 	strb.w	sl, [r1, #1]
 1001484:	e784      	b.n	1001390 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>
 1001486:	a901      	add	r1, sp, #4
 1001488:	f10d 0203 	add.w	r2, sp, #3
 100148c:	f8b9 00c6 	ldrh.w	r0, [r9, #198]	; 0xc6
 1001490:	f103 0708 	add.w	r7, r3, #8
 1001494:	f000 ffa6 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1001498:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 100149c:	4919      	ldr	r1, [pc, #100]	; (1001504 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x314>)
 100149e:	2b20      	cmp	r3, #32
 10014a0:	eb01 0b07 	add.w	fp, r1, r7
 10014a4:	d00e      	beq.n	10014c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2d4>
 10014a6:	6923      	ldr	r3, [r4, #16]
 10014a8:	3306      	adds	r3, #6
 10014aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 10014ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 10014b2:	59c8      	ldr	r0, [r1, r7]
 10014b4:	51ca      	str	r2, [r1, r7]
 10014b6:	1a1b      	subs	r3, r3, r0
 10014b8:	4413      	add	r3, r2
 10014ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10014be:	f8cb 3004 	str.w	r3, [fp, #4]
 10014c2:	e6e5      	b.n	1001290 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
 10014c4:	f8b9 30c6 	ldrh.w	r3, [r9, #198]	; 0xc6
 10014c8:	f105 090a 	add.w	r9, r5, #10
 10014cc:	b913      	cbnz	r3, 10014d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2e4>
 10014ce:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
 10014d2:	e7ec      	b.n	10014ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2be>
 10014d4:	f001 ff28 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 10014d8:	490a      	ldr	r1, [pc, #40]	; (1001504 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x314>)
 10014da:	2800      	cmp	r0, #0
 10014dc:	d1f7      	bne.n	10014ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2de>
 10014de:	f105 093c 	add.w	r9, r5, #60	; 0x3c
 10014e2:	e7f4      	b.n	10014ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2de>
 10014e4:	f240 4154 	movw	r1, #1108	; 0x454
 10014e8:	2070      	movs	r0, #112	; 0x70
 10014ea:	f002 fa1d 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10014ee:	f240 4157 	movw	r1, #1111	; 0x457
 10014f2:	2070      	movs	r0, #112	; 0x70
 10014f4:	f002 fa18 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10014f8:	210002a0 	.word	0x210002a0
 10014fc:	41008c04 	.word	0x41008c04
 1001500:	4100f000 	.word	0x4100f000
 1001504:	21000354 	.word	0x21000354
 1001508:	00000000 	.word	0x00000000

0100150c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
 100150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100150e:	460e      	mov	r6, r1
 1001510:	4607      	mov	r7, r0
 1001512:	f001 fe11 	bl	1003138 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 1001516:	4911      	ldr	r1, [pc, #68]	; (100155c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x50>)
 1001518:	2300      	movs	r3, #0
 100151a:	f891 502e 	ldrb.w	r5, [r1, #46]	; 0x2e
 100151e:	f101 0434 	add.w	r4, r1, #52	; 0x34
 1001522:	b2ed      	uxtb	r5, r5
 1001524:	eb04 1485 	add.w	r4, r4, r5, lsl #6
 1001528:	e002      	b.n	1001530 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x24>
 100152a:	3301      	adds	r3, #1
 100152c:	2b20      	cmp	r3, #32
 100152e:	d012      	beq.n	1001556 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4a>
 1001530:	f814 2013 	ldrb.w	r2, [r4, r3, lsl #1]
 1001534:	b2d8      	uxtb	r0, r3
 1001536:	2a00      	cmp	r2, #0
 1001538:	d1f7      	bne.n	100152a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x1e>
 100153a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 100153e:	2201      	movs	r2, #1
 1001540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001544:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 1001548:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 100154c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
 1001550:	e9c3 762d 	strd	r7, r6, [r3, #180]	; 0xb4
 1001554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1001556:	4618      	mov	r0, r3
 1001558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100155a:	bf00      	nop
 100155c:	210002a0 	.word	0x210002a0

01001560 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
 1001560:	4aaf      	ldr	r2, [pc, #700]	; (1001820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>)
 1001562:	6853      	ldr	r3, [r2, #4]
 1001564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 100156c:	b08d      	sub	sp, #52	; 0x34
 100156e:	9001      	str	r0, [sp, #4]
 1001570:	9104      	str	r1, [sp, #16]
 1001572:	2b00      	cmp	r3, #0
 1001574:	f000 82ab 	beq.w	1001ace <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x56e>
 1001578:	3b10      	subs	r3, #16
 100157a:	b259      	sxtb	r1, r3
 100157c:	2900      	cmp	r1, #0
 100157e:	f2c0 8132 	blt.w	10017e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x286>
 1001582:	4ba8      	ldr	r3, [pc, #672]	; (1001824 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>)
 1001584:	5c5b      	ldrb	r3, [r3, r1]
 1001586:	095b      	lsrs	r3, r3, #5
 1001588:	9302      	str	r3, [sp, #8]
 100158a:	2b00      	cmp	r3, #0
 100158c:	f040 8135 	bne.w	10017fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
 1001590:	4ca5      	ldr	r4, [pc, #660]	; (1001828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>)
 1001592:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001596:	2b20      	cmp	r3, #32
 1001598:	f000 8324 	beq.w	1001be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x684>
 100159c:	9b04      	ldr	r3, [sp, #16]
 100159e:	781b      	ldrb	r3, [r3, #0]
 10015a0:	9302      	str	r3, [sp, #8]
 10015a2:	2b00      	cmp	r3, #0
 10015a4:	f040 8323 	bne.w	1001bee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x68e>
 10015a8:	f8df b28c 	ldr.w	fp, [pc, #652]	; 1001838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
 10015ac:	f1bb 0f00 	cmp.w	fp, #0
 10015b0:	d004      	beq.n	10015bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c>
 10015b2:	2100      	movs	r1, #0
 10015b4:	f240 705f 	movw	r0, #1887	; 0x75f
 10015b8:	e000      	b.n	10015bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c>
 10015ba:	bf00      	nop
 10015bc:	9b01      	ldr	r3, [sp, #4]
 10015be:	f04f 0801 	mov.w	r8, #1
 10015c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 10015c6:	00db      	lsls	r3, r3, #3
 10015c8:	9307      	str	r3, [sp, #28]
 10015ca:	f1bb 0f00 	cmp.w	fp, #0
 10015ce:	d004      	beq.n	10015da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x7a>
 10015d0:	2100      	movs	r1, #0
 10015d2:	f240 7067 	movw	r0, #1895	; 0x767
 10015d6:	e000      	b.n	10015da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x7a>
 10015d8:	bf00      	nop
 10015da:	f1b8 0f00 	cmp.w	r8, #0
 10015de:	d104      	bne.n	10015ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x8a>
 10015e0:	4b92      	ldr	r3, [pc, #584]	; (100182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>)
 10015e2:	b10b      	cbz	r3, 10015e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x88>
 10015e4:	e000      	b.n	10015e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x88>
 10015e6:	bf00      	nop
 10015e8:	b662      	cpsie	i
 10015ea:	f04f 0300 	mov.w	r3, #0
 10015ee:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 10015f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 10015f6:	fa5f f989 	uxtb.w	r9, r9
 10015fa:	9b02      	ldr	r3, [sp, #8]
 10015fc:	2b00      	cmp	r3, #0
 10015fe:	f040 8226 	bne.w	1001a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ee>
 1001602:	464d      	mov	r5, r9
 1001604:	f109 0708 	add.w	r7, r9, #8
 1001608:	f1bb 0f00 	cmp.w	fp, #0
 100160c:	d004      	beq.n	1001618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
 100160e:	2100      	movs	r1, #0
 1001610:	f240 707b 	movw	r0, #1915	; 0x77b
 1001614:	e000      	b.n	1001618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
 1001616:	bf00      	nop
 1001618:	f001 f940 	bl	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 100161c:	464b      	mov	r3, r9
 100161e:	aa08      	add	r2, sp, #32
 1001620:	9904      	ldr	r1, [sp, #16]
 1001622:	4606      	mov	r6, r0
 1001624:	f7ff f8fc 	bl	1000820 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ>
 1001628:	f1bb 0f00 	cmp.w	fp, #0
 100162c:	d004      	beq.n	1001638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd8>
 100162e:	2100      	movs	r1, #0
 1001630:	f240 7082 	movw	r0, #1922	; 0x782
 1001634:	e000      	b.n	1001638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd8>
 1001636:	bf00      	nop
 1001638:	9b01      	ldr	r3, [sp, #4]
 100163a:	016d      	lsls	r5, r5, #5
 100163c:	18ea      	adds	r2, r5, r3
 100163e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 1001642:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 1001646:	3b01      	subs	r3, #1
 1001648:	2b01      	cmp	r3, #1
 100164a:	f200 80e7 	bhi.w	100181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
 100164e:	f8dd e020 	ldr.w	lr, [sp, #32]
 1001652:	4977      	ldr	r1, [pc, #476]	; (1001830 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d0>)
 1001654:	ebae 0306 	sub.w	r3, lr, r6
 1001658:	4019      	ands	r1, r3
 100165a:	b131      	cbz	r1, 100166a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10a>
 100165c:	9809      	ldr	r0, [sp, #36]	; 0x24
 100165e:	1b86      	subs	r6, r0, r6
 1001660:	431e      	orrs	r6, r3
 1001662:	f416 0f40 	tst.w	r6, #12582912	; 0xc00000
 1001666:	f000 80e9 	beq.w	100183c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2dc>
 100166a:	9b01      	ldr	r3, [sp, #4]
 100166c:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 1001670:	2004      	movs	r0, #4
 1001672:	18ea      	adds	r2, r5, r3
 1001674:	788b      	ldrb	r3, [r1, #2]
 1001676:	b2db      	uxtb	r3, r3
 1001678:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 100167c:	2b20      	cmp	r3, #32
 100167e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
 1001682:	f000 8263 	beq.w	1001b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5ec>
 1001686:	9a01      	ldr	r2, [sp, #4]
 1001688:	442b      	add	r3, r5
 100168a:	4611      	mov	r1, r2
 100168c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 1001694:	440d      	add	r5, r1
 1001696:	2220      	movs	r2, #32
 1001698:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 100169c:	2601      	movs	r6, #1
 100169e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 10016a2:	7099      	strb	r1, [r3, #2]
 10016a4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
 10016a8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 10016ac:	78fd      	ldrb	r5, [r7, #3]
 10016ae:	b2ed      	uxtb	r5, r5
 10016b0:	f1bb 0f00 	cmp.w	fp, #0
 10016b4:	d004      	beq.n	10016c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x160>
 10016b6:	2100      	movs	r1, #0
 10016b8:	f240 7089 	movw	r0, #1929	; 0x789
 10016bc:	e000      	b.n	10016c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x160>
 10016be:	bf00      	nop
 10016c0:	4b5c      	ldr	r3, [pc, #368]	; (1001834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>)
 10016c2:	b10b      	cbz	r3, 10016c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x168>
 10016c4:	e000      	b.n	10016c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x168>
 10016c6:	bf00      	nop
 10016c8:	f3ef 8710 	mrs	r7, PRIMASK
 10016cc:	b672      	cpsid	i
 10016ce:	46b8      	mov	r8, r7
 10016d0:	f1bb 0f00 	cmp.w	fp, #0
 10016d4:	d004      	beq.n	10016e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x180>
 10016d6:	2100      	movs	r1, #0
 10016d8:	f240 708f 	movw	r0, #1935	; 0x78f
 10016dc:	e000      	b.n	10016e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x180>
 10016de:	bf00      	nop
 10016e0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 10016e4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 10016e8:	2b00      	cmp	r3, #0
 10016ea:	f47f af6e 	bne.w	10015ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
 10016ee:	f1bb 0f00 	cmp.w	fp, #0
 10016f2:	d003      	beq.n	10016fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x19c>
 10016f4:	f240 7097 	movw	r0, #1943	; 0x797
 10016f8:	e000      	b.n	10016fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x19c>
 10016fa:	bf00      	nop
 10016fc:	9b07      	ldr	r3, [sp, #28]
 10016fe:	eb04 0c03 	add.w	ip, r4, r3
 1001702:	ab08      	add	r3, sp, #32
 1001704:	f10c 0cbc 	add.w	ip, ip, #188	; 0xbc
 1001708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 100170a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 100170e:	b39e      	cbz	r6, 1001778 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x218>
 1001710:	f1bb 0f00 	cmp.w	fp, #0
 1001714:	d004      	beq.n	1001720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c0>
 1001716:	2100      	movs	r1, #0
 1001718:	f240 70a4 	movw	r0, #1956	; 0x7a4
 100171c:	e000      	b.n	1001720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c0>
 100171e:	bf00      	nop
 1001720:	9b02      	ldr	r3, [sp, #8]
 1001722:	2b00      	cmp	r3, #0
 1001724:	bf0c      	ite	eq
 1001726:	2500      	moveq	r5, #0
 1001728:	f005 0501 	andne.w	r5, r5, #1
 100172c:	b1bd      	cbz	r5, 100175e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1fe>
 100172e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001732:	2b20      	cmp	r3, #32
 1001734:	d113      	bne.n	100175e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1fe>
 1001736:	f1bb 0f00 	cmp.w	fp, #0
 100173a:	d004      	beq.n	1001746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e6>
 100173c:	2100      	movs	r1, #0
 100173e:	f240 70a9 	movw	r0, #1961	; 0x7a9
 1001742:	e000      	b.n	1001746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e6>
 1001744:	bf00      	nop
 1001746:	4649      	mov	r1, r9
 1001748:	2002      	movs	r0, #2
 100174a:	f7ff fc81 	bl	1001050 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI>
 100174e:	b930      	cbnz	r0, 100175e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1fe>
 1001750:	9b04      	ldr	r3, [sp, #16]
 1001752:	781b      	ldrb	r3, [r3, #0]
 1001754:	2b00      	cmp	r3, #0
 1001756:	f000 8207 	beq.w	1001b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x608>
 100175a:	2b01      	cmp	r3, #1
 100175c:	d054      	beq.n	1001808 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a8>
 100175e:	f1bb 0f00 	cmp.w	fp, #0
 1001762:	d004      	beq.n	100176e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20e>
 1001764:	2100      	movs	r1, #0
 1001766:	f240 70c6 	movw	r0, #1990	; 0x7c6
 100176a:	e000      	b.n	100176e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20e>
 100176c:	bf00      	nop
 100176e:	2301      	movs	r3, #1
 1001770:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 1001774:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 1001778:	f1bb 0f00 	cmp.w	fp, #0
 100177c:	d004      	beq.n	1001788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
 100177e:	2100      	movs	r1, #0
 1001780:	f240 70cf 	movw	r0, #1999	; 0x7cf
 1001784:	e000      	b.n	1001788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
 1001786:	bf00      	nop
 1001788:	b927      	cbnz	r7, 1001794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x234>
 100178a:	4b28      	ldr	r3, [pc, #160]	; (100182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>)
 100178c:	b10b      	cbz	r3, 1001792 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
 100178e:	e000      	b.n	1001792 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
 1001790:	bf00      	nop
 1001792:	b662      	cpsie	i
 1001794:	f1bb 0f00 	cmp.w	fp, #0
 1001798:	d004      	beq.n	10017a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x244>
 100179a:	2100      	movs	r1, #0
 100179c:	f240 70d3 	movw	r0, #2003	; 0x7d3
 10017a0:	e000      	b.n	10017a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x244>
 10017a2:	bf00      	nop
 10017a4:	b19e      	cbz	r6, 10017ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
 10017a6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 10017aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 10017ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 10017b2:	2b20      	cmp	r3, #32
 10017b4:	d00b      	beq.n	10017ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
 10017b6:	f1bb 0f00 	cmp.w	fp, #0
 10017ba:	d004      	beq.n	10017c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x266>
 10017bc:	2100      	movs	r1, #0
 10017be:	f240 70da 	movw	r0, #2010	; 0x7da
 10017c2:	e000      	b.n	10017c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x266>
 10017c4:	bf00      	nop
 10017c6:	f894 03bd 	ldrb.w	r0, [r4, #957]	; 0x3bd
 10017ca:	f002 f943 	bl	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 10017ce:	f1bb 0f00 	cmp.w	fp, #0
 10017d2:	d004      	beq.n	10017de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
 10017d4:	2100      	movs	r1, #0
 10017d6:	f240 70df 	movw	r0, #2015	; 0x7df
 10017da:	e000      	b.n	10017de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
 10017dc:	bf00      	nop
 10017de:	4630      	mov	r0, r6
 10017e0:	b00d      	add	sp, #52	; 0x34
 10017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10017e6:	f003 030f 	and.w	r3, r3, #15
 10017ea:	3b04      	subs	r3, #4
 10017ec:	4413      	add	r3, r2
 10017ee:	7e1b      	ldrb	r3, [r3, #24]
 10017f0:	095b      	lsrs	r3, r3, #5
 10017f2:	9302      	str	r3, [sp, #8]
 10017f4:	2b00      	cmp	r3, #0
 10017f6:	f43f aecb 	beq.w	1001590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30>
 10017fa:	9b04      	ldr	r3, [sp, #16]
 10017fc:	781b      	ldrb	r3, [r3, #0]
 10017fe:	2b01      	cmp	r3, #1
 1001800:	f200 81fa 	bhi.w	1001bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x698>
 1001804:	4c08      	ldr	r4, [pc, #32]	; (1001828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>)
 1001806:	e6cf      	b.n	10015a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48>
 1001808:	f1bb 0f00 	cmp.w	fp, #0
 100180c:	f43f aedd 	beq.w	10015ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
 1001810:	4601      	mov	r1, r0
 1001812:	f240 70bc 	movw	r0, #1980	; 0x7bc
 1001816:	e000      	b.n	100181a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
 1001818:	bf00      	nop
 100181a:	e6d6      	b.n	10015ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
 100181c:	2600      	movs	r6, #0
 100181e:	e743      	b.n	10016a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x148>
 1001820:	e000ed00 	.word	0xe000ed00
 1001824:	e000e400 	.word	0xe000e400
 1001828:	210002a0 	.word	0x210002a0
 100182c:	00000000 	.word	0x00000000
 1001830:	00fffffe 	.word	0x00fffffe
	...
 100183c:	f814 8027 	ldrb.w	r8, [r4, r7, lsl #2]
 1001840:	f1b8 0f20 	cmp.w	r8, #32
 1001844:	f000 818d 	beq.w	1001b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x602>
 1001848:	ea4f 0648 	mov.w	r6, r8, lsl #1
 100184c:	2320      	movs	r3, #32
 100184e:	46c2      	mov	sl, r8
 1001850:	eb06 0108 	add.w	r1, r6, r8
 1001854:	9305      	str	r3, [sp, #20]
 1001856:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 100185a:	f8d1 10c0 	ldr.w	r1, [r1, #192]	; 0xc0
 100185e:	ebae 0101 	sub.w	r1, lr, r1
 1001862:	0209      	lsls	r1, r1, #8
 1001864:	31ff      	adds	r1, #255	; 0xff
 1001866:	db48      	blt.n	10018fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
 1001868:	4671      	mov	r1, lr
 100186a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 100186e:	b333      	cbz	r3, 10018be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
 1001870:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 1001874:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 1001878:	f8b6 20c6 	ldrh.w	r2, [r6, #198]	; 0xc6
 100187c:	b9fa      	cbnz	r2, 10018be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
 100187e:	f8d6 00bc 	ldr.w	r0, [r6, #188]	; 0xbc
 1001882:	f000 fda1 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001886:	f8b6 20c6 	ldrh.w	r2, [r6, #198]	; 0xc6
 100188a:	f896 10c4 	ldrb.w	r1, [r6, #196]	; 0xc4
 100188e:	1c53      	adds	r3, r2, #1
 1001890:	4ad1      	ldr	r2, [pc, #836]	; (1001bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x678>)
 1001892:	440b      	add	r3, r1
 1001894:	4290      	cmp	r0, r2
 1001896:	4403      	add	r3, r0
 1001898:	f200 8198 	bhi.w	1001bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66c>
 100189c:	4ace      	ldr	r2, [pc, #824]	; (1001bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x678>)
 100189e:	4293      	cmp	r3, r2
 10018a0:	f300 8158 	bgt.w	1001b54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5f4>
 10018a4:	2b00      	cmp	r3, #0
 10018a6:	f2c0 812c 	blt.w	1001b02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5a2>
 10018aa:	4618      	mov	r0, r3
 10018ac:	f000 fdc4 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10018b0:	9908      	ldr	r1, [sp, #32]
 10018b2:	1a08      	subs	r0, r1, r0
 10018b4:	0200      	lsls	r0, r0, #8
 10018b6:	f5b0 5f4c 	cmp.w	r0, #13056	; 0x3300
 10018ba:	f2c0 811e 	blt.w	1001afa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x59a>
 10018be:	44aa      	add	sl, r5
 10018c0:	f8cd 8014 	str.w	r8, [sp, #20]
 10018c4:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 10018c8:	f89a a035 	ldrb.w	sl, [sl, #53]	; 0x35
 10018cc:	f1ba 0f20 	cmp.w	sl, #32
 10018d0:	f000 8106 	beq.w	1001ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x580>
 10018d4:	ea4f 004a 	mov.w	r0, sl, lsl #1
 10018d8:	eb00 030a 	add.w	r3, r0, sl
 10018dc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 10018e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 10018e4:	1acb      	subs	r3, r1, r3
 10018e6:	021b      	lsls	r3, r3, #8
 10018e8:	33ff      	adds	r3, #255	; 0xff
 10018ea:	db01      	blt.n	10018f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>
 10018ec:	46d0      	mov	r8, sl
 10018ee:	e7bc      	b.n	100186a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
 10018f0:	f8cd 8014 	str.w	r8, [sp, #20]
 10018f4:	4606      	mov	r6, r0
 10018f6:	46d0      	mov	r8, sl
 10018f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 10018fa:	9b05      	ldr	r3, [sp, #20]
 10018fc:	9703      	str	r7, [sp, #12]
 10018fe:	462f      	mov	r7, r5
 1001900:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 1001be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x680>
 1001904:	4625      	mov	r5, r4
 1001906:	4644      	mov	r4, r8
 1001908:	46b0      	mov	r8, r6
 100190a:	9306      	str	r3, [sp, #24]
 100190c:	eb08 0604 	add.w	r6, r8, r4
 1001910:	00f6      	lsls	r6, r6, #3
 1001912:	3608      	adds	r6, #8
 1001914:	f85a 3006 	ldr.w	r3, [sl, r6]
 1001918:	eb0a 0106 	add.w	r1, sl, r6
 100191c:	1a1b      	subs	r3, r3, r0
 100191e:	021b      	lsls	r3, r3, #8
 1001920:	33ff      	adds	r3, #255	; 0xff
 1001922:	db7e      	blt.n	1001a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c2>
 1001924:	894b      	ldrh	r3, [r1, #10]
 1001926:	b31b      	cbz	r3, 1001970 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>
 1001928:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 100192c:	bb03      	cbnz	r3, 1001970 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>
 100192e:	9808      	ldr	r0, [sp, #32]
 1001930:	f000 fd4a 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001934:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 1001938:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 100193c:	3301      	adds	r3, #1
 100193e:	4aa6      	ldr	r2, [pc, #664]	; (1001bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x678>)
 1001940:	440b      	add	r3, r1
 1001942:	4290      	cmp	r0, r2
 1001944:	4403      	add	r3, r0
 1001946:	f200 8141 	bhi.w	1001bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66c>
 100194a:	4293      	cmp	r3, r2
 100194c:	f300 80ba 	bgt.w	1001ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x564>
 1001950:	2b00      	cmp	r3, #0
 1001952:	da03      	bge.n	100195c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>
 1001954:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 1001958:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 100195c:	4618      	mov	r0, r3
 100195e:	f000 fd6b 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1001962:	f85a 3006 	ldr.w	r3, [sl, r6]
 1001966:	1a18      	subs	r0, r3, r0
 1001968:	0200      	lsls	r0, r0, #8
 100196a:	f5b0 5f4c 	cmp.w	r0, #13056	; 0x3300
 100196e:	db58      	blt.n	1001a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c2>
 1001970:	462c      	mov	r4, r5
 1001972:	463d      	mov	r5, r7
 1001974:	9f03      	ldr	r7, [sp, #12]
 1001976:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 100197a:	4293      	cmp	r3, r2
 100197c:	f000 80ae 	beq.w	1001adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x57c>
 1001980:	2a20      	cmp	r2, #32
 1001982:	f000 813e 	beq.w	1001c02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a2>
 1001986:	9b06      	ldr	r3, [sp, #24]
 1001988:	18eb      	adds	r3, r5, r3
 100198a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100198e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 1001992:	9b05      	ldr	r3, [sp, #20]
 1001994:	2b20      	cmp	r3, #32
 1001996:	f000 80b9 	beq.w	1001b0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5ac>
 100199a:	18eb      	adds	r3, r5, r3
 100199c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10019a0:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 10019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 10019a8:	4603      	mov	r3, r0
 10019aa:	2105      	movs	r1, #5
 10019ac:	9e06      	ldr	r6, [sp, #24]
 10019ae:	e000      	b.n	10019b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
 10019b0:	4613      	mov	r3, r2
 10019b2:	18ea      	adds	r2, r5, r3
 10019b4:	429e      	cmp	r6, r3
 10019b6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 10019ba:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
 10019be:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 10019c2:	d1f5      	bne.n	10019b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x450>
 10019c4:	eb04 0687 	add.w	r6, r4, r7, lsl #2
 10019c8:	78b1      	ldrb	r1, [r6, #2]
 10019ca:	b2c9      	uxtb	r1, r1
 10019cc:	2920      	cmp	r1, #32
 10019ce:	f000 80c6 	beq.w	1001b5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5fe>
 10019d2:	4429      	add	r1, r5
 10019d4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 10019d8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
 10019dc:	9901      	ldr	r1, [sp, #4]
 10019de:	eb04 0687 	add.w	r6, r4, r7, lsl #2
 10019e2:	18e8      	adds	r0, r5, r3
 10019e4:	f04f 0c20 	mov.w	ip, #32
 10019e8:	1869      	adds	r1, r5, r1
 10019ea:	70b3      	strb	r3, [r6, #2]
 10019ec:	9b05      	ldr	r3, [sp, #20]
 10019ee:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 10019f2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 10019f6:	4563      	cmp	r3, ip
 10019f8:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
 10019fc:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
 1001a00:	f000 8091 	beq.w	1001b26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c6>
 1001a04:	9b05      	ldr	r3, [sp, #20]
 1001a06:	442b      	add	r3, r5
 1001a08:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 1001a0c:	9b01      	ldr	r3, [sp, #4]
 1001a0e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
 1001a12:	441d      	add	r5, r3
 1001a14:	2303      	movs	r3, #3
 1001a16:	2601      	movs	r6, #1
 1001a18:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 1001a1c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 1001a20:	e642      	b.n	10016a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x148>
 1001a22:	44a0      	add	r8, r4
 1001a24:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 1001a28:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 1001a2c:	f898 10c8 	ldrb.w	r1, [r8, #200]	; 0xc8
 1001a30:	4299      	cmp	r1, r3
 1001a32:	d94f      	bls.n	1001ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x574>
 1001a34:	193b      	adds	r3, r7, r4
 1001a36:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 1001a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001a3e:	2b20      	cmp	r3, #32
 1001a40:	d07a      	beq.n	1001b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5d8>
 1001a42:	9406      	str	r4, [sp, #24]
 1001a44:	ea4f 0843 	mov.w	r8, r3, lsl #1
 1001a48:	461c      	mov	r4, r3
 1001a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 1001a4c:	e75e      	b.n	100190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
 1001a4e:	4e63      	ldr	r6, [pc, #396]	; (1001bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x67c>)
 1001a50:	f109 0501 	add.w	r5, r9, #1
 1001a54:	eb06 1789 	add.w	r7, r6, r9, lsl #6
 1001a58:	f005 0501 	and.w	r5, r5, #1
 1001a5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1001a5e:	eb06 1685 	add.w	r6, r6, r5, lsl #6
 1001a62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1001a64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1001a66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1001a68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1001a6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1001a6c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 1001a70:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 1001a74:	f1bb 0f00 	cmp.w	fp, #0
 1001a78:	d004      	beq.n	1001a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>
 1001a7a:	2100      	movs	r1, #0
 1001a7c:	f240 50da 	movw	r0, #1498	; 0x5da
 1001a80:	e000      	b.n	1001a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>
 1001a82:	bf00      	nop
 1001a84:	f109 0908 	add.w	r9, r9, #8
 1001a88:	f105 0708 	add.w	r7, r5, #8
 1001a8c:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 1001a90:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
 1001a94:	f1bb 0f00 	cmp.w	fp, #0
 1001a98:	d004      	beq.n	1001aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>
 1001a9a:	2100      	movs	r1, #0
 1001a9c:	f240 50de 	movw	r0, #1502	; 0x5de
 1001aa0:	e000      	b.n	1001aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>
 1001aa2:	bf00      	nop
 1001aa4:	f1bb 0f00 	cmp.w	fp, #0
 1001aa8:	d004      	beq.n	1001ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x554>
 1001aaa:	2100      	movs	r1, #0
 1001aac:	f240 7071 	movw	r0, #1905	; 0x771
 1001ab0:	e000      	b.n	1001ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x554>
 1001ab2:	bf00      	nop
 1001ab4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 1001ab8:	2b00      	cmp	r3, #0
 1001aba:	f47f ad86 	bne.w	10015ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
 1001abe:	fa5f f985 	uxtb.w	r9, r5
 1001ac2:	e5a1      	b.n	1001608 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
 1001ac4:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 1001ac8:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 1001acc:	e746      	b.n	100195c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>
 1001ace:	2308      	movs	r3, #8
 1001ad0:	9302      	str	r3, [sp, #8]
 1001ad2:	e692      	b.n	10017fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
 1001ad4:	462c      	mov	r4, r5
 1001ad6:	463d      	mov	r5, r7
 1001ad8:	9f03      	ldr	r7, [sp, #12]
 1001ada:	e5c6      	b.n	100166a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10a>
 1001adc:	2b20      	cmp	r3, #32
 1001ade:	d01a      	beq.n	1001b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5b6>
 1001ae0:	9b05      	ldr	r3, [sp, #20]
 1001ae2:	18ea      	adds	r2, r5, r3
 1001ae4:	9b01      	ldr	r3, [sp, #4]
 1001ae6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 1001aea:	18eb      	adds	r3, r5, r3
 1001aec:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 1001af0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 1001af8:	e784      	b.n	1001a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4a4>
 1001afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 1001afc:	ea4f 0648 	mov.w	r6, r8, lsl #1
 1001b00:	e6fb      	b.n	10018fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
 1001b02:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 1001b06:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 1001b0a:	e6ce      	b.n	10018aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34a>
 1001b0c:	f814 0027 	ldrb.w	r0, [r4, r7, lsl #2]
 1001b10:	f804 2027 	strb.w	r2, [r4, r7, lsl #2]
 1001b14:	e748      	b.n	10019a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x448>
 1001b16:	9b01      	ldr	r3, [sp, #4]
 1001b18:	f814 2027 	ldrb.w	r2, [r4, r7, lsl #2]
 1001b1c:	18eb      	adds	r3, r5, r3
 1001b1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 1001b26:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 1001b2a:	9901      	ldr	r1, [sp, #4]
 1001b2c:	2201      	movs	r2, #1
 1001b2e:	f804 1027 	strb.w	r1, [r4, r7, lsl #2]
 1001b32:	70da      	strb	r2, [r3, #3]
 1001b34:	460b      	mov	r3, r1
 1001b36:	e76c      	b.n	1001a12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4b2>
 1001b38:	46a0      	mov	r8, r4
 1001b3a:	9b05      	ldr	r3, [sp, #20]
 1001b3c:	462c      	mov	r4, r5
 1001b3e:	463d      	mov	r5, r7
 1001b40:	4598      	cmp	r8, r3
 1001b42:	9f03      	ldr	r7, [sp, #12]
 1001b44:	d0ca      	beq.n	1001adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x57c>
 1001b46:	f8cd 8018 	str.w	r8, [sp, #24]
 1001b4a:	e71c      	b.n	1001986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x426>
 1001b4c:	9b01      	ldr	r3, [sp, #4]
 1001b4e:	704b      	strb	r3, [r1, #1]
 1001b50:	4619      	mov	r1, r3
 1001b52:	e59f      	b.n	1001694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
 1001b54:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 1001b58:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 1001b5c:	e6a5      	b.n	10018aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34a>
 1001b5e:	7070      	strb	r0, [r6, #1]
 1001b60:	e73c      	b.n	10019dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47c>
 1001b62:	f882 8035 	strb.w	r8, [r2, #53]	; 0x35
 1001b66:	e7de      	b.n	1001b26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c6>
 1001b68:	4619      	mov	r1, r3
 1001b6a:	f1bb 0f00 	cmp.w	fp, #0
 1001b6e:	d003      	beq.n	1001b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x618>
 1001b70:	f240 70b1 	movw	r0, #1969	; 0x7b1
 1001b74:	e000      	b.n	1001b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x618>
 1001b76:	bf00      	nop
 1001b78:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 1001b7c:	2604      	movs	r6, #4
 1001b7e:	9a01      	ldr	r2, [sp, #4]
 1001b80:	b2db      	uxtb	r3, r3
 1001b82:	f103 0108 	add.w	r1, r3, #8
 1001b86:	015b      	lsls	r3, r3, #5
 1001b88:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 1001b8c:	1898      	adds	r0, r3, r2
 1001b8e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 1001b92:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 1001b96:	b2d2      	uxtb	r2, r2
 1001b98:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
 1001b9c:	2a20      	cmp	r2, #32
 1001b9e:	d010      	beq.n	1001bc2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x662>
 1001ba0:	441a      	add	r2, r3
 1001ba2:	9801      	ldr	r0, [sp, #4]
 1001ba4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 1001ba8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
 1001bac:	4403      	add	r3, r0
 1001bae:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 1001bb2:	2120      	movs	r1, #32
 1001bb4:	462e      	mov	r6, r5
 1001bb6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001bba:	7090      	strb	r0, [r2, #2]
 1001bbc:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
 1001bc0:	e5da      	b.n	1001778 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x218>
 1001bc2:	9a01      	ldr	r2, [sp, #4]
 1001bc4:	f88c 2001 	strb.w	r2, [ip, #1]
 1001bc8:	4610      	mov	r0, r2
 1001bca:	e7ef      	b.n	1001bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x64c>
 1001bcc:	f240 6116 	movw	r1, #1558	; 0x616
 1001bd0:	2070      	movs	r0, #112	; 0x70
 1001bd2:	f001 fea9 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001bd6:	bf00      	nop
 1001bd8:	1e847fff 	.word	0x1e847fff
 1001bdc:	210002d4 	.word	0x210002d4
 1001be0:	21000354 	.word	0x21000354
 1001be4:	f240 7155 	movw	r1, #1877	; 0x755
 1001be8:	2070      	movs	r0, #112	; 0x70
 1001bea:	f001 fe9d 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001bee:	f44f 61eb 	mov.w	r1, #1880	; 0x758
 1001bf2:	2070      	movs	r0, #112	; 0x70
 1001bf4:	f001 fe98 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001bf8:	f240 715c 	movw	r1, #1884	; 0x75c
 1001bfc:	2070      	movs	r0, #112	; 0x70
 1001bfe:	f001 fe93 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001c02:	f240 2191 	movw	r1, #657	; 0x291
 1001c06:	2070      	movs	r0, #112	; 0x70
 1001c08:	f001 fe8e 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01001c0c <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>:
 1001c0c:	4b01      	ldr	r3, [pc, #4]	; (1001c14 <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ+0x8>)
 1001c0e:	f893 03bc 	ldrb.w	r0, [r3, #956]	; 0x3bc
 1001c12:	4770      	bx	lr
 1001c14:	210002a0 	.word	0x210002a0

01001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
 1001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1001c1c:	2807      	cmp	r0, #7
 1001c1e:	f200 809f 	bhi.w	1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x148>
 1001c22:	e8df f000 	tbb	[pc, r0]
 1001c26:	551e      	.short	0x551e
 1001c28:	859d7e70 	.word	0x859d7e70
 1001c2c:	0496      	.short	0x0496
 1001c2e:	4cc0      	ldr	r4, [pc, #768]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001c30:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001c34:	2b20      	cmp	r3, #32
 1001c36:	f000 80e9 	beq.w	1001e0c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1f4>
 1001c3a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001c3e:	2105      	movs	r1, #5
 1001c40:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 1001c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001c48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1001c4c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 1001c50:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 1001c54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 1001c58:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 1001c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1001c60:	4718      	bx	r3
 1001c62:	4cb3      	ldr	r4, [pc, #716]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001c64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 1001c68:	2b00      	cmp	r3, #0
 1001c6a:	f000 811f 	beq.w	1001eac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x294>
 1001c6e:	8ae3      	ldrh	r3, [r4, #22]
 1001c70:	b123      	cbz	r3, 1001c7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
 1001c72:	f001 fb59 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001c76:	2800      	cmp	r0, #0
 1001c78:	f000 8155 	beq.w	1001f26 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x30e>
 1001c7c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001c80:	2b20      	cmp	r3, #32
 1001c82:	f000 80eb 	beq.w	1001e5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x244>
 1001c86:	68a1      	ldr	r1, [r4, #8]
 1001c88:	2301      	movs	r3, #1
 1001c8a:	1c4a      	adds	r2, r1, #1
 1001c8c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 1001c90:	d006      	beq.n	1001ca0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x88>
 1001c92:	2203      	movs	r2, #3
 1001c94:	2005      	movs	r0, #5
 1001c96:	f000 fe07 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1001c9a:	2800      	cmp	r0, #0
 1001c9c:	f000 813e 	beq.w	1001f1c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x304>
 1001ca0:	7e63      	ldrb	r3, [r4, #25]
 1001ca2:	2b01      	cmp	r3, #1
 1001ca4:	f000 8124 	beq.w	1001ef0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2d8>
 1001ca8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 1001cac:	2101      	movs	r1, #1
 1001cae:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001cb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1001cb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001cba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 1001cbe:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 1001cc2:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 1001cc6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 1001cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1001cce:	4718      	bx	r3
 1001cd0:	4c97      	ldr	r4, [pc, #604]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001cd2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001cd6:	2b20      	cmp	r3, #32
 1001cd8:	d06f      	beq.n	1001dba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a2>
 1001cda:	2501      	movs	r5, #1
 1001cdc:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 1001ce0:	f001 fb22 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001ce4:	2800      	cmp	r0, #0
 1001ce6:	f000 810f 	beq.w	1001f08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2f0>
 1001cea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 1001cee:	2b00      	cmp	r3, #0
 1001cf0:	f000 80f9 	beq.w	1001ee6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2ce>
 1001cf4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 1001cf8:	2b00      	cmp	r3, #0
 1001cfa:	f040 80e7 	bne.w	1001ecc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2b4>
 1001cfe:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 1001d02:	2100      	movs	r1, #0
 1001d04:	e7d3      	b.n	1001cae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x96>
 1001d06:	4c8a      	ldr	r4, [pc, #552]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001d08:	f000 ff5e 	bl	1002bc8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
 1001d0c:	8ae3      	ldrh	r3, [r4, #22]
 1001d0e:	2b00      	cmp	r3, #0
 1001d10:	f040 80d2 	bne.w	1001eb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a0>
 1001d14:	f894 33b4 	ldrb.w	r3, [r4, #948]	; 0x3b4
 1001d18:	2b03      	cmp	r3, #3
 1001d1a:	d107      	bne.n	1001d2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
 1001d1c:	2301      	movs	r3, #1
 1001d1e:	7763      	strb	r3, [r4, #29]
 1001d20:	e004      	b.n	1001d2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
 1001d22:	4b83      	ldr	r3, [pc, #524]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001d24:	2201      	movs	r2, #1
 1001d26:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 1001d2a:	601a      	str	r2, [r3, #0]
 1001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1001d30:	4c7f      	ldr	r4, [pc, #508]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001d32:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001d36:	2b20      	cmp	r3, #32
 1001d38:	d017      	beq.n	1001d6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x152>
 1001d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1001d3e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 1001d42:	60a2      	str	r2, [r4, #8]
 1001d44:	2b00      	cmp	r3, #0
 1001d46:	f000 80da 	beq.w	1001efe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e6>
 1001d4a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 1001d4e:	2106      	movs	r1, #6
 1001d50:	e7ad      	b.n	1001cae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x96>
 1001d52:	4b77      	ldr	r3, [pc, #476]	; (1001f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x318>)
 1001d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1001d58:	f893 03bc 	ldrb.w	r0, [r3, #956]	; 0x3bc
 1001d5c:	f001 be7a 	b.w	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1001d60:	f640 01b3 	movw	r1, #2227	; 0x8b3
 1001d64:	2070      	movs	r0, #112	; 0x70
 1001d66:	f001 fddf 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d6a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 1001d6e:	b2db      	uxtb	r3, r3
 1001d70:	f103 0108 	add.w	r1, r3, #8
 1001d74:	f814 2021 	ldrb.w	r2, [r4, r1, lsl #2]
 1001d78:	2a20      	cmp	r2, #32
 1001d7a:	f000 80ca 	beq.w	1001f12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2fa>
 1001d7e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 1001d82:	2702      	movs	r7, #2
 1001d84:	2501      	movs	r5, #1
 1001d86:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 1001d8a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001d8e:	2000      	movs	r0, #0
 1001d90:	70f5      	strb	r5, [r6, #3]
 1001d92:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
 1001d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001d9a:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 1001d9e:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 1001da2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 1001da6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 1001daa:	77a0      	strb	r0, [r4, #30]
 1001dac:	f001 fe96 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 1001db0:	2800      	cmp	r0, #0
 1001db2:	d0c2      	beq.n	1001d3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
 1001db4:	4b5f      	ldr	r3, [pc, #380]	; (1001f34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x31c>)
 1001db6:	601d      	str	r5, [r3, #0]
 1001db8:	e7bf      	b.n	1001d3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
 1001dba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 1001dbe:	b2db      	uxtb	r3, r3
 1001dc0:	f103 0108 	add.w	r1, r3, #8
 1001dc4:	f814 2021 	ldrb.w	r2, [r4, r1, lsl #2]
 1001dc8:	2a20      	cmp	r2, #32
 1001dca:	f000 80a2 	beq.w	1001f12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2fa>
 1001dce:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 1001dd2:	2702      	movs	r7, #2
 1001dd4:	2501      	movs	r5, #1
 1001dd6:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 1001dda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001dde:	2000      	movs	r0, #0
 1001de0:	70f5      	strb	r5, [r6, #3]
 1001de2:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
 1001de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001dea:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 1001dee:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 1001df2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 1001df6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 1001dfa:	77a0      	strb	r0, [r4, #30]
 1001dfc:	f001 fe6e 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 1001e00:	2800      	cmp	r0, #0
 1001e02:	f43f af6a 	beq.w	1001cda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
 1001e06:	4b4b      	ldr	r3, [pc, #300]	; (1001f34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x31c>)
 1001e08:	601d      	str	r5, [r3, #0]
 1001e0a:	e766      	b.n	1001cda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
 1001e0c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 1001e10:	b2db      	uxtb	r3, r3
 1001e12:	f103 0108 	add.w	r1, r3, #8
 1001e16:	f814 2021 	ldrb.w	r2, [r4, r1, lsl #2]
 1001e1a:	2a20      	cmp	r2, #32
 1001e1c:	d079      	beq.n	1001f12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2fa>
 1001e1e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 1001e22:	2702      	movs	r7, #2
 1001e24:	2501      	movs	r5, #1
 1001e26:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 1001e2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001e2e:	2000      	movs	r0, #0
 1001e30:	70f5      	strb	r5, [r6, #3]
 1001e32:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
 1001e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001e3a:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 1001e3e:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 1001e42:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 1001e46:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 1001e4a:	77a0      	strb	r0, [r4, #30]
 1001e4c:	f001 fe46 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 1001e50:	2800      	cmp	r0, #0
 1001e52:	f43f aef2 	beq.w	1001c3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x22>
 1001e56:	4b37      	ldr	r3, [pc, #220]	; (1001f34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x31c>)
 1001e58:	601d      	str	r5, [r3, #0]
 1001e5a:	e6ee      	b.n	1001c3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x22>
 1001e5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 1001e60:	b2db      	uxtb	r3, r3
 1001e62:	f103 0108 	add.w	r1, r3, #8
 1001e66:	f814 2021 	ldrb.w	r2, [r4, r1, lsl #2]
 1001e6a:	2a20      	cmp	r2, #32
 1001e6c:	d051      	beq.n	1001f12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2fa>
 1001e6e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 1001e72:	2702      	movs	r7, #2
 1001e74:	2501      	movs	r5, #1
 1001e76:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 1001e7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001e7e:	2000      	movs	r0, #0
 1001e80:	70f5      	strb	r5, [r6, #3]
 1001e82:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
 1001e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1001e8a:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 1001e8e:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 1001e92:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 1001e96:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 1001e9a:	77a0      	strb	r0, [r4, #30]
 1001e9c:	f001 fe1e 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 1001ea0:	2800      	cmp	r0, #0
 1001ea2:	f43f aef0 	beq.w	1001c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
 1001ea6:	4b23      	ldr	r3, [pc, #140]	; (1001f34 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x31c>)
 1001ea8:	601d      	str	r5, [r3, #0]
 1001eaa:	e6ec      	b.n	1001c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
 1001eac:	f000 ffe8 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1001eb0:	2301      	movs	r3, #1
 1001eb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 1001eb6:	e6da      	b.n	1001c6e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
 1001eb8:	f001 fa36 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001ebc:	2800      	cmp	r0, #0
 1001ebe:	f47f af29 	bne.w	1001d14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfc>
 1001ec2:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
 1001ec6:	2070      	movs	r0, #112	; 0x70
 1001ec8:	f001 fd2e 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001ecc:	4b1a      	ldr	r3, [pc, #104]	; (1001f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x320>)
 1001ece:	2201      	movs	r2, #1
 1001ed0:	2005      	movs	r0, #5
 1001ed2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1001ed6:	f000 fd9f 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1001eda:	f001 f87d 	bl	1002fd8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
 1001ede:	2300      	movs	r3, #0
 1001ee0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 1001ee4:	e70b      	b.n	1001cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe6>
 1001ee6:	f000 ffcb 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1001eea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 1001eee:	e701      	b.n	1001cf4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xdc>
 1001ef0:	6920      	ldr	r0, [r4, #16]
 1001ef2:	3801      	subs	r0, #1
 1001ef4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1001ef8:	f000 fbdc 	bl	10026b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
 1001efc:	e6d4      	b.n	1001ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x90>
 1001efe:	f640 0185 	movw	r1, #2181	; 0x885
 1001f02:	2070      	movs	r0, #112	; 0x70
 1001f04:	f001 fd10 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f08:	f640 0195 	movw	r1, #2197	; 0x895
 1001f0c:	2070      	movs	r0, #112	; 0x70
 1001f0e:	f001 fd0b 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f12:	f240 319e 	movw	r1, #926	; 0x39e
 1001f16:	2070      	movs	r0, #112	; 0x70
 1001f18:	f001 fd06 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f1c:	f640 0175 	movw	r1, #2165	; 0x875
 1001f20:	2070      	movs	r0, #112	; 0x70
 1001f22:	f001 fd01 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f26:	f640 016f 	movw	r1, #2159	; 0x86f
 1001f2a:	2070      	movs	r0, #112	; 0x70
 1001f2c:	f001 fcfc 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f30:	210002a0 	.word	0x210002a0
 1001f34:	41008c04 	.word	0x41008c04
 1001f38:	4100f000 	.word	0x4100f000

01001f3c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
 1001f3c:	4b0e      	ldr	r3, [pc, #56]	; (1001f78 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
 1001f3e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 1001f42:	2a20      	cmp	r2, #32
 1001f44:	d011      	beq.n	1001f6a <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x2e>
 1001f46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 1001f4a:	2104      	movs	r1, #4
 1001f4c:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
 1001f50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1001f54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 1001f58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 1001f5c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 1001f60:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 1001f64:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 1001f68:	4710      	bx	r2
 1001f6a:	b510      	push	{r4, lr}
 1001f6c:	f640 01bb 	movw	r1, #2235	; 0x8bb
 1001f70:	2070      	movs	r0, #112	; 0x70
 1001f72:	f001 fcd9 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001f76:	bf00      	nop
 1001f78:	210002a0 	.word	0x210002a0

01001f7c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
 1001f7c:	b510      	push	{r4, lr}
 1001f7e:	4c2d      	ldr	r4, [pc, #180]	; (1002034 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xb8>)
 1001f80:	b082      	sub	sp, #8
 1001f82:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 1001f86:	2b20      	cmp	r3, #32
 1001f88:	d03b      	beq.n	1002002 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x86>
 1001f8a:	68a3      	ldr	r3, [r4, #8]
 1001f8c:	3301      	adds	r3, #1
 1001f8e:	d14c      	bne.n	100202a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xae>
 1001f90:	6862      	ldr	r2, [r4, #4]
 1001f92:	4929      	ldr	r1, [pc, #164]	; (1002038 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xbc>)
 1001f94:	1813      	adds	r3, r2, r0
 1001f96:	428a      	cmp	r2, r1
 1001f98:	d842      	bhi.n	1002020 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa4>
 1001f9a:	4a28      	ldr	r2, [pc, #160]	; (100203c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc0>)
 1001f9c:	4290      	cmp	r0, r2
 1001f9e:	dc3a      	bgt.n	1002016 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
 1001fa0:	4a27      	ldr	r2, [pc, #156]	; (1002040 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
 1001fa2:	4290      	cmp	r0, r2
 1001fa4:	db32      	blt.n	100200c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
 1001fa6:	428b      	cmp	r3, r1
 1001fa8:	dc1a      	bgt.n	1001fe0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
 1001faa:	2b00      	cmp	r3, #0
 1001fac:	db13      	blt.n	1001fd6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x5a>
 1001fae:	4618      	mov	r0, r3
 1001fb0:	f10d 0203 	add.w	r2, sp, #3
 1001fb4:	a901      	add	r1, sp, #4
 1001fb6:	f000 fa15 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1001fba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 1001fbe:	9901      	ldr	r1, [sp, #4]
 1001fc0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 1001fc4:	2a0f      	cmp	r2, #15
 1001fc6:	bf88      	it	hi
 1001fc8:	3101      	addhi	r1, #1
 1001fca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 1001fce:	60a1      	str	r1, [r4, #8]
 1001fd0:	b95b      	cbnz	r3, 1001fea <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x6e>
 1001fd2:	b002      	add	sp, #8
 1001fd4:	bd10      	pop	{r4, pc}
 1001fd6:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 1001fda:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 1001fde:	e7e6      	b.n	1001fae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x32>
 1001fe0:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 1001fe4:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 1001fe8:	e7e1      	b.n	1001fae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x32>
 1001fea:	2301      	movs	r3, #1
 1001fec:	2203      	movs	r2, #3
 1001fee:	2005      	movs	r0, #5
 1001ff0:	f000 fc5a 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1001ff4:	2800      	cmp	r0, #0
 1001ff6:	d1ec      	bne.n	1001fd2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x56>
 1001ff8:	f640 21f1 	movw	r1, #2801	; 0xaf1
 1001ffc:	2070      	movs	r0, #112	; 0x70
 1001ffe:	f001 fc93 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002002:	f640 21e7 	movw	r1, #2791	; 0xae7
 1002006:	2070      	movs	r0, #112	; 0x70
 1002008:	f001 fc8e 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100200c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 1002010:	2070      	movs	r0, #112	; 0x70
 1002012:	f001 fc89 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002016:	f240 6117 	movw	r1, #1559	; 0x617
 100201a:	2070      	movs	r0, #112	; 0x70
 100201c:	f001 fc84 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002020:	f240 6116 	movw	r1, #1558	; 0x616
 1002024:	2070      	movs	r0, #112	; 0x70
 1002026:	f001 fc7f 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100202a:	f640 21e8 	movw	r1, #2792	; 0xae8
 100202e:	2070      	movs	r0, #112	; 0x70
 1002030:	f001 fc7a 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002034:	210002a0 	.word	0x210002a0
 1002038:	1e847fff 	.word	0x1e847fff
 100203c:	07a12000 	.word	0x07a12000
 1002040:	f85ee000 	.word	0xf85ee000

01002044 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ>:
 1002044:	b510      	push	{r4, lr}
 1002046:	4c0a      	ldr	r4, [pc, #40]	; (1002070 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x2c>)
 1002048:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 100204c:	b16b      	cbz	r3, 100206a <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x26>
 100204e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 1002052:	2bff      	cmp	r3, #255	; 0xff
 1002054:	d002      	beq.n	100205c <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x18>
 1002056:	2300      	movs	r3, #0
 1002058:	4618      	mov	r0, r3
 100205a:	bd10      	pop	{r4, pc}
 100205c:	f001 fcde 	bl	1003a1c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 1002060:	2300      	movs	r3, #0
 1002062:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 1002066:	4618      	mov	r0, r3
 1002068:	bd10      	pop	{r4, pc}
 100206a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 100206e:	e7f3      	b.n	1002058 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x14>
 1002070:	210002a0 	.word	0x210002a0

01002074 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>:
 1002074:	b538      	push	{r3, r4, r5, lr}
 1002076:	4b0f      	ldr	r3, [pc, #60]	; (10020b4 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x40>)
 1002078:	4604      	mov	r4, r0
 100207a:	b10b      	cbz	r3, 1002080 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0xc>
 100207c:	e000      	b.n	1002080 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0xc>
 100207e:	bf00      	nop
 1002080:	f3ef 8510 	mrs	r5, PRIMASK
 1002084:	b672      	cpsid	i
 1002086:	2301      	movs	r3, #1
 1002088:	4621      	mov	r1, r4
 100208a:	2203      	movs	r2, #3
 100208c:	2006      	movs	r0, #6
 100208e:	f000 fc0b 	bl	10028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1002092:	4604      	mov	r4, r0
 1002094:	b925      	cbnz	r5, 10020a0 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x2c>
 1002096:	4b08      	ldr	r3, [pc, #32]	; (10020b8 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x44>)
 1002098:	b10b      	cbz	r3, 100209e <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x2a>
 100209a:	e000      	b.n	100209e <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x2a>
 100209c:	bf00      	nop
 100209e:	b662      	cpsie	i
 10020a0:	b104      	cbz	r4, 10020a4 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x30>
 10020a2:	bd38      	pop	{r3, r4, r5, pc}
 10020a4:	4b05      	ldr	r3, [pc, #20]	; (10020bc <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x48>)
 10020a6:	f893 03bc 	ldrb.w	r0, [r3, #956]	; 0x3bc
 10020aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 10020ae:	f001 bcd1 	b.w	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 10020b2:	bf00      	nop
	...
 10020bc:	210002a0 	.word	0x210002a0

010020c0 <sym_HAHEAVDZUSPPA6H5H73M6WNIYXBR6WNMIDQIM7Q>:
 10020c0:	f000 bbec 	b.w	100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

010020c4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
 10020c4:	4929      	ldr	r1, [pc, #164]	; (100216c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0xa8>)
 10020c6:	b538      	push	{r3, r4, r5, lr}
 10020c8:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 10020cc:	2b20      	cmp	r3, #32
 10020ce:	d048      	beq.n	1002162 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x9e>
 10020d0:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
 10020d4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 10020d8:	f891 402e 	ldrb.w	r4, [r1, #46]	; 0x2e
 10020dc:	b2ed      	uxtb	r5, r5
 10020de:	3308      	adds	r3, #8
 10020e0:	b2e4      	uxtb	r4, r4
 10020e2:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 10020e6:	2b20      	cmp	r3, #32
 10020e8:	d018      	beq.n	100211c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x58>
 10020ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 10020ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 10020f2:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 10020f6:	4282      	cmp	r2, r0
 10020f8:	d913      	bls.n	1002122 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x5e>
 10020fa:	0164      	lsls	r4, r4, #5
 10020fc:	e007      	b.n	100210e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x4a>
 10020fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 1002102:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 1002106:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 100210a:	4282      	cmp	r2, r0
 100210c:	d909      	bls.n	1002122 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x5e>
 100210e:	4423      	add	r3, r4
 1002110:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 1002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 1002118:	2b20      	cmp	r3, #32
 100211a:	d1f0      	bne.n	10020fe <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x3a>
 100211c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1002120:	bd38      	pop	{r3, r4, r5, pc}
 1002122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1002126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 100212a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 100212e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 1002132:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 1002136:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 100213a:	1ac0      	subs	r0, r0, r3
 100213c:	0200      	lsls	r0, r0, #8
 100213e:	f110 0fff 	cmn.w	r0, #255	; 0xff
 1002142:	da01      	bge.n	1002148 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x84>
 1002144:	2000      	movs	r0, #0
 1002146:	bd38      	pop	{r3, r4, r5, pc}
 1002148:	2800      	cmp	r0, #0
 100214a:	680c      	ldr	r4, [r1, #0]
 100214c:	bfb8      	it	lt
 100214e:	30ff      	addlt	r0, #255	; 0xff
 1002150:	1200      	asrs	r0, r0, #8
 1002152:	f000 f939 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1002156:	f104 0374 	add.w	r3, r4, #116	; 0x74
 100215a:	4283      	cmp	r3, r0
 100215c:	d8f2      	bhi.n	1002144 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
 100215e:	1b00      	subs	r0, r0, r4
 1002160:	bd38      	pop	{r3, r4, r5, pc}
 1002162:	f640 314c 	movw	r1, #2892	; 0xb4c
 1002166:	2070      	movs	r0, #112	; 0x70
 1002168:	f001 fbde 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100216c:	210002a0 	.word	0x210002a0

01002170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
 1002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1002174:	4c91      	ldr	r4, [pc, #580]	; (10023bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x24c>)
 1002176:	b085      	sub	sp, #20
 1002178:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 100217c:	2a20      	cmp	r2, #32
 100217e:	f000 8115 	beq.w	10023ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x23c>
 1002182:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 1002186:	4607      	mov	r7, r0
 1002188:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 100218c:	f10d 020b 	add.w	r2, sp, #11
 1002190:	6820      	ldr	r0, [r4, #0]
 1002192:	468b      	mov	fp, r1
 1002194:	6923      	ldr	r3, [r4, #16]
 1002196:	3508      	adds	r5, #8
 1002198:	a903      	add	r1, sp, #12
 100219a:	4438      	add	r0, r7
 100219c:	9301      	str	r3, [sp, #4]
 100219e:	b2f6      	uxtb	r6, r6
 10021a0:	f814 5025 	ldrb.w	r5, [r4, r5, lsl #2]
 10021a4:	f000 f91e 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10021a8:	f1a7 0174 	sub.w	r1, r7, #116	; 0x74
 10021ac:	4a84      	ldr	r2, [pc, #528]	; (10023c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x250>)
 10021ae:	4291      	cmp	r1, r2
 10021b0:	d865      	bhi.n	100227e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
 10021b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 10021b6:	9b03      	ldr	r3, [sp, #12]
 10021b8:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 10021bc:	e9d6 202f 	ldrd	r2, r0, [r6, #188]	; 0xbc
 10021c0:	eb00 0c03 	add.w	ip, r0, r3
 10021c4:	ebac 0202 	sub.w	r2, ip, r2
 10021c8:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 10021cc:	d157      	bne.n	100227e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
 10021ce:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 10021d2:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
 10021d6:	2d20      	cmp	r5, #32
 10021d8:	f884 b018 	strb.w	fp, [r4, #24]
 10021dc:	fa5f f389 	uxtb.w	r3, r9
 10021e0:	6120      	str	r0, [r4, #16]
 10021e2:	461a      	mov	r2, r3
 10021e4:	f000 80d3 	beq.w	100238e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x21e>
 10021e8:	2320      	movs	r3, #32
 10021ea:	4692      	mov	sl, r2
 10021ec:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 10021f0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 10023c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x254>
 10021f4:	465a      	mov	r2, fp
 10021f6:	9300      	str	r3, [sp, #0]
 10021f8:	006e      	lsls	r6, r5, #1
 10021fa:	eb06 0b05 	add.w	fp, r6, r5
 10021fe:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 1002202:	f10b 0b08 	add.w	fp, fp, #8
 1002206:	f859 300b 	ldr.w	r3, [r9, fp]
 100220a:	eb09 010b 	add.w	r1, r9, fp
 100220e:	1a1b      	subs	r3, r3, r0
 1002210:	021b      	lsls	r3, r3, #8
 1002212:	33ff      	adds	r3, #255	; 0xff
 1002214:	db56      	blt.n	10022c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x154>
 1002216:	894b      	ldrh	r3, [r1, #10]
 1002218:	b10b      	cbz	r3, 100221e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xae>
 100221a:	8ae3      	ldrh	r3, [r4, #22]
 100221c:	b39b      	cbz	r3, 1002286 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x116>
 100221e:	2005      	movs	r0, #5
 1002220:	f000 fbfa 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1002228:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 100222c:	60a2      	str	r2, [r4, #8]
 100222e:	9a00      	ldr	r2, [sp, #0]
 1002230:	b2db      	uxtb	r3, r3
 1002232:	2a20      	cmp	r2, #32
 1002234:	f040 80bf 	bne.w	10023b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x246>
 1002238:	3308      	adds	r3, #8
 100223a:	2520      	movs	r5, #32
 100223c:	f814 0023 	ldrb.w	r0, [r4, r3, lsl #2]
 1002240:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 1002244:	2101      	movs	r1, #1
 1002246:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 100224a:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
 100224e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 1002252:	7e61      	ldrb	r1, [r4, #25]
 1002254:	6822      	ldr	r2, [r4, #0]
 1002256:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100225a:	2901      	cmp	r1, #1
 100225c:	4417      	add	r7, r2
 100225e:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 1002262:	6027      	str	r7, [r4, #0]
 1002264:	f000 8089 	beq.w	100237a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x20a>
 1002268:	2d20      	cmp	r5, #32
 100226a:	f000 8082 	beq.w	1002372 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x202>
 100226e:	f894 03bd 	ldrb.w	r0, [r4, #957]	; 0x3bd
 1002272:	f001 fbef 	bl	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1002276:	2000      	movs	r0, #0
 1002278:	b005      	add	sp, #20
 100227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100227e:	2001      	movs	r0, #1
 1002280:	b005      	add	sp, #20
 1002282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1002286:	68e0      	ldr	r0, [r4, #12]
 1002288:	f000 f89e 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 100228c:	8ae3      	ldrh	r3, [r4, #22]
 100228e:	7d22      	ldrb	r2, [r4, #20]
 1002290:	4540      	cmp	r0, r8
 1002292:	f103 0301 	add.w	r3, r3, #1
 1002296:	4413      	add	r3, r2
 1002298:	4403      	add	r3, r0
 100229a:	f200 8082 	bhi.w	10023a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x232>
 100229e:	4543      	cmp	r3, r8
 10022a0:	dc23      	bgt.n	10022ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17a>
 10022a2:	2b00      	cmp	r3, #0
 10022a4:	da03      	bge.n	10022ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
 10022a6:	f103 53f4 	add.w	r3, r3, #511705088	; 0x1e800000
 10022aa:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 10022ae:	4618      	mov	r0, r3
 10022b0:	f000 f8c2 	bl	1002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10022b4:	f859 300b 	ldr.w	r3, [r9, fp]
 10022b8:	1a18      	subs	r0, r3, r0
 10022ba:	0200      	lsls	r0, r0, #8
 10022bc:	f5b0 5f4c 	cmp.w	r0, #13056	; 0x3300
 10022c0:	daad      	bge.n	100221e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xae>
 10022c2:	7e22      	ldrb	r2, [r4, #24]
 10022c4:	442e      	add	r6, r5
 10022c6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 10022ca:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
 10022ce:	4293      	cmp	r3, r2
 10022d0:	d910      	bls.n	10022f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x184>
 10022d2:	eb05 134a 	add.w	r3, r5, sl, lsl #5
 10022d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10022da:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 10022de:	2920      	cmp	r1, #32
 10022e0:	d00e      	beq.n	1002300 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x190>
 10022e2:	9500      	str	r5, [sp, #0]
 10022e4:	460d      	mov	r5, r1
 10022e6:	6920      	ldr	r0, [r4, #16]
 10022e8:	e786      	b.n	10021f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x88>
 10022ea:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 10022ee:	f503 03f7 	add.w	r3, r3, #8093696	; 0x7b8000
 10022f2:	e7dc      	b.n	10022ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
 10022f4:	9b01      	ldr	r3, [sp, #4]
 10022f6:	2002      	movs	r0, #2
 10022f8:	6123      	str	r3, [r4, #16]
 10022fa:	b005      	add	sp, #20
 10022fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1002300:	2005      	movs	r0, #5
 1002302:	f000 fb89 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002306:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 100230a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100230e:	b2db      	uxtb	r3, r3
 1002310:	60a2      	str	r2, [r4, #8]
 1002312:	015e      	lsls	r6, r3, #5
 1002314:	f103 0108 	add.w	r1, r3, #8
 1002318:	f04f 0c05 	mov.w	ip, #5
 100231c:	1973      	adds	r3, r6, r5
 100231e:	f814 e021 	ldrb.w	lr, [r4, r1, lsl #2]
 1002322:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1002326:	4672      	mov	r2, lr
 1002328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 100232c:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 1002330:	e000      	b.n	1002334 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
 1002332:	4602      	mov	r2, r0
 1002334:	18b3      	adds	r3, r6, r2
 1002336:	4295      	cmp	r5, r2
 1002338:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100233c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
 1002340:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 1002344:	d1f5      	bne.n	1002332 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c2>
 1002346:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 100234a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 100234e:	b2db      	uxtb	r3, r3
 1002350:	2b20      	cmp	r3, #32
 1002352:	d019      	beq.n	1002388 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x218>
 1002354:	4433      	add	r3, r6
 1002356:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 100235a:	f883 e035 	strb.w	lr, [r3, #53]	; 0x35
 100235e:	4416      	add	r6, r2
 1002360:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 1002364:	2120      	movs	r1, #32
 1002366:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 100236a:	709a      	strb	r2, [r3, #2]
 100236c:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
 1002370:	e766      	b.n	1002240 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd0>
 1002372:	2000      	movs	r0, #0
 1002374:	b005      	add	sp, #20
 1002376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100237a:	6920      	ldr	r0, [r4, #16]
 100237c:	3801      	subs	r0, #1
 100237e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002382:	f000 f997 	bl	10026b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
 1002386:	e76f      	b.n	1002268 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf8>
 1002388:	f88c e001 	strb.w	lr, [ip, #1]
 100238c:	e7e7      	b.n	100235e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ee>
 100238e:	2005      	movs	r0, #5
 1002390:	f000 fb42 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1002398:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 100239c:	60a2      	str	r2, [r4, #8]
 100239e:	b2db      	uxtb	r3, r3
 10023a0:	e74a      	b.n	1002238 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc8>
 10023a2:	f240 6116 	movw	r1, #1558	; 0x616
 10023a6:	2070      	movs	r0, #112	; 0x70
 10023a8:	f001 fabe 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10023ac:	f640 3173 	movw	r1, #2931	; 0xb73
 10023b0:	2070      	movs	r0, #112	; 0x70
 10023b2:	f001 fab9 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10023b6:	9d00      	ldr	r5, [sp, #0]
 10023b8:	e7ab      	b.n	1002312 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a2>
 10023ba:	bf00      	nop
 10023bc:	210002a0 	.word	0x210002a0
 10023c0:	07a11f8c 	.word	0x07a11f8c
 10023c4:	1e847fff 	.word	0x1e847fff

010023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
 10023c8:	f643 5209 	movw	r2, #15625	; 0x3d09
 10023cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 10023d0:	0a40      	lsrs	r0, r0, #9
 10023d2:	fb02 f303 	mul.w	r3, r2, r3
 10023d6:	fb02 f000 	mul.w	r0, r2, r0
 10023da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 10023de:	eb00 2053 	add.w	r0, r0, r3, lsr #9
 10023e2:	4770      	bx	lr

010023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
 10023e4:	b470      	push	{r4, r5, r6}
 10023e6:	0b46      	lsrs	r6, r0, #13
 10023e8:	f248 6437 	movw	r4, #34359	; 0x8637
 10023ec:	f643 5509 	movw	r5, #15625	; 0x3d09
 10023f0:	4b10      	ldr	r3, [pc, #64]	; (1002434 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x50>)
 10023f2:	fb04 f406 	mul.w	r4, r4, r6
 10023f6:	f643 5608 	movw	r6, #15624	; 0x3d08
 10023fa:	0c24      	lsrs	r4, r4, #16
 10023fc:	fb05 0014 	mls	r0, r5, r4, r0
 1002400:	fb03 f300 	mul.w	r3, r3, r0
 1002404:	0d5b      	lsrs	r3, r3, #21
 1002406:	fb05 f503 	mul.w	r5, r5, r3
 100240a:	eb03 2344 	add.w	r3, r3, r4, lsl #9
 100240e:	442e      	add	r6, r5
 1002410:	ebb0 2f56 	cmp.w	r0, r6, lsr #9
 1002414:	d808      	bhi.n	1002428 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x44>
 1002416:	f505 7580 	add.w	r5, r5, #256	; 0x100
 100241a:	600b      	str	r3, [r1, #0]
 100241c:	eba0 2055 	sub.w	r0, r0, r5, lsr #9
 1002420:	b2c0      	uxtb	r0, r0
 1002422:	bc70      	pop	{r4, r5, r6}
 1002424:	7010      	strb	r0, [r2, #0]
 1002426:	4770      	bx	lr
 1002428:	3301      	adds	r3, #1
 100242a:	2000      	movs	r0, #0
 100242c:	600b      	str	r3, [r1, #0]
 100242e:	7010      	strb	r0, [r2, #0]
 1002430:	bc70      	pop	{r4, r5, r6}
 1002432:	4770      	bx	lr
 1002434:	00010c6f 	.word	0x00010c6f

01002438 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
 1002438:	0b41      	lsrs	r1, r0, #13
 100243a:	f248 6237 	movw	r2, #34359	; 0x8637
 100243e:	4b0b      	ldr	r3, [pc, #44]	; (100246c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
 1002440:	fb02 f201 	mul.w	r2, r2, r1
 1002444:	b410      	push	{r4}
 1002446:	0c12      	lsrs	r2, r2, #16
 1002448:	f643 5409 	movw	r4, #15625	; 0x3d09
 100244c:	fb04 0112 	mls	r1, r4, r2, r0
 1002450:	0250      	lsls	r0, r2, #9
 1002452:	fb01 3303 	mla	r3, r1, r3, r3
 1002456:	3b01      	subs	r3, #1
 1002458:	0d5b      	lsrs	r3, r3, #21
 100245a:	fb04 f403 	mul.w	r4, r4, r3
 100245e:	ebb1 2f54 	cmp.w	r1, r4, lsr #9
 1002462:	bc10      	pop	{r4}
 1002464:	bf88      	it	hi
 1002466:	3001      	addhi	r0, #1
 1002468:	4418      	add	r0, r3
 100246a:	4770      	bx	lr
 100246c:	00010c6f 	.word	0x00010c6f

01002470 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
 1002470:	b430      	push	{r4, r5}
 1002472:	2104      	movs	r1, #4
 1002474:	4c2b      	ldr	r4, [pc, #172]	; (1002524 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xb4>)
 1002476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 100247a:	2200      	movs	r2, #0
 100247c:	482a      	ldr	r0, [pc, #168]	; (1002528 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xb8>)
 100247e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 1002482:	70a1      	strb	r1, [r4, #2]
 1002484:	6063      	str	r3, [r4, #4]
 1002486:	7022      	strb	r2, [r4, #0]
 1002488:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 100248c:	f3bf 8f4f 	dsb	sy
 1002490:	f3bf 8f6f 	isb	sy
 1002494:	4b25      	ldr	r3, [pc, #148]	; (100252c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xbc>)
 1002496:	2101      	movs	r1, #1
 1002498:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
 100249c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 10024a0:	7222      	strb	r2, [r4, #8]
 10024a2:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 10024a6:	6059      	str	r1, [r3, #4]
 10024a8:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
 10024ac:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 10024b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 10024b4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10024b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10024bc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 10024c0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 10024c4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 10024c8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 10024cc:	6119      	str	r1, [r3, #16]
 10024ce:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 10024d2:	f3bf 8f4f 	dsb	sy
 10024d6:	f3bf 8f6f 	isb	sy
 10024da:	4a15      	ldr	r2, [pc, #84]	; (1002530 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xc0>)
 10024dc:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
 10024e0:	4613      	mov	r3, r2
 10024e2:	6051      	str	r1, [r2, #4]
 10024e4:	6091      	str	r1, [r2, #8]
 10024e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 10024ea:	2a00      	cmp	r2, #0
 10024ec:	d1fb      	bne.n	10024e6 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x76>
 10024ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 10024f2:	4c0d      	ldr	r4, [pc, #52]	; (1002528 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xb8>)
 10024f4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 10024f8:	2001      	movs	r0, #1
 10024fa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 10024fe:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 1002502:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002506:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 100250a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 100250e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002512:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1002516:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 100251a:	6025      	str	r5, [r4, #0]
 100251c:	6018      	str	r0, [r3, #0]
 100251e:	bc30      	pop	{r4, r5}
 1002520:	4770      	bx	lr
 1002522:	bf00      	nop
 1002524:	21000660 	.word	0x21000660
 1002528:	e000e100 	.word	0xe000e100
 100252c:	4100c000 	.word	0x4100c000
 1002530:	41011000 	.word	0x41011000

01002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
 1002534:	4956      	ldr	r1, [pc, #344]	; (1002690 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x15c>)
 1002536:	780a      	ldrb	r2, [r1, #0]
 1002538:	2a01      	cmp	r2, #1
 100253a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100253c:	d120      	bne.n	1002580 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x4c>
 100253e:	684b      	ldr	r3, [r1, #4]
 1002540:	4283      	cmp	r3, r0
 1002542:	f000 809a 	beq.w	100267a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x146>
 1002546:	4d53      	ldr	r5, [pc, #332]	; (1002694 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x160>)
 1002548:	2606      	movs	r6, #6
 100254a:	4b53      	ldr	r3, [pc, #332]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 100254c:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
 1002550:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
 1002554:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
 1002558:	4b4f      	ldr	r3, [pc, #316]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 100255a:	2400      	movs	r4, #0
 100255c:	f46f 25a0 	mvn.w	r5, #327680	; 0x50000
 1002560:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
 1002564:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
 1002568:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
 100256c:	4b4a      	ldr	r3, [pc, #296]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 100256e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 1002572:	b9fb      	cbnz	r3, 10025b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x80>
 1002574:	4b49      	ldr	r3, [pc, #292]	; (100269c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x168>)
 1002576:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 100257a:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
 100257e:	e019      	b.n	10025b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x80>
 1002580:	4d44      	ldr	r5, [pc, #272]	; (1002694 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x160>)
 1002582:	2606      	movs	r6, #6
 1002584:	4b44      	ldr	r3, [pc, #272]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 1002586:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
 100258a:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
 100258e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
 1002592:	2a00      	cmp	r2, #0
 1002594:	d1e0      	bne.n	1002558 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x24>
 1002596:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
 100259a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 100259e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 10025a2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10025a6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10025aa:	4b3b      	ldr	r3, [pc, #236]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 10025ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 10025b0:	2b00      	cmp	r3, #0
 10025b2:	d0df      	beq.n	1002574 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x40>
 10025b4:	4b38      	ldr	r3, [pc, #224]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 10025b6:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 10025ba:	2400      	movs	r4, #0
 10025bc:	4d38      	ldr	r5, [pc, #224]	; (10026a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x16c>)
 10025be:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
 10025c2:	f8c3 6348 	str.w	r6, [r3, #840]	; 0x348
 10025c6:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
 10025ca:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
 10025ce:	1b04      	subs	r4, r0, r4
 10025d0:	422c      	tst	r4, r5
 10025d2:	d053      	beq.n	100267c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>
 10025d4:	f414 0f40 	tst.w	r4, #12582912	; 0xc00000
 10025d8:	d150      	bne.n	100267c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>
 10025da:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
 10025de:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
 10025e2:	b12a      	cbz	r2, 10025f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xbc>
 10025e4:	684c      	ldr	r4, [r1, #4]
 10025e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 10025ea:	1aa2      	subs	r2, r4, r2
 10025ec:	422a      	tst	r2, r5
 10025ee:	d0fa      	beq.n	10025e6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xb2>
 10025f0:	2200      	movs	r2, #0
 10025f2:	2601      	movs	r6, #1
 10025f4:	4c29      	ldr	r4, [pc, #164]	; (100269c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x168>)
 10025f6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 10025fa:	708a      	strb	r2, [r1, #2]
 10025fc:	60ce      	str	r6, [r1, #12]
 10025fe:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 1002602:	f3bf 8f4f 	dsb	sy
 1002606:	f3bf 8f6f 	isb	sy
 100260a:	4b26      	ldr	r3, [pc, #152]	; (10026a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x170>)
 100260c:	f04f 0c02 	mov.w	ip, #2
 1002610:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 1002614:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 1002618:	2704      	movs	r7, #4
 100261a:	720a      	strb	r2, [r1, #8]
 100261c:	6048      	str	r0, [r1, #4]
 100261e:	f240 4001 	movw	r0, #1025	; 0x401
 1002622:	605e      	str	r6, [r3, #4]
 1002624:	f8c3 e308 	str.w	lr, [r3, #776]	; 0x308
 1002628:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 100262c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002630:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002634:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002638:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 100263c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002640:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002644:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002648:	611e      	str	r6, [r3, #16]
 100264a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 100264e:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
 1002652:	68ca      	ldr	r2, [r1, #12]
 1002654:	f8df c058 	ldr.w	ip, [pc, #88]	; 10026b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x17c>
 1002658:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
 100265c:	60de      	str	r6, [r3, #12]
 100265e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 1002662:	4e11      	ldr	r6, [pc, #68]	; (10026a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x174>)
 1002664:	4b11      	ldr	r3, [pc, #68]	; (10026ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x178>)
 1002666:	4a0b      	ldr	r2, [pc, #44]	; (1002694 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x160>)
 1002668:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 100266c:	6025      	str	r5, [r4, #0]
 100266e:	f8cc 3000 	str.w	r3, [ip]
 1002672:	6033      	str	r3, [r6, #0]
 1002674:	f8c2 7504 	str.w	r7, [r2, #1284]	; 0x504
 1002678:	8008      	strh	r0, [r1, #0]
 100267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100267c:	4b06      	ldr	r3, [pc, #24]	; (1002698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
 100267e:	2200      	movs	r2, #0
 1002680:	f240 11ef 	movw	r1, #495	; 0x1ef
 1002684:	206c      	movs	r0, #108	; 0x6c
 1002686:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 100268a:	f001 f94d 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100268e:	bf00      	nop
 1002690:	21000660 	.word	0x21000660
 1002694:	4100f000 	.word	0x4100f000
 1002698:	41011000 	.word	0x41011000
 100269c:	e000e100 	.word	0xe000e100
 10026a0:	00fffffe 	.word	0x00fffffe
 10026a4:	4100c000 	.word	0x4100c000
 10026a8:	4100c080 	.word	0x4100c080
 10026ac:	80000002 	.word	0x80000002
 10026b0:	410111c0 	.word	0x410111c0

010026b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
 10026b4:	4a28      	ldr	r2, [pc, #160]	; (1002758 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa4>)
 10026b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10026b8:	7817      	ldrb	r7, [r2, #0]
 10026ba:	6856      	ldr	r6, [r2, #4]
 10026bc:	2f02      	cmp	r7, #2
 10026be:	d03d      	beq.n	100273c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
 10026c0:	4286      	cmp	r6, r0
 10026c2:	d043      	beq.n	100274c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
 10026c4:	7a13      	ldrb	r3, [r2, #8]
 10026c6:	2b00      	cmp	r3, #0
 10026c8:	d03b      	beq.n	1002742 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
 10026ca:	4b24      	ldr	r3, [pc, #144]	; (100275c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa8>)
 10026cc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 10026d0:	4c23      	ldr	r4, [pc, #140]	; (1002760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
 10026d2:	2100      	movs	r1, #0
 10026d4:	f04f 0c02 	mov.w	ip, #2
 10026d8:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
 10026dc:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
 10026e0:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
 10026e4:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
 10026e8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
 10026ec:	4c1d      	ldr	r4, [pc, #116]	; (1002764 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>)
 10026ee:	1a41      	subs	r1, r0, r1
 10026f0:	4221      	tst	r1, r4
 10026f2:	d002      	beq.n	10026fa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x46>
 10026f4:	f411 0f40 	tst.w	r1, #12582912	; 0xc00000
 10026f8:	d008      	beq.n	100270c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x58>
 10026fa:	4b18      	ldr	r3, [pc, #96]	; (100275c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa8>)
 10026fc:	2200      	movs	r2, #0
 10026fe:	f240 210d 	movw	r1, #525	; 0x20d
 1002702:	206c      	movs	r0, #108	; 0x6c
 1002704:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002708:	f001 f90e 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100270c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
 1002710:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
 1002714:	b127      	cbz	r7, 1002720 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
 1002716:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
 100271a:	1a71      	subs	r1, r6, r1
 100271c:	4221      	tst	r1, r4
 100271e:	d0fa      	beq.n	1002716 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x62>
 1002720:	6050      	str	r0, [r2, #4]
 1002722:	2402      	movs	r4, #2
 1002724:	4b10      	ldr	r3, [pc, #64]	; (1002768 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
 1002726:	f240 4102 	movw	r1, #1026	; 0x402
 100272a:	4e10      	ldr	r6, [pc, #64]	; (100276c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
 100272c:	4d10      	ldr	r5, [pc, #64]	; (1002770 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
 100272e:	480c      	ldr	r0, [pc, #48]	; (1002760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
 1002730:	6033      	str	r3, [r6, #0]
 1002732:	602b      	str	r3, [r5, #0]
 1002734:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
 1002738:	8011      	strh	r1, [r2, #0]
 100273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100273c:	4286      	cmp	r6, r0
 100273e:	d1c1      	bne.n	10026c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x10>
 1002740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002742:	f240 2101 	movw	r1, #513	; 0x201
 1002746:	206c      	movs	r0, #108	; 0x6c
 1002748:	f001 f8ee 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100274c:	f240 11fd 	movw	r1, #509	; 0x1fd
 1002750:	206c      	movs	r0, #108	; 0x6c
 1002752:	f001 f8e9 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002756:	bf00      	nop
 1002758:	21000660 	.word	0x21000660
 100275c:	41011000 	.word	0x41011000
 1002760:	4100f000 	.word	0x4100f000
 1002764:	00fffffe 	.word	0x00fffffe
 1002768:	80000001 	.word	0x80000001
 100276c:	410111c0 	.word	0x410111c0
 1002770:	4100c08c 	.word	0x4100c08c

01002774 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
 1002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002776:	4c3d      	ldr	r4, [pc, #244]	; (100286c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
 1002778:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 100277c:	4b3c      	ldr	r3, [pc, #240]	; (1002870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>)
 100277e:	7822      	ldrb	r2, [r4, #0]
 1002780:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002784:	2a00      	cmp	r2, #0
 1002786:	d15d      	bne.n	1002844 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
 1002788:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 100278c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002790:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002794:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002798:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 100279c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 10027a0:	2b00      	cmp	r3, #0
 10027a2:	d15d      	bne.n	1002860 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>
 10027a4:	4b33      	ldr	r3, [pc, #204]	; (1002874 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
 10027a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 10027aa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 10027ae:	2a02      	cmp	r2, #2
 10027b0:	d156      	bne.n	1002860 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>
 10027b2:	4b2f      	ldr	r3, [pc, #188]	; (1002870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>)
 10027b4:	6862      	ldr	r2, [r4, #4]
 10027b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 10027ba:	3003      	adds	r0, #3
 10027bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 10027c0:	4282      	cmp	r2, r0
 10027c2:	d00f      	beq.n	10027e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x70>
 10027c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 10027c8:	492b      	ldr	r1, [pc, #172]	; (1002878 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
 10027ca:	1ad3      	subs	r3, r2, r3
 10027cc:	4019      	ands	r1, r3
 10027ce:	b149      	cbz	r1, 10027e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x70>
 10027d0:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 10027d4:	d106      	bne.n	10027e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x70>
 10027d6:	f7ff fead 	bl	1002534 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 10027da:	68e2      	ldr	r2, [r4, #12]
 10027dc:	4b27      	ldr	r3, [pc, #156]	; (100287c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
 10027de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 10027e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10027e4:	4b22      	ldr	r3, [pc, #136]	; (1002870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>)
 10027e6:	4926      	ldr	r1, [pc, #152]	; (1002880 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
 10027e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 10027ec:	1ad3      	subs	r3, r2, r3
 10027ee:	4019      	ands	r1, r3
 10027f0:	b111      	cbz	r1, 10027f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x84>
 10027f2:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 10027f6:	d008      	beq.n	100280a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
 10027f8:	2301      	movs	r3, #1
 10027fa:	2100      	movs	r1, #0
 10027fc:	461a      	mov	r2, r3
 10027fe:	60e3      	str	r3, [r4, #12]
 1002800:	4b1e      	ldr	r3, [pc, #120]	; (100287c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
 1002802:	70a1      	strb	r1, [r4, #2]
 1002804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 1002808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100280a:	2101      	movs	r1, #1
 100280c:	4d1b      	ldr	r5, [pc, #108]	; (100287c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
 100280e:	481d      	ldr	r0, [pc, #116]	; (1002884 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
 1002810:	2602      	movs	r6, #2
 1002812:	6062      	str	r2, [r4, #4]
 1002814:	460a      	mov	r2, r1
 1002816:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
 100281a:	2704      	movs	r7, #4
 100281c:	70a3      	strb	r3, [r4, #2]
 100281e:	f240 4601 	movw	r6, #1025	; 0x401
 1002822:	60e1      	str	r1, [r4, #12]
 1002824:	6069      	str	r1, [r5, #4]
 1002826:	60e9      	str	r1, [r5, #12]
 1002828:	f505 45a3 	add.w	r5, r5, #20864	; 0x5180
 100282c:	4b16      	ldr	r3, [pc, #88]	; (1002888 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x114>)
 100282e:	3540      	adds	r5, #64	; 0x40
 1002830:	4916      	ldr	r1, [pc, #88]	; (100288c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x118>)
 1002832:	602b      	str	r3, [r5, #0]
 1002834:	600b      	str	r3, [r1, #0]
 1002836:	4b11      	ldr	r3, [pc, #68]	; (100287c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
 1002838:	f8c0 7504 	str.w	r7, [r0, #1284]	; 0x504
 100283c:	8026      	strh	r6, [r4, #0]
 100283e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 1002842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002844:	2100      	movs	r1, #0
 1002846:	f46f 20a0 	mvn.w	r0, #327680	; 0x50000
 100284a:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
 100284e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
 1002852:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
 1002856:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 100285a:	2b00      	cmp	r3, #0
 100285c:	d1a7      	bne.n	10027ae <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3a>
 100285e:	e7a1      	b.n	10027a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x30>
 1002860:	f240 2119 	movw	r1, #537	; 0x219
 1002864:	206c      	movs	r0, #108	; 0x6c
 1002866:	f001 f85f 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100286a:	bf00      	nop
 100286c:	21000660 	.word	0x21000660
 1002870:	41011000 	.word	0x41011000
 1002874:	e000e100 	.word	0xe000e100
 1002878:	00fffffc 	.word	0x00fffffc
 100287c:	4100c000 	.word	0x4100c000
 1002880:	00fffffe 	.word	0x00fffffe
 1002884:	4100f000 	.word	0x4100f000
 1002888:	80000002 	.word	0x80000002
 100288c:	4100c080 	.word	0x4100c080

01002890 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
 1002890:	4b01      	ldr	r3, [pc, #4]	; (1002898 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
 1002892:	6858      	ldr	r0, [r3, #4]
 1002894:	4770      	bx	lr
 1002896:	bf00      	nop
 1002898:	21000660 	.word	0x21000660

0100289c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
 100289c:	4b01      	ldr	r3, [pc, #4]	; (10028a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
 100289e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 10028a2:	4770      	bx	lr
 10028a4:	41011000 	.word	0x41011000

010028a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
 10028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10028aa:	4604      	mov	r4, r0
 10028ac:	2c06      	cmp	r4, #6
 10028ae:	f200 808b 	bhi.w	10029c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
 10028b2:	e8df f004 	tbb	[pc, r4]
 10028b6:	2929      	.short	0x2929
 10028b8:	04042929 	.word	0x04042929
 10028bc:	04          	.byte	0x04
 10028bd:	00          	.byte	0x00
 10028be:	4845      	ldr	r0, [pc, #276]	; (10029d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12c>)
 10028c0:	7805      	ldrb	r5, [r0, #0]
 10028c2:	b115      	cbz	r5, 10028ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x22>
 10028c4:	7840      	ldrb	r0, [r0, #1]
 10028c6:	42a0      	cmp	r0, r4
 10028c8:	d079      	beq.n	10029be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
 10028ca:	3c04      	subs	r4, #4
 10028cc:	4842      	ldr	r0, [pc, #264]	; (10029d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x130>)
 10028ce:	2501      	movs	r5, #1
 10028d0:	2600      	movs	r6, #0
 10028d2:	b2e4      	uxtb	r4, r4
 10028d4:	f104 0710 	add.w	r7, r4, #16
 10028d8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 10028dc:	40bd      	lsls	r5, r7
 10028de:	f8c0 5308 	str.w	r5, [r0, #776]	; 0x308
 10028e2:	f8c0 5348 	str.w	r5, [r0, #840]	; 0x348
 10028e6:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 10028ea:	b3a2      	cbz	r2, 1002956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xae>
 10028ec:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
 10028f0:	1a08      	subs	r0, r1, r0
 10028f2:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
 10028f6:	42b2      	cmp	r2, r6
 10028f8:	d802      	bhi.n	1002900 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x58>
 10028fa:	f410 0f40 	tst.w	r0, #12582912	; 0xc00000
 10028fe:	d02a      	beq.n	1002956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xae>
 1002900:	2000      	movs	r0, #0
 1002902:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
 1002906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002908:	4832      	ldr	r0, [pc, #200]	; (10029d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12c>)
 100290a:	6845      	ldr	r5, [r0, #4]
 100290c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 1002910:	d03a      	beq.n	1002988 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
 1002912:	7805      	ldrb	r5, [r0, #0]
 1002914:	2d02      	cmp	r5, #2
 1002916:	d03f      	beq.n	1002998 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
 1002918:	f104 0510 	add.w	r5, r4, #16
 100291c:	2001      	movs	r0, #1
 100291e:	4e2f      	ldr	r6, [pc, #188]	; (10029dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x134>)
 1002920:	fa00 f505 	lsl.w	r5, r0, r5
 1002924:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
 1002928:	b30a      	cbz	r2, 100296e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xc6>
 100292a:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 100292e:	6438      	str	r0, [r7, #64]	; 0x40
 1002930:	f8d7 0540 	ldr.w	r0, [r7, #1344]	; 0x540
 1002934:	1a08      	subs	r0, r1, r0
 1002936:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
 100293a:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
 100293e:	42ba      	cmp	r2, r7
 1002940:	bf98      	it	ls
 1002942:	2800      	cmpls	r0, #0
 1002944:	bf0c      	ite	eq
 1002946:	2001      	moveq	r0, #1
 1002948:	2000      	movne	r0, #0
 100294a:	d010      	beq.n	100296e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xc6>
 100294c:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 1002950:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 1002954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002956:	2b01      	cmp	r3, #1
 1002958:	f8c4 1540 	str.w	r1, [r4, #1344]	; 0x540
 100295c:	d102      	bne.n	1002964 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xbc>
 100295e:	4b1e      	ldr	r3, [pc, #120]	; (10029d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x130>)
 1002960:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
 1002964:	4b1c      	ldr	r3, [pc, #112]	; (10029d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x130>)
 1002966:	2001      	movs	r0, #1
 1002968:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
 100296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100296e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 1002972:	4a1a      	ldr	r2, [pc, #104]	; (10029dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x134>)
 1002974:	2b01      	cmp	r3, #1
 1002976:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 100297a:	d001      	beq.n	1002980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xd8>
 100297c:	2001      	movs	r0, #1
 100297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002980:	f8c2 5304 	str.w	r5, [r2, #772]	; 0x304
 1002984:	4618      	mov	r0, r3
 1002986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002988:	7a05      	ldrb	r5, [r0, #8]
 100298a:	2d00      	cmp	r5, #0
 100298c:	d1c1      	bne.n	1002912 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
 100298e:	f44f 7113 	mov.w	r1, #588	; 0x24c
 1002992:	206c      	movs	r0, #108	; 0x6c
 1002994:	f000 ffc8 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002998:	7840      	ldrb	r0, [r0, #1]
 100299a:	1f05      	subs	r5, r0, #4
 100299c:	2803      	cmp	r0, #3
 100299e:	b2ed      	uxtb	r5, r5
 10029a0:	d906      	bls.n	10029b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
 10029a2:	3550      	adds	r5, #80	; 0x50
 10029a4:	4e0c      	ldr	r6, [pc, #48]	; (10029d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x130>)
 10029a6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 10029aa:	2800      	cmp	r0, #0
 10029ac:	d1b4      	bne.n	1002918 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
 10029ae:	e7fa      	b.n	10029a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xfe>
 10029b0:	3050      	adds	r0, #80	; 0x50
 10029b2:	4e0a      	ldr	r6, [pc, #40]	; (10029dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x134>)
 10029b4:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 10029b8:	2d00      	cmp	r5, #0
 10029ba:	d0fb      	beq.n	10029b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x10c>
 10029bc:	e7ac      	b.n	1002918 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
 10029be:	f240 216f 	movw	r1, #623	; 0x26f
 10029c2:	206c      	movs	r0, #108	; 0x6c
 10029c4:	f000 ffb0 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10029c8:	f44f 711d 	mov.w	r1, #628	; 0x274
 10029cc:	206c      	movs	r0, #108	; 0x6c
 10029ce:	f000 ffab 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10029d2:	bf00      	nop
 10029d4:	21000660 	.word	0x21000660
 10029d8:	41011000 	.word	0x41011000
 10029dc:	4100c000 	.word	0x4100c000

010029e0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
 10029e0:	b508      	push	{r3, lr}
 10029e2:	2806      	cmp	r0, #6
 10029e4:	d80f      	bhi.n	1002a06 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x26>
 10029e6:	e8df f000 	tbb	[pc, r0]
 10029ea:	0a0a      	.short	0x0a0a
 10029ec:	04040a0a 	.word	0x04040a0a
 10029f0:	04          	.byte	0x04
 10029f1:	00          	.byte	0x00
 10029f2:	3804      	subs	r0, #4
 10029f4:	4b06      	ldr	r3, [pc, #24]	; (1002a10 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
 10029f6:	b2c0      	uxtb	r0, r0
 10029f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 10029fc:	bd08      	pop	{r3, pc}
 10029fe:	4b05      	ldr	r3, [pc, #20]	; (1002a14 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x34>)
 1002a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 1002a04:	bd08      	pop	{r3, pc}
 1002a06:	f44f 7126 	mov.w	r1, #664	; 0x298
 1002a0a:	206c      	movs	r0, #108	; 0x6c
 1002a0c:	f000 ff8c 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002a10:	410111c0 	.word	0x410111c0
 1002a14:	4100c1c0 	.word	0x4100c1c0

01002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
 1002a18:	b570      	push	{r4, r5, r6, lr}
 1002a1a:	b082      	sub	sp, #8
 1002a1c:	2806      	cmp	r0, #6
 1002a1e:	d873      	bhi.n	1002b08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xf0>
 1002a20:	e8df f000 	tbb	[pc, r0]
 1002a24:	2b2b2b2b 	.word	0x2b2b2b2b
 1002a28:	0404      	.short	0x0404
 1002a2a:	04          	.byte	0x04
 1002a2b:	00          	.byte	0x00
 1002a2c:	4a39      	ldr	r2, [pc, #228]	; (1002b14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xfc>)
 1002a2e:	1f03      	subs	r3, r0, #4
 1002a30:	7811      	ldrb	r1, [r2, #0]
 1002a32:	b2db      	uxtb	r3, r3
 1002a34:	b111      	cbz	r1, 1002a3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x24>
 1002a36:	7854      	ldrb	r4, [r2, #1]
 1002a38:	4284      	cmp	r4, r0
 1002a3a:	d033      	beq.n	1002aa4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x8c>
 1002a3c:	4a36      	ldr	r2, [pc, #216]	; (1002b18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x100>)
 1002a3e:	f103 0010 	add.w	r0, r3, #16
 1002a42:	2101      	movs	r1, #1
 1002a44:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 1002a48:	4081      	lsls	r1, r0
 1002a4a:	4834      	ldr	r0, [pc, #208]	; (1002b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x104>)
 1002a4c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
 1002a50:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
 1002a54:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
 1002a58:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
 1002a5c:	1a8a      	subs	r2, r1, r2
 1002a5e:	4010      	ands	r0, r2
 1002a60:	b120      	cbz	r0, 1002a6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x54>
 1002a62:	2200      	movs	r2, #0
 1002a64:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
 1002a68:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
 1002a6c:	4a2c      	ldr	r2, [pc, #176]	; (1002b20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x108>)
 1002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1002a72:	9301      	str	r3, [sp, #4]
 1002a74:	9b01      	ldr	r3, [sp, #4]
 1002a76:	b002      	add	sp, #8
 1002a78:	bd70      	pop	{r4, r5, r6, pc}
 1002a7a:	f100 0210 	add.w	r2, r0, #16
 1002a7e:	4c29      	ldr	r4, [pc, #164]	; (1002b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x10c>)
 1002a80:	2301      	movs	r3, #1
 1002a82:	2100      	movs	r1, #0
 1002a84:	4d28      	ldr	r5, [pc, #160]	; (1002b28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x110>)
 1002a86:	4093      	lsls	r3, r2
 1002a88:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 1002a8c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 1002a90:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
 1002a94:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
 1002a98:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 1002a9c:	9300      	str	r3, [sp, #0]
 1002a9e:	9b00      	ldr	r3, [sp, #0]
 1002aa0:	b002      	add	sp, #8
 1002aa2:	bd70      	pop	{r4, r5, r6, pc}
 1002aa4:	4821      	ldr	r0, [pc, #132]	; (1002b2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x114>)
 1002aa6:	2406      	movs	r4, #6
 1002aa8:	2901      	cmp	r1, #1
 1002aaa:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
 1002aae:	d005      	beq.n	1002abc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
 1002ab0:	2000      	movs	r0, #0
 1002ab2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 1002ab6:	7010      	strb	r0, [r2, #0]
 1002ab8:	6051      	str	r1, [r2, #4]
 1002aba:	e7bf      	b.n	1002a3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x24>
 1002abc:	4c1c      	ldr	r4, [pc, #112]	; (1002b30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x118>)
 1002abe:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 1002ac2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 1002ac6:	f3bf 8f4f 	dsb	sy
 1002aca:	f3bf 8f6f 	isb	sy
 1002ace:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 1002ad2:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 1002ad6:	f5a0 5040 	sub.w	r0, r0, #12288	; 0x3000
 1002ada:	2400      	movs	r4, #0
 1002adc:	6041      	str	r1, [r0, #4]
 1002ade:	7214      	strb	r4, [r2, #8]
 1002ae0:	f8c0 6308 	str.w	r6, [r0, #776]	; 0x308
 1002ae4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
 1002ae8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
 1002aec:	f8c0 4544 	str.w	r4, [r0, #1348]	; 0x544
 1002af0:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
 1002af4:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548
 1002af8:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
 1002afc:	f8c0 454c 	str.w	r4, [r0, #1356]	; 0x54c
 1002b00:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
 1002b04:	6101      	str	r1, [r0, #16]
 1002b06:	e7d3      	b.n	1002ab0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x98>
 1002b08:	f240 21ed 	movw	r1, #749	; 0x2ed
 1002b0c:	206c      	movs	r0, #108	; 0x6c
 1002b0e:	f000 ff0b 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002b12:	bf00      	nop
 1002b14:	21000660 	.word	0x21000660
 1002b18:	41011000 	.word	0x41011000
 1002b1c:	00fffffe 	.word	0x00fffffe
 1002b20:	41011140 	.word	0x41011140
 1002b24:	4100c000 	.word	0x4100c000
 1002b28:	4100c140 	.word	0x4100c140
 1002b2c:	4100f000 	.word	0x4100f000
 1002b30:	e000e100 	.word	0xe000e100

01002b34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
 1002b34:	4a20      	ldr	r2, [pc, #128]	; (1002bb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
 1002b36:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 1002b3a:	4b20      	ldr	r3, [pc, #128]	; (1002bbc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
 1002b3c:	7812      	ldrb	r2, [r2, #0]
 1002b3e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002b42:	bb22      	cbnz	r2, 1002b8e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5a>
 1002b44:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 1002b48:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002b4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002b50:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002b54:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002b58:	4b18      	ldr	r3, [pc, #96]	; (1002bbc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
 1002b5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 1002b5e:	b323      	cbz	r3, 1002baa <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x76>
 1002b60:	4b17      	ldr	r3, [pc, #92]	; (1002bc0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
 1002b62:	2200      	movs	r2, #0
 1002b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 1002b68:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002b6c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002b70:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002b74:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002b78:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002b7c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1002b80:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002b84:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002b88:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002b8c:	4770      	bx	lr
 1002b8e:	2200      	movs	r2, #0
 1002b90:	f46f 21a0 	mvn.w	r1, #327680	; 0x50000
 1002b94:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 1002b98:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002b9c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002ba0:	4b06      	ldr	r3, [pc, #24]	; (1002bbc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
 1002ba2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 1002ba6:	2b00      	cmp	r3, #0
 1002ba8:	d1da      	bne.n	1002b60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
 1002baa:	4b06      	ldr	r3, [pc, #24]	; (1002bc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
 1002bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 1002bb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1002bb4:	e7d4      	b.n	1002b60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
 1002bb6:	bf00      	nop
 1002bb8:	21000660 	.word	0x21000660
 1002bbc:	41011000 	.word	0x41011000
 1002bc0:	4100c000 	.word	0x4100c000
 1002bc4:	e000e100 	.word	0xe000e100

01002bc8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
 1002bc8:	4b07      	ldr	r3, [pc, #28]	; (1002be8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x20>)
 1002bca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 1002bce:	2b00      	cmp	r3, #0
 1002bd0:	db09      	blt.n	1002be6 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x1e>
 1002bd2:	095a      	lsrs	r2, r3, #5
 1002bd4:	2101      	movs	r1, #1
 1002bd6:	f003 031f 	and.w	r3, r3, #31
 1002bda:	4804      	ldr	r0, [pc, #16]	; (1002bec <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
 1002bdc:	3240      	adds	r2, #64	; 0x40
 1002bde:	fa01 f303 	lsl.w	r3, r1, r3
 1002be2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 1002be6:	4770      	bx	lr
 1002be8:	21000660 	.word	0x21000660
 1002bec:	e000e100 	.word	0xe000e100

01002bf0 <MPSL_IRQ_RTC0_Handler>:
 1002bf0:	4b37      	ldr	r3, [pc, #220]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002bf2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002bf6:	03d0      	lsls	r0, r2, #15
 1002bf8:	b510      	push	{r4, lr}
 1002bfa:	d502      	bpl.n	1002c02 <MPSL_IRQ_RTC0_Handler+0x12>
 1002bfc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 1002c00:	bb72      	cbnz	r2, 1002c60 <MPSL_IRQ_RTC0_Handler+0x70>
 1002c02:	4b33      	ldr	r3, [pc, #204]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002c04:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002c08:	0391      	lsls	r1, r2, #14
 1002c0a:	d503      	bpl.n	1002c14 <MPSL_IRQ_RTC0_Handler+0x24>
 1002c0c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 1002c10:	2a00      	cmp	r2, #0
 1002c12:	d141      	bne.n	1002c98 <MPSL_IRQ_RTC0_Handler+0xa8>
 1002c14:	4b2e      	ldr	r3, [pc, #184]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002c16:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002c1a:	0352      	lsls	r2, r2, #13
 1002c1c:	d502      	bpl.n	1002c24 <MPSL_IRQ_RTC0_Handler+0x34>
 1002c1e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 1002c22:	b902      	cbnz	r2, 1002c26 <MPSL_IRQ_RTC0_Handler+0x36>
 1002c24:	bd10      	pop	{r4, pc}
 1002c26:	4a2b      	ldr	r2, [pc, #172]	; (1002cd4 <MPSL_IRQ_RTC0_Handler+0xe4>)
 1002c28:	2400      	movs	r4, #0
 1002c2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002c2e:	492a      	ldr	r1, [pc, #168]	; (1002cd8 <MPSL_IRQ_RTC0_Handler+0xe8>)
 1002c30:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 1002c34:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 1002c38:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 1002c3c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002c40:	1ad3      	subs	r3, r2, r3
 1002c42:	4019      	ands	r1, r3
 1002c44:	b111      	cbz	r1, 1002c4c <MPSL_IRQ_RTC0_Handler+0x5c>
 1002c46:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 1002c4a:	d0eb      	beq.n	1002c24 <MPSL_IRQ_RTC0_Handler+0x34>
 1002c4c:	4b20      	ldr	r3, [pc, #128]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002c4e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 1002c52:	2006      	movs	r0, #6
 1002c54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1002c5c:	f7fe bfdc 	b.w	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002c60:	4a1c      	ldr	r2, [pc, #112]	; (1002cd4 <MPSL_IRQ_RTC0_Handler+0xe4>)
 1002c62:	2400      	movs	r4, #0
 1002c64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002c68:	491b      	ldr	r1, [pc, #108]	; (1002cd8 <MPSL_IRQ_RTC0_Handler+0xe8>)
 1002c6a:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
 1002c6e:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 1002c72:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
 1002c76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002c7a:	1ad3      	subs	r3, r2, r3
 1002c7c:	4019      	ands	r1, r3
 1002c7e:	b111      	cbz	r1, 1002c86 <MPSL_IRQ_RTC0_Handler+0x96>
 1002c80:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 1002c84:	d0bd      	beq.n	1002c02 <MPSL_IRQ_RTC0_Handler+0x12>
 1002c86:	4b12      	ldr	r3, [pc, #72]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002c88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1002c8c:	2004      	movs	r0, #4
 1002c8e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002c92:	f7fe ffc1 	bl	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002c96:	e7b4      	b.n	1002c02 <MPSL_IRQ_RTC0_Handler+0x12>
 1002c98:	4a0e      	ldr	r2, [pc, #56]	; (1002cd4 <MPSL_IRQ_RTC0_Handler+0xe4>)
 1002c9a:	2400      	movs	r4, #0
 1002c9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002ca0:	490d      	ldr	r1, [pc, #52]	; (1002cd8 <MPSL_IRQ_RTC0_Handler+0xe8>)
 1002ca2:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
 1002ca6:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 1002caa:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
 1002cae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002cb2:	1ad3      	subs	r3, r2, r3
 1002cb4:	4019      	ands	r1, r3
 1002cb6:	b111      	cbz	r1, 1002cbe <MPSL_IRQ_RTC0_Handler+0xce>
 1002cb8:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 1002cbc:	d0aa      	beq.n	1002c14 <MPSL_IRQ_RTC0_Handler+0x24>
 1002cbe:	4b04      	ldr	r3, [pc, #16]	; (1002cd0 <MPSL_IRQ_RTC0_Handler+0xe0>)
 1002cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 1002cc4:	2005      	movs	r0, #5
 1002cc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002cca:	f7fe ffa5 	bl	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002cce:	e7a1      	b.n	1002c14 <MPSL_IRQ_RTC0_Handler+0x24>
 1002cd0:	41011000 	.word	0x41011000
 1002cd4:	e000e100 	.word	0xe000e100
 1002cd8:	00fffffe 	.word	0x00fffffe

01002cdc <MPSL_IRQ_TIMER0_Handler>:
 1002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 1002cde:	4c59      	ldr	r4, [pc, #356]	; (1002e44 <MPSL_IRQ_TIMER0_Handler+0x168>)
 1002ce0:	b085      	sub	sp, #20
 1002ce2:	78a3      	ldrb	r3, [r4, #2]
 1002ce4:	2b04      	cmp	r3, #4
 1002ce6:	d032      	beq.n	1002d4e <MPSL_IRQ_TIMER0_Handler+0x72>
 1002ce8:	7823      	ldrb	r3, [r4, #0]
 1002cea:	b15b      	cbz	r3, 1002d04 <MPSL_IRQ_TIMER0_Handler+0x28>
 1002cec:	2b01      	cmp	r3, #1
 1002cee:	f000 80a2 	beq.w	1002e36 <MPSL_IRQ_TIMER0_Handler+0x15a>
 1002cf2:	7a23      	ldrb	r3, [r4, #8]
 1002cf4:	2b00      	cmp	r3, #0
 1002cf6:	f000 80a0 	beq.w	1002e3a <MPSL_IRQ_TIMER0_Handler+0x15e>
 1002cfa:	2302      	movs	r3, #2
 1002cfc:	7860      	ldrb	r0, [r4, #1]
 1002cfe:	7023      	strb	r3, [r4, #0]
 1002d00:	f7ff fe8a 	bl	1002a18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002d04:	4b50      	ldr	r3, [pc, #320]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002d06:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002d0a:	0315      	lsls	r5, r2, #12
 1002d0c:	d502      	bpl.n	1002d14 <MPSL_IRQ_TIMER0_Handler+0x38>
 1002d0e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 1002d12:	bb12      	cbnz	r2, 1002d5a <MPSL_IRQ_TIMER0_Handler+0x7e>
 1002d14:	4b4c      	ldr	r3, [pc, #304]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002d16:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002d1a:	0350      	lsls	r0, r2, #13
 1002d1c:	d503      	bpl.n	1002d26 <MPSL_IRQ_TIMER0_Handler+0x4a>
 1002d1e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 1002d22:	2a00      	cmp	r2, #0
 1002d24:	d134      	bne.n	1002d90 <MPSL_IRQ_TIMER0_Handler+0xb4>
 1002d26:	4b48      	ldr	r3, [pc, #288]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002d28:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002d2c:	0391      	lsls	r1, r2, #14
 1002d2e:	d503      	bpl.n	1002d38 <MPSL_IRQ_TIMER0_Handler+0x5c>
 1002d30:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 1002d34:	2a00      	cmp	r2, #0
 1002d36:	d146      	bne.n	1002dc6 <MPSL_IRQ_TIMER0_Handler+0xea>
 1002d38:	4b43      	ldr	r3, [pc, #268]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002d3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002d3e:	03d2      	lsls	r2, r2, #15
 1002d40:	d503      	bpl.n	1002d4a <MPSL_IRQ_TIMER0_Handler+0x6e>
 1002d42:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 1002d46:	2a00      	cmp	r2, #0
 1002d48:	d158      	bne.n	1002dfc <MPSL_IRQ_TIMER0_Handler+0x120>
 1002d4a:	b005      	add	sp, #20
 1002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1002d4e:	2007      	movs	r0, #7
 1002d50:	b005      	add	sp, #20
 1002d52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 1002d56:	f7fe bf5f 	b.w	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002d5a:	2200      	movs	r2, #0
 1002d5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 1002d60:	4d3a      	ldr	r5, [pc, #232]	; (1002e4c <MPSL_IRQ_TIMER0_Handler+0x170>)
 1002d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1002d66:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002d6a:	2003      	movs	r0, #3
 1002d6c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002d70:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002d74:	682a      	ldr	r2, [r5, #0]
 1002d76:	4b36      	ldr	r3, [pc, #216]	; (1002e50 <MPSL_IRQ_TIMER0_Handler+0x174>)
 1002d78:	9200      	str	r2, [sp, #0]
 1002d7a:	9a00      	ldr	r2, [sp, #0]
 1002d7c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 1002d80:	f7fe ff4a 	bl	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002d84:	4b30      	ldr	r3, [pc, #192]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002d86:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002d8a:	0350      	lsls	r0, r2, #13
 1002d8c:	d5cb      	bpl.n	1002d26 <MPSL_IRQ_TIMER0_Handler+0x4a>
 1002d8e:	e7c6      	b.n	1002d1e <MPSL_IRQ_TIMER0_Handler+0x42>
 1002d90:	2200      	movs	r2, #0
 1002d92:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 1002d96:	4d2f      	ldr	r5, [pc, #188]	; (1002e54 <MPSL_IRQ_TIMER0_Handler+0x178>)
 1002d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1002d9c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002da0:	2002      	movs	r0, #2
 1002da2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1002da6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002daa:	682a      	ldr	r2, [r5, #0]
 1002dac:	4b28      	ldr	r3, [pc, #160]	; (1002e50 <MPSL_IRQ_TIMER0_Handler+0x174>)
 1002dae:	9201      	str	r2, [sp, #4]
 1002db0:	9a01      	ldr	r2, [sp, #4]
 1002db2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 1002db6:	f7fe ff2f 	bl	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002dba:	4b23      	ldr	r3, [pc, #140]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002dbc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002dc0:	0391      	lsls	r1, r2, #14
 1002dc2:	d5b9      	bpl.n	1002d38 <MPSL_IRQ_TIMER0_Handler+0x5c>
 1002dc4:	e7b4      	b.n	1002d30 <MPSL_IRQ_TIMER0_Handler+0x54>
 1002dc6:	2200      	movs	r2, #0
 1002dc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002dcc:	4d22      	ldr	r5, [pc, #136]	; (1002e58 <MPSL_IRQ_TIMER0_Handler+0x17c>)
 1002dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1002dd2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002dd6:	2001      	movs	r0, #1
 1002dd8:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002ddc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002de0:	682a      	ldr	r2, [r5, #0]
 1002de2:	4b1b      	ldr	r3, [pc, #108]	; (1002e50 <MPSL_IRQ_TIMER0_Handler+0x174>)
 1002de4:	9202      	str	r2, [sp, #8]
 1002de6:	9a02      	ldr	r2, [sp, #8]
 1002de8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 1002dec:	f7fe ff14 	bl	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002df0:	4b15      	ldr	r3, [pc, #84]	; (1002e48 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002df2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002df6:	03d2      	lsls	r2, r2, #15
 1002df8:	d5a7      	bpl.n	1002d4a <MPSL_IRQ_TIMER0_Handler+0x6e>
 1002dfa:	e7a2      	b.n	1002d42 <MPSL_IRQ_TIMER0_Handler+0x66>
 1002dfc:	2200      	movs	r2, #0
 1002dfe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 1002e02:	4816      	ldr	r0, [pc, #88]	; (1002e5c <MPSL_IRQ_TIMER0_Handler+0x180>)
 1002e04:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 1002e08:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002e0c:	2104      	movs	r1, #4
 1002e0e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002e12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002e16:	6800      	ldr	r0, [r0, #0]
 1002e18:	4d0d      	ldr	r5, [pc, #52]	; (1002e50 <MPSL_IRQ_TIMER0_Handler+0x174>)
 1002e1a:	9003      	str	r0, [sp, #12]
 1002e1c:	4610      	mov	r0, r2
 1002e1e:	9f03      	ldr	r7, [sp, #12]
 1002e20:	60e2      	str	r2, [r4, #12]
 1002e22:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
 1002e26:	70a1      	strb	r1, [r4, #2]
 1002e28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 1002e2c:	b005      	add	sp, #20
 1002e2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 1002e32:	f7fe bef1 	b.w	1001c18 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002e36:	7223      	strb	r3, [r4, #8]
 1002e38:	e75f      	b.n	1002cfa <MPSL_IRQ_TIMER0_Handler+0x1e>
 1002e3a:	f240 3166 	movw	r1, #870	; 0x366
 1002e3e:	206c      	movs	r0, #108	; 0x6c
 1002e40:	f000 fd72 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002e44:	21000660 	.word	0x21000660
 1002e48:	4100c000 	.word	0x4100c000
 1002e4c:	4100c14c 	.word	0x4100c14c
 1002e50:	e000e100 	.word	0xe000e100
 1002e54:	4100c148 	.word	0x4100c148
 1002e58:	4100c144 	.word	0x4100c144
 1002e5c:	4100c140 	.word	0x4100c140

01002e60 <MPSL_IRQ_RADIO_Handler>:
 1002e60:	f7ff b86c 	b.w	1001f3c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>

01002e64 <sym_YA4SQVRBDCGQCUGXE45HJEVPH53QPH5KUMUCZUA>:
 1002e64:	4b05      	ldr	r3, [pc, #20]	; (1002e7c <sym_YA4SQVRBDCGQCUGXE45HJEVPH53QPH5KUMUCZUA+0x18>)
 1002e66:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 1002e6a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
 1002e6e:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 1002e72:	bf18      	it	ne
 1002e74:	f002 0001 	andne.w	r0, r2, #1
 1002e78:	4770      	bx	lr
 1002e7a:	bf00      	nop
 1002e7c:	41005000 	.word	0x41005000

01002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
 1002e80:	b510      	push	{r4, lr}
 1002e82:	f3ef 8410 	mrs	r4, PRIMASK
 1002e86:	b672      	cpsid	i
 1002e88:	4a06      	ldr	r2, [pc, #24]	; (1002ea4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
 1002e8a:	7913      	ldrb	r3, [r2, #4]
 1002e8c:	3301      	adds	r3, #1
 1002e8e:	b2db      	uxtb	r3, r3
 1002e90:	7113      	strb	r3, [r2, #4]
 1002e92:	7913      	ldrb	r3, [r2, #4]
 1002e94:	2b01      	cmp	r3, #1
 1002e96:	d101      	bne.n	1002e9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1c>
 1002e98:	f000 fa2a 	bl	10032f0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
 1002e9c:	b904      	cbnz	r4, 1002ea0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
 1002e9e:	b662      	cpsie	i
 1002ea0:	bd10      	pop	{r4, pc}
 1002ea2:	bf00      	nop
 1002ea4:	21000674 	.word	0x21000674

01002ea8 <mpsl_clock_hfclk_request>:
 1002ea8:	b570      	push	{r4, r5, r6, lr}
 1002eaa:	4c0b      	ldr	r4, [pc, #44]	; (1002ed8 <mpsl_clock_hfclk_request+0x30>)
 1002eac:	7826      	ldrb	r6, [r4, #0]
 1002eae:	b95e      	cbnz	r6, 1002ec8 <mpsl_clock_hfclk_request+0x20>
 1002eb0:	2501      	movs	r5, #1
 1002eb2:	60a0      	str	r0, [r4, #8]
 1002eb4:	7025      	strb	r5, [r4, #0]
 1002eb6:	f7ff ffe3 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1002eba:	f000 fa35 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1002ebe:	b928      	cbnz	r0, 1002ecc <mpsl_clock_hfclk_request+0x24>
 1002ec0:	4b06      	ldr	r3, [pc, #24]	; (1002edc <mpsl_clock_hfclk_request+0x34>)
 1002ec2:	7325      	strb	r5, [r4, #12]
 1002ec4:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
 1002ec8:	2000      	movs	r0, #0
 1002eca:	bd70      	pop	{r4, r5, r6, pc}
 1002ecc:	68a3      	ldr	r3, [r4, #8]
 1002ece:	2b00      	cmp	r3, #0
 1002ed0:	d0fa      	beq.n	1002ec8 <mpsl_clock_hfclk_request+0x20>
 1002ed2:	4798      	blx	r3
 1002ed4:	60a6      	str	r6, [r4, #8]
 1002ed6:	e7f7      	b.n	1002ec8 <mpsl_clock_hfclk_request+0x20>
 1002ed8:	21000674 	.word	0x21000674
 1002edc:	41005000 	.word	0x41005000

01002ee0 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>:
 1002ee0:	b508      	push	{r3, lr}
 1002ee2:	f7ff ffcd 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1002ee6:	f000 fa1f 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1002eea:	4b08      	ldr	r3, [pc, #32]	; (1002f0c <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x2c>)
 1002eec:	b138      	cbz	r0, 1002efe <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x1e>
 1002eee:	4a08      	ldr	r2, [pc, #32]	; (1002f10 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x30>)
 1002ef0:	2101      	movs	r1, #1
 1002ef2:	6011      	str	r1, [r2, #0]
 1002ef4:	2204      	movs	r2, #4
 1002ef6:	735a      	strb	r2, [r3, #13]
 1002ef8:	2200      	movs	r2, #0
 1002efa:	739a      	strb	r2, [r3, #14]
 1002efc:	bd08      	pop	{r3, pc}
 1002efe:	2203      	movs	r2, #3
 1002f00:	2101      	movs	r1, #1
 1002f02:	735a      	strb	r2, [r3, #13]
 1002f04:	4a03      	ldr	r2, [pc, #12]	; (1002f14 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x34>)
 1002f06:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
 1002f0a:	e7f5      	b.n	1002ef8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x18>
 1002f0c:	21000674 	.word	0x21000674
 1002f10:	41005010 	.word	0x41005010
 1002f14:	41005000 	.word	0x41005000

01002f18 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ>:
 1002f18:	b538      	push	{r3, r4, r5, lr}
 1002f1a:	4c12      	ldr	r4, [pc, #72]	; (1002f64 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x4c>)
 1002f1c:	7be3      	ldrb	r3, [r4, #15]
 1002f1e:	b1c3      	cbz	r3, 1002f52 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x3a>
 1002f20:	2b01      	cmp	r3, #1
 1002f22:	d003      	beq.n	1002f2c <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x14>
 1002f24:	7ba2      	ldrb	r2, [r4, #14]
 1002f26:	3b01      	subs	r3, #1
 1002f28:	429a      	cmp	r2, r3
 1002f2a:	da12      	bge.n	1002f52 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x3a>
 1002f2c:	f000 f9fc 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1002f30:	4605      	mov	r5, r0
 1002f32:	f000 fd35 	bl	10039a0 <mpsl_temperature_get>
 1002f36:	7be3      	ldrb	r3, [r4, #15]
 1002f38:	2b01      	cmp	r3, #1
 1002f3a:	bf82      	ittt	hi
 1002f3c:	7ba3      	ldrbhi	r3, [r4, #14]
 1002f3e:	3301      	addhi	r3, #1
 1002f40:	73a3      	strbhi	r3, [r4, #14]
 1002f42:	b155      	cbz	r5, 1002f5a <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x42>
 1002f44:	6923      	ldr	r3, [r4, #16]
 1002f46:	1ac3      	subs	r3, r0, r3
 1002f48:	3301      	adds	r3, #1
 1002f4a:	2b02      	cmp	r3, #2
 1002f4c:	d909      	bls.n	1002f62 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x4a>
 1002f4e:	b135      	cbz	r5, 1002f5e <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x46>
 1002f50:	6120      	str	r0, [r4, #16]
 1002f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1002f56:	f7ff bfc3 	b.w	1002ee0 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 1002f5a:	6963      	ldr	r3, [r4, #20]
 1002f5c:	e7f3      	b.n	1002f46 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x2e>
 1002f5e:	6160      	str	r0, [r4, #20]
 1002f60:	e7f7      	b.n	1002f52 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x3a>
 1002f62:	bd38      	pop	{r3, r4, r5, pc}
 1002f64:	21000674 	.word	0x21000674

01002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
 1002f68:	b510      	push	{r4, lr}
 1002f6a:	f3ef 8410 	mrs	r4, PRIMASK
 1002f6e:	b672      	cpsid	i
 1002f70:	4b0a      	ldr	r3, [pc, #40]	; (1002f9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
 1002f72:	791a      	ldrb	r2, [r3, #4]
 1002f74:	b922      	cbnz	r2, 1002f80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x18>
 1002f76:	f240 110d 	movw	r1, #269	; 0x10d
 1002f7a:	206d      	movs	r0, #109	; 0x6d
 1002f7c:	f000 fcd4 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002f80:	791a      	ldrb	r2, [r3, #4]
 1002f82:	3a01      	subs	r2, #1
 1002f84:	b2d2      	uxtb	r2, r2
 1002f86:	711a      	strb	r2, [r3, #4]
 1002f88:	791a      	ldrb	r2, [r3, #4]
 1002f8a:	b91a      	cbnz	r2, 1002f94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
 1002f8c:	7e1b      	ldrb	r3, [r3, #24]
 1002f8e:	b90b      	cbnz	r3, 1002f94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
 1002f90:	f000 f9b4 	bl	10032fc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
 1002f94:	b904      	cbnz	r4, 1002f98 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x30>
 1002f96:	b662      	cpsie	i
 1002f98:	bd10      	pop	{r4, pc}
 1002f9a:	bf00      	nop
 1002f9c:	21000674 	.word	0x21000674

01002fa0 <mpsl_clock_hfclk_release>:
 1002fa0:	b508      	push	{r3, lr}
 1002fa2:	4b05      	ldr	r3, [pc, #20]	; (1002fb8 <mpsl_clock_hfclk_release+0x18>)
 1002fa4:	781a      	ldrb	r2, [r3, #0]
 1002fa6:	b122      	cbz	r2, 1002fb2 <mpsl_clock_hfclk_release+0x12>
 1002fa8:	2200      	movs	r2, #0
 1002faa:	731a      	strb	r2, [r3, #12]
 1002fac:	701a      	strb	r2, [r3, #0]
 1002fae:	f7ff ffdb 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1002fb2:	2000      	movs	r0, #0
 1002fb4:	bd08      	pop	{r3, pc}
 1002fb6:	bf00      	nop
 1002fb8:	21000674 	.word	0x21000674

01002fbc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
 1002fbc:	f3ef 8110 	mrs	r1, PRIMASK
 1002fc0:	b672      	cpsid	i
 1002fc2:	4a04      	ldr	r2, [pc, #16]	; (1002fd4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
 1002fc4:	7e13      	ldrb	r3, [r2, #24]
 1002fc6:	3301      	adds	r3, #1
 1002fc8:	b2db      	uxtb	r3, r3
 1002fca:	7613      	strb	r3, [r2, #24]
 1002fcc:	b901      	cbnz	r1, 1002fd0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
 1002fce:	b662      	cpsie	i
 1002fd0:	4770      	bx	lr
 1002fd2:	bf00      	nop
 1002fd4:	21000674 	.word	0x21000674

01002fd8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
 1002fd8:	b510      	push	{r4, lr}
 1002fda:	f3ef 8410 	mrs	r4, PRIMASK
 1002fde:	b672      	cpsid	i
 1002fe0:	4b0a      	ldr	r3, [pc, #40]	; (100300c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
 1002fe2:	7e1a      	ldrb	r2, [r3, #24]
 1002fe4:	b922      	cbnz	r2, 1002ff0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x18>
 1002fe6:	f240 1125 	movw	r1, #293	; 0x125
 1002fea:	206d      	movs	r0, #109	; 0x6d
 1002fec:	f000 fc9c 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002ff0:	7e1a      	ldrb	r2, [r3, #24]
 1002ff2:	3a01      	subs	r2, #1
 1002ff4:	b2d2      	uxtb	r2, r2
 1002ff6:	761a      	strb	r2, [r3, #24]
 1002ff8:	791a      	ldrb	r2, [r3, #4]
 1002ffa:	b91a      	cbnz	r2, 1003004 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
 1002ffc:	7e1b      	ldrb	r3, [r3, #24]
 1002ffe:	b90b      	cbnz	r3, 1003004 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
 1003000:	f000 f97c 	bl	10032fc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
 1003004:	b904      	cbnz	r4, 1003008 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x30>
 1003006:	b662      	cpsie	i
 1003008:	bd10      	pop	{r4, pc}
 100300a:	bf00      	nop
 100300c:	21000674 	.word	0x21000674

01003010 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
 1003010:	b570      	push	{r4, r5, r6, lr}
 1003012:	4d19      	ldr	r5, [pc, #100]	; (1003078 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x68>)
 1003014:	7e6b      	ldrb	r3, [r5, #25]
 1003016:	462c      	mov	r4, r5
 1003018:	b97b      	cbnz	r3, 100303a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 100301a:	69e8      	ldr	r0, [r5, #28]
 100301c:	f000 0003 	and.w	r0, r0, #3
 1003020:	f000 f9a8 	bl	1003374 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
 1003024:	b148      	cbz	r0, 100303a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 1003026:	f000 faa1 	bl	100356c <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A>
 100302a:	b930      	cbnz	r0, 100303a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 100302c:	f3ef 8310 	mrs	r3, PRIMASK
 1003030:	b672      	cpsid	i
 1003032:	7b6a      	ldrb	r2, [r5, #13]
 1003034:	b112      	cbz	r2, 100303c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
 1003036:	b903      	cbnz	r3, 100303a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 1003038:	b662      	cpsie	i
 100303a:	bd70      	pop	{r4, r5, r6, pc}
 100303c:	2201      	movs	r2, #1
 100303e:	736a      	strb	r2, [r5, #13]
 1003040:	b903      	cbnz	r3, 1003044 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
 1003042:	b662      	cpsie	i
 1003044:	2300      	movs	r3, #0
 1003046:	4a0d      	ldr	r2, [pc, #52]	; (100307c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6c>)
 1003048:	4d0d      	ldr	r5, [pc, #52]	; (1003080 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
 100304a:	2680      	movs	r6, #128	; 0x80
 100304c:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
 1003050:	6013      	str	r3, [r2, #0]
 1003052:	f884 3020 	strb.w	r3, [r4, #32]
 1003056:	f7ff ff43 	bl	1002ee0 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 100305a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 100305e:	2102      	movs	r1, #2
 1003060:	4b08      	ldr	r3, [pc, #32]	; (1003084 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x74>)
 1003062:	4809      	ldr	r0, [pc, #36]	; (1003088 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x78>)
 1003064:	4353      	muls	r3, r2
 1003066:	6263      	str	r3, [r4, #36]	; 0x24
 1003068:	4b08      	ldr	r3, [pc, #32]	; (100308c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x7c>)
 100306a:	6323      	str	r3, [r4, #48]	; 0x30
 100306c:	f000 fa84 	bl	1003578 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q>
 1003070:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 1003074:	e7e1      	b.n	100303a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 1003076:	bf00      	nop
 1003078:	21000674 	.word	0x21000674
 100307c:	4100511c 	.word	0x4100511c
 1003080:	41005000 	.word	0x41005000
 1003084:	0003d090 	.word	0x0003d090
 1003088:	21000698 	.word	0x21000698
 100308c:	01002f19 	.word	0x01002f19

01003090 <MPSL_IRQ_CLOCK_Handler>:
 1003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003092:	4c24      	ldr	r4, [pc, #144]	; (1003124 <MPSL_IRQ_CLOCK_Handler+0x94>)
 1003094:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 1003098:	2b00      	cmp	r3, #0
 100309a:	d042      	beq.n	1003122 <MPSL_IRQ_CLOCK_Handler+0x92>
 100309c:	4b22      	ldr	r3, [pc, #136]	; (1003128 <MPSL_IRQ_CLOCK_Handler+0x98>)
 100309e:	681e      	ldr	r6, [r3, #0]
 10030a0:	3304      	adds	r3, #4
 10030a2:	681f      	ldr	r7, [r3, #0]
 10030a4:	b156      	cbz	r6, 10030bc <MPSL_IRQ_CLOCK_Handler+0x2c>
 10030a6:	2201      	movs	r2, #1
 10030a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 10030ac:	7b23      	ldrb	r3, [r4, #12]
 10030ae:	b12b      	cbz	r3, 10030bc <MPSL_IRQ_CLOCK_Handler+0x2c>
 10030b0:	2500      	movs	r5, #0
 10030b2:	68a3      	ldr	r3, [r4, #8]
 10030b4:	7325      	strb	r5, [r4, #12]
 10030b6:	b10b      	cbz	r3, 10030bc <MPSL_IRQ_CLOCK_Handler+0x2c>
 10030b8:	4798      	blx	r3
 10030ba:	60a5      	str	r5, [r4, #8]
 10030bc:	b13f      	cbz	r7, 10030ce <MPSL_IRQ_CLOCK_Handler+0x3e>
 10030be:	4b1b      	ldr	r3, [pc, #108]	; (100312c <MPSL_IRQ_CLOCK_Handler+0x9c>)
 10030c0:	2200      	movs	r2, #0
 10030c2:	601a      	str	r2, [r3, #0]
 10030c4:	2202      	movs	r2, #2
 10030c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 10030ca:	f7ff ffa1 	bl	1003010 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
 10030ce:	4b18      	ldr	r3, [pc, #96]	; (1003130 <MPSL_IRQ_CLOCK_Handler+0xa0>)
 10030d0:	681a      	ldr	r2, [r3, #0]
 10030d2:	f894 5020 	ldrb.w	r5, [r4, #32]
 10030d6:	b2ed      	uxtb	r5, r5
 10030d8:	b13e      	cbz	r6, 10030ea <MPSL_IRQ_CLOCK_Handler+0x5a>
 10030da:	7b61      	ldrb	r1, [r4, #13]
 10030dc:	2903      	cmp	r1, #3
 10030de:	d104      	bne.n	10030ea <MPSL_IRQ_CLOCK_Handler+0x5a>
 10030e0:	2104      	movs	r1, #4
 10030e2:	2001      	movs	r0, #1
 10030e4:	7361      	strb	r1, [r4, #13]
 10030e6:	4913      	ldr	r1, [pc, #76]	; (1003134 <MPSL_IRQ_CLOCK_Handler+0xa4>)
 10030e8:	6008      	str	r0, [r1, #0]
 10030ea:	b16a      	cbz	r2, 1003108 <MPSL_IRQ_CLOCK_Handler+0x78>
 10030ec:	2200      	movs	r2, #0
 10030ee:	601a      	str	r2, [r3, #0]
 10030f0:	7b63      	ldrb	r3, [r4, #13]
 10030f2:	2b04      	cmp	r3, #4
 10030f4:	d004      	beq.n	1003100 <MPSL_IRQ_CLOCK_Handler+0x70>
 10030f6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 10030fa:	206d      	movs	r0, #109	; 0x6d
 10030fc:	f000 fc14 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003100:	2302      	movs	r3, #2
 1003102:	7363      	strb	r3, [r4, #13]
 1003104:	f7ff ff30 	bl	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1003108:	b15d      	cbz	r5, 1003122 <MPSL_IRQ_CLOCK_Handler+0x92>
 100310a:	2300      	movs	r3, #0
 100310c:	f884 3020 	strb.w	r3, [r4, #32]
 1003110:	7b63      	ldrb	r3, [r4, #13]
 1003112:	2b02      	cmp	r3, #2
 1003114:	d101      	bne.n	100311a <MPSL_IRQ_CLOCK_Handler+0x8a>
 1003116:	f7ff fee3 	bl	1002ee0 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 100311a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100311e:	f7ff bf23 	b.w	1002f68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1003122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1003124:	21000674 	.word	0x21000674
 1003128:	41005100 	.word	0x41005100
 100312c:	41005104 	.word	0x41005104
 1003130:	4100511c 	.word	0x4100511c
 1003134:	41005010 	.word	0x41005010

01003138 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
 1003138:	b510      	push	{r4, lr}
 100313a:	4c04      	ldr	r4, [pc, #16]	; (100314c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
 100313c:	69e0      	ldr	r0, [r4, #28]
 100313e:	f000 0003 	and.w	r0, r0, #3
 1003142:	f000 f917 	bl	1003374 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
 1003146:	2800      	cmp	r0, #0
 1003148:	d0f8      	beq.n	100313c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
 100314a:	bd10      	pop	{r4, pc}
 100314c:	21000674 	.word	0x21000674

01003150 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
 1003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003152:	4605      	mov	r5, r0
 1003154:	b160      	cbz	r0, 1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 1003156:	7802      	ldrb	r2, [r0, #0]
 1003158:	2a02      	cmp	r2, #2
 100315a:	d809      	bhi.n	1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 100315c:	7843      	ldrb	r3, [r0, #1]
 100315e:	b952      	cbnz	r2, 1003176 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x26>
 1003160:	3b01      	subs	r3, #1
 1003162:	2b1f      	cmp	r3, #31
 1003164:	d804      	bhi.n	1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 1003166:	7883      	ldrb	r3, [r0, #2]
 1003168:	2b21      	cmp	r3, #33	; 0x21
 100316a:	d801      	bhi.n	1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 100316c:	2b01      	cmp	r3, #1
 100316e:	d107      	bne.n	1003180 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x30>
 1003170:	f06f 0015 	mvn.w	r0, #21
 1003174:	e065      	b.n	1003242 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xf2>
 1003176:	2b00      	cmp	r3, #0
 1003178:	d1fa      	bne.n	1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 100317a:	7883      	ldrb	r3, [r0, #2]
 100317c:	2b00      	cmp	r3, #0
 100317e:	d1f7      	bne.n	1003170 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x20>
 1003180:	4b53      	ldr	r3, [pc, #332]	; (10032d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x180>)
 1003182:	2220      	movs	r2, #32
 1003184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1003188:	f3bf 8f4f 	dsb	sy
 100318c:	f3bf 8f6f 	isb	sy
 1003190:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1003198:	4b4e      	ldr	r3, [pc, #312]	; (10032d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x184>)
 100319a:	4c4f      	ldr	r4, [pc, #316]	; (10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x188>)
 100319c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10031a0:	2300      	movs	r3, #0
 10031a2:	4a4e      	ldr	r2, [pc, #312]	; (10032dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x18c>)
 10031a4:	6013      	str	r3, [r2, #0]
 10031a6:	6053      	str	r3, [r2, #4]
 10031a8:	61d3      	str	r3, [r2, #28]
 10031aa:	7123      	strb	r3, [r4, #4]
 10031ac:	88ab      	ldrh	r3, [r5, #4]
 10031ae:	8063      	strh	r3, [r4, #2]
 10031b0:	f000 f8c8 	bl	1003344 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
 10031b4:	b110      	cbz	r0, 10031bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6c>
 10031b6:	2301      	movs	r3, #1
 10031b8:	7023      	strb	r3, [r4, #0]
 10031ba:	7123      	strb	r3, [r4, #4]
 10031bc:	f7ff fe52 	bl	1002e64 <sym_YA4SQVRBDCGQCUGXE45HJEVPH53QPH5KUMUCZUA>
 10031c0:	b108      	cbz	r0, 10031c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x76>
 10031c2:	f000 f8ab 	bl	100331c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
 10031c6:	2301      	movs	r3, #1
 10031c8:	78aa      	ldrb	r2, [r5, #2]
 10031ca:	7869      	ldrb	r1, [r5, #1]
 10031cc:	61e3      	str	r3, [r4, #28]
 10031ce:	782b      	ldrb	r3, [r5, #0]
 10031d0:	73e2      	strb	r2, [r4, #15]
 10031d2:	2200      	movs	r2, #0
 10031d4:	2b01      	cmp	r3, #1
 10031d6:	7663      	strb	r3, [r4, #25]
 10031d8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 10031dc:	73a2      	strb	r2, [r4, #14]
 10031de:	d007      	beq.n	10031f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>
 10031e0:	b143      	cbz	r3, 10031f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa4>
 10031e2:	2b02      	cmp	r3, #2
 10031e4:	d02e      	beq.n	1003244 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xf4>
 10031e6:	f44f 714c 	mov.w	r1, #816	; 0x330
 10031ea:	206d      	movs	r0, #109	; 0x6d
 10031ec:	f000 fb9c 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10031f0:	2302      	movs	r3, #2
 10031f2:	61e3      	str	r3, [r4, #28]
 10031f4:	f000 f8ae 	bl	1003354 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
 10031f8:	b388      	cbz	r0, 100325e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x10e>
 10031fa:	f000 f8b3 	bl	1003364 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
 10031fe:	69e3      	ldr	r3, [r4, #28]
 1003200:	f003 0303 	and.w	r3, r3, #3
 1003204:	4298      	cmp	r0, r3
 1003206:	d12a      	bne.n	100325e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x10e>
 1003208:	79ab      	ldrb	r3, [r5, #6]
 100320a:	bb1b      	cbnz	r3, 1003254 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x104>
 100320c:	f7ff ff94 	bl	1003138 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 1003210:	7be3      	ldrb	r3, [r4, #15]
 1003212:	b163      	cbz	r3, 100322e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xde>
 1003214:	782b      	ldrb	r3, [r5, #0]
 1003216:	b953      	cbnz	r3, 100322e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xde>
 1003218:	f000 f886 	bl	1003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 100321c:	4605      	mov	r5, r0
 100321e:	f000 fbbf 	bl	10039a0 <mpsl_temperature_get>
 1003222:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 1003226:	2d00      	cmp	r5, #0
 1003228:	d04f      	beq.n	10032ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x17a>
 100322a:	e9c4 0304 	strd	r0, r3, [r4, #16]
 100322e:	2301      	movs	r3, #1
 1003230:	2220      	movs	r2, #32
 1003232:	2000      	movs	r0, #0
 1003234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 1003238:	4b25      	ldr	r3, [pc, #148]	; (10032d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x180>)
 100323a:	7360      	strb	r0, [r4, #13]
 100323c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003240:	601a      	str	r2, [r3, #0]
 1003242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1003244:	f7ff fe1c 	bl	1002e80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1003248:	f7ff fe0c 	bl	1002e64 <sym_YA4SQVRBDCGQCUGXE45HJEVPH53QPH5KUMUCZUA>
 100324c:	2800      	cmp	r0, #0
 100324e:	d0fb      	beq.n	1003248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xf8>
 1003250:	2303      	movs	r3, #3
 1003252:	e7ce      	b.n	10031f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa2>
 1003254:	4b1f      	ldr	r3, [pc, #124]	; (10032d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x184>)
 1003256:	2202      	movs	r2, #2
 1003258:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 100325c:	e7d8      	b.n	1003210 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc0>
 100325e:	2101      	movs	r1, #1
 1003260:	2200      	movs	r2, #0
 1003262:	4b1f      	ldr	r3, [pc, #124]	; (10032e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x190>)
 1003264:	4e1f      	ldr	r6, [pc, #124]	; (10032e4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x194>)
 1003266:	6019      	str	r1, [r3, #0]
 1003268:	6032      	str	r2, [r6, #0]
 100326a:	4a1a      	ldr	r2, [pc, #104]	; (10032d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x184>)
 100326c:	7f20      	ldrb	r0, [r4, #28]
 100326e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
 1003272:	481d      	ldr	r0, [pc, #116]	; (10032e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x198>)
 1003274:	6001      	str	r1, [r0, #0]
 1003276:	2102      	movs	r1, #2
 1003278:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
 100327c:	79a9      	ldrb	r1, [r5, #6]
 100327e:	2900      	cmp	r1, #0
 1003280:	d1c6      	bne.n	1003210 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc0>
 1003282:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
 1003286:	0793      	lsls	r3, r2, #30
 1003288:	d402      	bmi.n	1003290 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x140>
 100328a:	f240 21f1 	movw	r1, #753	; 0x2f1
 100328e:	e7ac      	b.n	10031ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9a>
 1003290:	4a16      	ldr	r2, [pc, #88]	; (10032ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x19c>)
 1003292:	6917      	ldr	r7, [r2, #16]
 1003294:	6911      	ldr	r1, [r2, #16]
 1003296:	f007 0710 	and.w	r7, r7, #16
 100329a:	f041 0110 	orr.w	r1, r1, #16
 100329e:	6111      	str	r1, [r2, #16]
 10032a0:	6833      	ldr	r3, [r6, #0]
 10032a2:	b17b      	cbz	r3, 10032c4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x174>
 10032a4:	f7ff ff48 	bl	1003138 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 10032a8:	b927      	cbnz	r7, 10032b4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x164>
 10032aa:	4a10      	ldr	r2, [pc, #64]	; (10032ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x19c>)
 10032ac:	6913      	ldr	r3, [r2, #16]
 10032ae:	f023 0310 	bic.w	r3, r3, #16
 10032b2:	6113      	str	r3, [r2, #16]
 10032b4:	4b07      	ldr	r3, [pc, #28]	; (10032d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x184>)
 10032b6:	2202      	movs	r2, #2
 10032b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10032bc:	2200      	movs	r2, #0
 10032be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 10032c2:	e7a5      	b.n	1003210 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc0>
 10032c4:	f001 fa01 	bl	10046ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
 10032c8:	e7ea      	b.n	10032a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x150>
 10032ca:	e9c4 3004 	strd	r3, r0, [r4, #16]
 10032ce:	e7ae      	b.n	100322e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xde>
 10032d0:	e000e100 	.word	0xe000e100
 10032d4:	41005000 	.word	0x41005000
 10032d8:	21000674 	.word	0x21000674
 10032dc:	41005100 	.word	0x41005100
 10032e0:	4100500c 	.word	0x4100500c
 10032e4:	41005104 	.word	0x41005104
 10032e8:	41005008 	.word	0x41005008
 10032ec:	e000ed00 	.word	0xe000ed00

010032f0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
 10032f0:	4b01      	ldr	r3, [pc, #4]	; (10032f8 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA+0x8>)
 10032f2:	2201      	movs	r2, #1
 10032f4:	601a      	str	r2, [r3, #0]
 10032f6:	4770      	bx	lr
 10032f8:	41005000 	.word	0x41005000

010032fc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
 10032fc:	4b04      	ldr	r3, [pc, #16]	; (1003310 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
 10032fe:	2201      	movs	r2, #1
 1003300:	601a      	str	r2, [r3, #0]
 1003302:	2300      	movs	r3, #0
 1003304:	4a03      	ldr	r2, [pc, #12]	; (1003314 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x18>)
 1003306:	6013      	str	r3, [r2, #0]
 1003308:	4a03      	ldr	r2, [pc, #12]	; (1003318 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x1c>)
 100330a:	7013      	strb	r3, [r2, #0]
 100330c:	4770      	bx	lr
 100330e:	bf00      	nop
 1003310:	41005004 	.word	0x41005004
 1003314:	41005100 	.word	0x41005100
 1003318:	210006ba 	.word	0x210006ba

0100331c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
 100331c:	4b01      	ldr	r3, [pc, #4]	; (1003324 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
 100331e:	2201      	movs	r2, #1
 1003320:	701a      	strb	r2, [r3, #0]
 1003322:	4770      	bx	lr
 1003324:	210006ba 	.word	0x210006ba

01003328 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
 1003328:	4b04      	ldr	r3, [pc, #16]	; (100333c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>)
 100332a:	681b      	ldr	r3, [r3, #0]
 100332c:	b923      	cbnz	r3, 1003338 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x10>
 100332e:	4b04      	ldr	r3, [pc, #16]	; (1003340 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
 1003330:	7818      	ldrb	r0, [r3, #0]
 1003332:	f000 0001 	and.w	r0, r0, #1
 1003336:	4770      	bx	lr
 1003338:	2001      	movs	r0, #1
 100333a:	e7fa      	b.n	1003332 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0xa>
 100333c:	41005100 	.word	0x41005100
 1003340:	210006ba 	.word	0x210006ba

01003344 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
 1003344:	4b02      	ldr	r3, [pc, #8]	; (1003350 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0xc>)
 1003346:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
 100334a:	f000 0001 	and.w	r0, r0, #1
 100334e:	4770      	bx	lr
 1003350:	41005000 	.word	0x41005000

01003354 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
 1003354:	4b02      	ldr	r3, [pc, #8]	; (1003360 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0xc>)
 1003356:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 100335a:	f000 0001 	and.w	r0, r0, #1
 100335e:	4770      	bx	lr
 1003360:	41005000 	.word	0x41005000

01003364 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
 1003364:	4b02      	ldr	r3, [pc, #8]	; (1003370 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
 1003366:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
 100336a:	f000 0003 	and.w	r0, r0, #3
 100336e:	4770      	bx	lr
 1003370:	41005000 	.word	0x41005000

01003374 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
 1003374:	4b08      	ldr	r3, [pc, #32]	; (1003398 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x24>)
 1003376:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 100337a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 100337e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 1003382:	d006      	beq.n	1003392 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1e>
 1003384:	f002 0303 	and.w	r3, r2, #3
 1003388:	b2c0      	uxtb	r0, r0
 100338a:	1a1b      	subs	r3, r3, r0
 100338c:	4258      	negs	r0, r3
 100338e:	4158      	adcs	r0, r3
 1003390:	4770      	bx	lr
 1003392:	4618      	mov	r0, r3
 1003394:	4770      	bx	lr
 1003396:	bf00      	nop
 1003398:	41005000 	.word	0x41005000

0100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>:
 100339c:	f3bf 8f5f 	dmb	sy
 10033a0:	4a02      	ldr	r2, [pc, #8]	; (10033ac <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY+0x10>)
 10033a2:	7813      	ldrb	r3, [r2, #0]
 10033a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 10033a8:	7013      	strb	r3, [r2, #0]
 10033aa:	4770      	bx	lr
 10033ac:	210006bc 	.word	0x210006bc

010033b0 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>:
 10033b0:	4b06      	ldr	r3, [pc, #24]	; (10033cc <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA+0x1c>)
 10033b2:	781a      	ldrb	r2, [r3, #0]
 10033b4:	07d2      	lsls	r2, r2, #31
 10033b6:	d407      	bmi.n	10033c8 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA+0x18>
 10033b8:	781a      	ldrb	r2, [r3, #0]
 10033ba:	f042 0201 	orr.w	r2, r2, #1
 10033be:	701a      	strb	r2, [r3, #0]
 10033c0:	f3bf 8f5f 	dmb	sy
 10033c4:	2001      	movs	r0, #1
 10033c6:	4770      	bx	lr
 10033c8:	2000      	movs	r0, #0
 10033ca:	4770      	bx	lr
 10033cc:	210006bc 	.word	0x210006bc

010033d0 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI>:
 10033d0:	b508      	push	{r3, lr}
 10033d2:	f7fe fe75 	bl	10020c0 <sym_HAHEAVDZUSPPA6H5H73M6WNIYXBR6WNMIDQIM7Q>
 10033d6:	4b0a      	ldr	r3, [pc, #40]	; (1003400 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI+0x30>)
 10033d8:	685b      	ldr	r3, [r3, #4]
 10033da:	695b      	ldr	r3, [r3, #20]
 10033dc:	1a18      	subs	r0, r3, r0
 10033de:	0200      	lsls	r0, r0, #8
 10033e0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 10033e4:	db04      	blt.n	10033f0 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI+0x20>
 10033e6:	4618      	mov	r0, r3
 10033e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10033ec:	f7fe be42 	b.w	1002074 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 10033f0:	f7ff ffd4 	bl	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 10033f4:	f7fe fc0a 	bl	1001c0c <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>
 10033f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10033fc:	f000 bb2a 	b.w	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1003400:	210006bc 	.word	0x210006bc

01003404 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>:
 1003404:	4a10      	ldr	r2, [pc, #64]	; (1003448 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x44>)
 1003406:	6853      	ldr	r3, [r2, #4]
 1003408:	b470      	push	{r4, r5, r6}
 100340a:	4615      	mov	r5, r2
 100340c:	b923      	cbnz	r3, 1003418 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x14>
 100340e:	61c3      	str	r3, [r0, #28]
 1003410:	6050      	str	r0, [r2, #4]
 1003412:	bc70      	pop	{r4, r5, r6}
 1003414:	f7ff bfdc 	b.w	10033d0 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI>
 1003418:	6946      	ldr	r6, [r0, #20]
 100341a:	461a      	mov	r2, r3
 100341c:	2400      	movs	r4, #0
 100341e:	6951      	ldr	r1, [r2, #20]
 1003420:	1a71      	subs	r1, r6, r1
 1003422:	0209      	lsls	r1, r1, #8
 1003424:	31ff      	adds	r1, #255	; 0xff
 1003426:	db09      	blt.n	100343c <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x38>
 1003428:	69d1      	ldr	r1, [r2, #28]
 100342a:	4614      	mov	r4, r2
 100342c:	b921      	cbnz	r1, 1003438 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x34>
 100342e:	69e3      	ldr	r3, [r4, #28]
 1003430:	61c3      	str	r3, [r0, #28]
 1003432:	61e0      	str	r0, [r4, #28]
 1003434:	bc70      	pop	{r4, r5, r6}
 1003436:	4770      	bx	lr
 1003438:	460a      	mov	r2, r1
 100343a:	e7f0      	b.n	100341e <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x1a>
 100343c:	4293      	cmp	r3, r2
 100343e:	d1f6      	bne.n	100342e <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x2a>
 1003440:	61c3      	str	r3, [r0, #28]
 1003442:	6068      	str	r0, [r5, #4]
 1003444:	e7e5      	b.n	1003412 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0xe>
 1003446:	bf00      	nop
 1003448:	210006bc 	.word	0x210006bc

0100344c <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA>:
 100344c:	4a07      	ldr	r2, [pc, #28]	; (100346c <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA+0x20>)
 100344e:	6853      	ldr	r3, [r2, #4]
 1003450:	4283      	cmp	r3, r0
 1003452:	d103      	bne.n	100345c <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA+0x10>
 1003454:	69db      	ldr	r3, [r3, #28]
 1003456:	6053      	str	r3, [r2, #4]
 1003458:	4770      	bx	lr
 100345a:	4613      	mov	r3, r2
 100345c:	b123      	cbz	r3, 1003468 <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA+0x1c>
 100345e:	69da      	ldr	r2, [r3, #28]
 1003460:	4290      	cmp	r0, r2
 1003462:	d1fa      	bne.n	100345a <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA+0xe>
 1003464:	69c2      	ldr	r2, [r0, #28]
 1003466:	61da      	str	r2, [r3, #28]
 1003468:	4770      	bx	lr
 100346a:	bf00      	nop
 100346c:	210006bc 	.word	0x210006bc

01003470 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ>:
 1003470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1003474:	f7fe fe24 	bl	10020c0 <sym_HAHEAVDZUSPPA6H5H73M6WNIYXBR6WNMIDQIM7Q>
 1003478:	493a      	ldr	r1, [pc, #232]	; (1003564 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xf4>)
 100347a:	4605      	mov	r5, r0
 100347c:	684c      	ldr	r4, [r1, #4]
 100347e:	4689      	mov	r9, r1
 1003480:	2c00      	cmp	r4, #0
 1003482:	d06c      	beq.n	100355e <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xee>
 1003484:	f7ff ff94 	bl	10033b0 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>
 1003488:	4680      	mov	r8, r0
 100348a:	b930      	cbnz	r0, 100349a <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x2a>
 100348c:	1ce8      	adds	r0, r5, #3
 100348e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1003492:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1003496:	f7fe bded 	b.w	1002074 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 100349a:	684b      	ldr	r3, [r1, #4]
 100349c:	6958      	ldr	r0, [r3, #20]
 100349e:	1b40      	subs	r0, r0, r5
 10034a0:	0200      	lsls	r0, r0, #8
 10034a2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 10034a6:	da22      	bge.n	10034ee <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x7e>
 10034a8:	4e2f      	ldr	r6, [pc, #188]	; (1003568 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xf8>)
 10034aa:	4620      	mov	r0, r4
 10034ac:	f7ff ffce 	bl	100344c <sym_XZ6XSEHPXPOQQVUCSQREY6NF5IZLC3ANEQPRFIA>
 10034b0:	7c27      	ldrb	r7, [r4, #16]
 10034b2:	b30f      	cbz	r7, 10034f8 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x88>
 10034b4:	6963      	ldr	r3, [r4, #20]
 10034b6:	3f01      	subs	r7, #1
 10034b8:	2500      	movs	r5, #0
 10034ba:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 10034be:	7427      	strb	r7, [r4, #16]
 10034c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10034c4:	6163      	str	r3, [r4, #20]
 10034c6:	f7ff ff9d 	bl	1003404 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 10034ca:	f8d9 4004 	ldr.w	r4, [r9, #4]
 10034ce:	b154      	cbz	r4, 10034e6 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x76>
 10034d0:	f7fe fdf6 	bl	10020c0 <sym_HAHEAVDZUSPPA6H5H73M6WNIYXBR6WNMIDQIM7Q>
 10034d4:	6963      	ldr	r3, [r4, #20]
 10034d6:	1a18      	subs	r0, r3, r0
 10034d8:	0200      	lsls	r0, r0, #8
 10034da:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 10034de:	db37      	blt.n	1003550 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xe0>
 10034e0:	4618      	mov	r0, r3
 10034e2:	f7fe fdc7 	bl	1002074 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 10034e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10034ea:	f7ff bf57 	b.w	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 10034ee:	f7ff ff55 	bl	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 10034f2:	684b      	ldr	r3, [r1, #4]
 10034f4:	6958      	ldr	r0, [r3, #20]
 10034f6:	e7cc      	b.n	1003492 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x22>
 10034f8:	69a0      	ldr	r0, [r4, #24]
 10034fa:	b1c8      	cbz	r0, 1003530 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xc0>
 10034fc:	42b0      	cmp	r0, r6
 10034fe:	7a21      	ldrb	r1, [r4, #8]
 1003500:	d91d      	bls.n	100353e <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xce>
 1003502:	fbb0 f5f6 	udiv	r5, r0, r6
 1003506:	fb06 0515 	mls	r5, r6, r5, r0
 100350a:	2d00      	cmp	r5, #0
 100350c:	bf08      	it	eq
 100350e:	4635      	moveq	r5, r6
 1003510:	4628      	mov	r0, r5
 1003512:	f001 f8c9 	bl	10046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1003516:	6963      	ldr	r3, [r4, #20]
 1003518:	4418      	add	r0, r3
 100351a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100351e:	6160      	str	r0, [r4, #20]
 1003520:	69a0      	ldr	r0, [r4, #24]
 1003522:	1b40      	subs	r0, r0, r5
 1003524:	fbb0 f0f6 	udiv	r0, r0, r6
 1003528:	7420      	strb	r0, [r4, #16]
 100352a:	4620      	mov	r0, r4
 100352c:	f7ff ff6a 	bl	1003404 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 1003530:	f7ff ff34 	bl	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1003534:	68e3      	ldr	r3, [r4, #12]
 1003536:	4620      	mov	r0, r4
 1003538:	4645      	mov	r5, r8
 100353a:	4798      	blx	r3
 100353c:	e7c5      	b.n	10034ca <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x5a>
 100353e:	f001 f8b3 	bl	10046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1003542:	6963      	ldr	r3, [r4, #20]
 1003544:	7427      	strb	r7, [r4, #16]
 1003546:	4418      	add	r0, r3
 1003548:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100354c:	6160      	str	r0, [r4, #20]
 100354e:	e7ec      	b.n	100352a <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xba>
 1003550:	2d00      	cmp	r5, #0
 1003552:	d0aa      	beq.n	10034aa <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x3a>
 1003554:	f7fe fb5a 	bl	1001c0c <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>
 1003558:	f000 fa7c 	bl	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 100355c:	e7c3      	b.n	10034e6 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x76>
 100355e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1003562:	bf00      	nop
 1003564:	210006bc 	.word	0x210006bc
 1003568:	07a12000 	.word	0x07a12000

0100356c <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A>:
 100356c:	4801      	ldr	r0, [pc, #4]	; (1003574 <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A+0x8>)
 100356e:	f7fe bd69 	b.w	1002044 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ>
 1003572:	bf00      	nop
 1003574:	01003471 	.word	0x01003471

01003578 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q>:
 1003578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100357c:	4605      	mov	r5, r0
 100357e:	4688      	mov	r8, r1
 1003580:	f7ff ff16 	bl	10033b0 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>
 1003584:	2800      	cmp	r0, #0
 1003586:	d074      	beq.n	1003672 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xfa>
 1003588:	b1e5      	cbz	r5, 10035c4 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x4c>
 100358a:	4b3b      	ldr	r3, [pc, #236]	; (1003678 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x100>)
 100358c:	685f      	ldr	r7, [r3, #4]
 100358e:	b9af      	cbnz	r7, 10035bc <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x44>
 1003590:	2210      	movs	r2, #16
 1003592:	4639      	mov	r1, r7
 1003594:	18a8      	adds	r0, r5, r2
 1003596:	f000 faad 	bl	1003af4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
 100359a:	f7fe fd91 	bl	10020c0 <sym_HAHEAVDZUSPPA6H5H73M6WNIYXBR6WNMIDQIM7Q>
 100359e:	f1b8 0f01 	cmp.w	r8, #1
 10035a2:	4606      	mov	r6, r0
 10035a4:	d014      	beq.n	10035d0 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x58>
 10035a6:	f1b8 0f00 	cmp.w	r8, #0
 10035aa:	d046      	beq.n	100363a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xc2>
 10035ac:	f1b8 0f02 	cmp.w	r8, #2
 10035b0:	d043      	beq.n	100363a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xc2>
 10035b2:	f240 1165 	movw	r1, #357	; 0x165
 10035b6:	206e      	movs	r0, #110	; 0x6e
 10035b8:	f000 f9b6 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10035bc:	42bd      	cmp	r5, r7
 10035be:	d001      	beq.n	10035c4 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x4c>
 10035c0:	69ff      	ldr	r7, [r7, #28]
 10035c2:	e7e4      	b.n	100358e <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x16>
 10035c4:	f7ff feea 	bl	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 10035c8:	f06f 0015 	mvn.w	r0, #21
 10035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10035d0:	6828      	ldr	r0, [r5, #0]
 10035d2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 100367c <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x104>
 10035d6:	4540      	cmp	r0, r8
 10035d8:	d8f4      	bhi.n	10035c4 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x4c>
 10035da:	7a29      	ldrb	r1, [r5, #8]
 10035dc:	f001 f864 	bl	10046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 10035e0:	1b80      	subs	r0, r0, r6
 10035e2:	0203      	lsls	r3, r0, #8
 10035e4:	d41f      	bmi.n	1003626 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xae>
 10035e6:	4630      	mov	r0, r6
 10035e8:	f7fe feee 	bl	10023c8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 10035ec:	682c      	ldr	r4, [r5, #0]
 10035ee:	4284      	cmp	r4, r0
 10035f0:	bf38      	it	cc
 10035f2:	4444      	addcc	r4, r8
 10035f4:	1a24      	subs	r4, r4, r0
 10035f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1003680 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x108>
 10035fa:	4544      	cmp	r4, r8
 10035fc:	d928      	bls.n	1003650 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xd8>
 10035fe:	7a29      	ldrb	r1, [r5, #8]
 1003600:	fbb4 f7f8 	udiv	r7, r4, r8
 1003604:	fb08 4717 	mls	r7, r8, r7, r4
 1003608:	2f00      	cmp	r7, #0
 100360a:	bf08      	it	eq
 100360c:	4647      	moveq	r7, r8
 100360e:	1be4      	subs	r4, r4, r7
 1003610:	4638      	mov	r0, r7
 1003612:	f001 f849 	bl	10046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1003616:	4430      	add	r0, r6
 1003618:	fbb4 f4f8 	udiv	r4, r4, r8
 100361c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1003620:	742c      	strb	r4, [r5, #16]
 1003622:	6168      	str	r0, [r5, #20]
 1003624:	e002      	b.n	100362c <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xb4>
 1003626:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 100362a:	616e      	str	r6, [r5, #20]
 100362c:	4628      	mov	r0, r5
 100362e:	f7ff fee9 	bl	1003404 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 1003632:	f7ff feb3 	bl	100339c <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1003636:	2000      	movs	r0, #0
 1003638:	e7c8      	b.n	10035cc <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x54>
 100363a:	7a2b      	ldrb	r3, [r5, #8]
 100363c:	682c      	ldr	r4, [r5, #0]
 100363e:	b183      	cbz	r3, 1003662 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xea>
 1003640:	2c3d      	cmp	r4, #61	; 0x3d
 1003642:	d811      	bhi.n	1003668 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xf0>
 1003644:	f1b8 0f02 	cmp.w	r8, #2
 1003648:	f04f 043f 	mov.w	r4, #63	; 0x3f
 100364c:	d100      	bne.n	1003650 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xd8>
 100364e:	61ac      	str	r4, [r5, #24]
 1003650:	7a29      	ldrb	r1, [r5, #8]
 1003652:	4620      	mov	r0, r4
 1003654:	f001 f828 	bl	10046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1003658:	4430      	add	r0, r6
 100365a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100365e:	6168      	str	r0, [r5, #20]
 1003660:	e7e4      	b.n	100362c <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xb4>
 1003662:	2c5d      	cmp	r4, #93	; 0x5d
 1003664:	bf38      	it	cc
 1003666:	245d      	movcc	r4, #93	; 0x5d
 1003668:	f1b8 0f02 	cmp.w	r8, #2
 100366c:	d1c3      	bne.n	10035f6 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x7e>
 100366e:	61ac      	str	r4, [r5, #24]
 1003670:	e7c1      	b.n	10035f6 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x7e>
 1003672:	f06f 0022 	mvn.w	r0, #34	; 0x22
 1003676:	e7a9      	b.n	10035cc <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x54>
 1003678:	210006bc 	.word	0x210006bc
 100367c:	1e847fe1 	.word	0x1e847fe1
 1003680:	07a12000 	.word	0x07a12000

01003684 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ>:
 1003684:	4b09      	ldr	r3, [pc, #36]	; (10036ac <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ+0x28>)
 1003686:	2201      	movs	r2, #1
 1003688:	605a      	str	r2, [r3, #4]
 100368a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100368e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1003692:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1003696:	4b06      	ldr	r3, [pc, #24]	; (10036b0 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ+0x2c>)
 1003698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 100369c:	f3bf 8f4f 	dsb	sy
 10036a0:	f3bf 8f6f 	isb	sy
 10036a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10036a8:	4770      	bx	lr
 10036aa:	bf00      	nop
 10036ac:	41010000 	.word	0x41010000
 10036b0:	e000e100 	.word	0xe000e100

010036b4 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ>:
 10036b4:	b538      	push	{r3, r4, r5, lr}
 10036b6:	4d7d      	ldr	r5, [pc, #500]	; (10038ac <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x1f8>)
 10036b8:	2400      	movs	r4, #0
 10036ba:	2301      	movs	r3, #1
 10036bc:	f8c5 4ffc 	str.w	r4, [r5, #4092]	; 0xffc
 10036c0:	f8c5 3ffc 	str.w	r3, [r5, #4092]	; 0xffc
 10036c4:	f000 fa0a 	bl	1003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>
 10036c8:	2800      	cmp	r0, #0
 10036ca:	f000 80e3 	beq.w	1003894 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x1e0>
 10036ce:	23a7      	movs	r3, #167	; 0xa7
 10036d0:	602c      	str	r4, [r5, #0]
 10036d2:	606c      	str	r4, [r5, #4]
 10036d4:	4622      	mov	r2, r4
 10036d6:	60ac      	str	r4, [r5, #8]
 10036d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 10036dc:	60ec      	str	r4, [r5, #12]
 10036de:	612c      	str	r4, [r5, #16]
 10036e0:	616c      	str	r4, [r5, #20]
 10036e2:	61ac      	str	r4, [r5, #24]
 10036e4:	61ec      	str	r4, [r5, #28]
 10036e6:	622c      	str	r4, [r5, #32]
 10036e8:	626c      	str	r4, [r5, #36]	; 0x24
 10036ea:	62ac      	str	r4, [r5, #40]	; 0x28
 10036ec:	62ec      	str	r4, [r5, #44]	; 0x2c
 10036ee:	632c      	str	r4, [r5, #48]	; 0x30
 10036f0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 10036f4:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 10036f8:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
 10036fc:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
 1003700:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
 1003704:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
 1003708:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
 100370c:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
 1003710:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
 1003714:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
 1003718:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
 100371c:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
 1003720:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 1003724:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
 1003728:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
 100372c:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
 1003730:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
 1003734:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
 1003738:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
 100373c:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
 1003740:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 1003744:	f8c5 4128 	str.w	r4, [r5, #296]	; 0x128
 1003748:	f8c5 4130 	str.w	r4, [r5, #304]	; 0x130
 100374c:	f8c5 4134 	str.w	r4, [r5, #308]	; 0x134
 1003750:	f8c5 4138 	str.w	r4, [r5, #312]	; 0x138
 1003754:	f8c5 413c 	str.w	r4, [r5, #316]	; 0x13c
 1003758:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
 100375c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
 1003760:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 1003764:	f8c5 414c 	str.w	r4, [r5, #332]	; 0x14c
 1003768:	f8c5 4150 	str.w	r4, [r5, #336]	; 0x150
 100376c:	f8c5 4154 	str.w	r4, [r5, #340]	; 0x154
 1003770:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
 1003774:	f8c5 415c 	str.w	r4, [r5, #348]	; 0x15c
 1003778:	f8c5 416c 	str.w	r4, [r5, #364]	; 0x16c
 100377c:	f8c5 4170 	str.w	r4, [r5, #368]	; 0x170
 1003780:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
 1003784:	f8c5 4184 	str.w	r4, [r5, #388]	; 0x184
 1003788:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 100378c:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 1003790:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
 1003794:	f8c5 4194 	str.w	r4, [r5, #404]	; 0x194
 1003798:	f8c5 4198 	str.w	r4, [r5, #408]	; 0x198
 100379c:	f8c5 419c 	str.w	r4, [r5, #412]	; 0x19c
 10037a0:	f8c5 41a8 	str.w	r4, [r5, #424]	; 0x1a8
 10037a4:	f8c5 41b0 	str.w	r4, [r5, #432]	; 0x1b0
 10037a8:	f8c5 41b4 	str.w	r4, [r5, #436]	; 0x1b4
 10037ac:	f8c5 41b8 	str.w	r4, [r5, #440]	; 0x1b8
 10037b0:	f8c5 41bc 	str.w	r4, [r5, #444]	; 0x1bc
 10037b4:	f8c5 41c0 	str.w	r4, [r5, #448]	; 0x1c0
 10037b8:	f8c5 41c4 	str.w	r4, [r5, #452]	; 0x1c4
 10037bc:	f8c5 41c8 	str.w	r4, [r5, #456]	; 0x1c8
 10037c0:	f8c5 41cc 	str.w	r4, [r5, #460]	; 0x1cc
 10037c4:	f8c5 41d0 	str.w	r4, [r5, #464]	; 0x1d0
 10037c8:	f8c5 41d4 	str.w	r4, [r5, #468]	; 0x1d4
 10037cc:	f8c5 41d8 	str.w	r4, [r5, #472]	; 0x1d8
 10037d0:	f8c5 41dc 	str.w	r4, [r5, #476]	; 0x1dc
 10037d4:	f8c5 41ec 	str.w	r4, [r5, #492]	; 0x1ec
 10037d8:	f8c5 41f0 	str.w	r4, [r5, #496]	; 0x1f0
 10037dc:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
 10037e0:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
 10037e4:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
 10037e8:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
 10037ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
 10037f0:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
 10037f4:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
 10037f8:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
 10037fc:	f8c5 4518 	str.w	r4, [r5, #1304]	; 0x518
 1003800:	f8c5 451c 	str.w	r4, [r5, #1308]	; 0x51c
 1003804:	f8c5 4520 	str.w	r4, [r5, #1312]	; 0x520
 1003808:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
 100380c:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
 1003810:	f8c5 452c 	str.w	r4, [r5, #1324]	; 0x52c
 1003814:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
 1003818:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
 100381c:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
 1003820:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
 1003824:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
 1003828:	f8c5 4554 	str.w	r4, [r5, #1364]	; 0x554
 100382c:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
 1003830:	f8c5 4640 	str.w	r4, [r5, #1600]	; 0x640
 1003834:	f8c5 4644 	str.w	r4, [r5, #1604]	; 0x644
 1003838:	f8c5 4648 	str.w	r4, [r5, #1608]	; 0x648
 100383c:	f8c5 4650 	str.w	r4, [r5, #1616]	; 0x650
 1003840:	f8c5 3660 	str.w	r3, [r5, #1632]	; 0x660
 1003844:	4b1a      	ldr	r3, [pc, #104]	; (10038b0 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x1fc>)
 1003846:	f8c5 4664 	str.w	r4, [r5, #1636]	; 0x664
 100384a:	f8c5 366c 	str.w	r3, [r5, #1644]	; 0x66c
 100384e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 1003852:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 1003856:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
 100385a:	4b16      	ldr	r3, [pc, #88]	; (10038b4 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x200>)
 100385c:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
 1003860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 1003864:	f8c5 4914 	str.w	r4, [r5, #2324]	; 0x914
 1003868:	f8c5 4928 	str.w	r4, [r5, #2344]	; 0x928
 100386c:	f8c5 492c 	str.w	r4, [r5, #2348]	; 0x92c
 1003870:	f8c5 4950 	str.w	r4, [r5, #2384]	; 0x950
 1003874:	f8c5 3954 	str.w	r3, [r5, #2388]	; 0x954
 1003878:	00a3      	lsls	r3, r4, #2
 100387a:	3401      	adds	r4, #1
 100387c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1003880:	2c08      	cmp	r4, #8
 1003882:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 1003886:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 100388a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 100388e:	f8c3 1930 	str.w	r1, [r3, #2352]	; 0x930
 1003892:	d1f1      	bne.n	1003878 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x1c4>
 1003894:	4b08      	ldr	r3, [pc, #32]	; (10038b8 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x204>)
 1003896:	f44f 7280 	mov.w	r2, #256	; 0x100
 100389a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 100389e:	f3bf 8f4f 	dsb	sy
 10038a2:	f3bf 8f6f 	isb	sy
 10038a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10038aa:	bd38      	pop	{r3, r4, r5, pc}
 10038ac:	41008000 	.word	0x41008000
 10038b0:	052d0000 	.word	0x052d0000
 10038b4:	00023282 	.word	0x00023282
 10038b8:	e000e100 	.word	0xe000e100

010038bc <mpsl_init>:
 10038bc:	b570      	push	{r4, r5, r6, lr}
 10038be:	4d18      	ldr	r5, [pc, #96]	; (1003920 <mpsl_init+0x64>)
 10038c0:	4606      	mov	r6, r0
 10038c2:	460c      	mov	r4, r1
 10038c4:	782b      	ldrb	r3, [r5, #0]
 10038c6:	bb3b      	cbnz	r3, 1003918 <mpsl_init+0x5c>
 10038c8:	4b16      	ldr	r3, [pc, #88]	; (1003924 <mpsl_init+0x68>)
 10038ca:	606a      	str	r2, [r5, #4]
 10038cc:	2800      	cmp	r0, #0
 10038ce:	bf08      	it	eq
 10038d0:	461e      	moveq	r6, r3
 10038d2:	7229      	strb	r1, [r5, #8]
 10038d4:	f7ff feee 	bl	10036b4 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ>
 10038d8:	f7ff fed4 	bl	1003684 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ>
 10038dc:	4630      	mov	r0, r6
 10038de:	f7ff fc37 	bl	1003150 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
 10038e2:	4606      	mov	r6, r0
 10038e4:	b9b0      	cbnz	r0, 1003914 <mpsl_init+0x58>
 10038e6:	f7fd fc43 	bl	1001170 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
 10038ea:	f7ff fb91 	bl	1003010 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
 10038ee:	f000 feaa 	bl	1004646 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
 10038f2:	2c00      	cmp	r4, #0
 10038f4:	db0c      	blt.n	1003910 <mpsl_init+0x54>
 10038f6:	f004 021f 	and.w	r2, r4, #31
 10038fa:	0964      	lsrs	r4, r4, #5
 10038fc:	2301      	movs	r3, #1
 10038fe:	00a4      	lsls	r4, r4, #2
 1003900:	4093      	lsls	r3, r2
 1003902:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 1003906:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 100390a:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 100390e:	6023      	str	r3, [r4, #0]
 1003910:	2301      	movs	r3, #1
 1003912:	702b      	strb	r3, [r5, #0]
 1003914:	4630      	mov	r0, r6
 1003916:	bd70      	pop	{r4, r5, r6, pc}
 1003918:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 100391c:	e7fa      	b.n	1003914 <mpsl_init+0x58>
 100391e:	bf00      	nop
 1003920:	210006c4 	.word	0x210006c4
 1003924:	01010250 	.word	0x01010250

01003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
 1003928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 100392a:	4b12      	ldr	r3, [pc, #72]	; (1003974 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x4c>)
 100392c:	685d      	ldr	r5, [r3, #4]
 100392e:	b985      	cbnz	r5, 1003952 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x2a>
 1003930:	e7fe      	b.n	1003930 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x8>
 1003932:	fbb4 f4f6 	udiv	r4, r4, r6
 1003936:	b2d3      	uxtb	r3, r2
 1003938:	3201      	adds	r2, #1
 100393a:	2c00      	cmp	r4, #0
 100393c:	d1f9      	bne.n	1003932 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0xa>
 100393e:	aa04      	add	r2, sp, #16
 1003940:	441a      	add	r2, r3
 1003942:	f802 4c0c 	strb.w	r4, [r2, #-12]
 1003946:	220a      	movs	r2, #10
 1003948:	b93b      	cbnz	r3, 100395a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x32>
 100394a:	a801      	add	r0, sp, #4
 100394c:	47a8      	blx	r5
 100394e:	b004      	add	sp, #16
 1003950:	bd70      	pop	{r4, r5, r6, pc}
 1003952:	4604      	mov	r4, r0
 1003954:	2200      	movs	r2, #0
 1003956:	260a      	movs	r6, #10
 1003958:	e7ed      	b.n	1003936 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0xe>
 100395a:	3b01      	subs	r3, #1
 100395c:	ac04      	add	r4, sp, #16
 100395e:	b2db      	uxtb	r3, r3
 1003960:	18e6      	adds	r6, r4, r3
 1003962:	fbb0 f4f2 	udiv	r4, r0, r2
 1003966:	fb02 0014 	mls	r0, r2, r4, r0
 100396a:	3030      	adds	r0, #48	; 0x30
 100396c:	f806 0c0c 	strb.w	r0, [r6, #-12]
 1003970:	4620      	mov	r0, r4
 1003972:	e7e9      	b.n	1003948 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x20>
 1003974:	210006c4 	.word	0x210006c4

01003978 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
 1003978:	4b07      	ldr	r3, [pc, #28]	; (1003998 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
 100397a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 100397e:	2b00      	cmp	r3, #0
 1003980:	db09      	blt.n	1003996 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
 1003982:	095a      	lsrs	r2, r3, #5
 1003984:	2101      	movs	r1, #1
 1003986:	f003 031f 	and.w	r3, r3, #31
 100398a:	3240      	adds	r2, #64	; 0x40
 100398c:	fa01 f303 	lsl.w	r3, r1, r3
 1003990:	4902      	ldr	r1, [pc, #8]	; (100399c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x24>)
 1003992:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 1003996:	4770      	bx	lr
 1003998:	210006c4 	.word	0x210006c4
 100399c:	e000e100 	.word	0xe000e100

010039a0 <mpsl_temperature_get>:
 10039a0:	4b1b      	ldr	r3, [pc, #108]	; (1003a10 <mpsl_temperature_get+0x70>)
 10039a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 10039a6:	b570      	push	{r4, r5, r6, lr}
 10039a8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 10039ac:	f3bf 8f4f 	dsb	sy
 10039b0:	f3bf 8f6f 	isb	sy
 10039b4:	4d17      	ldr	r5, [pc, #92]	; (1003a14 <mpsl_temperature_get+0x74>)
 10039b6:	2000      	movs	r0, #0
 10039b8:	4c17      	ldr	r4, [pc, #92]	; (1003a18 <mpsl_temperature_get+0x78>)
 10039ba:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
 10039be:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 10039c2:	6926      	ldr	r6, [r4, #16]
 10039c4:	6921      	ldr	r1, [r4, #16]
 10039c6:	f006 0610 	and.w	r6, r6, #16
 10039ca:	f041 0110 	orr.w	r1, r1, #16
 10039ce:	6121      	str	r1, [r4, #16]
 10039d0:	2101      	movs	r1, #1
 10039d2:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304
 10039d6:	6029      	str	r1, [r5, #0]
 10039d8:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 10039dc:	b1a3      	cbz	r3, 1003a08 <mpsl_temperature_get+0x68>
 10039de:	b91e      	cbnz	r6, 10039e8 <mpsl_temperature_get+0x48>
 10039e0:	6923      	ldr	r3, [r4, #16]
 10039e2:	f023 0310 	bic.w	r3, r3, #16
 10039e6:	6123      	str	r3, [r4, #16]
 10039e8:	4b0a      	ldr	r3, [pc, #40]	; (1003a14 <mpsl_temperature_get+0x74>)
 10039ea:	2201      	movs	r2, #1
 10039ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 10039f0:	605a      	str	r2, [r3, #4]
 10039f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10039f6:	2200      	movs	r2, #0
 10039f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 10039fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1003a00:	4b03      	ldr	r3, [pc, #12]	; (1003a10 <mpsl_temperature_get+0x70>)
 1003a02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003a06:	bd70      	pop	{r4, r5, r6, pc}
 1003a08:	f000 fe5f 	bl	10046ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
 1003a0c:	e7e4      	b.n	10039d8 <mpsl_temperature_get+0x38>
 1003a0e:	bf00      	nop
 1003a10:	e000e100 	.word	0xe000e100
 1003a14:	41010000 	.word	0x41010000
 1003a18:	e000ed00 	.word	0xe000ed00

01003a1c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
 1003a1c:	b538      	push	{r3, r4, r5, lr}
 1003a1e:	490c      	ldr	r1, [pc, #48]	; (1003a50 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x34>)
 1003a20:	2305      	movs	r3, #5
 1003a22:	3b01      	subs	r3, #1
 1003a24:	b2db      	uxtb	r3, r3
 1003a26:	2bff      	cmp	r3, #255	; 0xff
 1003a28:	d103      	bne.n	1003a32 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x16>
 1003a2a:	214b      	movs	r1, #75	; 0x4b
 1003a2c:	2069      	movs	r0, #105	; 0x69
 1003a2e:	f7ff ff7b 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003a32:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 1003a36:	7915      	ldrb	r5, [r2, #4]
 1003a38:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 1003a3c:	2d00      	cmp	r5, #0
 1003a3e:	d1f0      	bne.n	1003a22 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x6>
 1003a40:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 1003a44:	2101      	movs	r1, #1
 1003a46:	7154      	strb	r4, [r2, #5]
 1003a48:	4618      	mov	r0, r3
 1003a4a:	7194      	strb	r4, [r2, #6]
 1003a4c:	7111      	strb	r1, [r2, #4]
 1003a4e:	bd38      	pop	{r3, r4, r5, pc}
 1003a50:	210006d0 	.word	0x210006d0

01003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
 1003a54:	2804      	cmp	r0, #4
 1003a56:	b508      	push	{r3, lr}
 1003a58:	d903      	bls.n	1003a62 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xe>
 1003a5a:	215a      	movs	r1, #90	; 0x5a
 1003a5c:	2069      	movs	r0, #105	; 0x69
 1003a5e:	f7ff ff63 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003a62:	4b09      	ldr	r3, [pc, #36]	; (1003a88 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
 1003a64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1003a68:	7903      	ldrb	r3, [r0, #4]
 1003a6a:	2b01      	cmp	r3, #1
 1003a6c:	d001      	beq.n	1003a72 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
 1003a6e:	215b      	movs	r1, #91	; 0x5b
 1003a70:	e7f4      	b.n	1003a5c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x8>
 1003a72:	7943      	ldrb	r3, [r0, #5]
 1003a74:	7982      	ldrb	r2, [r0, #6]
 1003a76:	3301      	adds	r3, #1
 1003a78:	b2db      	uxtb	r3, r3
 1003a7a:	429a      	cmp	r2, r3
 1003a7c:	bf18      	it	ne
 1003a7e:	7143      	strbne	r3, [r0, #5]
 1003a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003a84:	f7ff bf78 	b.w	1003978 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
 1003a88:	210006d0 	.word	0x210006d0

01003a8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
 1003a8c:	b570      	push	{r4, r5, r6, lr}
 1003a8e:	2506      	movs	r5, #6
 1003a90:	4c11      	ldr	r4, [pc, #68]	; (1003ad8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x4c>)
 1003a92:	2600      	movs	r6, #0
 1003a94:	3d01      	subs	r5, #1
 1003a96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 1003a9a:	d100      	bne.n	1003a9e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x12>
 1003a9c:	bd70      	pop	{r4, r5, r6, pc}
 1003a9e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 1003aa2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 1003aa6:	791a      	ldrb	r2, [r3, #4]
 1003aa8:	2a01      	cmp	r2, #1
 1003aaa:	d109      	bne.n	1003ac0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x34>
 1003aac:	7958      	ldrb	r0, [r3, #5]
 1003aae:	799a      	ldrb	r2, [r3, #6]
 1003ab0:	4290      	cmp	r0, r2
 1003ab2:	d005      	beq.n	1003ac0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x34>
 1003ab4:	795a      	ldrb	r2, [r3, #5]
 1003ab6:	b2d2      	uxtb	r2, r2
 1003ab8:	719a      	strb	r2, [r3, #6]
 1003aba:	f854 3031 	ldr.w	r3, [r4, r1, lsl #3]
 1003abe:	4798      	blx	r3
 1003ac0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 1003ac4:	3301      	adds	r3, #1
 1003ac6:	b2db      	uxtb	r3, r3
 1003ac8:	2b04      	cmp	r3, #4
 1003aca:	bf94      	ite	ls
 1003acc:	f884 3028 	strbls.w	r3, [r4, #40]	; 0x28
 1003ad0:	f884 6028 	strbhi.w	r6, [r4, #40]	; 0x28
 1003ad4:	e7de      	b.n	1003a94 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x8>
 1003ad6:	bf00      	nop
 1003ad8:	210006d0 	.word	0x210006d0

01003adc <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ>:
 1003adc:	4b02      	ldr	r3, [pc, #8]	; (1003ae8 <sym_B4H3F5QPN2TDYOODF5YTAXQXBYEXGRA3HU76OEQ+0xc>)
 1003ade:	6818      	ldr	r0, [r3, #0]
 1003ae0:	1e83      	subs	r3, r0, #2
 1003ae2:	4258      	negs	r0, r3
 1003ae4:	4158      	adcs	r0, r3
 1003ae6:	4770      	bx	lr
 1003ae8:	01ff0134 	.word	0x01ff0134

01003aec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
 1003aec:	4800      	ldr	r0, [pc, #0]	; (1003af0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x4>)
 1003aee:	4770      	bx	lr
 1003af0:	41080700 	.word	0x41080700

01003af4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
 1003af4:	0783      	lsls	r3, r0, #30
 1003af6:	b2c9      	uxtb	r1, r1
 1003af8:	d068      	beq.n	1003bcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xd8>
 1003afa:	2a00      	cmp	r2, #0
 1003afc:	d06b      	beq.n	1003bd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe2>
 1003afe:	4603      	mov	r3, r0
 1003b00:	e001      	b.n	1003b06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
 1003b02:	2a00      	cmp	r2, #0
 1003b04:	d067      	beq.n	1003bd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe2>
 1003b06:	f803 1b01 	strb.w	r1, [r3], #1
 1003b0a:	f013 0f03 	tst.w	r3, #3
 1003b0e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 1003b12:	d1f6      	bne.n	1003b02 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
 1003b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1003b18:	2a03      	cmp	r2, #3
 1003b1a:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 1003b1e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 1003b22:	d947      	bls.n	1003bb4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc0>
 1003b24:	f1a2 0804 	sub.w	r8, r2, #4
 1003b28:	f3c3 0480 	ubfx	r4, r3, #2, #1
 1003b2c:	ea4f 0798 	mov.w	r7, r8, lsr #2
 1003b30:	f1b8 0f17 	cmp.w	r8, #23
 1003b34:	f107 0701 	add.w	r7, r7, #1
 1003b38:	d94a      	bls.n	1003bd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xdc>
 1003b3a:	4699      	mov	r9, r3
 1003b3c:	2c00      	cmp	r4, #0
 1003b3e:	d043      	beq.n	1003bc8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xd4>
 1003b40:	f849 5b04 	str.w	r5, [r9], #4
 1003b44:	eba7 0e04 	sub.w	lr, r7, r4
 1003b48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 1003b4c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 1003b50:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 1003b54:	e9c4 5500 	strd	r5, r5, [r4]
 1003b58:	3408      	adds	r4, #8
 1003b5a:	42a6      	cmp	r6, r4
 1003b5c:	d1fa      	bne.n	1003b54 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
 1003b5e:	f02e 0c01 	bic.w	ip, lr, #1
 1003b62:	ebcc 768c 	rsb	r6, ip, ip, lsl #30
 1003b66:	45e6      	cmp	lr, ip
 1003b68:	eb09 048c 	add.w	r4, r9, ip, lsl #2
 1003b6c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 1003b70:	d01c      	beq.n	1003bac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb8>
 1003b72:	f1a6 0c04 	sub.w	ip, r6, #4
 1003b76:	6025      	str	r5, [r4, #0]
 1003b78:	f1bc 0f03 	cmp.w	ip, #3
 1003b7c:	d916      	bls.n	1003bac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb8>
 1003b7e:	f1a6 0c08 	sub.w	ip, r6, #8
 1003b82:	6065      	str	r5, [r4, #4]
 1003b84:	f1bc 0f03 	cmp.w	ip, #3
 1003b88:	d910      	bls.n	1003bac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb8>
 1003b8a:	f1a6 0c0c 	sub.w	ip, r6, #12
 1003b8e:	60a5      	str	r5, [r4, #8]
 1003b90:	f1bc 0f03 	cmp.w	ip, #3
 1003b94:	d90a      	bls.n	1003bac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb8>
 1003b96:	f1a6 0c10 	sub.w	ip, r6, #16
 1003b9a:	60e5      	str	r5, [r4, #12]
 1003b9c:	f1bc 0f03 	cmp.w	ip, #3
 1003ba0:	d904      	bls.n	1003bac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb8>
 1003ba2:	3e14      	subs	r6, #20
 1003ba4:	6125      	str	r5, [r4, #16]
 1003ba6:	2e03      	cmp	r6, #3
 1003ba8:	bf88      	it	hi
 1003baa:	6165      	strhi	r5, [r4, #20]
 1003bac:	f002 0203 	and.w	r2, r2, #3
 1003bb0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 1003bb4:	b132      	cbz	r2, 1003bc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xd0>
 1003bb6:	3a01      	subs	r2, #1
 1003bb8:	7019      	strb	r1, [r3, #0]
 1003bba:	d003      	beq.n	1003bc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xd0>
 1003bbc:	2a01      	cmp	r2, #1
 1003bbe:	7059      	strb	r1, [r3, #1]
 1003bc0:	bf18      	it	ne
 1003bc2:	7099      	strbne	r1, [r3, #2]
 1003bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1003bc8:	4690      	mov	r8, r2
 1003bca:	e7bb      	b.n	1003b44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x50>
 1003bcc:	4603      	mov	r3, r0
 1003bce:	e7a1      	b.n	1003b14 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x20>
 1003bd0:	461c      	mov	r4, r3
 1003bd2:	4616      	mov	r6, r2
 1003bd4:	e7cd      	b.n	1003b72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x7e>
 1003bd6:	4770      	bx	lr

01003bd8 <mpsl_cx_request>:
 1003bd8:	4b01      	ldr	r3, [pc, #4]	; (1003be0 <mpsl_cx_request+0x8>)
 1003bda:	681b      	ldr	r3, [r3, #0]
 1003bdc:	681b      	ldr	r3, [r3, #0]
 1003bde:	4718      	bx	r3
 1003be0:	21000004 	.word	0x21000004

01003be4 <mpsl_cx_release>:
 1003be4:	4b01      	ldr	r3, [pc, #4]	; (1003bec <mpsl_cx_release+0x8>)
 1003be6:	681b      	ldr	r3, [r3, #0]
 1003be8:	685b      	ldr	r3, [r3, #4]
 1003bea:	4718      	bx	r3
 1003bec:	21000004 	.word	0x21000004

01003bf0 <mpsl_cx_granted_ops_get>:
 1003bf0:	4b01      	ldr	r3, [pc, #4]	; (1003bf8 <mpsl_cx_granted_ops_get+0x8>)
 1003bf2:	681b      	ldr	r3, [r3, #0]
 1003bf4:	689b      	ldr	r3, [r3, #8]
 1003bf6:	4718      	bx	r3
 1003bf8:	21000004 	.word	0x21000004

01003bfc <mpsl_cx_register_callback>:
 1003bfc:	4b01      	ldr	r3, [pc, #4]	; (1003c04 <mpsl_cx_register_callback+0x8>)
 1003bfe:	681b      	ldr	r3, [r3, #0]
 1003c00:	691b      	ldr	r3, [r3, #16]
 1003c02:	4718      	bx	r3
 1003c04:	21000004 	.word	0x21000004

01003c08 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>:
 1003c08:	b508      	push	{r3, lr}
 1003c0a:	4b0c      	ldr	r3, [pc, #48]	; (1003c3c <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x34>)
 1003c0c:	781a      	ldrb	r2, [r3, #0]
 1003c0e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 1003c12:	b112      	cbz	r2, 1003c1a <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x12>
 1003c14:	1e5a      	subs	r2, r3, #1
 1003c16:	421a      	tst	r2, r3
 1003c18:	d003      	beq.n	1003c22 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x1a>
 1003c1a:	21dd      	movs	r1, #221	; 0xdd
 1003c1c:	206b      	movs	r0, #107	; 0x6b
 1003c1e:	f7ff fe83 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003c22:	b119      	cbz	r1, 1003c2c <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x24>
 1003c24:	4203      	tst	r3, r0
 1003c26:	d107      	bne.n	1003c38 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x30>
 1003c28:	21e2      	movs	r1, #226	; 0xe2
 1003c2a:	e7f7      	b.n	1003c1c <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x14>
 1003c2c:	ea23 0300 	bic.w	r3, r3, r0
 1003c30:	069b      	lsls	r3, r3, #26
 1003c32:	d101      	bne.n	1003c38 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x30>
 1003c34:	21e6      	movs	r1, #230	; 0xe6
 1003c36:	e7f1      	b.n	1003c1c <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x14>
 1003c38:	bd08      	pop	{r3, pc}
 1003c3a:	bf00      	nop
 1003c3c:	21000008 	.word	0x21000008

01003c40 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ>:
 1003c40:	b538      	push	{r3, r4, r5, lr}
 1003c42:	4c16      	ldr	r4, [pc, #88]	; (1003c9c <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x5c>)
 1003c44:	2004      	movs	r0, #4
 1003c46:	f7fe fa3d 	bl	10020c4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
 1003c4a:	2104      	movs	r1, #4
 1003c4c:	6825      	ldr	r5, [r4, #0]
 1003c4e:	4285      	cmp	r5, r0
 1003c50:	bf28      	it	cs
 1003c52:	4605      	movcs	r5, r0
 1003c54:	4628      	mov	r0, r5
 1003c56:	f7fe fa8b 	bl	1002170 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
 1003c5a:	b130      	cbz	r0, 1003c6a <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x2a>
 1003c5c:	2801      	cmp	r0, #1
 1003c5e:	d019      	beq.n	1003c94 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x54>
 1003c60:	f240 113f 	movw	r1, #319	; 0x13f
 1003c64:	206b      	movs	r0, #107	; 0x6b
 1003c66:	f7ff fe5f 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003c6a:	6823      	ldr	r3, [r4, #0]
 1003c6c:	68e0      	ldr	r0, [r4, #12]
 1003c6e:	42ab      	cmp	r3, r5
 1003c70:	d106      	bne.n	1003c80 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x40>
 1003c72:	f7fe f983 	bl	1001f7c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
 1003c76:	68e2      	ldr	r2, [r4, #12]
 1003c78:	6823      	ldr	r3, [r4, #0]
 1003c7a:	4413      	add	r3, r2
 1003c7c:	60e3      	str	r3, [r4, #12]
 1003c7e:	bd38      	pop	{r3, r4, r5, pc}
 1003c80:	2301      	movs	r3, #1
 1003c82:	4428      	add	r0, r5
 1003c84:	7423      	strb	r3, [r4, #16]
 1003c86:	8963      	ldrh	r3, [r4, #10]
 1003c88:	60e0      	str	r0, [r4, #12]
 1003c8a:	1ac0      	subs	r0, r0, r3
 1003c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1003c90:	f7fe b974 	b.w	1001f7c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
 1003c94:	7420      	strb	r0, [r4, #16]
 1003c96:	8963      	ldrh	r3, [r4, #10]
 1003c98:	68e0      	ldr	r0, [r4, #12]
 1003c9a:	e7f6      	b.n	1003c8a <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x4a>
 1003c9c:	21000744 	.word	0x21000744

01003ca0 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>:
 1003ca0:	b508      	push	{r3, lr}
 1003ca2:	4b0e      	ldr	r3, [pc, #56]	; (1003cdc <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x3c>)
 1003ca4:	2200      	movs	r2, #0
 1003ca6:	2002      	movs	r0, #2
 1003ca8:	f103 0114 	add.w	r1, r3, #20
 1003cac:	615a      	str	r2, [r3, #20]
 1003cae:	608a      	str	r2, [r1, #8]
 1003cb0:	2201      	movs	r2, #1
 1003cb2:	751a      	strb	r2, [r3, #20]
 1003cb4:	2204      	movs	r2, #4
 1003cb6:	779a      	strb	r2, [r3, #30]
 1003cb8:	681a      	ldr	r2, [r3, #0]
 1003cba:	619a      	str	r2, [r3, #24]
 1003cbc:	685a      	ldr	r2, [r3, #4]
 1003cbe:	621a      	str	r2, [r3, #32]
 1003cc0:	4a07      	ldr	r2, [pc, #28]	; (1003ce0 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x40>)
 1003cc2:	7010      	strb	r0, [r2, #0]
 1003cc4:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 1003cc8:	f7fd fc4a 	bl	1001560 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
 1003ccc:	b920      	cbnz	r0, 1003cd8 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x38>
 1003cce:	f240 1103 	movw	r1, #259	; 0x103
 1003cd2:	206b      	movs	r0, #107	; 0x6b
 1003cd4:	f7ff fe28 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003cd8:	bd08      	pop	{r3, pc}
 1003cda:	bf00      	nop
 1003cdc:	21000744 	.word	0x21000744
 1003ce0:	21000008 	.word	0x21000008

01003ce4 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA>:
 1003ce4:	b570      	push	{r4, r5, r6, lr}
 1003ce6:	f3ef 8510 	mrs	r5, PRIMASK
 1003cea:	b672      	cpsid	i
 1003cec:	4c25      	ldr	r4, [pc, #148]	; (1003d84 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa0>)
 1003cee:	2300      	movs	r3, #0
 1003cf0:	f894 6025 	ldrb.w	r6, [r4, #37]	; 0x25
 1003cf4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 1003cf8:	2e01      	cmp	r6, #1
 1003cfa:	d008      	beq.n	1003d0e <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x2a>
 1003cfc:	2e00      	cmp	r6, #0
 1003cfe:	d03b      	beq.n	1003d78 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x94>
 1003d00:	2e02      	cmp	r6, #2
 1003d02:	d01d      	beq.n	1003d40 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x5c>
 1003d04:	f385 8810 	msr	PRIMASK, r5
 1003d08:	f240 119f 	movw	r1, #415	; 0x19f
 1003d0c:	e008      	b.n	1003d20 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x3c>
 1003d0e:	f385 8810 	msr	PRIMASK, r5
 1003d12:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 1003d16:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 1003d1a:	b123      	cbz	r3, 1003d26 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x42>
 1003d1c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 1003d20:	206b      	movs	r0, #107	; 0x6b
 1003d22:	f7ff fe01 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003d26:	2014      	movs	r0, #20
 1003d28:	f7ff ff6e 	bl	1003c08 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1003d2c:	4b16      	ldr	r3, [pc, #88]	; (1003d88 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa4>)
 1003d2e:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
 1003d32:	781b      	ldrb	r3, [r3, #0]
 1003d34:	2b01      	cmp	r3, #1
 1003d36:	d121      	bne.n	1003d7c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x98>
 1003d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1003d3c:	f7ff bfb0 	b.w	1003ca0 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>
 1003d40:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 1003d44:	b912      	cbnz	r2, 1003d4c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x68>
 1003d46:	f240 115d 	movw	r1, #349	; 0x15d
 1003d4a:	e7e9      	b.n	1003d20 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x3c>
 1003d4c:	490e      	ldr	r1, [pc, #56]	; (1003d88 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa4>)
 1003d4e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 1003d52:	780b      	ldrb	r3, [r1, #0]
 1003d54:	3b02      	subs	r3, #2
 1003d56:	b2db      	uxtb	r3, r3
 1003d58:	2b1e      	cmp	r3, #30
 1003d5a:	d810      	bhi.n	1003d7e <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x9a>
 1003d5c:	2201      	movs	r2, #1
 1003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 1003d62:	4a0a      	ldr	r2, [pc, #40]	; (1003d8c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa8>)
 1003d64:	4213      	tst	r3, r2
 1003d66:	d107      	bne.n	1003d78 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x94>
 1003d68:	f244 0204 	movw	r2, #16388	; 0x4004
 1003d6c:	4213      	tst	r3, r2
 1003d6e:	d006      	beq.n	1003d7e <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x9a>
 1003d70:	2320      	movs	r3, #32
 1003d72:	700b      	strb	r3, [r1, #0]
 1003d74:	f7fd fa3c 	bl	10011f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003d78:	f385 8810 	msr	PRIMASK, r5
 1003d7c:	bd70      	pop	{r4, r5, r6, pc}
 1003d7e:	f240 1179 	movw	r1, #377	; 0x179
 1003d82:	e7cd      	b.n	1003d20 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x3c>
 1003d84:	21000744 	.word	0x21000744
 1003d88:	21000008 	.word	0x21000008
 1003d8c:	40000041 	.word	0x40000041

01003d90 <nrf_raal_init>:
 1003d90:	b570      	push	{r4, r5, r6, lr}
 1003d92:	4c14      	ldr	r4, [pc, #80]	; (1003de4 <nrf_raal_init+0x54>)
 1003d94:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 1003d98:	b125      	cbz	r5, 1003da4 <nrf_raal_init+0x14>
 1003d9a:	f240 217e 	movw	r1, #638	; 0x27e
 1003d9e:	206b      	movs	r0, #107	; 0x6b
 1003da0:	f7ff fdc2 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003da4:	4b10      	ldr	r3, [pc, #64]	; (1003de8 <nrf_raal_init+0x58>)
 1003da6:	2601      	movs	r6, #1
 1003da8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 1003dac:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
 1003db0:	701e      	strb	r6, [r3, #0]
 1003db2:	4b0e      	ldr	r3, [pc, #56]	; (1003dec <nrf_raal_init+0x5c>)
 1003db4:	480e      	ldr	r0, [pc, #56]	; (1003df0 <nrf_raal_init+0x60>)
 1003db6:	e9c4 2300 	strd	r2, r3, [r4]
 1003dba:	4b0e      	ldr	r3, [pc, #56]	; (1003df4 <nrf_raal_init+0x64>)
 1003dbc:	60a3      	str	r3, [r4, #8]
 1003dbe:	f7ff fe2d 	bl	1003a1c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 1003dc2:	4629      	mov	r1, r5
 1003dc4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 1003dc8:	480b      	ldr	r0, [pc, #44]	; (1003df8 <nrf_raal_init+0x68>)
 1003dca:	f7fd fb9f 	bl	100150c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
 1003dce:	2820      	cmp	r0, #32
 1003dd0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 1003dd4:	d102      	bne.n	1003ddc <nrf_raal_init+0x4c>
 1003dd6:	f240 218d 	movw	r1, #653	; 0x28d
 1003dda:	e7e0      	b.n	1003d9e <nrf_raal_init+0xe>
 1003ddc:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
 1003de0:	bd70      	pop	{r4, r5, r6, pc}
 1003de2:	bf00      	nop
 1003de4:	21000744 	.word	0x21000744
 1003de8:	21000008 	.word	0x21000008
 1003dec:	07a11fff 	.word	0x07a11fff
 1003df0:	01003ce5 	.word	0x01003ce5
 1003df4:	00b70005 	.word	0x00b70005
 1003df8:	01003f61 	.word	0x01003f61

01003dfc <nrf_raal_continuous_mode_exit>:
 1003dfc:	4a11      	ldr	r2, [pc, #68]	; (1003e44 <nrf_raal_continuous_mode_exit+0x48>)
 1003dfe:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 1003e02:	b508      	push	{r3, lr}
 1003e04:	4613      	mov	r3, r2
 1003e06:	b921      	cbnz	r1, 1003e12 <nrf_raal_continuous_mode_exit+0x16>
 1003e08:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 1003e0c:	206b      	movs	r0, #107	; 0x6b
 1003e0e:	f7ff fd8b 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003e12:	f3ef 8110 	mrs	r1, PRIMASK
 1003e16:	b672      	cpsid	i
 1003e18:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 1003e1c:	b122      	cbz	r2, 1003e28 <nrf_raal_continuous_mode_exit+0x2c>
 1003e1e:	2a01      	cmp	r2, #1
 1003e20:	d00d      	beq.n	1003e3e <nrf_raal_continuous_mode_exit+0x42>
 1003e22:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 1003e26:	e7f1      	b.n	1003e0c <nrf_raal_continuous_mode_exit+0x10>
 1003e28:	2202      	movs	r2, #2
 1003e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 1003e2e:	b901      	cbnz	r1, 1003e32 <nrf_raal_continuous_mode_exit+0x36>
 1003e30:	b662      	cpsie	i
 1003e32:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 1003e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003e3a:	f7ff be0b 	b.w	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1003e3e:	2200      	movs	r2, #0
 1003e40:	e7f3      	b.n	1003e2a <nrf_raal_continuous_mode_exit+0x2e>
 1003e42:	bf00      	nop
 1003e44:	21000744 	.word	0x21000744

01003e48 <nrf_raal_continuous_ended>:
 1003e48:	4b0b      	ldr	r3, [pc, #44]	; (1003e78 <nrf_raal_continuous_ended+0x30>)
 1003e4a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 1003e4e:	b510      	push	{r4, lr}
 1003e50:	b923      	cbnz	r3, 1003e5c <nrf_raal_continuous_ended+0x14>
 1003e52:	f240 310b 	movw	r1, #779	; 0x30b
 1003e56:	206b      	movs	r0, #107	; 0x6b
 1003e58:	f7ff fd66 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003e5c:	f3ef 8410 	mrs	r4, PRIMASK
 1003e60:	b672      	cpsid	i
 1003e62:	4b06      	ldr	r3, [pc, #24]	; (1003e7c <nrf_raal_continuous_ended+0x34>)
 1003e64:	781a      	ldrb	r2, [r3, #0]
 1003e66:	2a10      	cmp	r2, #16
 1003e68:	d103      	bne.n	1003e72 <nrf_raal_continuous_ended+0x2a>
 1003e6a:	2208      	movs	r2, #8
 1003e6c:	701a      	strb	r2, [r3, #0]
 1003e6e:	f7fd f9bf 	bl	10011f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003e72:	b904      	cbnz	r4, 1003e76 <nrf_raal_continuous_ended+0x2e>
 1003e74:	b662      	cpsie	i
 1003e76:	bd10      	pop	{r4, pc}
 1003e78:	21000744 	.word	0x21000744
 1003e7c:	21000008 	.word	0x21000008

01003e80 <nrf_raal_timeslot_us_left_get>:
 1003e80:	4b10      	ldr	r3, [pc, #64]	; (1003ec4 <nrf_raal_timeslot_us_left_get+0x44>)
 1003e82:	781b      	ldrb	r3, [r3, #0]
 1003e84:	2b04      	cmp	r3, #4
 1003e86:	d11a      	bne.n	1003ebe <nrf_raal_timeslot_us_left_get+0x3e>
 1003e88:	4b0f      	ldr	r3, [pc, #60]	; (1003ec8 <nrf_raal_timeslot_us_left_get+0x48>)
 1003e8a:	7c1a      	ldrb	r2, [r3, #16]
 1003e8c:	b91a      	cbnz	r2, 1003e96 <nrf_raal_timeslot_us_left_get+0x16>
 1003e8e:	895a      	ldrh	r2, [r3, #10]
 1003e90:	6818      	ldr	r0, [r3, #0]
 1003e92:	1a80      	subs	r0, r0, r2
 1003e94:	4770      	bx	lr
 1003e96:	4b0d      	ldr	r3, [pc, #52]	; (1003ecc <nrf_raal_timeslot_us_left_get+0x4c>)
 1003e98:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
 1003e9c:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
 1003ea0:	4b0b      	ldr	r3, [pc, #44]	; (1003ed0 <nrf_raal_timeslot_us_left_get+0x50>)
 1003ea2:	3a01      	subs	r2, #1
 1003ea4:	1a52      	subs	r2, r2, r1
 1003ea6:	0212      	lsls	r2, r2, #8
 1003ea8:	bf48      	it	mi
 1003eaa:	32ff      	addmi	r2, #255	; 0xff
 1003eac:	1212      	asrs	r2, r2, #8
 1003eae:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 1003eb2:	fb82 2303 	smull	r2, r3, r2, r3
 1003eb6:	0bd0      	lsrs	r0, r2, #15
 1003eb8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 1003ebc:	4770      	bx	lr
 1003ebe:	2000      	movs	r0, #0
 1003ec0:	4770      	bx	lr
 1003ec2:	bf00      	nop
 1003ec4:	21000008 	.word	0x21000008
 1003ec8:	21000744 	.word	0x21000744
 1003ecc:	41011000 	.word	0x41011000
 1003ed0:	000f4240 	.word	0x000f4240

01003ed4 <nrf_raal_continuous_mode_enter>:
 1003ed4:	b538      	push	{r3, r4, r5, lr}
 1003ed6:	4b15      	ldr	r3, [pc, #84]	; (1003f2c <nrf_raal_continuous_mode_enter+0x58>)
 1003ed8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 1003edc:	461c      	mov	r4, r3
 1003ede:	b922      	cbnz	r2, 1003eea <nrf_raal_continuous_mode_enter+0x16>
 1003ee0:	f240 21c1 	movw	r1, #705	; 0x2c1
 1003ee4:	206b      	movs	r0, #107	; 0x6b
 1003ee6:	f7ff fd1f 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003eea:	f3ef 8510 	mrs	r5, PRIMASK
 1003eee:	b672      	cpsid	i
 1003ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 1003ef4:	b123      	cbz	r3, 1003f00 <nrf_raal_continuous_mode_enter+0x2c>
 1003ef6:	2b02      	cmp	r3, #2
 1003ef8:	d00d      	beq.n	1003f16 <nrf_raal_continuous_mode_enter+0x42>
 1003efa:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 1003efe:	e7f1      	b.n	1003ee4 <nrf_raal_continuous_mode_enter+0x10>
 1003f00:	2301      	movs	r3, #1
 1003f02:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 1003f06:	b905      	cbnz	r5, 1003f0a <nrf_raal_continuous_mode_enter+0x36>
 1003f08:	b662      	cpsie	i
 1003f0a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 1003f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1003f12:	f7ff bd9f 	b.w	1003a54 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1003f16:	4b06      	ldr	r3, [pc, #24]	; (1003f30 <nrf_raal_continuous_mode_enter+0x5c>)
 1003f18:	2200      	movs	r2, #0
 1003f1a:	781b      	ldrb	r3, [r3, #0]
 1003f1c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 1003f20:	2b04      	cmp	r3, #4
 1003f22:	d1f0      	bne.n	1003f06 <nrf_raal_continuous_mode_enter+0x32>
 1003f24:	f009 fc16 	bl	100d754 <nrf_raal_timeslot_started>
 1003f28:	e7ed      	b.n	1003f06 <nrf_raal_continuous_mode_enter+0x32>
 1003f2a:	bf00      	nop
 1003f2c:	21000744 	.word	0x21000744
 1003f30:	21000008 	.word	0x21000008

01003f34 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y>:
 1003f34:	4a09      	ldr	r2, [pc, #36]	; (1003f5c <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x28>)
 1003f36:	b508      	push	{r3, lr}
 1003f38:	7813      	ldrb	r3, [r2, #0]
 1003f3a:	b2db      	uxtb	r3, r3
 1003f3c:	2b10      	cmp	r3, #16
 1003f3e:	d007      	beq.n	1003f50 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1c>
 1003f40:	2b20      	cmp	r3, #32
 1003f42:	d005      	beq.n	1003f50 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1c>
 1003f44:	2b04      	cmp	r3, #4
 1003f46:	d104      	bne.n	1003f52 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1e>
 1003f48:	2310      	movs	r3, #16
 1003f4a:	7013      	strb	r3, [r2, #0]
 1003f4c:	f009 fc0a 	bl	100d764 <nrf_raal_timeslot_ended>
 1003f50:	bd08      	pop	{r3, pc}
 1003f52:	f44f 71df 	mov.w	r1, #446	; 0x1be
 1003f56:	206b      	movs	r0, #107	; 0x6b
 1003f58:	f7ff fce6 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003f5c:	21000008 	.word	0x21000008

01003f60 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY>:
 1003f60:	b508      	push	{r3, lr}
 1003f62:	3901      	subs	r1, #1
 1003f64:	4b32      	ldr	r3, [pc, #200]	; (1004030 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd0>)
 1003f66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1003f6a:	2906      	cmp	r1, #6
 1003f6c:	d839      	bhi.n	1003fe2 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x82>
 1003f6e:	e8df f001 	tbb	[pc, r1]
 1003f72:	4304      	.short	0x4304
 1003f74:	56232843 	.word	0x56232843
 1003f78:	4f          	.byte	0x4f
 1003f79:	00          	.byte	0x00
 1003f7a:	2101      	movs	r1, #1
 1003f7c:	2002      	movs	r0, #2
 1003f7e:	f7ff fe43 	bl	1003c08 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1003f82:	4b2c      	ldr	r3, [pc, #176]	; (1004034 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1003f84:	4a2c      	ldr	r2, [pc, #176]	; (1004038 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd8>)
 1003f86:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 1003f8a:	b179      	cbz	r1, 1003fac <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x4c>
 1003f8c:	2104      	movs	r1, #4
 1003f8e:	7011      	strb	r1, [r2, #0]
 1003f90:	681a      	ldr	r2, [r3, #0]
 1003f92:	60da      	str	r2, [r3, #12]
 1003f94:	2200      	movs	r2, #0
 1003f96:	741a      	strb	r2, [r3, #16]
 1003f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 1003f9c:	2b02      	cmp	r3, #2
 1003f9e:	d001      	beq.n	1003fa4 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x44>
 1003fa0:	f009 fbd8 	bl	100d754 <nrf_raal_timeslot_started>
 1003fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003fa8:	f7ff be4a 	b.w	1003c40 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ>
 1003fac:	2320      	movs	r3, #32
 1003fae:	7013      	strb	r3, [r2, #0]
 1003fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003fb4:	f7fd b91c 	b.w	10011f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003fb8:	f240 2106 	movw	r1, #518	; 0x206
 1003fbc:	206b      	movs	r0, #107	; 0x6b
 1003fbe:	f7ff fcb3 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003fc2:	4b1c      	ldr	r3, [pc, #112]	; (1004034 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1003fc4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 1003fc8:	b15a      	cbz	r2, 1003fe2 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x82>
 1003fca:	4a1b      	ldr	r2, [pc, #108]	; (1004038 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd8>)
 1003fcc:	7812      	ldrb	r2, [r2, #0]
 1003fce:	2a04      	cmp	r2, #4
 1003fd0:	d108      	bne.n	1003fe4 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x84>
 1003fd2:	7c1b      	ldrb	r3, [r3, #16]
 1003fd4:	2b01      	cmp	r3, #1
 1003fd6:	d102      	bne.n	1003fde <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x7e>
 1003fd8:	4b18      	ldr	r3, [pc, #96]	; (100403c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xdc>)
 1003fda:	681b      	ldr	r3, [r3, #0]
 1003fdc:	bb1b      	cbnz	r3, 1004026 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xc6>
 1003fde:	f005 f8c1 	bl	1009164 <nrf_802154_radio_irq_handler>
 1003fe2:	bd08      	pop	{r3, pc}
 1003fe4:	4b16      	ldr	r3, [pc, #88]	; (1004040 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xe0>)
 1003fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 1003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1003fee:	f3bf 8f4f 	dsb	sy
 1003ff2:	f3bf 8f6f 	isb	sy
 1003ff6:	e7f4      	b.n	1003fe2 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x82>
 1003ff8:	2101      	movs	r1, #1
 1003ffa:	2002      	movs	r0, #2
 1003ffc:	f7ff fe04 	bl	1003c08 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1004000:	4b0c      	ldr	r3, [pc, #48]	; (1004034 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1004002:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 1004006:	b133      	cbz	r3, 1004016 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xb6>
 1004008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100400c:	f7ff be48 	b.w	1003ca0 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>
 1004010:	2101      	movs	r1, #1
 1004012:	2028      	movs	r0, #40	; 0x28
 1004014:	e7f2      	b.n	1003ffc <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x9c>
 1004016:	4b08      	ldr	r3, [pc, #32]	; (1004038 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd8>)
 1004018:	2201      	movs	r2, #1
 100401a:	701a      	strb	r2, [r3, #0]
 100401c:	e7e1      	b.n	1003fe2 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x82>
 100401e:	4b05      	ldr	r3, [pc, #20]	; (1004034 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1004020:	7c1b      	ldrb	r3, [r3, #16]
 1004022:	2b01      	cmp	r3, #1
 1004024:	d1be      	bne.n	1003fa4 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x44>
 1004026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100402a:	f7ff bf83 	b.w	1003f34 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y>
 100402e:	bf00      	nop
 1004030:	41011000 	.word	0x41011000
 1004034:	21000744 	.word	0x21000744
 1004038:	21000008 	.word	0x21000008
 100403c:	41011144 	.word	0x41011144
 1004040:	e000e100 	.word	0xe000e100

01004044 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1004044:	2000      	movs	r0, #0
 1004046:	4770      	bx	lr

01004048 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1004048:	4b0c      	ldr	r3, [pc, #48]	; (100407c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x34>)
 100404a:	681a      	ldr	r2, [r3, #0]
 100404c:	b992      	cbnz	r2, 1004074 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x2c>
 100404e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 1004050:	b982      	cbnz	r2, 1004074 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x2c>
 1004052:	685a      	ldr	r2, [r3, #4]
 1004054:	b972      	cbnz	r2, 1004074 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x2c>
 1004056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 1004058:	b962      	cbnz	r2, 1004074 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x2c>
 100405a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 100405e:	b158      	cbz	r0, 1004078 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x30>
 1004060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 1004064:	2101      	movs	r1, #1
 1004066:	4610      	mov	r0, r2
 1004068:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100406c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004070:	6019      	str	r1, [r3, #0]
 1004072:	4770      	bx	lr
 1004074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004078:	4770      	bx	lr
 100407a:	bf00      	nop
 100407c:	21000770 	.word	0x21000770

01004080 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1004080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004084:	4770      	bx	lr
	...

01004088 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1004088:	b538      	push	{r3, r4, r5, lr}
 100408a:	460c      	mov	r4, r1
 100408c:	4605      	mov	r5, r0
 100408e:	b180      	cbz	r0, 10040b2 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x2a>
 1004090:	7802      	ldrb	r2, [r0, #0]
 1004092:	b122      	cbz	r2, 100409e <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x16>
 1004094:	2a01      	cmp	r2, #1
 1004096:	d01b      	beq.n	10040d0 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1004098:	f06f 0015 	mvn.w	r0, #21
 100409c:	e017      	b.n	10040ce <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x46>
 100409e:	4922      	ldr	r1, [pc, #136]	; (1004128 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 10040a0:	688b      	ldr	r3, [r1, #8]
 10040a2:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 10040a6:	7f09      	ldrb	r1, [r1, #28]
 10040a8:	f000 fa34 	bl	1004514 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I>
 10040ac:	b978      	cbnz	r0, 10040ce <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x46>
 10040ae:	4b1e      	ldr	r3, [pc, #120]	; (1004128 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 10040b0:	601d      	str	r5, [r3, #0]
 10040b2:	2c00      	cmp	r4, #0
 10040b4:	d036      	beq.n	1004124 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x9c>
 10040b6:	7823      	ldrb	r3, [r4, #0]
 10040b8:	2b01      	cmp	r3, #1
 10040ba:	d1ed      	bne.n	1004098 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x10>
 10040bc:	4d1a      	ldr	r5, [pc, #104]	; (1004128 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 10040be:	1d20      	adds	r0, r4, #4
 10040c0:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
 10040c4:	7f29      	ldrb	r1, [r5, #28]
 10040c6:	f000 f991 	bl	10043ec <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI>
 10040ca:	b900      	cbnz	r0, 10040ce <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x46>
 10040cc:	63ac      	str	r4, [r5, #56]	; 0x38
 10040ce:	bd38      	pop	{r3, r4, r5, pc}
 10040d0:	4b15      	ldr	r3, [pc, #84]	; (1004128 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 10040d2:	7f19      	ldrb	r1, [r3, #28]
 10040d4:	b319      	cbz	r1, 100411e <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x96>
 10040d6:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 10040da:	4814      	ldr	r0, [pc, #80]	; (100412c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa4>)
 10040dc:	0089      	lsls	r1, r1, #2
 10040de:	b2c9      	uxtb	r1, r1
 10040e0:	4408      	add	r0, r1
 10040e2:	7929      	ldrb	r1, [r5, #4]
 10040e4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 10040e8:	6001      	str	r1, [r0, #0]
 10040ea:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
 10040ee:	4910      	ldr	r1, [pc, #64]	; (1004130 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa8>)
 10040f0:	0080      	lsls	r0, r0, #2
 10040f2:	4401      	add	r1, r0
 10040f4:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
 10040f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 10040fc:	6008      	str	r0, [r1, #0]
 10040fe:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
 1004102:	490c      	ldr	r1, [pc, #48]	; (1004134 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xac>)
 1004104:	4401      	add	r1, r0
 1004106:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
 100410a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 100410e:	6008      	str	r0, [r1, #0]
 1004110:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 1004114:	409a      	lsls	r2, r3
 1004116:	4b08      	ldr	r3, [pc, #32]	; (1004138 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xb0>)
 1004118:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 100411c:	e7c7      	b.n	10040ae <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x26>
 100411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004122:	e7d4      	b.n	10040ce <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x46>
 1004124:	4620      	mov	r0, r4
 1004126:	e7d2      	b.n	10040ce <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x46>
 1004128:	21000770 	.word	0x21000770
 100412c:	41014080 	.word	0x41014080
 1004130:	41014180 	.word	0x41014180
 1004134:	4100a080 	.word	0x4100a080
 1004138:	4100f000 	.word	0x4100f000

0100413c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 100413c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004140:	4770      	bx	lr
	...

01004144 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 1004144:	b510      	push	{r4, lr}
 1004146:	4c1f      	ldr	r4, [pc, #124]	; (10041c4 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x80>)
 1004148:	6820      	ldr	r0, [r4, #0]
 100414a:	b178      	cbz	r0, 100416c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x28>
 100414c:	7803      	ldrb	r3, [r0, #0]
 100414e:	b133      	cbz	r3, 100415e <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x1a>
 1004150:	2b01      	cmp	r3, #1
 1004152:	d019      	beq.n	1004188 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x44>
 1004154:	f240 21a7 	movw	r1, #679	; 0x2a7
 1004158:	2071      	movs	r0, #113	; 0x71
 100415a:	f7ff fbe5 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100415e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 1004162:	7f21      	ldrb	r1, [r4, #28]
 1004164:	f000 f998 	bl	1004498 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI>
 1004168:	2300      	movs	r3, #0
 100416a:	6023      	str	r3, [r4, #0]
 100416c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 100416e:	b14b      	cbz	r3, 1004184 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x40>
 1004170:	781b      	ldrb	r3, [r3, #0]
 1004172:	2b01      	cmp	r3, #1
 1004174:	d123      	bne.n	10041be <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x7a>
 1004176:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 100417a:	7f20      	ldrb	r0, [r4, #28]
 100417c:	f000 f96a 	bl	1004454 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ>
 1004180:	2300      	movs	r3, #0
 1004182:	63a3      	str	r3, [r4, #56]	; 0x38
 1004184:	2000      	movs	r0, #0
 1004186:	bd10      	pop	{r4, pc}
 1004188:	7f22      	ldrb	r2, [r4, #28]
 100418a:	2a00      	cmp	r2, #0
 100418c:	d0ec      	beq.n	1004168 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x24>
 100418e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 1004192:	2100      	movs	r1, #0
 1004194:	4093      	lsls	r3, r2
 1004196:	4a0c      	ldr	r2, [pc, #48]	; (10041c8 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x84>)
 1004198:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 100419c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 10041a0:	4b0a      	ldr	r3, [pc, #40]	; (10041cc <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x88>)
 10041a2:	5099      	str	r1, [r3, r2]
 10041a4:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
 10041a8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 10041ac:	0092      	lsls	r2, r2, #2
 10041ae:	5099      	str	r1, [r3, r2]
 10041b0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 10041b4:	4a06      	ldr	r2, [pc, #24]	; (10041d0 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x8c>)
 10041b6:	009b      	lsls	r3, r3, #2
 10041b8:	b2db      	uxtb	r3, r3
 10041ba:	50d1      	str	r1, [r2, r3]
 10041bc:	e7d4      	b.n	1004168 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x24>
 10041be:	f240 21b6 	movw	r1, #694	; 0x2b6
 10041c2:	e7c9      	b.n	1004158 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x14>
 10041c4:	21000770 	.word	0x21000770
 10041c8:	4100f000 	.word	0x4100f000
 10041cc:	4100a080 	.word	0x4100a080
 10041d0:	41014080 	.word	0x41014080

010041d4 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 10041d4:	4770      	bx	lr
	...

010041d8 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 10041d8:	4b0d      	ldr	r3, [pc, #52]	; (1004210 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x38>)
 10041da:	7f1a      	ldrb	r2, [r3, #28]
 10041dc:	b14a      	cbz	r2, 10041f2 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1a>
 10041de:	07c1      	lsls	r1, r0, #31
 10041e0:	d507      	bpl.n	10041f2 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1a>
 10041e2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 10041e6:	2101      	movs	r1, #1
 10041e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 10041ec:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 10041f0:	6011      	str	r1, [r2, #0]
 10041f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 10041f6:	b14a      	cbz	r2, 100420c <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x34>
 10041f8:	0782      	lsls	r2, r0, #30
 10041fa:	d507      	bpl.n	100420c <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x34>
 10041fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 1004200:	2201      	movs	r2, #1
 1004202:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004206:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 100420a:	601a      	str	r2, [r3, #0]
 100420c:	4770      	bx	lr
 100420e:	bf00      	nop
 1004210:	21000770 	.word	0x21000770

01004214 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 1004214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004218:	4770      	bx	lr
	...

0100421c <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 100421c:	4b1f      	ldr	r3, [pc, #124]	; (100429c <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x80>)
 100421e:	681a      	ldr	r2, [r3, #0]
 1004220:	2a00      	cmp	r2, #0
 1004222:	d137      	bne.n	1004294 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x78>
 1004224:	685a      	ldr	r2, [r3, #4]
 1004226:	2a00      	cmp	r2, #0
 1004228:	d134      	bne.n	1004294 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x78>
 100422a:	f893 2020 	ldrb.w	r2, [r3, #32]
 100422e:	b31a      	cbz	r2, 1004278 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x5c>
 1004230:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 1004234:	491a      	ldr	r1, [pc, #104]	; (10042a0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x84>)
 1004236:	0092      	lsls	r2, r2, #2
 1004238:	b2d2      	uxtb	r2, r2
 100423a:	4411      	add	r1, r2
 100423c:	b2c2      	uxtb	r2, r0
 100423e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004242:	600a      	str	r2, [r1, #0]
 1004244:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 1004248:	4a16      	ldr	r2, [pc, #88]	; (10042a4 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x88>)
 100424a:	0089      	lsls	r1, r1, #2
 100424c:	440a      	add	r2, r1
 100424e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 1004252:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 1004256:	6011      	str	r1, [r2, #0]
 1004258:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 100425c:	4a12      	ldr	r2, [pc, #72]	; (10042a8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x8c>)
 100425e:	440a      	add	r2, r1
 1004260:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 1004264:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 1004268:	6011      	str	r1, [r2, #0]
 100426a:	2201      	movs	r2, #1
 100426c:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 1004270:	408a      	lsls	r2, r1
 1004272:	490e      	ldr	r1, [pc, #56]	; (10042ac <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x90>)
 1004274:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
 1004278:	7f1a      	ldrb	r2, [r3, #28]
 100427a:	b132      	cbz	r2, 100428a <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x6e>
 100427c:	b2c0      	uxtb	r0, r0
 100427e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 1004282:	4a09      	ldr	r2, [pc, #36]	; (10042a8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x8c>)
 1004284:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 1004288:	5050      	str	r0, [r2, r1]
 100428a:	2201      	movs	r2, #1
 100428c:	2000      	movs	r0, #0
 100428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 1004292:	4770      	bx	lr
 1004294:	f06f 0015 	mvn.w	r0, #21
 1004298:	4770      	bx	lr
 100429a:	bf00      	nop
 100429c:	21000770 	.word	0x21000770
 10042a0:	41014080 	.word	0x41014080
 10042a4:	41014180 	.word	0x41014180
 10042a8:	4100a080 	.word	0x4100a080
 10042ac:	4100f000 	.word	0x4100f000

010042b0 <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI>:
 10042b0:	2300      	movs	r3, #0
 10042b2:	7003      	strb	r3, [r0, #0]
 10042b4:	4770      	bx	lr
	...

010042b8 <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI>:
 10042b8:	4a03      	ldr	r2, [pc, #12]	; (10042c8 <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI+0x10>)
 10042ba:	7f13      	ldrb	r3, [r2, #28]
 10042bc:	b10b      	cbz	r3, 10042c2 <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI+0xa>
 10042be:	f992 3018 	ldrsb.w	r3, [r2, #24]
 10042c2:	7003      	strb	r3, [r0, #0]
 10042c4:	4770      	bx	lr
 10042c6:	bf00      	nop
 10042c8:	21000770 	.word	0x21000770

010042cc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 10042cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10042d0:	4770      	bx	lr
	...

010042d4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 10042d4:	b570      	push	{r4, r5, r6, lr}
 10042d6:	460c      	mov	r4, r1
 10042d8:	4606      	mov	r6, r0
 10042da:	b178      	cbz	r0, 10042fc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x28>
 10042dc:	7803      	ldrb	r3, [r0, #0]
 10042de:	b113      	cbz	r3, 10042e6 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x12>
 10042e0:	f06f 0015 	mvn.w	r0, #21
 10042e4:	bd70      	pop	{r4, r5, r6, pc}
 10042e6:	4d0e      	ldr	r5, [pc, #56]	; (1004320 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 10042e8:	68eb      	ldr	r3, [r5, #12]
 10042ea:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 10042ee:	f895 1020 	ldrb.w	r1, [r5, #32]
 10042f2:	f000 f90f 	bl	1004514 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I>
 10042f6:	2800      	cmp	r0, #0
 10042f8:	d1f4      	bne.n	10042e4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10042fa:	606e      	str	r6, [r5, #4]
 10042fc:	b174      	cbz	r4, 100431c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x48>
 10042fe:	7823      	ldrb	r3, [r4, #0]
 1004300:	2b01      	cmp	r3, #1
 1004302:	d1ed      	bne.n	10042e0 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0xc>
 1004304:	4d06      	ldr	r5, [pc, #24]	; (1004320 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 1004306:	1d20      	adds	r0, r4, #4
 1004308:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 100430c:	f895 1020 	ldrb.w	r1, [r5, #32]
 1004310:	f000 f86c 	bl	10043ec <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI>
 1004314:	2800      	cmp	r0, #0
 1004316:	d1e5      	bne.n	10042e4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004318:	63ec      	str	r4, [r5, #60]	; 0x3c
 100431a:	e7e3      	b.n	10042e4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 100431c:	4620      	mov	r0, r4
 100431e:	e7e1      	b.n	10042e4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004320:	21000770 	.word	0x21000770

01004324 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 1004324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004328:	4770      	bx	lr
	...

0100432c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 100432c:	4b16      	ldr	r3, [pc, #88]	; (1004388 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x5c>)
 100432e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 1004332:	b332      	cbz	r2, 1004382 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x56>
 1004334:	f893 2020 	ldrb.w	r2, [r3, #32]
 1004338:	b1ba      	cbz	r2, 100436a <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x3e>
 100433a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 100433e:	2201      	movs	r2, #1
 1004340:	2000      	movs	r0, #0
 1004342:	408a      	lsls	r2, r1
 1004344:	4911      	ldr	r1, [pc, #68]	; (100438c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 1004346:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
 100434a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 100434e:	4a10      	ldr	r2, [pc, #64]	; (1004390 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x64>)
 1004350:	5050      	str	r0, [r2, r1]
 1004352:	f502 4221 	add.w	r2, r2, #41216	; 0xa100
 1004356:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 100435a:	0089      	lsls	r1, r1, #2
 100435c:	5050      	str	r0, [r2, r1]
 100435e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 1004362:	490c      	ldr	r1, [pc, #48]	; (1004394 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x68>)
 1004364:	0092      	lsls	r2, r2, #2
 1004366:	b2d2      	uxtb	r2, r2
 1004368:	5088      	str	r0, [r1, r2]
 100436a:	7f1a      	ldrb	r2, [r3, #28]
 100436c:	b12a      	cbz	r2, 100437a <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x4e>
 100436e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 1004372:	4a07      	ldr	r2, [pc, #28]	; (1004390 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x64>)
 1004374:	440a      	add	r2, r1
 1004376:	2100      	movs	r1, #0
 1004378:	6011      	str	r1, [r2, #0]
 100437a:	2000      	movs	r0, #0
 100437c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 1004380:	4770      	bx	lr
 1004382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004386:	4770      	bx	lr
 1004388:	21000770 	.word	0x21000770
 100438c:	4100f000 	.word	0x4100f000
 1004390:	4100a080 	.word	0x4100a080
 1004394:	41014080 	.word	0x41014080

01004398 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 1004398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100439c:	4770      	bx	lr
	...

010043a0 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 10043a0:	b538      	push	{r3, r4, r5, lr}
 10043a2:	4c11      	ldr	r4, [pc, #68]	; (10043e8 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x48>)
 10043a4:	6860      	ldr	r0, [r4, #4]
 10043a6:	b140      	cbz	r0, 10043ba <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x1a>
 10043a8:	7805      	ldrb	r5, [r0, #0]
 10043aa:	b9ad      	cbnz	r5, 10043d8 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x38>
 10043ac:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 10043b0:	f894 1020 	ldrb.w	r1, [r4, #32]
 10043b4:	f000 f870 	bl	1004498 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI>
 10043b8:	6065      	str	r5, [r4, #4]
 10043ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 10043bc:	b153      	cbz	r3, 10043d4 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x34>
 10043be:	781b      	ldrb	r3, [r3, #0]
 10043c0:	2b01      	cmp	r3, #1
 10043c2:	d10e      	bne.n	10043e2 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x42>
 10043c4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 10043c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 10043cc:	f000 f842 	bl	1004454 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ>
 10043d0:	2300      	movs	r3, #0
 10043d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 10043d4:	2000      	movs	r0, #0
 10043d6:	bd38      	pop	{r3, r4, r5, pc}
 10043d8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 10043dc:	2071      	movs	r0, #113	; 0x71
 10043de:	f7ff faa3 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10043e2:	f240 21df 	movw	r1, #735	; 0x2df
 10043e6:	e7f9      	b.n	10043dc <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x3c>
 10043e8:	21000770 	.word	0x21000770

010043ec <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI>:
 10043ec:	b321      	cbz	r1, 1004438 <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x4c>
 10043ee:	4915      	ldr	r1, [pc, #84]	; (1004444 <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x58>)
 10043f0:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 10043f4:	b1cb      	cbz	r3, 100442a <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x3e>
 10043f6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 10043fa:	4293      	cmp	r3, r2
 10043fc:	d11f      	bne.n	100443e <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x52>
 10043fe:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 1004402:	4a11      	ldr	r2, [pc, #68]	; (1004448 <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x5c>)
 1004404:	009b      	lsls	r3, r3, #2
 1004406:	b2db      	uxtb	r3, r3
 1004408:	441a      	add	r2, r3
 100440a:	7803      	ldrb	r3, [r0, #0]
 100440c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004410:	6013      	str	r3, [r2, #0]
 1004412:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 1004416:	4b0d      	ldr	r3, [pc, #52]	; (100444c <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x60>)
 1004418:	0092      	lsls	r2, r2, #2
 100441a:	4413      	add	r3, r2
 100441c:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 1004420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004424:	601a      	str	r2, [r3, #0]
 1004426:	2000      	movs	r0, #0
 1004428:	4770      	bx	lr
 100442a:	4909      	ldr	r1, [pc, #36]	; (1004450 <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x64>)
 100442c:	4411      	add	r1, r2
 100442e:	7802      	ldrb	r2, [r0, #0]
 1004430:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004434:	600a      	str	r2, [r1, #0]
 1004436:	e7f6      	b.n	1004426 <sym_4C5VESFKBPYJDHBXUWFFXBZAV4QEDULZ7VXXFWI+0x3a>
 1004438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100443c:	4770      	bx	lr
 100443e:	f06f 0015 	mvn.w	r0, #21
 1004442:	4770      	bx	lr
 1004444:	21000770 	.word	0x21000770
 1004448:	41014080 	.word	0x41014080
 100444c:	41014180 	.word	0x41014180
 1004450:	4100a080 	.word	0x4100a080

01004454 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ>:
 1004454:	b1b8      	cbz	r0, 1004486 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x32>
 1004456:	4b0c      	ldr	r3, [pc, #48]	; (1004488 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x34>)
 1004458:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 100445c:	b18a      	cbz	r2, 1004482 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x2e>
 100445e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 1004462:	428a      	cmp	r2, r1
 1004464:	d10f      	bne.n	1004486 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x32>
 1004466:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 100446a:	4a08      	ldr	r2, [pc, #32]	; (100448c <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x38>)
 100446c:	0089      	lsls	r1, r1, #2
 100446e:	440a      	add	r2, r1
 1004470:	2100      	movs	r1, #0
 1004472:	6011      	str	r1, [r2, #0]
 1004474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 1004478:	4a05      	ldr	r2, [pc, #20]	; (1004490 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x3c>)
 100447a:	009b      	lsls	r3, r3, #2
 100447c:	b2db      	uxtb	r3, r3
 100447e:	50d1      	str	r1, [r2, r3]
 1004480:	4770      	bx	lr
 1004482:	4b04      	ldr	r3, [pc, #16]	; (1004494 <sym_3QQV6YDB5DRRVZNVAEJSWGODWID53Z6HH7EBWBQ+0x40>)
 1004484:	505a      	str	r2, [r3, r1]
 1004486:	4770      	bx	lr
 1004488:	21000770 	.word	0x21000770
 100448c:	41014180 	.word	0x41014180
 1004490:	41014080 	.word	0x41014080
 1004494:	4100a080 	.word	0x4100a080

01004498 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI>:
 1004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100449a:	4605      	mov	r5, r0
 100449c:	4617      	mov	r7, r2
 100449e:	4e1a      	ldr	r6, [pc, #104]	; (1004508 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x70>)
 10044a0:	b1b1      	cbz	r1, 10044d0 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x38>
 10044a2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 10044a6:	2401      	movs	r4, #1
 10044a8:	4a18      	ldr	r2, [pc, #96]	; (100450c <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x74>)
 10044aa:	2100      	movs	r1, #0
 10044ac:	fa04 f303 	lsl.w	r3, r4, r3
 10044b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 10044b4:	7c00      	ldrb	r0, [r0, #16]
 10044b6:	f000 f95c 	bl	1004772 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 10044ba:	4b15      	ldr	r3, [pc, #84]	; (1004510 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x78>)
 10044bc:	0080      	lsls	r0, r0, #2
 10044be:	2200      	movs	r2, #0
 10044c0:	4621      	mov	r1, r4
 10044c2:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 10044c6:	51da      	str	r2, [r3, r7]
 10044c8:	686b      	ldr	r3, [r5, #4]
 10044ca:	b280      	uxth	r0, r0
 10044cc:	3080      	adds	r0, #128	; 0x80
 10044ce:	501a      	str	r2, [r3, r0]
 10044d0:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 10044d4:	b1b3      	cbz	r3, 1004504 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x6c>
 10044d6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 10044da:	2301      	movs	r3, #1
 10044dc:	4093      	lsls	r3, r2
 10044de:	4a0b      	ldr	r2, [pc, #44]	; (100450c <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x74>)
 10044e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 10044e4:	7c28      	ldrb	r0, [r5, #16]
 10044e6:	f000 f944 	bl	1004772 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 10044ea:	f896 2041 	ldrb.w	r2, [r6, #65]	; 0x41
 10044ee:	0080      	lsls	r0, r0, #2
 10044f0:	4b07      	ldr	r3, [pc, #28]	; (1004510 <sym_55K3MGYREMPP2H5MA5NNQSOB6RLCECT3NBMPTQI+0x78>)
 10044f2:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 10044f6:	4413      	add	r3, r2
 10044f8:	2200      	movs	r2, #0
 10044fa:	b280      	uxth	r0, r0
 10044fc:	601a      	str	r2, [r3, #0]
 10044fe:	3080      	adds	r0, #128	; 0x80
 1004500:	686b      	ldr	r3, [r5, #4]
 1004502:	501a      	str	r2, [r3, r0]
 1004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1004506:	bf00      	nop
 1004508:	21000770 	.word	0x21000770
 100450c:	4100f000 	.word	0x4100f000
 1004510:	4100a080 	.word	0x4100a080

01004514 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I>:
 1004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1004518:	4606      	mov	r6, r0
 100451a:	4690      	mov	r8, r2
 100451c:	461f      	mov	r7, r3
 100451e:	4d2e      	ldr	r5, [pc, #184]	; (10045d8 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xc4>)
 1004520:	2900      	cmp	r1, #0
 1004522:	d051      	beq.n	10045c8 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xb4>
 1004524:	7c00      	ldrb	r0, [r0, #16]
 1004526:	2100      	movs	r1, #0
 1004528:	f000 f923 	bl	1004772 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 100452c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 1004530:	0083      	lsls	r3, r0, #2
 1004532:	6871      	ldr	r1, [r6, #4]
 1004534:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004538:	b2c0      	uxtb	r0, r0
 100453a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 100453e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 1004542:	b29b      	uxth	r3, r3
 1004544:	3380      	adds	r3, #128	; 0x80
 1004546:	50ca      	str	r2, [r1, r3]
 1004548:	2101      	movs	r1, #1
 100454a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 100454e:	4b23      	ldr	r3, [pc, #140]	; (10045dc <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xc8>)
 1004550:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004554:	f843 2008 	str.w	r2, [r3, r8]
 1004558:	68f3      	ldr	r3, [r6, #12]
 100455a:	f895 4029 	ldrb.w	r4, [r5, #41]	; 0x29
 100455e:	6872      	ldr	r2, [r6, #4]
 1004560:	1bdb      	subs	r3, r3, r7
 1004562:	fa01 f404 	lsl.w	r4, r1, r4
 1004566:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 100456a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 100456e:	b36b      	cbz	r3, 10045cc <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xb8>
 1004570:	7c30      	ldrb	r0, [r6, #16]
 1004572:	f000 f8fe 	bl	1004772 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004576:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 100457a:	0083      	lsls	r3, r0, #2
 100457c:	6871      	ldr	r1, [r6, #4]
 100457e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004582:	b2c0      	uxtb	r0, r0
 1004584:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004588:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 100458c:	b29b      	uxth	r3, r3
 100458e:	3380      	adds	r3, #128	; 0x80
 1004590:	50ca      	str	r2, [r1, r3]
 1004592:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
 1004596:	4b11      	ldr	r3, [pc, #68]	; (10045dc <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xc8>)
 1004598:	4413      	add	r3, r2
 100459a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 100459e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 10045a2:	601a      	str	r2, [r3, #0]
 10045a4:	692b      	ldr	r3, [r5, #16]
 10045a6:	6872      	ldr	r2, [r6, #4]
 10045a8:	441f      	add	r7, r3
 10045aa:	68f3      	ldr	r3, [r6, #12]
 10045ac:	1bdf      	subs	r7, r3, r7
 10045ae:	2301      	movs	r3, #1
 10045b0:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 10045b4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 10045b8:	4093      	lsls	r3, r2
 10045ba:	431c      	orrs	r4, r3
 10045bc:	4b08      	ldr	r3, [pc, #32]	; (10045e0 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xcc>)
 10045be:	2000      	movs	r0, #0
 10045c0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
 10045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10045c8:	460c      	mov	r4, r1
 10045ca:	e7ce      	b.n	100456a <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0x56>
 10045cc:	2900      	cmp	r1, #0
 10045ce:	d1f5      	bne.n	10045bc <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xa8>
 10045d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10045d4:	e7f6      	b.n	10045c4 <sym_IU7AVBSET4RCKDVOJNYQL6GSKYBVID6ICT7EO5I+0xb0>
 10045d6:	bf00      	nop
 10045d8:	21000770 	.word	0x21000770
 10045dc:	4100a080 	.word	0x4100a080
 10045e0:	4100f000 	.word	0x4100f000

010045e4 <mpsl_fem_disable>:
 10045e4:	4b01      	ldr	r3, [pc, #4]	; (10045ec <mpsl_fem_disable+0x8>)
 10045e6:	681b      	ldr	r3, [r3, #0]
 10045e8:	681b      	ldr	r3, [r3, #0]
 10045ea:	4718      	bx	r3
 10045ec:	2100000c 	.word	0x2100000c

010045f0 <mpsl_fem_pa_configuration_set>:
 10045f0:	4b01      	ldr	r3, [pc, #4]	; (10045f8 <mpsl_fem_pa_configuration_set+0x8>)
 10045f2:	681b      	ldr	r3, [r3, #0]
 10045f4:	685b      	ldr	r3, [r3, #4]
 10045f6:	4718      	bx	r3
 10045f8:	2100000c 	.word	0x2100000c

010045fc <mpsl_fem_lna_configuration_set>:
 10045fc:	4b01      	ldr	r3, [pc, #4]	; (1004604 <mpsl_fem_lna_configuration_set+0x8>)
 10045fe:	681b      	ldr	r3, [r3, #0]
 1004600:	689b      	ldr	r3, [r3, #8]
 1004602:	4718      	bx	r3
 1004604:	2100000c 	.word	0x2100000c

01004608 <mpsl_fem_pa_configuration_clear>:
 1004608:	4b01      	ldr	r3, [pc, #4]	; (1004610 <mpsl_fem_pa_configuration_clear+0x8>)
 100460a:	681b      	ldr	r3, [r3, #0]
 100460c:	68db      	ldr	r3, [r3, #12]
 100460e:	4718      	bx	r3
 1004610:	2100000c 	.word	0x2100000c

01004614 <mpsl_fem_lna_configuration_clear>:
 1004614:	4b01      	ldr	r3, [pc, #4]	; (100461c <mpsl_fem_lna_configuration_clear+0x8>)
 1004616:	681b      	ldr	r3, [r3, #0]
 1004618:	691b      	ldr	r3, [r3, #16]
 100461a:	4718      	bx	r3
 100461c:	2100000c 	.word	0x2100000c

01004620 <mpsl_fem_deactivate_now>:
 1004620:	4b01      	ldr	r3, [pc, #4]	; (1004628 <mpsl_fem_deactivate_now+0x8>)
 1004622:	681b      	ldr	r3, [r3, #0]
 1004624:	695b      	ldr	r3, [r3, #20]
 1004626:	4718      	bx	r3
 1004628:	2100000c 	.word	0x2100000c

0100462c <mpsl_fem_abort_set>:
 100462c:	4b01      	ldr	r3, [pc, #4]	; (1004634 <mpsl_fem_abort_set+0x8>)
 100462e:	681b      	ldr	r3, [r3, #0]
 1004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1004632:	4718      	bx	r3
 1004634:	2100000c 	.word	0x2100000c

01004638 <mpsl_fem_abort_clear>:
 1004638:	4b01      	ldr	r3, [pc, #4]	; (1004640 <mpsl_fem_abort_clear+0x8>)
 100463a:	681b      	ldr	r3, [r3, #0]
 100463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100463e:	4718      	bx	r3
 1004640:	2100000c 	.word	0x2100000c

01004644 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
 1004644:	4770      	bx	lr

01004646 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
 1004646:	b570      	push	{r4, r5, r6, lr}
 1004648:	2400      	movs	r4, #0
 100464a:	f7fb fedb 	bl	1000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
 100464e:	4606      	mov	r6, r0
 1004650:	4625      	mov	r5, r4
 1004652:	b2e0      	uxtb	r0, r4
 1004654:	4286      	cmp	r6, r0
 1004656:	d800      	bhi.n	100465a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x14>
 1004658:	bd70      	pop	{r4, r5, r6, pc}
 100465a:	f7fb fed9 	bl	1000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
 100465e:	3401      	adds	r4, #1
 1004660:	8005      	strh	r5, [r0, #0]
 1004662:	7085      	strb	r5, [r0, #2]
 1004664:	e7f5      	b.n	1004652 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>

01004666 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
 1004666:	b538      	push	{r3, r4, r5, lr}
 1004668:	b1e1      	cbz	r1, 10046a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
 100466a:	fba1 0100 	umull	r0, r1, r1, r0
 100466e:	0a43      	lsrs	r3, r0, #9
 1004670:	0a4a      	lsrs	r2, r1, #9
 1004672:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 1004676:	f240 71a3 	movw	r1, #1955	; 0x7a3
 100467a:	1c58      	adds	r0, r3, #1
 100467c:	185c      	adds	r4, r3, r1
 100467e:	f04f 0300 	mov.w	r3, #0
 1004682:	eb42 0503 	adc.w	r5, r2, r3
 1004686:	2d01      	cmp	r5, #1
 1004688:	bf08      	it	eq
 100468a:	2c00      	cmpeq	r4, #0
 100468c:	d303      	bcc.n	1004696 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x30>
 100468e:	2171      	movs	r1, #113	; 0x71
 1004690:	206d      	movs	r0, #109	; 0x6d
 1004692:	f7ff f949 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1004696:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
 100469a:	f240 71a1 	movw	r1, #1953	; 0x7a1
 100469e:	fbb0 f0f1 	udiv	r0, r0, r1
 10046a2:	bd38      	pop	{r3, r4, r5, pc}
 10046a4:	4608      	mov	r0, r1
 10046a6:	e7fc      	b.n	10046a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3c>

010046a8 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>:
 10046a8:	b513      	push	{r0, r1, r4, lr}
 10046aa:	460c      	mov	r4, r1
 10046ac:	f10d 0203 	add.w	r2, sp, #3
 10046b0:	a901      	add	r1, sp, #4
 10046b2:	f7fd fe97 	bl	10023e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10046b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 10046ba:	9801      	ldr	r0, [sp, #4]
 10046bc:	b10b      	cbz	r3, 10046c2 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ+0x1a>
 10046be:	b104      	cbz	r4, 10046c2 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ+0x1a>
 10046c0:	3001      	adds	r0, #1
 10046c2:	b002      	add	sp, #8
 10046c4:	bd10      	pop	{r4, pc}

010046c6 <mpsl_low_priority_process>:
 10046c6:	f7ff b9e1 	b.w	1003a8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

010046ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
 10046ca:	bf20      	wfe
 10046cc:	4770      	bx	lr

010046ce <sym_4Y4ARSTRVIPQLTXGLUWZWYDTCBQDIAZM7OSJMFA>:
 10046ce:	2800      	cmp	r0, #0
 10046d0:	bf0c      	ite	eq
 10046d2:	f06f 0015 	mvneq.w	r0, #21
 10046d6:	2000      	movne	r0, #0
 10046d8:	4770      	bx	lr

010046da <sym_IL3ZRHWPWLB2SOTTTEFWZ7GJ4VRAXNG6Q2VLU6Y>:
 10046da:	2000      	movs	r0, #0
 10046dc:	4770      	bx	lr

010046de <sym_A27TYSKW72QFVPJ2RRTVD5S66CFA75MDALH2D5Q>:
 10046de:	2307      	movs	r3, #7
 10046e0:	7003      	strb	r3, [r0, #0]
 10046e2:	2000      	movs	r0, #0
 10046e4:	4770      	bx	lr

010046e6 <sym_BMAMBVU5HJG5FJPIVHJ4F73FU53DKV7LWOFHS6A>:
 10046e6:	2000      	movs	r0, #0
 10046e8:	4770      	bx	lr

010046ea <sym_TGL42OWATLCE6MB5Q4GTEKRMEAJGST6R4PBJWCY>:
 10046ea:	2000      	movs	r0, #0
 10046ec:	4770      	bx	lr

010046ee <nrf_raal_timeslot_request>:
 10046ee:	b510      	push	{r4, lr}
 10046f0:	4604      	mov	r4, r0
 10046f2:	f7ff fbc5 	bl	1003e80 <nrf_raal_timeslot_us_left_get>
 10046f6:	42a0      	cmp	r0, r4
 10046f8:	bf94      	ite	ls
 10046fa:	2000      	movls	r0, #0
 10046fc:	2001      	movhi	r0, #1
 10046fe:	bd10      	pop	{r4, pc}

01004700 <nrf_802154_fal_tx_power_get>:
 1004700:	b507      	push	{r0, r1, r2, lr}
 1004702:	380b      	subs	r0, #11
 1004704:	460a      	mov	r2, r1
 1004706:	b2c1      	uxtb	r1, r0
 1004708:	290f      	cmp	r1, #15
 100470a:	d903      	bls.n	1004714 <nrf_802154_fal_tx_power_get+0x14>
 100470c:	2138      	movs	r1, #56	; 0x38
 100470e:	2064      	movs	r0, #100	; 0x64
 1004710:	f7ff f90a 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1004714:	f10d 0307 	add.w	r3, sp, #7
 1004718:	2004      	movs	r0, #4
 100471a:	f7fb fe5b 	bl	10003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
 100471e:	b108      	cbz	r0, 1004724 <nrf_802154_fal_tx_power_get+0x24>
 1004720:	2140      	movs	r1, #64	; 0x40
 1004722:	e7f4      	b.n	100470e <nrf_802154_fal_tx_power_get+0xe>
 1004724:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 1004728:	b003      	add	sp, #12
 100472a:	f85d fb04 	ldr.w	pc, [sp], #4

0100472e <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 100472e:	4770      	bx	lr

01004730 <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 1004730:	b508      	push	{r3, lr}
 1004732:	f7ff fd07 	bl	1004144 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>
 1004736:	f7ff fe33 	bl	10043a0 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>
 100473a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100473e:	f7ff bdf5 	b.w	100432c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>

01004742 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 1004742:	2000      	movs	r0, #0
 1004744:	4770      	bx	lr

01004746 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 1004746:	b508      	push	{r3, lr}
 1004748:	f240 3106 	movw	r1, #774	; 0x306
 100474c:	2071      	movs	r0, #113	; 0x71
 100474e:	f7ff f8eb 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01004752 <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 1004752:	2000      	movs	r0, #0
 1004754:	4770      	bx	lr

01004756 <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 1004756:	b508      	push	{r3, lr}
 1004758:	f44f 714b 	mov.w	r1, #812	; 0x32c
 100475c:	2071      	movs	r0, #113	; 0x71
 100475e:	f7ff f8e3 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01004762 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1004762:	2000      	movs	r0, #0
 1004764:	4770      	bx	lr

01004766 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1004766:	b508      	push	{r3, lr}
 1004768:	f44f 714d 	mov.w	r1, #820	; 0x334
 100476c:	2071      	movs	r0, #113	; 0x71
 100476e:	f7ff f8db 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01004772 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>:
 1004772:	b508      	push	{r3, lr}
 1004774:	2300      	movs	r3, #0
 1004776:	fa40 f203 	asr.w	r2, r0, r3
 100477a:	07d2      	lsls	r2, r2, #31
 100477c:	d501      	bpl.n	1004782 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x10>
 100477e:	b141      	cbz	r1, 1004792 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x20>
 1004780:	3901      	subs	r1, #1
 1004782:	3301      	adds	r3, #1
 1004784:	2b04      	cmp	r3, #4
 1004786:	d1f6      	bne.n	1004776 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x4>
 1004788:	f44f 7184 	mov.w	r1, #264	; 0x108
 100478c:	2071      	movs	r0, #113	; 0x71
 100478e:	f7ff f8cb 	bl	1003928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1004792:	b123      	cbz	r3, 100479e <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2c>
 1004794:	2b01      	cmp	r3, #1
 1004796:	d002      	beq.n	100479e <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2c>
 1004798:	2b02      	cmp	r3, #2
 100479a:	bf18      	it	ne
 100479c:	2303      	movne	r3, #3
 100479e:	4618      	mov	r0, r3
 10047a0:	bd08      	pop	{r3, pc}
	...

010047a4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 10047a4:	680b      	ldr	r3, [r1, #0]
 10047a6:	3301      	adds	r3, #1
 10047a8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 10047aa:	4b01      	ldr	r3, [pc, #4]	; (10047b0 <char_out+0xc>)
 10047ac:	681b      	ldr	r3, [r3, #0]
 10047ae:	4718      	bx	r3
 10047b0:	21000048 	.word	0x21000048

010047b4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 10047b4:	b507      	push	{r0, r1, r2, lr}
 10047b6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 10047b8:	2100      	movs	r1, #0
{
 10047ba:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 10047bc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 10047be:	4803      	ldr	r0, [pc, #12]	; (10047cc <vprintk+0x18>)
 10047c0:	a901      	add	r1, sp, #4
 10047c2:	f000 f8e5 	bl	1004990 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 10047c6:	b003      	add	sp, #12
 10047c8:	f85d fb04 	ldr.w	pc, [sp], #4
 10047cc:	010047a5 	.word	0x010047a5

010047d0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 10047d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10047d4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
 10047d8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 10047da:	f019 0808 	ands.w	r8, r9, #8
{
 10047de:	4693      	mov	fp, r2
	if (processing) {
 10047e0:	d00d      	beq.n	10047fe <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
 10047e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 10047e4:	bf0c      	ite	eq
 10047e6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
 10047ea:	f049 0920 	orrne.w	r9, r9, #32
 10047ee:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 10047f2:	f38b 8811 	msr	BASEPRI, fp
 10047f6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 10047fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10047fe:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
 1004802:	2902      	cmp	r1, #2
 1004804:	d107      	bne.n	1004816 <process_event+0x46>
			evt = process_recheck(mgr);
 1004806:	4620      	mov	r0, r4
 1004808:	f009 fa0b 	bl	100dc22 <process_recheck>
		if (evt == EVT_NOP) {
 100480c:	2800      	cmp	r0, #0
 100480e:	d0f0      	beq.n	10047f2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
 1004810:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1004812:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
 1004814:	d14e      	bne.n	10048b4 <process_event+0xe4>
			res = mgr->last_res;
 1004816:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1004818:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
 100481a:	2f00      	cmp	r7, #0
 100481c:	da15      	bge.n	100484a <process_event+0x7a>
		*clients = mgr->clients;
 100481e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1004820:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
 1004824:	e9c4 8800 	strd	r8, r8, [r4]
 1004828:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
 100482c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
 100482e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1004830:	8b21      	ldrh	r1, [r4, #24]
 1004832:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1004836:	45ca      	cmp	sl, r9
 1004838:	d002      	beq.n	1004840 <process_event+0x70>
		if (do_monitors
 100483a:	68a3      	ldr	r3, [r4, #8]
 100483c:	2b00      	cmp	r3, #0
 100483e:	d15a      	bne.n	10048f6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
 1004840:	b90d      	cbnz	r5, 1004846 <process_event+0x76>
		    || (transit != NULL)) {
 1004842:	2e00      	cmp	r6, #0
 1004844:	d071      	beq.n	100492a <process_event+0x15a>
 1004846:	2300      	movs	r3, #0
 1004848:	e056      	b.n	10048f8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100484a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 100484e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 1004850:	2a01      	cmp	r2, #1
 1004852:	d81e      	bhi.n	1004892 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1004854:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
 1004858:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
 100485a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100485c:	b289      	uxth	r1, r1
 100485e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 1004862:	d10a      	bne.n	100487a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 1004864:	b13d      	cbz	r5, 1004876 <process_event+0xa6>
 1004866:	462a      	mov	r2, r5
 1004868:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 100486a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
 100486c:	3301      	adds	r3, #1
 100486e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 1004870:	2a00      	cmp	r2, #0
 1004872:	d1fa      	bne.n	100486a <process_event+0x9a>
 1004874:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1004876:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
 100487a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 100487c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 100487e:	f009 f9d0 	bl	100dc22 <process_recheck>
 1004882:	4606      	mov	r6, r0
 1004884:	2800      	cmp	r0, #0
 1004886:	d0d3      	beq.n	1004830 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1004888:	8b23      	ldrh	r3, [r4, #24]
 100488a:	f043 0320 	orr.w	r3, r3, #32
 100488e:	8323      	strh	r3, [r4, #24]
 1004890:	e7cd      	b.n	100482e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
 1004892:	2b04      	cmp	r3, #4
 1004894:	d10c      	bne.n	10048b0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1004896:	f021 0107 	bic.w	r1, r1, #7
 100489a:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
 100489c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 100489e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 10048a0:	f009 f9bf 	bl	100dc22 <process_recheck>
 10048a4:	4605      	mov	r5, r0
 10048a6:	2800      	cmp	r0, #0
 10048a8:	d0c1      	beq.n	100482e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 10048aa:	f041 0120 	orr.w	r1, r1, #32
 10048ae:	8321      	strh	r1, [r4, #24]
 10048b0:	2500      	movs	r5, #0
 10048b2:	e7bc      	b.n	100482e <process_event+0x5e>
		} else if (evt == EVT_START) {
 10048b4:	2803      	cmp	r0, #3
 10048b6:	d109      	bne.n	10048cc <process_event+0xfc>
			transit = mgr->transitions->start;
 10048b8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048ba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
 10048be:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048c0:	f043 0306 	orr.w	r3, r3, #6
}
 10048c4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
 10048c6:	8323      	strh	r3, [r4, #24]
		res = 0;
 10048c8:	462f      	mov	r7, r5
 10048ca:	e7b1      	b.n	1004830 <process_event+0x60>
		} else if (evt == EVT_STOP) {
 10048cc:	2804      	cmp	r0, #4
 10048ce:	d106      	bne.n	10048de <process_event+0x10e>
			transit = mgr->transitions->stop;
 10048d0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048d2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
 10048d6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048d8:	f043 0304 	orr.w	r3, r3, #4
 10048dc:	e7f2      	b.n	10048c4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
 10048de:	2805      	cmp	r0, #5
 10048e0:	d106      	bne.n	10048f0 <process_event+0x120>
			transit = mgr->transitions->reset;
 10048e2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048e4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
 10048e8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10048ea:	f043 0305 	orr.w	r3, r3, #5
 10048ee:	e7e9      	b.n	10048c4 <process_event+0xf4>
 10048f0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
 10048f2:	462e      	mov	r6, r5
 10048f4:	e7e8      	b.n	10048c8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
 10048f6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 10048f8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 10048fc:	8321      	strh	r1, [r4, #24]
 10048fe:	f38b 8811 	msr	BASEPRI, fp
 1004902:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
 1004906:	b9fb      	cbnz	r3, 1004948 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
 1004908:	bb85      	cbnz	r5, 100496c <process_event+0x19c>
			if (transit != NULL) {
 100490a:	b116      	cbz	r6, 1004912 <process_event+0x142>
				transit(mgr, transition_complete);
 100490c:	4620      	mov	r0, r4
 100490e:	491f      	ldr	r1, [pc, #124]	; (100498c <process_event+0x1bc>)
 1004910:	47b0      	blx	r6
	__asm__ volatile(
 1004912:	f04f 0340 	mov.w	r3, #64	; 0x40
 1004916:	f3ef 8b11 	mrs	fp, BASEPRI
 100491a:	f383 8811 	msr	BASEPRI, r3
 100491e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 1004922:	8b23      	ldrh	r3, [r4, #24]
 1004924:	f023 0308 	bic.w	r3, r3, #8
 1004928:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 100492a:	8b23      	ldrh	r3, [r4, #24]
 100492c:	06da      	lsls	r2, r3, #27
 100492e:	d525      	bpl.n	100497c <process_event+0x1ac>
			evt = EVT_COMPLETE;
 1004930:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1004932:	f023 0310 	bic.w	r3, r3, #16
 1004936:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1004938:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 100493c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
 1004940:	2900      	cmp	r1, #0
 1004942:	f47f af5e 	bne.w	1004802 <process_event+0x32>
out:
 1004946:	e754      	b.n	10047f2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 1004948:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 100494a:	2900      	cmp	r1, #0
 100494c:	d0dc      	beq.n	1004908 <process_event+0x138>
	return node->next;
 100494e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
 1004952:	463b      	mov	r3, r7
 1004954:	4652      	mov	r2, sl
 1004956:	4620      	mov	r0, r4
 1004958:	f8d1 b004 	ldr.w	fp, [r1, #4]
 100495c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 100495e:	f1b9 0f00 	cmp.w	r9, #0
 1004962:	d0d1      	beq.n	1004908 <process_event+0x138>
 1004964:	4649      	mov	r1, r9
 1004966:	f8d9 9000 	ldr.w	r9, [r9]
 100496a:	e7f2      	b.n	1004952 <process_event+0x182>
 100496c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
 100496e:	463b      	mov	r3, r7
 1004970:	4652      	mov	r2, sl
 1004972:	4620      	mov	r0, r4
 1004974:	682d      	ldr	r5, [r5, #0]
 1004976:	f009 f970 	bl	100dc5a <notify_one>
 100497a:	e7c5      	b.n	1004908 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 100497c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1004980:	bf1e      	ittt	ne
 1004982:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
 1004986:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1004988:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
 100498a:	e7d5      	b.n	1004938 <process_event+0x168>
 100498c:	0100dc87 	.word	0x0100dc87

01004990 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 1004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1004994:	468b      	mov	fp, r1
 1004996:	4692      	mov	sl, r2
 1004998:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 100499a:	2500      	movs	r5, #0
{
 100499c:	b091      	sub	sp, #68	; 0x44
 100499e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 10049a0:	f89a 0000 	ldrb.w	r0, [sl]
 10049a4:	b908      	cbnz	r0, 10049aa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 10049a6:	4628      	mov	r0, r5
 10049a8:	e35f      	b.n	100506a <cbvprintf+0x6da>
		if (*fp != '%') {
 10049aa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 10049ac:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 10049b0:	d007      	beq.n	10049c2 <cbvprintf+0x32>
			OUTC('%');
 10049b2:	4659      	mov	r1, fp
 10049b4:	9b02      	ldr	r3, [sp, #8]
 10049b6:	4798      	blx	r3
 10049b8:	2800      	cmp	r0, #0
 10049ba:	f2c0 8356 	blt.w	100506a <cbvprintf+0x6da>
 10049be:	3501      	adds	r5, #1
			break;
 10049c0:	e212      	b.n	1004de8 <cbvprintf+0x458>
		} state = {
 10049c2:	2218      	movs	r2, #24
 10049c4:	2100      	movs	r1, #0
 10049c6:	a80a      	add	r0, sp, #40	; 0x28
 10049c8:	f009 fdf0 	bl	100e5ac <memset>
	if (*sp == '%') {
 10049cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 10049d0:	2b25      	cmp	r3, #37	; 0x25
 10049d2:	d078      	beq.n	1004ac6 <cbvprintf+0x136>
 10049d4:	2200      	movs	r2, #0
 10049d6:	4610      	mov	r0, r2
 10049d8:	4696      	mov	lr, r2
 10049da:	4694      	mov	ip, r2
 10049dc:	4616      	mov	r6, r2
 10049de:	4639      	mov	r1, r7
		switch (*sp) {
 10049e0:	f817 3b01 	ldrb.w	r3, [r7], #1
 10049e4:	2b2b      	cmp	r3, #43	; 0x2b
 10049e6:	f000 809d 	beq.w	1004b24 <cbvprintf+0x194>
 10049ea:	f200 8094 	bhi.w	1004b16 <cbvprintf+0x186>
 10049ee:	2b20      	cmp	r3, #32
 10049f0:	f000 809b 	beq.w	1004b2a <cbvprintf+0x19a>
 10049f4:	2b23      	cmp	r3, #35	; 0x23
 10049f6:	f000 809b 	beq.w	1004b30 <cbvprintf+0x1a0>
 10049fa:	b12e      	cbz	r6, 1004a08 <cbvprintf+0x78>
 10049fc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1004a00:	f046 0604 	orr.w	r6, r6, #4
 1004a04:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1004a08:	f1bc 0f00 	cmp.w	ip, #0
 1004a0c:	d005      	beq.n	1004a1a <cbvprintf+0x8a>
 1004a0e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1004a12:	f046 0608 	orr.w	r6, r6, #8
 1004a16:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1004a1a:	f1be 0f00 	cmp.w	lr, #0
 1004a1e:	d005      	beq.n	1004a2c <cbvprintf+0x9c>
 1004a20:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1004a24:	f046 0610 	orr.w	r6, r6, #16
 1004a28:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1004a2c:	b128      	cbz	r0, 1004a3a <cbvprintf+0xaa>
 1004a2e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 1004a32:	f040 0020 	orr.w	r0, r0, #32
 1004a36:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 1004a3a:	b12a      	cbz	r2, 1004a48 <cbvprintf+0xb8>
 1004a3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1004a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1004a44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 1004a48:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1004a4c:	f002 0044 	and.w	r0, r2, #68	; 0x44
 1004a50:	2844      	cmp	r0, #68	; 0x44
 1004a52:	d103      	bne.n	1004a5c <cbvprintf+0xcc>
		conv->flag_zero = false;
 1004a54:	f36f 1286 	bfc	r2, #6, #1
 1004a58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 1004a5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 1004a60:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 1004a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1004a66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 1004a6a:	d17b      	bne.n	1004b64 <cbvprintf+0x1d4>
		conv->width_star = true;
 1004a6c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 1004a70:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 1004a72:	f042 0201 	orr.w	r2, r2, #1
 1004a76:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 1004a7a:	781a      	ldrb	r2, [r3, #0]
 1004a7c:	2a2e      	cmp	r2, #46	; 0x2e
 1004a7e:	bf0c      	ite	eq
 1004a80:	2101      	moveq	r1, #1
 1004a82:	2100      	movne	r1, #0
 1004a84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1004a88:	f361 0241 	bfi	r2, r1, #1, #1
 1004a8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 1004a90:	d174      	bne.n	1004b7c <cbvprintf+0x1ec>
	if (*sp == '*') {
 1004a92:	785a      	ldrb	r2, [r3, #1]
 1004a94:	2a2a      	cmp	r2, #42	; 0x2a
 1004a96:	d06a      	beq.n	1004b6e <cbvprintf+0x1de>
	size_t val = 0;
 1004a98:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 1004a9a:	260a      	movs	r6, #10
	++sp;
 1004a9c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 1004a9e:	4618      	mov	r0, r3
 1004aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 1004aa4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1004aa8:	2f09      	cmp	r7, #9
 1004aaa:	f240 808e 	bls.w	1004bca <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 1004aae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 1004ab2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 1004ab4:	f3c2 0040 	ubfx	r0, r2, #1, #1
 1004ab8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 1004abc:	f361 0241 	bfi	r2, r1, #1, #1
 1004ac0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 1004ac4:	e05a      	b.n	1004b7c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 1004ac6:	f10a 0702 	add.w	r7, sl, #2
 1004aca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 1004ace:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1004ad2:	07d9      	lsls	r1, r3, #31
 1004ad4:	f140 8149 	bpl.w	1004d6a <cbvprintf+0x3da>
			width = va_arg(ap, int);
 1004ad8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 1004adc:	f1b9 0f00 	cmp.w	r9, #0
 1004ae0:	da07      	bge.n	1004af2 <cbvprintf+0x162>
				conv->flag_dash = true;
 1004ae2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 1004ae6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 1004aea:	f042 0204 	orr.w	r2, r2, #4
 1004aee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 1004af2:	075a      	lsls	r2, r3, #29
 1004af4:	f140 8142 	bpl.w	1004d7c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 1004af8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 1004afc:	f1b8 0f00 	cmp.w	r8, #0
 1004b00:	f280 8141 	bge.w	1004d86 <cbvprintf+0x3f6>
				conv->prec_present = false;
 1004b04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1004b08:	f36f 0341 	bfc	r3, #1, #1
 1004b0c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 1004b10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 1004b14:	e137      	b.n	1004d86 <cbvprintf+0x3f6>
		switch (*sp) {
 1004b16:	2b2d      	cmp	r3, #45	; 0x2d
 1004b18:	d00c      	beq.n	1004b34 <cbvprintf+0x1a4>
 1004b1a:	2b30      	cmp	r3, #48	; 0x30
 1004b1c:	f47f af6d 	bne.w	10049fa <cbvprintf+0x6a>
			conv->flag_zero = true;
 1004b20:	2201      	movs	r2, #1
	} while (loop);
 1004b22:	e75c      	b.n	10049de <cbvprintf+0x4e>
			conv->flag_plus = true;
 1004b24:	f04f 0c01 	mov.w	ip, #1
 1004b28:	e759      	b.n	10049de <cbvprintf+0x4e>
			conv->flag_space = true;
 1004b2a:	f04f 0e01 	mov.w	lr, #1
 1004b2e:	e756      	b.n	10049de <cbvprintf+0x4e>
			conv->flag_hash = true;
 1004b30:	2001      	movs	r0, #1
 1004b32:	e754      	b.n	10049de <cbvprintf+0x4e>
		switch (*sp) {
 1004b34:	2601      	movs	r6, #1
 1004b36:	e752      	b.n	10049de <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 1004b38:	4633      	mov	r3, r6
 1004b3a:	fb0c 0202 	mla	r2, ip, r2, r0
 1004b3e:	3a30      	subs	r2, #48	; 0x30
 1004b40:	461e      	mov	r6, r3
 1004b42:	f816 0b01 	ldrb.w	r0, [r6], #1
 1004b46:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1004b4a:	2f09      	cmp	r7, #9
 1004b4c:	d9f4      	bls.n	1004b38 <cbvprintf+0x1a8>
	if (sp != wp) {
 1004b4e:	4299      	cmp	r1, r3
 1004b50:	d093      	beq.n	1004a7a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 1004b52:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 1004b56:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 1004b58:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 1004b5a:	f362 0141 	bfi	r1, r2, #1, #1
 1004b5e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 1004b62:	e78a      	b.n	1004a7a <cbvprintf+0xea>
 1004b64:	460b      	mov	r3, r1
	size_t val = 0;
 1004b66:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1004b68:	f04f 0c0a 	mov.w	ip, #10
 1004b6c:	e7e8      	b.n	1004b40 <cbvprintf+0x1b0>
		conv->prec_star = true;
 1004b6e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 1004b72:	3302      	adds	r3, #2
		conv->prec_star = true;
 1004b74:	f042 0204 	orr.w	r2, r2, #4
 1004b78:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 1004b7c:	461f      	mov	r7, r3
 1004b7e:	f817 2b01 	ldrb.w	r2, [r7], #1
 1004b82:	2a6c      	cmp	r2, #108	; 0x6c
 1004b84:	d041      	beq.n	1004c0a <cbvprintf+0x27a>
 1004b86:	d825      	bhi.n	1004bd4 <cbvprintf+0x244>
 1004b88:	2a68      	cmp	r2, #104	; 0x68
 1004b8a:	d02b      	beq.n	1004be4 <cbvprintf+0x254>
 1004b8c:	2a6a      	cmp	r2, #106	; 0x6a
 1004b8e:	d046      	beq.n	1004c1e <cbvprintf+0x28e>
 1004b90:	2a4c      	cmp	r2, #76	; 0x4c
 1004b92:	d04c      	beq.n	1004c2e <cbvprintf+0x29e>
 1004b94:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 1004b96:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004b9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 1004b9e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 1004ba0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 1004ba4:	f200 80d9 	bhi.w	1004d5a <cbvprintf+0x3ca>
 1004ba8:	2a57      	cmp	r2, #87	; 0x57
 1004baa:	d84d      	bhi.n	1004c48 <cbvprintf+0x2b8>
 1004bac:	2a41      	cmp	r2, #65	; 0x41
 1004bae:	d003      	beq.n	1004bb8 <cbvprintf+0x228>
 1004bb0:	3a45      	subs	r2, #69	; 0x45
 1004bb2:	2a02      	cmp	r2, #2
 1004bb4:	f200 80d1 	bhi.w	1004d5a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 1004bb8:	2204      	movs	r2, #4
 1004bba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1004bbe:	f362 0302 	bfi	r3, r2, #0, #3
 1004bc2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 1004bc6:	2301      	movs	r3, #1
			break;
 1004bc8:	e09e      	b.n	1004d08 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 1004bca:	fb06 2101 	mla	r1, r6, r1, r2
 1004bce:	4603      	mov	r3, r0
 1004bd0:	3930      	subs	r1, #48	; 0x30
 1004bd2:	e764      	b.n	1004a9e <cbvprintf+0x10e>
	switch (*sp) {
 1004bd4:	2a74      	cmp	r2, #116	; 0x74
 1004bd6:	d026      	beq.n	1004c26 <cbvprintf+0x296>
 1004bd8:	2a7a      	cmp	r2, #122	; 0x7a
 1004bda:	d1db      	bne.n	1004b94 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 1004bdc:	2206      	movs	r2, #6
 1004bde:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1004be2:	e00d      	b.n	1004c00 <cbvprintf+0x270>
		if (*++sp == 'h') {
 1004be4:	785a      	ldrb	r2, [r3, #1]
 1004be6:	2a68      	cmp	r2, #104	; 0x68
 1004be8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1004bec:	d106      	bne.n	1004bfc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 1004bee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 1004bf0:	f361 02c6 	bfi	r2, r1, #3, #4
 1004bf4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 1004bf8:	1c9f      	adds	r7, r3, #2
 1004bfa:	e7cc      	b.n	1004b96 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 1004bfc:	4613      	mov	r3, r2
 1004bfe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 1004c00:	f362 03c6 	bfi	r3, r2, #3, #4
 1004c04:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 1004c08:	e7c5      	b.n	1004b96 <cbvprintf+0x206>
		if (*++sp == 'l') {
 1004c0a:	785a      	ldrb	r2, [r3, #1]
 1004c0c:	2a6c      	cmp	r2, #108	; 0x6c
 1004c0e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1004c12:	d101      	bne.n	1004c18 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 1004c14:	2104      	movs	r1, #4
 1004c16:	e7eb      	b.n	1004bf0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 1004c18:	4613      	mov	r3, r2
 1004c1a:	2203      	movs	r2, #3
 1004c1c:	e7f0      	b.n	1004c00 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 1004c1e:	2205      	movs	r2, #5
 1004c20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1004c24:	e7ec      	b.n	1004c00 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 1004c26:	2207      	movs	r2, #7
 1004c28:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1004c2c:	e7e8      	b.n	1004c00 <cbvprintf+0x270>
		conv->unsupported = true;
 1004c2e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 1004c32:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 1004c36:	f023 0302 	bic.w	r3, r3, #2
 1004c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 1004c3e:	f043 0302 	orr.w	r3, r3, #2
 1004c42:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 1004c46:	e7a6      	b.n	1004b96 <cbvprintf+0x206>
	switch (conv->specifier) {
 1004c48:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 1004c4c:	2920      	cmp	r1, #32
 1004c4e:	f200 8084 	bhi.w	1004d5a <cbvprintf+0x3ca>
 1004c52:	a001      	add	r0, pc, #4	; (adr r0, 1004c58 <cbvprintf+0x2c8>)
 1004c54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 1004c58:	01004d1d 	.word	0x01004d1d
 1004c5c:	01004d5b 	.word	0x01004d5b
 1004c60:	01004d5b 	.word	0x01004d5b
 1004c64:	01004d5b 	.word	0x01004d5b
 1004c68:	01004d5b 	.word	0x01004d5b
 1004c6c:	01004d5b 	.word	0x01004d5b
 1004c70:	01004d5b 	.word	0x01004d5b
 1004c74:	01004d5b 	.word	0x01004d5b
 1004c78:	01004d5b 	.word	0x01004d5b
 1004c7c:	01004bb9 	.word	0x01004bb9
 1004c80:	01004d5b 	.word	0x01004d5b
 1004c84:	01004d1d 	.word	0x01004d1d
 1004c88:	01004cdd 	.word	0x01004cdd
 1004c8c:	01004bb9 	.word	0x01004bb9
 1004c90:	01004bb9 	.word	0x01004bb9
 1004c94:	01004bb9 	.word	0x01004bb9
 1004c98:	01004d5b 	.word	0x01004d5b
 1004c9c:	01004cdd 	.word	0x01004cdd
 1004ca0:	01004d5b 	.word	0x01004d5b
 1004ca4:	01004d5b 	.word	0x01004d5b
 1004ca8:	01004d5b 	.word	0x01004d5b
 1004cac:	01004d5b 	.word	0x01004d5b
 1004cb0:	01004d25 	.word	0x01004d25
 1004cb4:	01004d1d 	.word	0x01004d1d
 1004cb8:	01004d41 	.word	0x01004d41
 1004cbc:	01004d5b 	.word	0x01004d5b
 1004cc0:	01004d5b 	.word	0x01004d5b
 1004cc4:	01004d41 	.word	0x01004d41
 1004cc8:	01004d5b 	.word	0x01004d5b
 1004ccc:	01004d1d 	.word	0x01004d1d
 1004cd0:	01004d5b 	.word	0x01004d5b
 1004cd4:	01004d5b 	.word	0x01004d5b
 1004cd8:	01004d1d 	.word	0x01004d1d
		conv->specifier_cat = SPECIFIER_SINT;
 1004cdc:	2001      	movs	r0, #1
 1004cde:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004ce2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1004ce6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004cea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 1004cec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 1004cf0:	bf02      	ittt	eq
 1004cf2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 1004cf6:	f041 0101 	orreq.w	r1, r1, #1
 1004cfa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 1004cfe:	2a63      	cmp	r2, #99	; 0x63
 1004d00:	d131      	bne.n	1004d66 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 1004d02:	3b00      	subs	r3, #0
 1004d04:	bf18      	it	ne
 1004d06:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 1004d08:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1004d0c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 1004d10:	430b      	orrs	r3, r1
 1004d12:	f363 0241 	bfi	r2, r3, #1, #1
 1004d16:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 1004d1a:	e6d8      	b.n	1004ace <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 1004d1c:	2002      	movs	r0, #2
 1004d1e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 1004d22:	e7de      	b.n	1004ce2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 1004d24:	2103      	movs	r1, #3
 1004d26:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004d2a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 1004d2e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 1004d32:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004d36:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 1004d38:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1004d3c:	4143      	adcs	r3, r0
 1004d3e:	e7e3      	b.n	1004d08 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 1004d40:	2103      	movs	r1, #3
 1004d42:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1004d46:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 1004d4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 1004d4e:	bf14      	ite	ne
 1004d50:	2301      	movne	r3, #1
 1004d52:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 1004d54:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1004d58:	e7d6      	b.n	1004d08 <cbvprintf+0x378>
		conv->invalid = true;
 1004d5a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 1004d5e:	f043 0301 	orr.w	r3, r3, #1
 1004d62:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 1004d66:	2300      	movs	r3, #0
 1004d68:	e7ce      	b.n	1004d08 <cbvprintf+0x378>
		} else if (conv->width_present) {
 1004d6a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 1004d6e:	2a00      	cmp	r2, #0
		int width = -1;
 1004d70:	bfac      	ite	ge
 1004d72:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
 1004d76:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
 1004d7a:	e6ba      	b.n	1004af2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
 1004d7c:	079b      	lsls	r3, r3, #30
 1004d7e:	f57f aec7 	bpl.w	1004b10 <cbvprintf+0x180>
			precision = conv->prec_value;
 1004d82:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 1004d86:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 1004d88:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 1004d8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 1004d90:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
 1004d94:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 1004d98:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 1004d9a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 1004d9e:	d138      	bne.n	1004e12 <cbvprintf+0x482>
			switch (length_mod) {
 1004da0:	1ecb      	subs	r3, r1, #3
 1004da2:	2b04      	cmp	r3, #4
 1004da4:	d822      	bhi.n	1004dec <cbvprintf+0x45c>
 1004da6:	e8df f003 	tbb	[pc, r3]
 1004daa:	0903      	.short	0x0903
 1004dac:	2109      	.short	0x2109
 1004dae:	21          	.byte	0x21
 1004daf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 1004db0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 1004db4:	17da      	asrs	r2, r3, #31
 1004db6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 1004dba:	e006      	b.n	1004dca <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 1004dbc:	3407      	adds	r4, #7
 1004dbe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 1004dc2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 1004dc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 1004dca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 1004dce:	f013 0603 	ands.w	r6, r3, #3
 1004dd2:	d056      	beq.n	1004e82 <cbvprintf+0x4f2>
			OUTS(sp, fp);
 1004dd4:	463b      	mov	r3, r7
 1004dd6:	4652      	mov	r2, sl
 1004dd8:	4659      	mov	r1, fp
 1004dda:	9802      	ldr	r0, [sp, #8]
 1004ddc:	f009 fa7b 	bl	100e2d6 <outs>
 1004de0:	2800      	cmp	r0, #0
 1004de2:	f2c0 8142 	blt.w	100506a <cbvprintf+0x6da>
 1004de6:	4405      	add	r5, r0
			continue;
 1004de8:	46ba      	mov	sl, r7
 1004dea:	e5d9      	b.n	10049a0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1004dec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1004df0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1004df2:	ea4f 72e3 	mov.w	r2, r3, asr #31
 1004df6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 1004dfa:	d105      	bne.n	1004e08 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 1004dfc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 1004e00:	930a      	str	r3, [sp, #40]	; 0x28
 1004e02:	2300      	movs	r3, #0
 1004e04:	930b      	str	r3, [sp, #44]	; 0x2c
 1004e06:	e7e0      	b.n	1004dca <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 1004e08:	2902      	cmp	r1, #2
 1004e0a:	d1de      	bne.n	1004dca <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 1004e0c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 1004e10:	e7d0      	b.n	1004db4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 1004e12:	2b02      	cmp	r3, #2
 1004e14:	d123      	bne.n	1004e5e <cbvprintf+0x4ce>
			switch (length_mod) {
 1004e16:	1ecb      	subs	r3, r1, #3
 1004e18:	2b04      	cmp	r3, #4
 1004e1a:	d813      	bhi.n	1004e44 <cbvprintf+0x4b4>
 1004e1c:	e8df f003 	tbb	[pc, r3]
 1004e20:	120a0a03 	.word	0x120a0a03
 1004e24:	12          	.byte	0x12
 1004e25:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
 1004e26:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
 1004e28:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
 1004e2a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 1004e2c:	920a      	str	r2, [sp, #40]	; 0x28
 1004e2e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 1004e30:	4604      	mov	r4, r0
 1004e32:	e7ca      	b.n	1004dca <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 1004e34:	1de0      	adds	r0, r4, #7
 1004e36:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 1004e3a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 1004e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 1004e42:	e7f5      	b.n	1004e30 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 1004e44:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1004e48:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 1004e4a:	930a      	str	r3, [sp, #40]	; 0x28
 1004e4c:	f04f 0300 	mov.w	r3, #0
 1004e50:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 1004e52:	d0d3      	beq.n	1004dfc <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 1004e54:	2902      	cmp	r1, #2
 1004e56:	d1b8      	bne.n	1004dca <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 1004e58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 1004e5c:	e7d0      	b.n	1004e00 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 1004e5e:	2b04      	cmp	r3, #4
 1004e60:	d109      	bne.n	1004e76 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
 1004e62:	1de3      	adds	r3, r4, #7
 1004e64:	f023 0307 	bic.w	r3, r3, #7
 1004e68:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 1004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 1004e70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1004e74:	e7a9      	b.n	1004dca <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 1004e76:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 1004e78:	bf04      	itt	eq
 1004e7a:	f854 3b04 	ldreq.w	r3, [r4], #4
 1004e7e:	930a      	streq	r3, [sp, #40]	; 0x28
 1004e80:	e7a3      	b.n	1004dca <cbvprintf+0x43a>
		switch (conv->specifier) {
 1004e82:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 1004e86:	2878      	cmp	r0, #120	; 0x78
 1004e88:	d8ae      	bhi.n	1004de8 <cbvprintf+0x458>
 1004e8a:	2862      	cmp	r0, #98	; 0x62
 1004e8c:	d822      	bhi.n	1004ed4 <cbvprintf+0x544>
 1004e8e:	2825      	cmp	r0, #37	; 0x25
 1004e90:	f43f ad8f 	beq.w	10049b2 <cbvprintf+0x22>
 1004e94:	2858      	cmp	r0, #88	; 0x58
 1004e96:	d1a7      	bne.n	1004de8 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 1004e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 1004e9c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 1004ea0:	9300      	str	r3, [sp, #0]
 1004ea2:	aa0c      	add	r2, sp, #48	; 0x30
 1004ea4:	ab04      	add	r3, sp, #16
 1004ea6:	f009 f9d0 	bl	100e24a <encode_uint>
 1004eaa:	4682      	mov	sl, r0
			if (precision >= 0) {
 1004eac:	f1b8 0f00 	cmp.w	r8, #0
 1004eb0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 1004eb4:	db0c      	blt.n	1004ed0 <cbvprintf+0x540>
				conv->flag_zero = false;
 1004eb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 1004eba:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 1004ebe:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 1004ec2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 1004ec4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 1004ec8:	d902      	bls.n	1004ed0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
 1004eca:	eba8 0303 	sub.w	r3, r8, r3
 1004ece:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 1004ed0:	4680      	mov	r8, r0
 1004ed2:	e03d      	b.n	1004f50 <cbvprintf+0x5c0>
		switch (conv->specifier) {
 1004ed4:	3863      	subs	r0, #99	; 0x63
 1004ed6:	2815      	cmp	r0, #21
 1004ed8:	d886      	bhi.n	1004de8 <cbvprintf+0x458>
 1004eda:	a201      	add	r2, pc, #4	; (adr r2, 1004ee0 <cbvprintf+0x550>)
 1004edc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 1004ee0:	01004f61 	.word	0x01004f61
 1004ee4:	01004fc5 	.word	0x01004fc5
 1004ee8:	01004de9 	.word	0x01004de9
 1004eec:	01004de9 	.word	0x01004de9
 1004ef0:	01004de9 	.word	0x01004de9
 1004ef4:	01004de9 	.word	0x01004de9
 1004ef8:	01004fc5 	.word	0x01004fc5
 1004efc:	01004de9 	.word	0x01004de9
 1004f00:	01004de9 	.word	0x01004de9
 1004f04:	01004de9 	.word	0x01004de9
 1004f08:	01004de9 	.word	0x01004de9
 1004f0c:	0100501f 	.word	0x0100501f
 1004f10:	01004fed 	.word	0x01004fed
 1004f14:	01004ff1 	.word	0x01004ff1
 1004f18:	01004de9 	.word	0x01004de9
 1004f1c:	01004de9 	.word	0x01004de9
 1004f20:	01004f39 	.word	0x01004f39
 1004f24:	01004de9 	.word	0x01004de9
 1004f28:	01004fed 	.word	0x01004fed
 1004f2c:	01004de9 	.word	0x01004de9
 1004f30:	01004de9 	.word	0x01004de9
 1004f34:	01004fed 	.word	0x01004fed
			if (precision >= 0) {
 1004f38:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 1004f3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 1004f40:	db0a      	blt.n	1004f58 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
 1004f42:	4641      	mov	r1, r8
 1004f44:	4650      	mov	r0, sl
 1004f46:	f009 fad7 	bl	100e4f8 <strnlen>
		char sign = 0;
 1004f4a:	2600      	movs	r6, #0
			bpe = bps + len;
 1004f4c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
 1004f50:	f1ba 0f00 	cmp.w	sl, #0
 1004f54:	d10c      	bne.n	1004f70 <cbvprintf+0x5e0>
 1004f56:	e747      	b.n	1004de8 <cbvprintf+0x458>
				len = strlen(bps);
 1004f58:	4650      	mov	r0, sl
 1004f5a:	f009 fac6 	bl	100e4ea <strlen>
 1004f5e:	e7f4      	b.n	1004f4a <cbvprintf+0x5ba>
			break;
 1004f60:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1004f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
 1004f64:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1004f68:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
 1004f6c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 1004f70:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 1004f74:	b106      	cbz	r6, 1004f78 <cbvprintf+0x5e8>
			nj_len += 1U;
 1004f76:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 1004f78:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 1004f7c:	06d0      	lsls	r0, r2, #27
 1004f7e:	d568      	bpl.n	1005052 <cbvprintf+0x6c2>
			nj_len += 2U;
 1004f80:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 1004f82:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 1004f84:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 1004f86:	bf48      	it	mi
 1004f88:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 1004f8a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 1004f8c:	bf48      	it	mi
 1004f8e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 1004f90:	f1b9 0f00 	cmp.w	r9, #0
 1004f94:	dd76      	ble.n	1005084 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
 1004f96:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 1004f9a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 1004f9e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 1004fa2:	9303      	str	r3, [sp, #12]
 1004fa4:	0753      	lsls	r3, r2, #29
 1004fa6:	d46d      	bmi.n	1005084 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
 1004fa8:	0650      	lsls	r0, r2, #25
 1004faa:	d561      	bpl.n	1005070 <cbvprintf+0x6e0>
					if (sign != 0) {
 1004fac:	b146      	cbz	r6, 1004fc0 <cbvprintf+0x630>
						OUTC(sign);
 1004fae:	4659      	mov	r1, fp
 1004fb0:	4630      	mov	r0, r6
 1004fb2:	9b02      	ldr	r3, [sp, #8]
 1004fb4:	4798      	blx	r3
 1004fb6:	2800      	cmp	r0, #0
 1004fb8:	db57      	blt.n	100506a <cbvprintf+0x6da>
						sign = 0;
 1004fba:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 1004fbc:	3501      	adds	r5, #1
						sign = 0;
 1004fbe:	461e      	mov	r6, r3
					pad = '0';
 1004fc0:	2330      	movs	r3, #48	; 0x30
 1004fc2:	e056      	b.n	1005072 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
 1004fc4:	071e      	lsls	r6, r3, #28
 1004fc6:	d40f      	bmi.n	1004fe8 <cbvprintf+0x658>
				sign = ' ';
 1004fc8:	f013 0610 	ands.w	r6, r3, #16
 1004fcc:	bf18      	it	ne
 1004fce:	2620      	movne	r6, #32
			sint = value->sint;
 1004fd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 1004fd4:	2b00      	cmp	r3, #0
 1004fd6:	f6bf af5f 	bge.w	1004e98 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
 1004fda:	4252      	negs	r2, r2
 1004fdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 1004fe0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 1004fe2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1004fe6:	e757      	b.n	1004e98 <cbvprintf+0x508>
				sign = '+';
 1004fe8:	262b      	movs	r6, #43	; 0x2b
 1004fea:	e7f1      	b.n	1004fd0 <cbvprintf+0x640>
		switch (conv->specifier) {
 1004fec:	2600      	movs	r6, #0
 1004fee:	e753      	b.n	1004e98 <cbvprintf+0x508>
			if (value->ptr != NULL) {
 1004ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 1004ff2:	b340      	cbz	r0, 1005046 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1004ff4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 1004ff8:	9300      	str	r3, [sp, #0]
 1004ffa:	2100      	movs	r1, #0
 1004ffc:	ab04      	add	r3, sp, #16
 1004ffe:	aa0c      	add	r2, sp, #48	; 0x30
 1005000:	f009 f923 	bl	100e24a <encode_uint>
				conv->altform_0c = true;
 1005004:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1005008:	4682      	mov	sl, r0
				conv->altform_0c = true;
 100500a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 100500e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 1005012:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
 1005016:	2600      	movs	r6, #0
				conv->altform_0c = true;
 1005018:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 100501c:	e746      	b.n	1004eac <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
 100501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 1005020:	2907      	cmp	r1, #7
 1005022:	f63f aee1 	bhi.w	1004de8 <cbvprintf+0x458>
 1005026:	e8df f001 	tbb	[pc, r1]
 100502a:	040c      	.short	0x040c
 100502c:	08080c06 	.word	0x08080c06
 1005030:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 1005032:	701d      	strb	r5, [r3, #0]
		break;
 1005034:	e6d8      	b.n	1004de8 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 1005036:	801d      	strh	r5, [r3, #0]
		break;
 1005038:	e6d6      	b.n	1004de8 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 100503a:	17ea      	asrs	r2, r5, #31
 100503c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 1005040:	e6d2      	b.n	1004de8 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 1005042:	601d      	str	r5, [r3, #0]
		break;
 1005044:	e6d0      	b.n	1004de8 <cbvprintf+0x458>
			bps = "(nil)";
 1005046:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1005110 <cbvprintf+0x780>
 100504a:	4606      	mov	r6, r0
			bpe = bps + 5;
 100504c:	f10a 0805 	add.w	r8, sl, #5
 1005050:	e78e      	b.n	1004f70 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
 1005052:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 1005054:	bf48      	it	mi
 1005056:	3301      	addmi	r3, #1
 1005058:	e793      	b.n	1004f82 <cbvprintf+0x5f2>
					OUTC(pad);
 100505a:	4618      	mov	r0, r3
 100505c:	9303      	str	r3, [sp, #12]
 100505e:	4659      	mov	r1, fp
 1005060:	9b02      	ldr	r3, [sp, #8]
 1005062:	4798      	blx	r3
 1005064:	2800      	cmp	r0, #0
 1005066:	9b03      	ldr	r3, [sp, #12]
 1005068:	da04      	bge.n	1005074 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
 100506a:	b011      	add	sp, #68	; 0x44
 100506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 1005070:	2320      	movs	r3, #32
 1005072:	444d      	add	r5, r9
 1005074:	464a      	mov	r2, r9
				while (width-- > 0) {
 1005076:	2a00      	cmp	r2, #0
 1005078:	eba5 0109 	sub.w	r1, r5, r9
 100507c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 1005080:	dceb      	bgt.n	100505a <cbvprintf+0x6ca>
 1005082:	460d      	mov	r5, r1
		if (sign != 0) {
 1005084:	b136      	cbz	r6, 1005094 <cbvprintf+0x704>
			OUTC(sign);
 1005086:	4659      	mov	r1, fp
 1005088:	4630      	mov	r0, r6
 100508a:	9b02      	ldr	r3, [sp, #8]
 100508c:	4798      	blx	r3
 100508e:	2800      	cmp	r0, #0
 1005090:	dbeb      	blt.n	100506a <cbvprintf+0x6da>
 1005092:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 1005094:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1005098:	06d9      	lsls	r1, r3, #27
 100509a:	d401      	bmi.n	10050a0 <cbvprintf+0x710>
 100509c:	071a      	lsls	r2, r3, #28
 100509e:	d506      	bpl.n	10050ae <cbvprintf+0x71e>
				OUTC('0');
 10050a0:	4659      	mov	r1, fp
 10050a2:	2030      	movs	r0, #48	; 0x30
 10050a4:	9b02      	ldr	r3, [sp, #8]
 10050a6:	4798      	blx	r3
 10050a8:	2800      	cmp	r0, #0
 10050aa:	dbde      	blt.n	100506a <cbvprintf+0x6da>
 10050ac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 10050ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 10050b2:	06db      	lsls	r3, r3, #27
 10050b4:	d507      	bpl.n	10050c6 <cbvprintf+0x736>
				OUTC(conv->specifier);
 10050b6:	4659      	mov	r1, fp
 10050b8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 10050bc:	9b02      	ldr	r3, [sp, #8]
 10050be:	4798      	blx	r3
 10050c0:	2800      	cmp	r0, #0
 10050c2:	dbd2      	blt.n	100506a <cbvprintf+0x6da>
 10050c4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 10050c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 10050c8:	442e      	add	r6, r5
 10050ca:	1b73      	subs	r3, r6, r5
 10050cc:	2b00      	cmp	r3, #0
 10050ce:	dc16      	bgt.n	10050fe <cbvprintf+0x76e>
			OUTS(bps, bpe);
 10050d0:	4643      	mov	r3, r8
 10050d2:	4652      	mov	r2, sl
 10050d4:	4659      	mov	r1, fp
 10050d6:	9802      	ldr	r0, [sp, #8]
 10050d8:	f009 f8fd 	bl	100e2d6 <outs>
 10050dc:	2800      	cmp	r0, #0
 10050de:	dbc4      	blt.n	100506a <cbvprintf+0x6da>
 10050e0:	4405      	add	r5, r0
		while (width > 0) {
 10050e2:	44a9      	add	r9, r5
 10050e4:	eba9 0305 	sub.w	r3, r9, r5
 10050e8:	2b00      	cmp	r3, #0
 10050ea:	f77f ae7d 	ble.w	1004de8 <cbvprintf+0x458>
			OUTC(' ');
 10050ee:	4659      	mov	r1, fp
 10050f0:	2020      	movs	r0, #32
 10050f2:	9b02      	ldr	r3, [sp, #8]
 10050f4:	4798      	blx	r3
 10050f6:	2800      	cmp	r0, #0
 10050f8:	dbb7      	blt.n	100506a <cbvprintf+0x6da>
 10050fa:	3501      	adds	r5, #1
			--width;
 10050fc:	e7f2      	b.n	10050e4 <cbvprintf+0x754>
				OUTC('0');
 10050fe:	4659      	mov	r1, fp
 1005100:	2030      	movs	r0, #48	; 0x30
 1005102:	9b02      	ldr	r3, [sp, #8]
 1005104:	4798      	blx	r3
 1005106:	2800      	cmp	r0, #0
 1005108:	dbaf      	blt.n	100506a <cbvprintf+0x6da>
 100510a:	3501      	adds	r5, #1
 100510c:	e7dd      	b.n	10050ca <cbvprintf+0x73a>
 100510e:	bf00      	nop
 1005110:	0101052c 	.word	0x0101052c

01005114 <nordicsemi_nrf53_init>:
 1005114:	f04f 0240 	mov.w	r2, #64	; 0x40
 1005118:	f3ef 8311 	mrs	r3, BASEPRI
 100511c:	f382 8811 	msr	BASEPRI, r2
 1005120:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 1005124:	2101      	movs	r1, #1
 1005126:	4a04      	ldr	r2, [pc, #16]	; (1005138 <nordicsemi_nrf53_init+0x24>)
 1005128:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
 100512c:	f383 8811 	msr	BASEPRI, r3
 1005130:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 1005134:	2000      	movs	r0, #0
 1005136:	4770      	bx	lr
 1005138:	41080000 	.word	0x41080000

0100513c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
 100513c:	b120      	cbz	r0, 1005148 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
 100513e:	4b03      	ldr	r3, [pc, #12]	; (100514c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 1005140:	0180      	lsls	r0, r0, #6
 1005142:	f043 0301 	orr.w	r3, r3, #1
 1005146:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
 1005148:	4770      	bx	lr
 100514a:	bf00      	nop
 100514c:	010102f0 	.word	0x010102f0

01005150 <virtio_get_status>:
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
 1005150:	4b01      	ldr	r3, [pc, #4]	; (1005158 <virtio_get_status+0x8>)
 1005152:	7818      	ldrb	r0, [r3, #0]
#if MASTER
	return VIRTIO_CONFIG_STATUS_DRIVER_OK;
#else
	return sys_read8(VDEV_STATUS_ADDR);
#endif
}
 1005154:	4770      	bx	lr
 1005156:	bf00      	nop
 1005158:	20070000 	.word	0x20070000

0100515c <virtio_set_status>:
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
 100515c:	4b01      	ldr	r3, [pc, #4]	; (1005164 <virtio_set_status+0x8>)
 100515e:	7019      	strb	r1, [r3, #0]

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
 1005160:	4770      	bx	lr
 1005162:	bf00      	nop
 1005164:	20070000 	.word	0x20070000

01005168 <ipm_callback>:
	 * for serialization master (app core)
	 *
	 * Use sysworkq to optimize memory footprint
	 * for serialization slave (net core)
	 */
	k_work_submit_to_queue(&ipm_work_q, &ipm_work);
 1005168:	4901      	ldr	r1, [pc, #4]	; (1005170 <ipm_callback+0x8>)
 100516a:	4802      	ldr	r0, [pc, #8]	; (1005174 <ipm_callback+0xc>)
 100516c:	f00a bd34 	b.w	100fbd8 <k_work_submit_to_queue>
 1005170:	21001b34 	.word	0x21001b34
 1005174:	210007b8 	.word	0x210007b8

01005178 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
 1005178:	4b01      	ldr	r3, [pc, #4]	; (1005180 <ipm_callback_process+0x8>)
 100517a:	6858      	ldr	r0, [r3, #4]
 100517c:	f00a ba98 	b.w	100f6b0 <virtqueue_notification>
 1005180:	21001b44 	.word	0x21001b44

01005184 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
 1005184:	4b05      	ldr	r3, [pc, #20]	; (100519c <virtio_notify+0x18>)
{
 1005186:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
 1005188:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
 100518a:	2300      	movs	r3, #0
 100518c:	6882      	ldr	r2, [r0, #8]
 100518e:	9300      	str	r3, [sp, #0]
 1005190:	6814      	ldr	r4, [r2, #0]
 1005192:	4619      	mov	r1, r3
 1005194:	461a      	mov	r2, r3
 1005196:	47a0      	blx	r4
}
 1005198:	b002      	add	sp, #8
 100519a:	bd10      	pop	{r4, pc}
 100519c:	21001b30 	.word	0x21001b30

010051a0 <rpmsg_backend_init>:
}

int rpmsg_backend_init(struct metal_io_region **io, struct virtio_device *vdev)
{
	int32_t                  err;
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 10051a0:	4b43      	ldr	r3, [pc, #268]	; (10052b0 <rpmsg_backend_init+0x110>)
{
 10051a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10051a6:	4607      	mov	r7, r0
 10051a8:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 10051aa:	e893 0003 	ldmia.w	r3, {r0, r1}
	struct metal_device     *device;

	/* Start IPM workqueue */
	k_work_queue_start(&ipm_work_q, ipm_stack_area,
 10051ae:	2300      	movs	r3, #0
{
 10051b0:	b086      	sub	sp, #24
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 10051b2:	ac04      	add	r4, sp, #16
 10051b4:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_queue_start(&ipm_work_q, ipm_stack_area,
 10051b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 10051bc:	9300      	str	r3, [sp, #0]
 10051be:	493d      	ldr	r1, [pc, #244]	; (10052b4 <rpmsg_backend_init+0x114>)
 10051c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10051c4:	483c      	ldr	r0, [pc, #240]	; (10052b8 <rpmsg_backend_init+0x118>)
 10051c6:	f007 fb3f 	bl	100c848 <k_work_queue_start>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 10051ca:	493c      	ldr	r1, [pc, #240]	; (10052bc <rpmsg_backend_init+0x11c>)
 10051cc:	483a      	ldr	r0, [pc, #232]	; (10052b8 <rpmsg_backend_init+0x118>)
 10051ce:	f00a fc8f 	bl	100faf0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(ipm_stack_area),
			   IPM_WORK_QUEUE_PRIORITY, NULL);
	k_thread_name_set(&ipm_work_q.thread, "ipm_work_q");

	/* Setup IPM workqueue item */
	k_work_init(&ipm_work, ipm_callback_process);
 10051d2:	493b      	ldr	r1, [pc, #236]	; (10052c0 <rpmsg_backend_init+0x120>)
 10051d4:	483b      	ldr	r0, [pc, #236]	; (10052c4 <rpmsg_backend_init+0x124>)
 10051d6:	f00a fcf6 	bl	100fbc6 <k_work_init>

	/* Libmetal setup */
	err = metal_init(&metal_params);
 10051da:	4620      	mov	r0, r4
 10051dc:	f006 fdb4 	bl	100bd48 <metal_init>
	if (err) {
 10051e0:	4604      	mov	r4, r0
 10051e2:	b978      	cbnz	r0, 1005204 <rpmsg_backend_init+0x64>
		LOG_ERR("metal_init: failed - error code %d", err);
		return err;
	}

	err = metal_register_generic_device(&shm_device);
 10051e4:	4838      	ldr	r0, [pc, #224]	; (10052c8 <rpmsg_backend_init+0x128>)
 10051e6:	f006 fd8f 	bl	100bd08 <metal_register_generic_device>
	if (err) {
 10051ea:	4604      	mov	r4, r0
 10051ec:	b950      	cbnz	r0, 1005204 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
		return err;
	}

	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 10051ee:	4937      	ldr	r1, [pc, #220]	; (10052cc <rpmsg_backend_init+0x12c>)
 10051f0:	4837      	ldr	r0, [pc, #220]	; (10052d0 <rpmsg_backend_init+0x130>)
 10051f2:	aa03      	add	r2, sp, #12
 10051f4:	f00a f8ea 	bl	100f3cc <metal_device_open>
	if (err) {
 10051f8:	4604      	mov	r4, r0
 10051fa:	b918      	cbnz	r0, 1005204 <rpmsg_backend_init+0x64>
		LOG_ERR("metal_device_open failed: %d", err);
		return err;
	}

	*io = metal_device_io_region(device, 0);
 10051fc:	9b03      	ldr	r3, [sp, #12]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
 10051fe:	689a      	ldr	r2, [r3, #8]
 1005200:	b922      	cbnz	r2, 100520c <rpmsg_backend_init+0x6c>
 1005202:	6038      	str	r0, [r7, #0]
	vdev->vrings_num = VRING_COUNT;
	vdev->func = &dispatch;
	vdev->vrings_info = &rvrings[0];

	return 0;
}
 1005204:	4620      	mov	r0, r4
 1005206:	b006      	add	sp, #24
 1005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100520c:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
 100520e:	603b      	str	r3, [r7, #0]
	if (!*io) {
 1005210:	2b00      	cmp	r3, #0
 1005212:	d0f7      	beq.n	1005204 <rpmsg_backend_init+0x64>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 1005214:	482f      	ldr	r0, [pc, #188]	; (10052d4 <rpmsg_backend_init+0x134>)
 1005216:	f006 ff9b 	bl	100c150 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
 100521a:	4e2f      	ldr	r6, [pc, #188]	; (10052d8 <rpmsg_backend_init+0x138>)
 100521c:	6030      	str	r0, [r6, #0]
 100521e:	482f      	ldr	r0, [pc, #188]	; (10052dc <rpmsg_backend_init+0x13c>)
 1005220:	f006 ff96 	bl	100c150 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
 1005224:	6832      	ldr	r2, [r6, #0]
 1005226:	2a00      	cmp	r2, #0
 1005228:	d03f      	beq.n	10052aa <rpmsg_backend_init+0x10a>
	if (!ipm_rx_handle) {
 100522a:	2800      	cmp	r0, #0
 100522c:	d03d      	beq.n	10052aa <rpmsg_backend_init+0x10a>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
 100522e:	6883      	ldr	r3, [r0, #8]
 1005230:	4622      	mov	r2, r4
 1005232:	685b      	ldr	r3, [r3, #4]
 1005234:	492a      	ldr	r1, [pc, #168]	; (10052e0 <rpmsg_backend_init+0x140>)
 1005236:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
 1005238:	20b4      	movs	r0, #180	; 0xb4
 100523a:	f00a fe2b 	bl	100fe94 <k_malloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
 100523e:	4606      	mov	r6, r0
 1005240:	b118      	cbz	r0, 100524a <rpmsg_backend_init+0xaa>
		memset(vqs, 0x00, vq_size);
 1005242:	22b4      	movs	r2, #180	; 0xb4
 1005244:	4621      	mov	r1, r4
 1005246:	f009 f9b1 	bl	100e5ac <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
 100524a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 10052e4 <rpmsg_backend_init+0x144>
 100524e:	f8c8 6000 	str.w	r6, [r8]
	if (!vq[0]) {
 1005252:	b916      	cbnz	r6, 100525a <rpmsg_backend_init+0xba>
		return -ENOMEM;
 1005254:	f06f 040b 	mvn.w	r4, #11
 1005258:	e7d4      	b.n	1005204 <rpmsg_backend_init+0x64>
 100525a:	20b4      	movs	r0, #180	; 0xb4
 100525c:	f00a fe1a 	bl	100fe94 <k_malloc>
	if (vqs) {
 1005260:	4606      	mov	r6, r0
 1005262:	b118      	cbz	r0, 100526c <rpmsg_backend_init+0xcc>
		memset(vqs, 0x00, vq_size);
 1005264:	22b4      	movs	r2, #180	; 0xb4
 1005266:	2100      	movs	r1, #0
 1005268:	f009 f9a0 	bl	100e5ac <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
 100526c:	f8c8 6004 	str.w	r6, [r8, #4]
	if (!vq[1]) {
 1005270:	2e00      	cmp	r6, #0
 1005272:	d0ef      	beq.n	1005254 <rpmsg_backend_init+0xb4>
	rvrings[0].io = *io;
 1005274:	683a      	ldr	r2, [r7, #0]
 1005276:	4b1c      	ldr	r3, [pc, #112]	; (10052e8 <rpmsg_backend_init+0x148>)
	rvrings[0].vq = vq[0];
 1005278:	f8d8 0000 	ldr.w	r0, [r8]
	rvrings[0].io = *io;
 100527c:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
 100527e:	4a1b      	ldr	r2, [pc, #108]	; (10052ec <rpmsg_backend_init+0x14c>)
	rvrings[0].info.num_descs = VRING_SIZE;
 1005280:	2110      	movs	r1, #16
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
 1005282:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
 1005284:	2204      	movs	r2, #4
	rvrings[0].vq = vq[0];
 1005286:	6018      	str	r0, [r3, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
 1005288:	609a      	str	r2, [r3, #8]
	rvrings[1].io = *io;
 100528a:	6838      	ldr	r0, [r7, #0]
	rvrings[1].info.align = VRING_ALIGNMENT;
 100528c:	621a      	str	r2, [r3, #32]
	vdev->role = RPMSG_ROLE;
 100528e:	2201      	movs	r2, #1
	rvrings[1].io = *io;
 1005290:	62d8      	str	r0, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
 1005292:	4817      	ldr	r0, [pc, #92]	; (10052f0 <rpmsg_backend_init+0x150>)
	rvrings[1].info.num_descs = VRING_SIZE;
 1005294:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
 1005296:	61d8      	str	r0, [r3, #28]
	rvrings[1].vq = vq[1];
 1005298:	619e      	str	r6, [r3, #24]
	vdev->role = RPMSG_ROLE;
 100529a:	61aa      	str	r2, [r5, #24]
	vdev->vrings_num = VRING_COUNT;
 100529c:	2202      	movs	r2, #2
 100529e:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
 10052a0:	4a14      	ldr	r2, [pc, #80]	; (10052f4 <rpmsg_backend_init+0x154>)
	rvrings[0].info.num_descs = VRING_SIZE;
 10052a2:	8199      	strh	r1, [r3, #12]
	vdev->func = &dispatch;
 10052a4:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
 10052a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
 10052a8:	e7ac      	b.n	1005204 <rpmsg_backend_init+0x64>
		return -ENODEV;
 10052aa:	f06f 0412 	mvn.w	r4, #18
 10052ae:	e7a9      	b.n	1005204 <rpmsg_backend_init+0x64>
 10052b0:	01010240 	.word	0x01010240
 10052b4:	210047e8 	.word	0x210047e8
 10052b8:	210007b8 	.word	0x210007b8
 10052bc:	01010532 	.word	0x01010532
 10052c0:	01005179 	.word	0x01005179
 10052c4:	21001b34 	.word	0x21001b34
 10052c8:	2100007c 	.word	0x2100007c
 10052cc:	0101053d 	.word	0x0101053d
 10052d0:	01010547 	.word	0x01010547
 10052d4:	0101054f 	.word	0x0101054f
 10052d8:	21001b30 	.word	0x21001b30
 10052dc:	01010555 	.word	0x01010555
 10052e0:	01005169 	.word	0x01005169
 10052e4:	21001b44 	.word	0x21001b44
 10052e8:	2100004c 	.word	0x2100004c
 10052ec:	2007fc00 	.word	0x2007fc00
 10052f0:	2007f800 	.word	0x2007f800
 10052f4:	01010308 	.word	0x01010308

010052f8 <rpmsg_service_init>:
}

#endif

static int rpmsg_service_init(const struct device *dev)
{
 10052f8:	b530      	push	{r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
 10052fa:	4d1d      	ldr	r5, [pc, #116]	; (1005370 <rpmsg_service_init+0x78>)
 10052fc:	491d      	ldr	r1, [pc, #116]	; (1005374 <rpmsg_service_init+0x7c>)
 10052fe:	4628      	mov	r0, r5
{
 1005300:	b085      	sub	sp, #20
	err = rpmsg_backend_init(&io, &vdev);
 1005302:	f7ff ff4d 	bl	10051a0 <rpmsg_backend_init>
	if (err) {
 1005306:	4604      	mov	r4, r0
 1005308:	2800      	cmp	r0, #0
 100530a:	d12b      	bne.n	1005364 <rpmsg_service_init+0x6c>

#if MASTER
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
 100530c:	9000      	str	r0, [sp, #0]
 100530e:	4602      	mov	r2, r0
 1005310:	682b      	ldr	r3, [r5, #0]
 1005312:	4918      	ldr	r1, [pc, #96]	; (1005374 <rpmsg_service_init+0x7c>)
 1005314:	4818      	ldr	r0, [pc, #96]	; (1005378 <rpmsg_service_init+0x80>)
 1005316:	f006 fe67 	bl	100bfe8 <rpmsg_init_vdev>
#endif

	if (err) {
 100531a:	4604      	mov	r4, r0
 100531c:	bb10      	cbnz	r0, 1005364 <rpmsg_service_init+0x6c>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
		return err;
	}

	ep_crt_started = true;
 100531e:	2201      	movs	r2, #1
 1005320:	4b16      	ldr	r3, [pc, #88]	; (100537c <rpmsg_service_init+0x84>)
	struct rpmsg_device *rdev;

	rdev = rpmsg_virtio_get_rpmsg_device(&rvdev);

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (endpoints[i].name) {
 1005322:	4d17      	ldr	r5, [pc, #92]	; (1005380 <rpmsg_service_init+0x88>)
	ep_crt_started = true;
 1005324:	701a      	strb	r2, [r3, #0]
		if (endpoints[i].name) {
 1005326:	682a      	ldr	r2, [r5, #0]
 1005328:	b162      	cbz	r2, 1005344 <rpmsg_service_init+0x4c>
			err = rpmsg_create_ept(&endpoints[i].ep,
 100532a:	4b16      	ldr	r3, [pc, #88]	; (1005384 <rpmsg_service_init+0x8c>)
 100532c:	4912      	ldr	r1, [pc, #72]	; (1005378 <rpmsg_service_init+0x80>)
 100532e:	9302      	str	r3, [sp, #8]
 1005330:	686b      	ldr	r3, [r5, #4]
 1005332:	f105 0008 	add.w	r0, r5, #8
 1005336:	9301      	str	r3, [sp, #4]
 1005338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100533c:	9300      	str	r3, [sp, #0]
 100533e:	f006 fda7 	bl	100be90 <rpmsg_create_ept>
						RPMSG_ADDR_ANY,
						RPMSG_ADDR_ANY,
						endpoints[i].cb,
						rpmsg_service_unbind);

			if (err) {
 1005342:	b990      	cbnz	r0, 100536a <rpmsg_service_init+0x72>
		if (endpoints[i].name) {
 1005344:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 1005346:	b16a      	cbz	r2, 1005364 <rpmsg_service_init+0x6c>
			err = rpmsg_create_ept(&endpoints[i].ep,
 1005348:	4b0e      	ldr	r3, [pc, #56]	; (1005384 <rpmsg_service_init+0x8c>)
 100534a:	490b      	ldr	r1, [pc, #44]	; (1005378 <rpmsg_service_init+0x80>)
 100534c:	9302      	str	r3, [sp, #8]
 100534e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 1005350:	480d      	ldr	r0, [pc, #52]	; (1005388 <rpmsg_service_init+0x90>)
 1005352:	9301      	str	r3, [sp, #4]
 1005354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1005358:	9300      	str	r3, [sp, #0]
 100535a:	f006 fd99 	bl	100be90 <rpmsg_create_ept>
			if (err) {
 100535e:	2800      	cmp	r0, #0
 1005360:	bf18      	it	ne
 1005362:	4604      	movne	r4, r0
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
 1005364:	4620      	mov	r0, r4
 1005366:	b005      	add	sp, #20
 1005368:	bd30      	pop	{r4, r5, pc}
			if (err) {
 100536a:	4604      	mov	r4, r0
 100536c:	e7fa      	b.n	1005364 <rpmsg_service_init+0x6c>
 100536e:	bf00      	nop
 1005370:	21001be4 	.word	0x21001be4
 1005374:	21000858 	.word	0x21000858
 1005378:	21001be8 	.word	0x21001be8
 100537c:	21003e78 	.word	0x21003e78
 1005380:	21001b4c 	.word	0x21001b4c
 1005384:	0100e30b 	.word	0x0100e30b
 1005388:	21001ba0 	.word	0x21001ba0

0100538c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
	if (ep_crt_started) {
 100538c:	4b0b      	ldr	r3, [pc, #44]	; (10053bc <rpmsg_service_register_endpoint+0x30>)
{
 100538e:	b530      	push	{r4, r5, lr}
	if (ep_crt_started) {
 1005390:	781b      	ldrb	r3, [r3, #0]
{
 1005392:	4604      	mov	r4, r0
	if (ep_crt_started) {
 1005394:	b95b      	cbnz	r3, 10053ae <rpmsg_service_register_endpoint+0x22>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
 1005396:	4a0a      	ldr	r2, [pc, #40]	; (10053c0 <rpmsg_service_register_endpoint+0x34>)
 1005398:	6810      	ldr	r0, [r2, #0]
 100539a:	b110      	cbz	r0, 10053a2 <rpmsg_service_register_endpoint+0x16>
 100539c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 100539e:	b94b      	cbnz	r3, 10053b4 <rpmsg_service_register_endpoint+0x28>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
 10053a0:	2001      	movs	r0, #1
			endpoints[i].name = name;
 10053a2:	234c      	movs	r3, #76	; 0x4c
 10053a4:	4343      	muls	r3, r0
 10053a6:	18d5      	adds	r5, r2, r3
 10053a8:	50d4      	str	r4, [r2, r3]
			endpoints[i].cb = cb;
 10053aa:	6069      	str	r1, [r5, #4]
	}

	LOG_ERR("No free slots to register endpoint %s", log_strdup(name));

	return -ENOMEM;
}
 10053ac:	bd30      	pop	{r4, r5, pc}
		return -EINPROGRESS;
 10053ae:	f06f 0076 	mvn.w	r0, #118	; 0x76
 10053b2:	e7fb      	b.n	10053ac <rpmsg_service_register_endpoint+0x20>
	return -ENOMEM;
 10053b4:	f06f 000b 	mvn.w	r0, #11
 10053b8:	e7f8      	b.n	10053ac <rpmsg_service_register_endpoint+0x20>
 10053ba:	bf00      	nop
 10053bc:	21003e78 	.word	0x21003e78
 10053c0:	21001b4c 	.word	0x21001b4c

010053c4 <rpmsg_service_send>:
{
	return endpoints[endpoint_id].bound;
}

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
 10053c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 10053c6:	244c      	movs	r4, #76	; 0x4c
 10053c8:	460b      	mov	r3, r1
 10053ca:	2101      	movs	r1, #1
 10053cc:	4344      	muls	r4, r0
 10053ce:	e9cd 2100 	strd	r2, r1, [sp]
 10053d2:	4d05      	ldr	r5, [pc, #20]	; (10053e8 <rpmsg_service_send+0x24>)
 10053d4:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
 10053d6:	3408      	adds	r4, #8
 10053d8:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
 10053dc:	1928      	adds	r0, r5, r4
 10053de:	f006 fd45 	bl	100be6c <rpmsg_send_offchannel_raw>
}
 10053e2:	b003      	add	sp, #12
 10053e4:	bd30      	pop	{r4, r5, pc}
 10053e6:	bf00      	nop
 10053e8:	21001b4c 	.word	0x21001b4c

010053ec <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
 10053ec:	4b08      	ldr	r3, [pc, #32]	; (1005410 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
 10053ee:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 10053f0:	1ac3      	subs	r3, r0, r3
{
 10053f2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10053f4:	4907      	ldr	r1, [pc, #28]	; (1005414 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
 10053f6:	109b      	asrs	r3, r3, #2
{
 10053f8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10053fa:	4359      	muls	r1, r3
 10053fc:	2240      	movs	r2, #64	; 0x40
 10053fe:	4806      	ldr	r0, [pc, #24]	; (1005418 <onoff_stop+0x2c>)
 1005400:	f008 ffa1 	bl	100e346 <stop>
	notify(mgr, res);
 1005404:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 1005406:	4601      	mov	r1, r0
	notify(mgr, res);
 1005408:	4620      	mov	r0, r4
}
 100540a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 100540e:	4718      	bx	r3
 1005410:	21001c94 	.word	0x21001c94
 1005414:	b6db6db7 	.word	0xb6db6db7
 1005418:	01010138 	.word	0x01010138

0100541c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100541c:	2340      	movs	r3, #64	; 0x40
{
 100541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 1005420:	4c0b      	ldr	r4, [pc, #44]	; (1005450 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1005422:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 1005424:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1005426:	460b      	mov	r3, r1
{
 1005428:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100542a:	490a      	ldr	r1, [pc, #40]	; (1005454 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
 100542c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100542e:	4361      	muls	r1, r4
{
 1005430:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1005432:	4a09      	ldr	r2, [pc, #36]	; (1005458 <onoff_start+0x3c>)
 1005434:	4809      	ldr	r0, [pc, #36]	; (100545c <onoff_start+0x40>)
 1005436:	f008 ffb2 	bl	100e39e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 100543a:	1e01      	subs	r1, r0, #0
 100543c:	da05      	bge.n	100544a <onoff_start+0x2e>
		notify(mgr, err);
 100543e:	4630      	mov	r0, r6
 1005440:	462b      	mov	r3, r5
	}
}
 1005442:	b002      	add	sp, #8
 1005444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
 1005448:	4718      	bx	r3
}
 100544a:	b002      	add	sp, #8
 100544c:	bd70      	pop	{r4, r5, r6, pc}
 100544e:	bf00      	nop
 1005450:	21001c94 	.word	0x21001c94
 1005454:	b6db6db7 	.word	0xb6db6db7
 1005458:	0100e40f 	.word	0x0100e40f
 100545c:	01010138 	.word	0x01010138

01005460 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 1005460:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1005462:	2200      	movs	r2, #0
 1005464:	2101      	movs	r1, #1
{
 1005466:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1005468:	2005      	movs	r0, #5
 100546a:	f000 fb3f 	bl	1005aec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
 100546e:	2005      	movs	r0, #5
 1005470:	f000 fb0a 	bl	1005a88 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
 1005474:	480f      	ldr	r0, [pc, #60]	; (10054b4 <clk_init+0x54>)
 1005476:	f001 fb79 	bl	1006b6c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 100547a:	4b0f      	ldr	r3, [pc, #60]	; (10054b8 <clk_init+0x58>)
 100547c:	4298      	cmp	r0, r3
 100547e:	d115      	bne.n	10054ac <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
 1005480:	f009 f97d 	bl	100e77e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 1005484:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 1005486:	490d      	ldr	r1, [pc, #52]	; (10054bc <clk_init+0x5c>)
 1005488:	4630      	mov	r0, r6
 100548a:	f008 fc19 	bl	100dcc0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 100548e:	2800      	cmp	r0, #0
 1005490:	db0b      	blt.n	10054aa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1005492:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
 1005494:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 1005496:	4909      	ldr	r1, [pc, #36]	; (10054bc <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1005498:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
 100549a:	f104 001c 	add.w	r0, r4, #28
 100549e:	f008 fc0f 	bl	100dcc0 <onoff_manager_init>
		if (err < 0) {
 10054a2:	2800      	cmp	r0, #0
 10054a4:	db01      	blt.n	10054aa <clk_init+0x4a>
	}

	return 0;
 10054a6:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 10054a8:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 10054aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 10054ac:	f06f 0004 	mvn.w	r0, #4
 10054b0:	e7fb      	b.n	10054aa <clk_init+0x4a>
 10054b2:	bf00      	nop
 10054b4:	010054f5 	.word	0x010054f5
 10054b8:	0bad0000 	.word	0x0bad0000
 10054bc:	01010350 	.word	0x01010350

010054c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 10054c0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 10054c2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 10054c4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
 10054c6:	434b      	muls	r3, r1
 10054c8:	4808      	ldr	r0, [pc, #32]	; (10054ec <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
 10054ca:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 10054cc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 10054ce:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
 10054d0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 10054d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
 10054d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 10054d8:	f008 ff22 	bl	100e320 <set_on_state>
	if (callback) {
 10054dc:	b12d      	cbz	r5, 10054ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 10054de:	4632      	mov	r2, r6
 10054e0:	462b      	mov	r3, r5
}
 10054e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 10054e6:	4802      	ldr	r0, [pc, #8]	; (10054f0 <clkstarted_handle.constprop.0+0x30>)
 10054e8:	4718      	bx	r3
}
 10054ea:	bd70      	pop	{r4, r5, r6, pc}
 10054ec:	21001c94 	.word	0x21001c94
 10054f0:	01010138 	.word	0x01010138

010054f4 <clock_event_handler>:
	switch (event) {
 10054f4:	b110      	cbz	r0, 10054fc <clock_event_handler+0x8>
 10054f6:	2801      	cmp	r0, #1
 10054f8:	d004      	beq.n	1005504 <clock_event_handler+0x10>
 10054fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 10054fc:	4b03      	ldr	r3, [pc, #12]	; (100550c <clock_event_handler+0x18>)
 10054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1005500:	075b      	lsls	r3, r3, #29
 1005502:	d101      	bne.n	1005508 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 1005504:	f7ff bfdc 	b.w	10054c0 <clkstarted_handle.constprop.0>
}
 1005508:	4770      	bx	lr
 100550a:	bf00      	nop
 100550c:	21001c94 	.word	0x21001c94

01005510 <generic_hfclk_start>:
{
 1005510:	b508      	push	{r3, lr}
	__asm__ volatile(
 1005512:	f04f 0340 	mov.w	r3, #64	; 0x40
 1005516:	f3ef 8111 	mrs	r1, BASEPRI
 100551a:	f383 8811 	msr	BASEPRI, r3
 100551e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 1005522:	4a11      	ldr	r2, [pc, #68]	; (1005568 <generic_hfclk_start+0x58>)
 1005524:	6813      	ldr	r3, [r2, #0]
 1005526:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
 100552a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
 100552e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 1005530:	d00b      	beq.n	100554a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1005532:	4a0e      	ldr	r2, [pc, #56]	; (100556c <generic_hfclk_start+0x5c>)
 1005534:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 1005538:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 100553c:	f013 0301 	ands.w	r3, r3, #1
 1005540:	d003      	beq.n	100554a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
 1005542:	480b      	ldr	r0, [pc, #44]	; (1005570 <generic_hfclk_start+0x60>)
 1005544:	f008 feec 	bl	100e320 <set_on_state>
			already_started = true;
 1005548:	2301      	movs	r3, #1
	__asm__ volatile(
 100554a:	f381 8811 	msr	BASEPRI, r1
 100554e:	f3bf 8f6f 	isb	sy
	if (already_started) {
 1005552:	b123      	cbz	r3, 100555e <generic_hfclk_start+0x4e>
}
 1005554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 1005558:	2000      	movs	r0, #0
 100555a:	f7ff bfb1 	b.w	10054c0 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 100555e:	2001      	movs	r0, #1
}
 1005560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1005564:	f001 baf2 	b.w	1006b4c <nrfx_clock_start>
 1005568:	21001ce4 	.word	0x21001ce4
 100556c:	41005000 	.word	0x41005000
 1005570:	21001cd4 	.word	0x21001cd4

01005574 <api_blocking_start>:
{
 1005574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 1005576:	2200      	movs	r2, #0
 1005578:	2301      	movs	r3, #1
 100557a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 100557e:	466b      	mov	r3, sp
 1005580:	4a08      	ldr	r2, [pc, #32]	; (10055a4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 1005582:	f8cd d000 	str.w	sp, [sp]
 1005586:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 100558a:	f008 ff39 	bl	100e400 <api_start>
	if (err < 0) {
 100558e:	2800      	cmp	r0, #0
 1005590:	db05      	blt.n	100559e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 1005592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 1005596:	2300      	movs	r3, #0
 1005598:	4668      	mov	r0, sp
 100559a:	f007 f847 	bl	100c62c <z_impl_k_sem_take>
}
 100559e:	b005      	add	sp, #20
 10055a0:	f85d fb04 	ldr.w	pc, [sp], #4
 10055a4:	0100e42d 	.word	0x0100e42d

010055a8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 10055a8:	4b07      	ldr	r3, [pc, #28]	; (10055c8 <generic_hfclk_stop+0x20>)
 10055aa:	e8d3 2fef 	ldaex	r2, [r3]
 10055ae:	f022 0102 	bic.w	r1, r2, #2
 10055b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
 10055b6:	2800      	cmp	r0, #0
 10055b8:	d1f7      	bne.n	10055aa <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
 10055ba:	07d3      	lsls	r3, r2, #31
 10055bc:	d402      	bmi.n	10055c4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 10055be:	2001      	movs	r0, #1
 10055c0:	f009 b8d8 	b.w	100e774 <nrfx_clock_stop>
}
 10055c4:	4770      	bx	lr
 10055c6:	bf00      	nop
 10055c8:	21001ce4 	.word	0x21001ce4

010055cc <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
 10055cc:	b2c3      	uxtb	r3, r0
}
 10055ce:	201c      	movs	r0, #28
 10055d0:	4a01      	ldr	r2, [pc, #4]	; (10055d8 <z_nrf_clock_control_get_onoff+0xc>)
 10055d2:	fb03 2000 	mla	r0, r3, r0, r2
 10055d6:	4770      	bx	lr
 10055d8:	21001c94 	.word	0x21001c94

010055dc <z_nrf_clock_control_lf_on>:
{
 10055dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 10055e0:	2201      	movs	r2, #1
 10055e2:	4607      	mov	r7, r0
 10055e4:	4935      	ldr	r1, [pc, #212]	; (10056bc <z_nrf_clock_control_lf_on+0xe0>)
 10055e6:	e8d1 3fef 	ldaex	r3, [r1]
 10055ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
 10055ee:	2800      	cmp	r0, #0
 10055f0:	d1f9      	bne.n	10055e6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
 10055f2:	b933      	cbnz	r3, 1005602 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 10055f4:	4932      	ldr	r1, [pc, #200]	; (10056c0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
 10055f6:	4833      	ldr	r0, [pc, #204]	; (10056c4 <z_nrf_clock_control_lf_on+0xe8>)
 10055f8:	604b      	str	r3, [r1, #4]
 10055fa:	60cb      	str	r3, [r1, #12]
 10055fc:	608a      	str	r2, [r1, #8]
 10055fe:	f008 fb72 	bl	100dce6 <onoff_request>
	switch (start_mode) {
 1005602:	1e7b      	subs	r3, r7, #1
 1005604:	2b01      	cmp	r3, #1
 1005606:	d82d      	bhi.n	1005664 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
 1005608:	2f01      	cmp	r7, #1
 100560a:	d106      	bne.n	100561a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 100560c:	4b2e      	ldr	r3, [pc, #184]	; (10056c8 <z_nrf_clock_control_lf_on+0xec>)
 100560e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
 1005612:	f003 0303 	and.w	r3, r3, #3
 1005616:	2b02      	cmp	r3, #2
 1005618:	d024      	beq.n	1005664 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 100561a:	f00a fa63 	bl	100fae4 <k_is_in_isr>
 100561e:	4604      	mov	r4, r0
 1005620:	b918      	cbnz	r0, 100562a <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 1005622:	4b2a      	ldr	r3, [pc, #168]	; (10056cc <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
 1005624:	781b      	ldrb	r3, [r3, #0]
 1005626:	2b00      	cmp	r3, #0
 1005628:	d141      	bne.n	10056ae <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
 100562a:	f04f 0340 	mov.w	r3, #64	; 0x40
 100562e:	f3ef 8611 	mrs	r6, BASEPRI
 1005632:	f383 8811 	msr	BASEPRI, r3
 1005636:	f3bf 8f6f 	isb	sy
 100563a:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 100563c:	4d22      	ldr	r5, [pc, #136]	; (10056c8 <z_nrf_clock_control_lf_on+0xec>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 100563e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10056d0 <z_nrf_clock_control_lf_on+0xf4>
 1005642:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1005646:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
 100564a:	03d2      	lsls	r2, r2, #15
 100564c:	d50c      	bpl.n	1005668 <z_nrf_clock_control_lf_on+0x8c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 100564e:	f003 0303 	and.w	r3, r3, #3
 1005652:	2b02      	cmp	r3, #2
 1005654:	d001      	beq.n	100565a <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 1005656:	2f01      	cmp	r7, #1
 1005658:	d106      	bne.n	1005668 <z_nrf_clock_control_lf_on+0x8c>
	if (isr_mode) {
 100565a:	b324      	cbz	r4, 10056a6 <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
 100565c:	f386 8811 	msr	BASEPRI, r6
 1005660:	f3bf 8f6f 	isb	sy
}
 1005664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 1005668:	b1c4      	cbz	r4, 100569c <z_nrf_clock_control_lf_on+0xc0>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 100566a:	4630      	mov	r0, r6
 100566c:	f000 fa9c 	bl	1005ba8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
 1005670:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
 1005674:	b2db      	uxtb	r3, r3
 1005676:	2b01      	cmp	r3, #1
 1005678:	d1e3      	bne.n	1005642 <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 100567a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
 100567e:	2a00      	cmp	r2, #0
 1005680:	d0df      	beq.n	1005642 <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1005682:	2200      	movs	r2, #0
 1005684:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 1005688:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
 100568c:	2202      	movs	r2, #2
 100568e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
 1005692:	2220      	movs	r2, #32
 1005694:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1005698:	60ab      	str	r3, [r5, #8]
}
 100569a:	e7d2      	b.n	1005642 <z_nrf_clock_control_lf_on+0x66>
	return z_impl_k_sleep(timeout);
 100569c:	2100      	movs	r1, #0
 100569e:	2021      	movs	r0, #33	; 0x21
 10056a0:	f007 fc44 	bl	100cf2c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 10056a4:	e7e4      	b.n	1005670 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENSET = mask;
 10056a6:	2302      	movs	r3, #2
 10056a8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
 10056ac:	e7da      	b.n	1005664 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
 10056ae:	2202      	movs	r2, #2
 10056b0:	4b05      	ldr	r3, [pc, #20]	; (10056c8 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
 10056b2:	4606      	mov	r6, r0
 10056b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
 10056b8:	e7c0      	b.n	100563c <z_nrf_clock_control_lf_on+0x60>
 10056ba:	bf00      	nop
 10056bc:	21001ce8 	.word	0x21001ce8
 10056c0:	21001c84 	.word	0x21001c84
 10056c4:	21001cb0 	.word	0x21001cb0
 10056c8:	41005000 	.word	0x41005000
 10056cc:	210047d0 	.word	0x210047d0
 10056d0:	e000e100 	.word	0xe000e100

010056d4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
 10056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
 10056d8:	2400      	movs	r4, #0
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
 10056da:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 10056de:	4d16      	ldr	r5, [pc, #88]	; (1005738 <rtc_nrf_isr+0x64>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_rtc_int_enable_check(NRF_RTC_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
 10056e0:	4e16      	ldr	r6, [pc, #88]	; (100573c <rtc_nrf_isr+0x68>)
 10056e2:	4f17      	ldr	r7, [pc, #92]	; (1005740 <rtc_nrf_isr+0x6c>)
 10056e4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
 10056e8:	fa08 f304 	lsl.w	r3, r8, r4
 10056ec:	4213      	tst	r3, r2
 10056ee:	d01c      	beq.n	100572a <rtc_nrf_isr+0x56>
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE bool nrf_rtc_event_check(NRF_RTC_Type const * p_reg, nrf_rtc_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10056f0:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 10056f4:	b1ca      	cbz	r2, 100572a <rtc_nrf_isr+0x56>
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 10056f6:	2200      	movs	r2, #0
 10056f8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
 10056fc:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
 1005700:	f8c6 3348 	str.w	r3, [r6, #840]	; 0x348
    return p_reg->CC[ch];
 1005704:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 1005708:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     return p_reg->COUNTER;
 100570c:	f8d6 0504 	ldr.w	r0, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1005710:	1a43      	subs	r3, r0, r1
 1005712:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			 * which now points to the future. In that case return
			 * current counter value. It is less precise than
			 * returning exact CC value but this one is already lost.
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
				cc_val = now;
 1005716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 100571a:	bf88      	it	hi
 100571c:	4601      	movhi	r1, r0
			}

			handler = cc_data[chan].callback;
 100571e:	682b      	ldr	r3, [r5, #0]
			cc_data[chan].callback = NULL;
 1005720:	602a      	str	r2, [r5, #0]
			if (handler) {
 1005722:	b113      	cbz	r3, 100572a <rtc_nrf_isr+0x56>
				handler(chan, cc_val,
 1005724:	4620      	mov	r0, r4
 1005726:	686a      	ldr	r2, [r5, #4]
 1005728:	4798      	blx	r3
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
 100572a:	3401      	adds	r4, #1
 100572c:	2c03      	cmp	r4, #3
 100572e:	f105 0508 	add.w	r5, r5, #8
 1005732:	d1d7      	bne.n	10056e4 <rtc_nrf_isr+0x10>
					cc_data[chan].user_context);
			}
		}
	}
}
 1005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1005738:	21001cf4 	.word	0x21001cf4
 100573c:	41016000 	.word	0x41016000
 1005740:	41016140 	.word	0x41016140

01005744 <sys_clock_timeout_handler>:
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
 1005744:	4a04      	ldr	r2, [pc, #16]	; (1005758 <sys_clock_timeout_handler+0x14>)
 1005746:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
 1005748:	1ac8      	subs	r0, r1, r3
 100574a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
 100574e:	4403      	add	r3, r0
 1005750:	6013      	str	r3, [r2, #0]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
 1005752:	f007 bd5f 	b.w	100d214 <sys_clock_announce>
 1005756:	bf00      	nop
 1005758:	21001d10 	.word	0x21001d10

0100575c <set_absolute_alarm>:
{
 100575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1005760:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1005764:	f04f 0900 	mov.w	r9, #0
 1005768:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 100576a:	f100 0450 	add.w	r4, r0, #80	; 0x50
 100576e:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
 1005772:	00a4      	lsls	r4, r4, #2
 1005774:	f506 36b0 	add.w	r6, r6, #90112	; 0x16000
 1005778:	b2a4      	uxth	r4, r4
 100577a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    return p_reg->CC[ch];
 100577e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
 1005782:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10057f0 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
 1005786:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 100578a:	f504 34b0 	add.w	r4, r4, #90112	; 0x16000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 100578e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
 1005790:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1005794:	eba3 030a 	sub.w	r3, r3, sl
 1005798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 100579c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
 10057a0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
 10057a2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
 10057a6:	d102      	bne.n	10057ae <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
 10057a8:	2013      	movs	r0, #19
 10057aa:	f00a fb31 	bl	100fe10 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
 10057ae:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
 10057b2:	1aab      	subs	r3, r5, r2
 10057b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
 10057b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 10057bc:	bf88      	it	hi
 10057be:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 10057c0:	f8c4 9000 	str.w	r9, [r4]
 10057c4:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 10057c6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
 10057ca:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
 10057ce:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
 10057d2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
 10057d6:	459a      	cmp	sl, r3
 10057d8:	d006      	beq.n	10057e8 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
 10057da:	1aeb      	subs	r3, r5, r3
 10057dc:	3b02      	subs	r3, #2
 10057de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
 10057e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 10057e6:	d801      	bhi.n	10057ec <set_absolute_alarm+0x90>
}
 10057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
 10057ec:	462b      	mov	r3, r5
 10057ee:	e7cf      	b.n	1005790 <set_absolute_alarm+0x34>
 10057f0:	41016000 	.word	0x41016000

010057f4 <z_nrf_rtc_timer_read>:
 10057f4:	4b01      	ldr	r3, [pc, #4]	; (10057fc <z_nrf_rtc_timer_read+0x8>)
 10057f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
 10057fa:	4770      	bx	lr
 10057fc:	41016000 	.word	0x41016000

01005800 <z_nrf_rtc_timer_compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1005800:	2301      	movs	r3, #1
 1005802:	4083      	lsls	r3, r0
{
 1005804:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1005806:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1005808:	4a0a      	ldr	r2, [pc, #40]	; (1005834 <z_nrf_rtc_timer_compare_int_lock+0x34>)
 100580a:	e8d2 1fef 	ldaex	r1, [r2]
 100580e:	ea01 0c04 	and.w	ip, r1, r4
 1005812:	e8c2 cfee 	stlex	lr, ip, [r2]
 1005816:	f1be 0f00 	cmp.w	lr, #0
 100581a:	d1f6      	bne.n	100580a <z_nrf_rtc_timer_compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 100581c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1005820:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
 1005824:	4a04      	ldr	r2, [pc, #16]	; (1005838 <z_nrf_rtc_timer_compare_int_lock+0x38>)
	return prev & BIT(chan);
 1005826:	420b      	tst	r3, r1
 1005828:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
}
 100582c:	bf14      	ite	ne
 100582e:	2001      	movne	r0, #1
 1005830:	2000      	moveq	r0, #0
 1005832:	bd10      	pop	{r4, pc}
 1005834:	21001d0c 	.word	0x21001d0c
 1005838:	41016000 	.word	0x41016000

0100583c <z_nrf_rtc_timer_compare_int_unlock>:
	if (key) {
 100583c:	b189      	cbz	r1, 1005862 <z_nrf_rtc_timer_compare_int_unlock+0x26>
		atomic_or(&int_mask, BIT(chan));
 100583e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1005840:	4a08      	ldr	r2, [pc, #32]	; (1005864 <z_nrf_rtc_timer_compare_int_unlock+0x28>)
 1005842:	4083      	lsls	r3, r0
 1005844:	e8d2 1fef 	ldaex	r1, [r2]
 1005848:	4319      	orrs	r1, r3
 100584a:	e8c2 1fec 	stlex	ip, r1, [r2]
 100584e:	f1bc 0f00 	cmp.w	ip, #0
 1005852:	d1f7      	bne.n	1005844 <z_nrf_rtc_timer_compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1005854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 1005858:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
 100585c:	4b02      	ldr	r3, [pc, #8]	; (1005868 <z_nrf_rtc_timer_compare_int_unlock+0x2c>)
 100585e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
}
 1005862:	4770      	bx	lr
 1005864:	21001d0c 	.word	0x21001d0c
 1005868:	41016000 	.word	0x41016000

0100586c <z_nrf_rtc_timer_compare_set>:
{
 100586c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1005870:	4604      	mov	r4, r0
 1005872:	4691      	mov	r9, r2
 1005874:	4698      	mov	r8, r3
 1005876:	460f      	mov	r7, r1
	bool key = z_nrf_rtc_timer_compare_int_lock(chan);
 1005878:	f7ff ffc2 	bl	1005800 <z_nrf_rtc_timer_compare_int_lock>
 100587c:	4606      	mov	r6, r0
	cc_data[chan].callback = handler;
 100587e:	4d08      	ldr	r5, [pc, #32]	; (10058a0 <z_nrf_rtc_timer_compare_set+0x34>)
	set_absolute_alarm(chan, cc_value);
 1005880:	4639      	mov	r1, r7
	cc_data[chan].callback = handler;
 1005882:	f845 9034 	str.w	r9, [r5, r4, lsl #3]
	cc_data[chan].user_context = user_data;
 1005886:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
	set_absolute_alarm(chan, cc_value);
 100588a:	4620      	mov	r0, r4
	cc_data[chan].user_context = user_data;
 100588c:	f8c5 8004 	str.w	r8, [r5, #4]
	set_absolute_alarm(chan, cc_value);
 1005890:	f7ff ff64 	bl	100575c <set_absolute_alarm>
	z_nrf_rtc_timer_compare_int_unlock(chan, key);
 1005894:	4631      	mov	r1, r6
 1005896:	4620      	mov	r0, r4
}
 1005898:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	z_nrf_rtc_timer_compare_int_unlock(chan, key);
 100589c:	f7ff bfce 	b.w	100583c <z_nrf_rtc_timer_compare_int_unlock>
 10058a0:	21001cf4 	.word	0x21001cf4

010058a4 <z_nrf_rtc_timer_chan_alloc>:

int32_t z_nrf_rtc_timer_chan_alloc(void)
{
 10058a4:	b510      	push	{r4, lr}
	do {
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
		if (chan < 0) {
			return -ENOMEM;
		}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
 10058a6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
 10058a8:	4b0c      	ldr	r3, [pc, #48]	; (10058dc <z_nrf_rtc_timer_chan_alloc+0x38>)
 10058aa:	6818      	ldr	r0, [r3, #0]
 10058ac:	b198      	cbz	r0, 10058d6 <z_nrf_rtc_timer_chan_alloc+0x32>
 10058ae:	fab0 f080 	clz	r0, r0
 10058b2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
 10058b6:	fa04 f100 	lsl.w	r1, r4, r0
 10058ba:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 10058bc:	e8d3 2fef 	ldaex	r2, [r3]
 10058c0:	ea02 0c01 	and.w	ip, r2, r1
 10058c4:	e8c3 cfee 	stlex	lr, ip, [r3]
 10058c8:	f1be 0f00 	cmp.w	lr, #0
 10058cc:	d1f6      	bne.n	10058bc <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
 10058ce:	40c2      	lsrs	r2, r0
 10058d0:	07d2      	lsls	r2, r2, #31
 10058d2:	d5ea      	bpl.n	10058aa <z_nrf_rtc_timer_chan_alloc+0x6>

	return chan;
}
 10058d4:	bd10      	pop	{r4, pc}
			return -ENOMEM;
 10058d6:	f06f 000b 	mvn.w	r0, #11
 10058da:	e7fb      	b.n	10058d4 <z_nrf_rtc_timer_chan_alloc+0x30>
 10058dc:	21001cf0 	.word	0x21001cf0

010058e0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
 10058e0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
 10058e2:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
 10058e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
 10058e8:	4c13      	ldr	r4, [pc, #76]	; (1005938 <sys_clock_driver_init+0x58>)
 10058ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 10058ee:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
 10058f2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 10058f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 10058fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 10058fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 1005902:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 1005906:	4b0d      	ldr	r3, [pc, #52]	; (100593c <sys_clock_driver_init+0x5c>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 1005908:	2101      	movs	r1, #1
 100590a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 100590e:	2016      	movs	r0, #22
 1005910:	462a      	mov	r2, r5
 1005912:	f000 f8eb 	bl	1005aec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 1005916:	2016      	movs	r0, #22
 1005918:	f000 f8b6 	bl	1005a88 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 100591c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 100591e:	2207      	movs	r2, #7
 1005920:	60a3      	str	r3, [r4, #8]
 1005922:	6023      	str	r3, [r4, #0]
 1005924:	4b06      	ldr	r3, [pc, #24]	; (1005940 <sys_clock_driver_init+0x60>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
 1005926:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
 1005928:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
 100592a:	2206      	movs	r2, #6
 100592c:	4b05      	ldr	r3, [pc, #20]	; (1005944 <sys_clock_driver_init+0x64>)
 100592e:	601a      	str	r2, [r3, #0]
	z_nrf_clock_control_lf_on(mode);
 1005930:	f7ff fe54 	bl	10055dc <z_nrf_clock_control_lf_on>

	return 0;
}
 1005934:	4628      	mov	r0, r5
 1005936:	bd38      	pop	{r3, r4, r5, pc}
 1005938:	41016000 	.word	0x41016000
 100593c:	e000e100 	.word	0xe000e100
 1005940:	21001d0c 	.word	0x21001d0c
 1005944:	21001cf0 	.word	0x21001cf0

01005948 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1005948:	4a13      	ldr	r2, [pc, #76]	; (1005998 <sys_clock_set_timeout+0x50>)
 100594a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 100594e:	bf14      	ite	ne
 1005950:	4603      	movne	r3, r0
 1005952:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1005954:	3b01      	subs	r3, #1
 1005956:	2b00      	cmp	r3, #0
 1005958:	dd1c      	ble.n	1005994 <sys_clock_set_timeout+0x4c>
 100595a:	4293      	cmp	r3, r2
 100595c:	bfa8      	it	ge
 100595e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
 1005960:	4a0e      	ldr	r2, [pc, #56]	; (100599c <sys_clock_set_timeout+0x54>)
 1005962:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
 1005966:	4a0e      	ldr	r2, [pc, #56]	; (10059a0 <sys_clock_set_timeout+0x58>)
 1005968:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
 100596a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
 100596c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 1005970:	bf18      	it	ne
 1005972:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
 1005974:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
 1005978:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
 100597a:	480a      	ldr	r0, [pc, #40]	; (10059a4 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
 100597c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
 100597e:	4a0a      	ldr	r2, [pc, #40]	; (10059a8 <sys_clock_set_timeout+0x60>)
 1005980:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
 1005982:	2000      	movs	r0, #0
 1005984:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
 1005986:	4a04      	ldr	r2, [pc, #16]	; (1005998 <sys_clock_set_timeout+0x50>)
 1005988:	4293      	cmp	r3, r2
 100598a:	bf94      	ite	ls
 100598c:	18c9      	addls	r1, r1, r3
 100598e:	1889      	addhi	r1, r1, r2
 1005990:	f7ff bee4 	b.w	100575c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1005994:	2300      	movs	r3, #0
 1005996:	e7e3      	b.n	1005960 <sys_clock_set_timeout+0x18>
 1005998:	007fffff 	.word	0x007fffff
 100599c:	41016000 	.word	0x41016000
 10059a0:	21001d10 	.word	0x21001d10
 10059a4:	01005745 	.word	0x01005745
 10059a8:	21001cf4 	.word	0x21001cf4

010059ac <sys_clock_elapsed>:
 10059ac:	4b04      	ldr	r3, [pc, #16]	; (10059c0 <sys_clock_elapsed+0x14>)
 10059ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
 10059b2:	4b04      	ldr	r3, [pc, #16]	; (10059c4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
 10059b4:	681b      	ldr	r3, [r3, #0]
 10059b6:	1ac0      	subs	r0, r0, r3
}
 10059b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 10059bc:	4770      	bx	lr
 10059be:	bf00      	nop
 10059c0:	41016000 	.word	0x41016000
 10059c4:	21001d10 	.word	0x21001d10

010059c8 <z_isr_install>:
#endif /* CONFIG_MULTI_LEVEL_INTERRUPTS */

	/* If dynamic IRQs are enabled, then the _sw_isr_table is in RAM and
	 * can be modified
	 */
	_sw_isr_table[table_idx].arg = param;
 10059c8:	4b03      	ldr	r3, [pc, #12]	; (10059d8 <z_isr_install+0x10>)
 10059ca:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	_sw_isr_table[table_idx].isr = routine;
 10059ce:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 10059d2:	6059      	str	r1, [r3, #4]
}
 10059d4:	4770      	bx	lr
 10059d6:	bf00      	nop
 10059d8:	21000110 	.word	0x21000110

010059dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 10059dc:	4a09      	ldr	r2, [pc, #36]	; (1005a04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 10059de:	490a      	ldr	r1, [pc, #40]	; (1005a08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 10059e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 10059e2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 10059e4:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 10059e6:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 10059e8:	4908      	ldr	r1, [pc, #32]	; (1005a0c <arch_swap+0x30>)
 10059ea:	684b      	ldr	r3, [r1, #4]
 10059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 10059f0:	604b      	str	r3, [r1, #4]
 10059f2:	2300      	movs	r3, #0
 10059f4:	f383 8811 	msr	BASEPRI, r3
 10059f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 10059fc:	6893      	ldr	r3, [r2, #8]
}
 10059fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 1005a00:	4770      	bx	lr
 1005a02:	bf00      	nop
 1005a04:	21003d78 	.word	0x21003d78
 1005a08:	01010528 	.word	0x01010528
 1005a0c:	e000ed00 	.word	0xe000ed00

01005a10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 1005a10:	4913      	ldr	r1, [pc, #76]	; (1005a60 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 1005a12:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 1005a14:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 1005a18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 1005a1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 1005a1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1005a22:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
 1005a24:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 1005a28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 1005a2c:	4f0d      	ldr	r7, [pc, #52]	; (1005a64 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 1005a2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 1005a32:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 1005a34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 1005a36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 1005a38:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 1005a3a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 1005a3c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 1005a3e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 1005a42:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 1005a46:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 1005a4a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
 1005a4e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
 1005a52:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
 1005a54:	f008 fd00 	bl	100e458 <configure_builtin_stack_guard>
    pop {r2, lr}
 1005a58:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 1005a5c:	4770      	bx	lr
 1005a5e:	0000      	.short	0x0000
    ldr r1, =_kernel
 1005a60:	21003d78 	.word	0x21003d78
    ldr v4, =_SCS_ICSR
 1005a64:	e000ed04 	.word	0xe000ed04

01005a68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 1005a68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 1005a6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 1005a6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 1005a72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 1005a76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 1005a78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 1005a7c:	2902      	cmp	r1, #2
    beq _oops
 1005a7e:	d0ff      	beq.n	1005a80 <_oops>

01005a80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 1005a80:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 1005a82:	f008 fcef 	bl	100e464 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 1005a86:	bd01      	pop	{r0, pc}

01005a88 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 1005a88:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 1005a8a:	2b00      	cmp	r3, #0
 1005a8c:	db08      	blt.n	1005aa0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1005a8e:	2201      	movs	r2, #1
 1005a90:	f000 001f 	and.w	r0, r0, #31
 1005a94:	fa02 f000 	lsl.w	r0, r2, r0
 1005a98:	4a02      	ldr	r2, [pc, #8]	; (1005aa4 <arch_irq_enable+0x1c>)
 1005a9a:	095b      	lsrs	r3, r3, #5
 1005a9c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 1005aa0:	4770      	bx	lr
 1005aa2:	bf00      	nop
 1005aa4:	e000e100 	.word	0xe000e100

01005aa8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 1005aa8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 1005aaa:	2b00      	cmp	r3, #0
 1005aac:	db0d      	blt.n	1005aca <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1005aae:	2201      	movs	r2, #1
 1005ab0:	f000 001f 	and.w	r0, r0, #31
 1005ab4:	fa02 f000 	lsl.w	r0, r2, r0
 1005ab8:	095b      	lsrs	r3, r3, #5
 1005aba:	4a04      	ldr	r2, [pc, #16]	; (1005acc <arch_irq_disable+0x24>)
 1005abc:	3320      	adds	r3, #32
 1005abe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 1005ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1005ac6:	f3bf 8f6f 	isb	sy
}
 1005aca:	4770      	bx	lr
 1005acc:	e000e100 	.word	0xe000e100

01005ad0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 1005ad0:	4b05      	ldr	r3, [pc, #20]	; (1005ae8 <arch_irq_is_enabled+0x18>)
 1005ad2:	0942      	lsrs	r2, r0, #5
 1005ad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1005ad8:	2301      	movs	r3, #1
 1005ada:	f000 001f 	and.w	r0, r0, #31
 1005ade:	fa03 f000 	lsl.w	r0, r3, r0
}
 1005ae2:	4010      	ands	r0, r2
 1005ae4:	4770      	bx	lr
 1005ae6:	bf00      	nop
 1005ae8:	e000e100 	.word	0xe000e100

01005aec <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
 1005aec:	07d3      	lsls	r3, r2, #31
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
 1005aee:	bf48      	it	mi
 1005af0:	2300      	movmi	r3, #0
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 1005af2:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
 1005af4:	bf58      	it	pl
 1005af6:	1c8b      	addpl	r3, r1, #2
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 1005af8:	2a00      	cmp	r2, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005afa:	bfac      	ite	ge
 1005afc:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005b00:	4a06      	ldrlt	r2, [pc, #24]	; (1005b1c <z_arm_irq_priority_set+0x30>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005b02:	ea4f 1343 	mov.w	r3, r3, lsl #5
 1005b06:	b2db      	uxtb	r3, r3
 1005b08:	bfab      	itete	ge
 1005b0a:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005b0e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005b12:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005b16:	5413      	strblt	r3, [r2, r0]
}
 1005b18:	4770      	bx	lr
 1005b1a:	bf00      	nop
 1005b1c:	e000ed14 	.word	0xe000ed14

01005b20 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 1005b20:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 1005b24:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 1005b26:	490b      	ldr	r1, [pc, #44]	; (1005b54 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 1005b28:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 1005b2c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 1005b2e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 1005b32:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 1005b36:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 1005b38:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 1005b3c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 1005b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 1005b44:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 1005b48:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 1005b4a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 1005b4c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 1005b4e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 1005b50:	4770      	bx	lr
 1005b52:	bf00      	nop
 1005b54:	0100ddfb 	.word	0x0100ddfb

01005b58 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 1005b58:	4b08      	ldr	r3, [pc, #32]	; (1005b7c <arch_switch_to_main_thread+0x24>)
 1005b5a:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 1005b5c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 1005b5e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 1005b62:	4610      	mov	r0, r2
 1005b64:	f381 8809 	msr	PSP, r1
 1005b68:	2100      	movs	r1, #0
 1005b6a:	b663      	cpsie	if
 1005b6c:	f381 8811 	msr	BASEPRI, r1
 1005b70:	f3bf 8f6f 	isb	sy
 1005b74:	2200      	movs	r2, #0
 1005b76:	2300      	movs	r3, #0
 1005b78:	f008 f93f 	bl	100ddfa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 1005b7c:	21003d78 	.word	0x21003d78

01005b80 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 1005b80:	4901      	ldr	r1, [pc, #4]	; (1005b88 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 1005b82:	2210      	movs	r2, #16
	str	r2, [r1]
 1005b84:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 1005b86:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 1005b88:	e000ed10 	.word	0xe000ed10

01005b8c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 1005b8c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 1005b8e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 1005b90:	f380 8811 	msr	BASEPRI, r0
	isb
 1005b94:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 1005b98:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 1005b9c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 1005b9e:	b662      	cpsie	i
	isb
 1005ba0:	f3bf 8f6f 	isb	sy

	bx	lr
 1005ba4:	4770      	bx	lr
 1005ba6:	bf00      	nop

01005ba8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 1005ba8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 1005baa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 1005bac:	f381 8811 	msr	BASEPRI, r1

	wfe
 1005bb0:	bf20      	wfe

	msr	BASEPRI, r0
 1005bb2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 1005bb6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 1005bb8:	4770      	bx	lr
 1005bba:	bf00      	nop

01005bbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 1005bbc:	bf30      	wfi
    b z_SysNmiOnReset
 1005bbe:	f7ff bffd 	b.w	1005bbc <z_SysNmiOnReset>
 1005bc2:	bf00      	nop

01005bc4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 1005bc4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 1005bc6:	4b08      	ldr	r3, [pc, #32]	; (1005be8 <z_arm_prep_c+0x24>)
 1005bc8:	4a08      	ldr	r2, [pc, #32]	; (1005bec <z_arm_prep_c+0x28>)
 1005bca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 1005bce:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 1005bd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1005bd4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 1005bd8:	f006 faea 	bl	100c1b0 <z_bss_zero>
	z_data_copy();
 1005bdc:	f007 fa3a 	bl	100d054 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 1005be0:	f000 f984 	bl	1005eec <z_arm_interrupt_init>
	z_cstart();
 1005be4:	f006 fb08 	bl	100c1f8 <z_cstart>
 1005be8:	01000000 	.word	0x01000000
 1005bec:	e000ed00 	.word	0xe000ed00

01005bf0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 1005bf0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 1005bf2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 1005bf6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 1005bfa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 1005bfe:	4904      	ldr	r1, [pc, #16]	; (1005c10 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 1005c00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 1005c02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 1005c04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 1005c06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 1005c0a:	4902      	ldr	r1, [pc, #8]	; (1005c14 <_isr_wrapper+0x24>)
	bx r1
 1005c0c:	4708      	bx	r1
 1005c0e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1005c10:	21000110 	.word	0x21000110
	ldr r1, =z_arm_int_exit
 1005c14:	01005e41 	.word	0x01005e41

01005c18 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 1005c18:	2000      	movs	r0, #0
    msr CONTROL, r0
 1005c1a:	f380 8814 	msr	CONTROL, r0
    isb
 1005c1e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 1005c22:	2000      	movs	r0, #0
    msr MSPLIM, r0
 1005c24:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 1005c28:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
 1005c2c:	f00a fa32 	bl	1010094 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 1005c30:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 1005c32:	490e      	ldr	r1, [pc, #56]	; (1005c6c <__start+0x54>)
    str r0, [r1]
 1005c34:	6008      	str	r0, [r1, #0]
    dsb
 1005c36:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1005c3a:	480d      	ldr	r0, [pc, #52]	; (1005c70 <__start+0x58>)
    msr msp, r0
 1005c3c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 1005c40:	f000 f930 	bl	1005ea4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1005c44:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
 1005c46:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 1005c4a:	480a      	ldr	r0, [pc, #40]	; (1005c74 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 1005c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 1005c50:	1840      	adds	r0, r0, r1
    msr PSP, r0
 1005c52:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 1005c56:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 1005c5a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 1005c5c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 1005c5e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 1005c62:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 1005c66:	f7ff ffad 	bl	1005bc4 <z_arm_prep_c>
 1005c6a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 1005c6c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1005c70:	21005be8 	.word	0x21005be8
    ldr r0, =z_interrupt_stacks
 1005c74:	21005ce8 	.word	0x21005ce8

01005c78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1005c78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 1005c7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1005c80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1005c82:	4672      	mov	r2, lr
	bl z_arm_fault
 1005c84:	f000 f852 	bl	1005d2c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1005c88:	bd01      	pop	{r0, pc}
 1005c8a:	bf00      	nop

01005c8c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1005c8c:	4b09      	ldr	r3, [pc, #36]	; (1005cb4 <usage_fault.constprop.0+0x28>)
 1005c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 1005c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 1005c92:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 1005c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 1005c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 1005c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 1005c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1005c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
 1005c9e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1005ca2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 1005ca6:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
 1005caa:	bf18      	it	ne
 1005cac:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1005cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 1005cb0:	4770      	bx	lr
 1005cb2:	bf00      	nop
 1005cb4:	e000ed00 	.word	0xe000ed00

01005cb8 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1005cb8:	4b0c      	ldr	r3, [pc, #48]	; (1005cec <bus_fault.constprop.0+0x34>)
 1005cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 1005cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 1005cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005cc0:	0592      	lsls	r2, r2, #22
 1005cc2:	d508      	bpl.n	1005cd6 <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
 1005cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 1005cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005cc8:	0412      	lsls	r2, r2, #16
 1005cca:	d504      	bpl.n	1005cd6 <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 1005ccc:	b118      	cbz	r0, 1005cd6 <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 1005cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 1005cd4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1005cd6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 1005cd8:	4b04      	ldr	r3, [pc, #16]	; (1005cec <bus_fault.constprop.0+0x34>)
 1005cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 1005cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 1005cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005ce0:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 1005ce4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1005ce6:	7008      	strb	r0, [r1, #0]
}
 1005ce8:	4770      	bx	lr
 1005cea:	bf00      	nop
 1005cec:	e000ed00 	.word	0xe000ed00

01005cf0 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 1005cf0:	4b0d      	ldr	r3, [pc, #52]	; (1005d28 <mem_manage_fault.constprop.0+0x38>)
 1005cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 1005cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 1005cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005cf8:	0792      	lsls	r2, r2, #30
 1005cfa:	d508      	bpl.n	1005d0e <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
 1005cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 1005cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005d00:	0612      	lsls	r2, r2, #24
 1005d02:	d504      	bpl.n	1005d0e <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 1005d04:	b118      	cbz	r0, 1005d0e <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 1005d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 1005d0c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1005d0e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 1005d10:	4b05      	ldr	r3, [pc, #20]	; (1005d28 <mem_manage_fault.constprop.0+0x38>)
 1005d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 1005d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005d16:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 1005d18:	bf58      	it	pl
 1005d1a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 1005d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005d1e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 1005d22:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1005d24:	7008      	strb	r0, [r1, #0]
}
 1005d26:	4770      	bx	lr
 1005d28:	e000ed00 	.word	0xe000ed00

01005d2c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1005d2c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1005d2e:	4b3d      	ldr	r3, [pc, #244]	; (1005e24 <z_arm_fault+0xf8>)
{
 1005d30:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1005d32:	685b      	ldr	r3, [r3, #4]
 1005d34:	2500      	movs	r5, #0
{
 1005d36:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1005d3c:	f385 8811 	msr	BASEPRI, r5
 1005d40:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 1005d44:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 1005d48:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 1005d4c:	d114      	bne.n	1005d78 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 1005d4e:	f002 010c 	and.w	r1, r2, #12
 1005d52:	2908      	cmp	r1, #8
 1005d54:	d010      	beq.n	1005d78 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 1005d56:	0711      	lsls	r1, r2, #28
 1005d58:	d401      	bmi.n	1005d5e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 1005d5a:	4606      	mov	r6, r0
			*nested_exc = true;
 1005d5c:	2501      	movs	r5, #1
	*recoverable = false;
 1005d5e:	2200      	movs	r2, #0
	switch (fault) {
 1005d60:	3b03      	subs	r3, #3
	*recoverable = false;
 1005d62:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 1005d66:	2b09      	cmp	r3, #9
 1005d68:	d854      	bhi.n	1005e14 <z_arm_fault+0xe8>
 1005d6a:	e8df f003 	tbb	[pc, r3]
 1005d6e:	4007      	.short	0x4007
 1005d70:	53533d44 	.word	0x53533d44
 1005d74:	48535353 	.word	0x48535353
		return NULL;
 1005d78:	462e      	mov	r6, r5
 1005d7a:	e7f0      	b.n	1005d5e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 1005d7c:	4b29      	ldr	r3, [pc, #164]	; (1005e24 <z_arm_fault+0xf8>)
 1005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1005d80:	0792      	lsls	r2, r2, #30
 1005d82:	d447      	bmi.n	1005e14 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 1005d84:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 1005d86:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 1005d8a:	d008      	beq.n	1005d9e <z_arm_fault+0x72>
		if (SCB_MMFSR != 0) {
 1005d8c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 1005d90:	b1ea      	cbz	r2, 1005dce <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
 1005d92:	2001      	movs	r0, #1
 1005d94:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 1005d98:	f7ff ffaa 	bl	1005cf0 <mem_manage_fault.constprop.0>
 1005d9c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 1005d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 1005da2:	b993      	cbnz	r3, 1005dca <z_arm_fault+0x9e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 1005da4:	2220      	movs	r2, #32
 1005da6:	4631      	mov	r1, r6
 1005da8:	a802      	add	r0, sp, #8
 1005daa:	f008 fbf4 	bl	100e596 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 1005dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1005db0:	b395      	cbz	r5, 1005e18 <z_arm_fault+0xec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 1005db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1005db6:	b922      	cbnz	r2, 1005dc2 <z_arm_fault+0x96>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1005db8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1005dbc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1005dc0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 1005dc2:	4620      	mov	r0, r4
 1005dc4:	a902      	add	r1, sp, #8
 1005dc6:	f008 fb4b 	bl	100e460 <z_arm_fatal_error>
}
 1005dca:	b00a      	add	sp, #40	; 0x28
 1005dcc:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 1005dce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 1005dd2:	b12a      	cbz	r2, 1005de0 <z_arm_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
 1005dd4:	2001      	movs	r0, #1
 1005dd6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 1005dda:	f7ff ff6d 	bl	1005cb8 <bus_fault.constprop.0>
 1005dde:	e7dd      	b.n	1005d9c <z_arm_fault+0x70>
		} else if (SCB_UFSR != 0) {
 1005de0:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 1005de2:	b284      	uxth	r4, r0
 1005de4:	2c00      	cmp	r4, #0
 1005de6:	d0da      	beq.n	1005d9e <z_arm_fault+0x72>
		reason = usage_fault(esf);
 1005de8:	f7ff ff50 	bl	1005c8c <usage_fault.constprop.0>
 1005dec:	e7d6      	b.n	1005d9c <z_arm_fault+0x70>
		reason = mem_manage_fault(esf, 0, recoverable);
 1005dee:	2000      	movs	r0, #0
 1005df0:	f10d 0107 	add.w	r1, sp, #7
 1005df4:	e7d0      	b.n	1005d98 <z_arm_fault+0x6c>
		reason = bus_fault(esf, 0, recoverable);
 1005df6:	2000      	movs	r0, #0
 1005df8:	f10d 0107 	add.w	r1, sp, #7
 1005dfc:	e7ed      	b.n	1005dda <z_arm_fault+0xae>
	if (!z_arm_debug_monitor_event_error_check()) {
 1005dfe:	f000 f8b9 	bl	1005f74 <z_arm_debug_monitor_event_error_check>
 1005e02:	4604      	mov	r4, r0
 1005e04:	2000      	movs	r0, #0
 1005e06:	b91c      	cbnz	r4, 1005e10 <z_arm_fault+0xe4>
		*recoverable = true;
 1005e08:	2301      	movs	r3, #1
 1005e0a:	f88d 3007 	strb.w	r3, [sp, #7]
 1005e0e:	e7c6      	b.n	1005d9e <z_arm_fault+0x72>
		*recoverable = memory_fault_recoverable(esf, false);
 1005e10:	f88d 0007 	strb.w	r0, [sp, #7]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 1005e14:	2400      	movs	r4, #0
 1005e16:	e7c2      	b.n	1005d9e <z_arm_fault+0x72>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1005e18:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1005e1c:	f023 0301 	bic.w	r3, r3, #1
 1005e20:	e7ce      	b.n	1005dc0 <z_arm_fault+0x94>
 1005e22:	bf00      	nop
 1005e24:	e000ed00 	.word	0xe000ed00

01005e28 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1005e28:	4b04      	ldr	r3, [pc, #16]	; (1005e3c <z_arm_fault_init+0x14>)
 1005e2a:	695a      	ldr	r2, [r3, #20]
 1005e2c:	f042 0210 	orr.w	r2, r2, #16
 1005e30:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 1005e32:	695a      	ldr	r2, [r3, #20]
 1005e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1005e38:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 1005e3a:	4770      	bx	lr
 1005e3c:	e000ed00 	.word	0xe000ed00

01005e40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 1005e40:	4b04      	ldr	r3, [pc, #16]	; (1005e54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 1005e42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 1005e44:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 1005e46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 1005e48:	d003      	beq.n	1005e52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 1005e4a:	4903      	ldr	r1, [pc, #12]	; (1005e58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 1005e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 1005e50:	600a      	str	r2, [r1, #0]

01005e52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 1005e52:	4770      	bx	lr
	ldr r3, =_kernel
 1005e54:	21003d78 	.word	0x21003d78
	ldr r1, =_SCS_ICSR
 1005e58:	e000ed04 	.word	0xe000ed04

01005e5c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1005e5c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1005e60:	4905      	ldr	r1, [pc, #20]	; (1005e78 <sys_arch_reboot+0x1c>)
 1005e62:	4b06      	ldr	r3, [pc, #24]	; (1005e7c <sys_arch_reboot+0x20>)
 1005e64:	68ca      	ldr	r2, [r1, #12]
 1005e66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1005e6a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1005e6c:	60cb      	str	r3, [r1, #12]
 1005e6e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 1005e72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 1005e74:	e7fd      	b.n	1005e72 <sys_arch_reboot+0x16>
 1005e76:	bf00      	nop
 1005e78:	e000ed00 	.word	0xe000ed00
 1005e7c:	05fa0004 	.word	0x05fa0004

01005e80 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1005e80:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 1005e82:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 1005e84:	4906      	ldr	r1, [pc, #24]	; (1005ea0 <z_arm_clear_arm_mpu_config+0x20>)
 1005e86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1005e8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1005e8e:	4293      	cmp	r3, r2
 1005e90:	d100      	bne.n	1005e94 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 1005e92:	4770      	bx	lr
  mpu->RNR = rnr;
 1005e94:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1005e98:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1005e9c:	3301      	adds	r3, #1
 1005e9e:	e7f6      	b.n	1005e8e <z_arm_clear_arm_mpu_config+0xe>
 1005ea0:	e000ed00 	.word	0xe000ed00

01005ea4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
 1005ea4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 1005ea6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1005ea8:	2400      	movs	r4, #0
 1005eaa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1005eae:	f7ff ffe7 	bl	1005e80 <z_arm_clear_arm_mpu_config>
 1005eb2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 1005eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1005eb8:	4a0b      	ldr	r2, [pc, #44]	; (1005ee8 <z_arm_init_arch_hw_at_boot+0x44>)
 1005eba:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1005ebe:	3301      	adds	r3, #1
 1005ec0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 1005ec2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1005ec6:	d1f8      	bne.n	1005eba <z_arm_init_arch_hw_at_boot+0x16>
 1005ec8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1005eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1005ece:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1005ed2:	3301      	adds	r3, #1
 1005ed4:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1005ed6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1005eda:	d1f8      	bne.n	1005ece <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 1005edc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1005ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1005ee2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 1005ee6:	bd10      	pop	{r4, pc}
 1005ee8:	e000e100 	.word	0xe000e100

01005eec <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 1005eec:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005eee:	2140      	movs	r1, #64	; 0x40
 1005ef0:	4803      	ldr	r0, [pc, #12]	; (1005f00 <z_arm_interrupt_init+0x14>)
 1005ef2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1005ef4:	3301      	adds	r3, #1
 1005ef6:	2b1e      	cmp	r3, #30
 1005ef8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 1005efc:	d1f9      	bne.n	1005ef2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 1005efe:	4770      	bx	lr
 1005f00:	e000e100 	.word	0xe000e100

01005f04 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 1005f04:	4b06      	ldr	r3, [pc, #24]	; (1005f20 <z_impl_k_thread_abort+0x1c>)
 1005f06:	689b      	ldr	r3, [r3, #8]
 1005f08:	4283      	cmp	r3, r0
 1005f0a:	d107      	bne.n	1005f1c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1005f0c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 1005f10:	b123      	cbz	r3, 1005f1c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1005f12:	4a04      	ldr	r2, [pc, #16]	; (1005f24 <z_impl_k_thread_abort+0x20>)
 1005f14:	6853      	ldr	r3, [r2, #4]
 1005f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 1005f1a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 1005f1c:	f007 b836 	b.w	100cf8c <z_thread_abort>
 1005f20:	21003d78 	.word	0x21003d78
 1005f24:	e000ed00 	.word	0xe000ed00

01005f28 <z_arm_debug_enable_null_pointer_detection>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1005f28:	2000      	movs	r0, #0
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 1005f2a:	4b11      	ldr	r3, [pc, #68]	; (1005f70 <z_arm_debug_enable_null_pointer_detection+0x48>)
 1005f2c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 1005f30:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 1005f34:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 1005f38:	f883 0020 	strb.w	r0, [r3, #32]

	/* Set the DebugMonitor handler priority to the higyhest value. */
	NVIC_SetPriority(DebugMonitor_IRQn, _EXC_FAULT_PRIO);

	/* Enable debug monitor exception triggered on debug events */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk;
 1005f3c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 1005f40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 1005f44:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	 */

#if defined(CONFIG_ARMV8_M_MAINLINE)

	/* ASSERT that we have the comparators needed for the implementation */
	if (((DWT->CTRL & DWT_CTRL_NUMCOMP_Msk) >> DWT_CTRL_NUMCOMP_Pos) < 2) {
 1005f48:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 1005f4c:	681a      	ldr	r2, [r3, #0]
 1005f4e:	0f12      	lsrs	r2, r2, #28
 1005f50:	f012 0f0e 	tst.w	r2, #14
		return -EINVAL;
	}

	/* Use comparators 0, 1, R/W access check */
	DWT->COMP0 = 0;
	DWT->COMP1 = CONFIG_CORTEX_M_NULL_POINTER_EXCEPTION_PAGE_SIZE - 1;
 1005f54:	bf1f      	itttt	ne
 1005f56:	f240 32ff 	movwne	r2, #1023	; 0x3ff
	DWT->COMP0 = 0;
 1005f5a:	6218      	strne	r0, [r3, #32]
	DWT->COMP1 = CONFIG_CORTEX_M_NULL_POINTER_EXCEPTION_PAGE_SIZE - 1;
 1005f5c:	631a      	strne	r2, [r3, #48]	; 0x30

	DWT->FUNCTION0 =
 1005f5e:	2214      	movne	r2, #20
 1005f60:	bf1b      	ittet	ne
 1005f62:	629a      	strne	r2, [r3, #40]	; 0x28
		|
		((0x1 << DWT_FUNCTION_ACTION_Pos) & DWT_FUNCTION_ACTION_Msk)
		|
		((0x0 << DWT_FUNCTION_DATAVSIZE_Pos) & DWT_FUNCTION_DATAVSIZE_Msk)
		;
	DWT->FUNCTION1 =
 1005f64:	2217      	movne	r2, #23
		return -EINVAL;
 1005f66:	f06f 0015 	mvneq.w	r0, #21
	DWT->FUNCTION1 =
 1005f6a:	639a      	strne	r2, [r3, #56]	; 0x38
	DWT->MASK0 = 32 - __builtin_clzl(
		CONFIG_CORTEX_M_NULL_POINTER_EXCEPTION_PAGE_SIZE - 1);
#endif

	return 0;
}
 1005f6c:	4770      	bx	lr
 1005f6e:	bf00      	nop
 1005f70:	e000ed00 	.word	0xe000ed00

01005f74 <z_arm_debug_monitor_event_error_check>:
{
 1005f74:	b508      	push	{r3, lr}
	if (SCB->DFSR & SCB_DFSR_DWTTRAP_Msk) {
 1005f76:	4b09      	ldr	r3, [pc, #36]	; (1005f9c <z_arm_debug_monitor_event_error_check+0x28>)
 1005f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1005f7a:	0752      	lsls	r2, r2, #29
 1005f7c:	d509      	bpl.n	1005f92 <z_arm_debug_monitor_event_error_check+0x1e>
		if (DWT->FUNCTION0 & DWT_FUNCTION_MATCHED_Msk) {
 1005f7e:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 1005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1005f84:	01db      	lsls	r3, r3, #7
 1005f86:	d502      	bpl.n	1005f8e <z_arm_debug_monitor_event_error_check+0x1a>
			printk("Null-pointer exception?\n");
 1005f88:	4805      	ldr	r0, [pc, #20]	; (1005fa0 <z_arm_debug_monitor_event_error_check+0x2c>)
 1005f8a:	f007 fe23 	bl	100dbd4 <printk>
		return true;
 1005f8e:	2001      	movs	r0, #1
 1005f90:	e002      	b.n	1005f98 <z_arm_debug_monitor_event_error_check+0x24>
	if (SCB->DFSR & SCB_DFSR_BKPT_Msk) {
 1005f92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 1005f94:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 1005f98:	bd08      	pop	{r3, pc}
 1005f9a:	bf00      	nop
 1005f9c:	e000ed00 	.word	0xe000ed00
 1005fa0:	0101056b 	.word	0x0101056b

01005fa4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 1005fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 1005fa6:	4c09      	ldr	r4, [pc, #36]	; (1005fcc <z_arm_configure_static_mpu_regions+0x28>)
 1005fa8:	4a09      	ldr	r2, [pc, #36]	; (1005fd0 <z_arm_configure_static_mpu_regions+0x2c>)
 1005faa:	4623      	mov	r3, r4
 1005fac:	2101      	movs	r1, #1
 1005fae:	4809      	ldr	r0, [pc, #36]	; (1005fd4 <z_arm_configure_static_mpu_regions+0x30>)
 1005fb0:	f000 f8f2 	bl	1006198 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1005fb4:	2300      	movs	r3, #0
 1005fb6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
 1005fb8:	4b07      	ldr	r3, [pc, #28]	; (1005fd8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1005fba:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
 1005fbc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1005fbe:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1005fc0:	9301      	str	r3, [sp, #4]
 1005fc2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1005fc4:	f000 f8f2 	bl	10061ac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 1005fc8:	b004      	add	sp, #16
 1005fca:	bd10      	pop	{r4, pc}
 1005fcc:	21010000 	.word	0x21010000
 1005fd0:	21000000 	.word	0x21000000
 1005fd4:	0101035c 	.word	0x0101035c
 1005fd8:	21000278 	.word	0x21000278

01005fdc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
 1005fdc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1005fde:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
 1005fe0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1005fe2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
 1005fe6:	f004 031f 	and.w	r3, r4, #31
 1005fea:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1005fec:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1005fee:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1005ff0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
 1005ff4:	4905      	ldr	r1, [pc, #20]	; (100600c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1005ff6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
 1005ffa:	f043 0301 	orr.w	r3, r3, #1
 1005ffe:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
 1006002:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
 1006006:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
 100600a:	bd10      	pop	{r4, pc}
 100600c:	e000ed00 	.word	0xe000ed00

01006010 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1006014:	460f      	mov	r7, r1
 1006016:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 1006018:	4606      	mov	r6, r0
 100601a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
 100601e:	4d52      	ldr	r5, [pc, #328]	; (1006168 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1006020:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
 1006022:	45b8      	cmp	r8, r7
 1006024:	da09      	bge.n	100603a <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
 1006026:	f8d6 9004 	ldr.w	r9, [r6, #4]
 100602a:	f1b9 0f00 	cmp.w	r9, #0
 100602e:	d03b      	beq.n	10060a8 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
 1006030:	f1b9 0f1f 	cmp.w	r9, #31
 1006034:	d805      	bhi.n	1006042 <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
 1006036:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
 100603a:	4620      	mov	r0, r4
 100603c:	b005      	add	sp, #20
 100603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
 1006042:	f019 0f1f 	tst.w	r9, #31
 1006046:	d1f6      	bne.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
 1006048:	f8d6 a000 	ldr.w	sl, [r6]
		&&
 100604c:	f01a 0f1f 	tst.w	sl, #31
 1006050:	d1f1      	bne.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1006052:	4650      	mov	r0, sl
 1006054:	f008 fa11 	bl	100e47a <arm_cmse_mpu_region_get>
 1006058:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 100605a:	eb09 000a 	add.w	r0, r9, sl
 100605e:	3801      	subs	r0, #1
 1006060:	f008 fa0b 	bl	100e47a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1006064:	4583      	cmp	fp, r0
 1006066:	d1e6      	bne.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
 1006068:	f11b 0f16 	cmn.w	fp, #22
 100606c:	d0e3      	beq.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
			(u_reg_index > (reg_index - 1))) {
 100606e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
 1006070:	455b      	cmp	r3, fp
 1006072:	dbe0      	blt.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
 1006074:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
 1006078:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
 100607c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1006080:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
 1006084:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1006088:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 100608c:	e9d6 3200 	ldrd	r3, r2, [r6]
 1006090:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
 1006092:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1006094:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
 1006098:	d11e      	bne.n	10060d8 <mpu_configure_regions_and_partition.constprop.0+0xc8>
 100609a:	45ca      	cmp	sl, r9
 100609c:	d108      	bne.n	10060b0 <mpu_configure_regions_and_partition.constprop.0+0xa0>
			mpu_configure_region(u_reg_index, &regions[i]);
 100609e:	4631      	mov	r1, r6
 10060a0:	fa5f f08b 	uxtb.w	r0, fp
 10060a4:	f008 f9f2 	bl	100e48c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
 10060a8:	f108 0801 	add.w	r8, r8, #1
 10060ac:	360c      	adds	r6, #12
 10060ae:	e7b8      	b.n	1006022 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
 10060b0:	4631      	mov	r1, r6
	MPU->RNR = index;
 10060b2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 10060b6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
 10060ba:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 10060be:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
 10060c2:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 10060c4:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
 10060c8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
 10060ca:	f008 f9df 	bl	100e48c <mpu_configure_region>
			if (reg_index == -EINVAL) {
 10060ce:	f110 0f16 	cmn.w	r0, #22
 10060d2:	d0b0      	beq.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
 10060d4:	1c44      	adds	r4, r0, #1
 10060d6:	e7e7      	b.n	10060a8 <mpu_configure_regions_and_partition.constprop.0+0x98>
				regions[i].start - 1);
 10060d8:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
 10060da:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
 10060dc:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
 10060de:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
 10060e2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
 10060e6:	d108      	bne.n	10060fa <mpu_configure_regions_and_partition.constprop.0+0xea>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 10060e8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 10060ec:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 10060ee:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
 10060f2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 10060f4:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
 10060f8:	e7e7      	b.n	10060ca <mpu_configure_regions_and_partition.constprop.0+0xba>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 10060fa:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 10060fe:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
 1006102:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1006104:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1006108:	4631      	mov	r1, r6
 100610a:	f008 f9bf 	bl	100e48c <mpu_configure_region>
			if (reg_index == -EINVAL) {
 100610e:	f110 0f16 	cmn.w	r0, #22
 1006112:	d090      	beq.n	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
 1006114:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
 1006118:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 100611c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
 1006120:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
 1006124:	f362 0304 	bfi	r3, r2, #0, #5
 1006128:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
 100612c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 1006130:	f89d 2008 	ldrb.w	r2, [sp, #8]
 1006134:	085b      	lsrs	r3, r3, #1
 1006136:	f363 1247 	bfi	r2, r3, #5, #3
 100613a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
 100613e:	e9d6 3200 	ldrd	r3, r2, [r6]
 1006142:	4413      	add	r3, r2
 1006144:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
 1006146:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
 100614a:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
 100614c:	4453      	add	r3, sl
 100614e:	eba3 0309 	sub.w	r3, r3, r9
 1006152:	b2c8      	uxtb	r0, r1
 1006154:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 1006158:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
 100615a:	9303      	str	r3, [sp, #12]
 100615c:	f63f af6b 	bhi.w	1006036 <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 1006160:	4669      	mov	r1, sp
 1006162:	f7ff ff3b 	bl	1005fdc <region_init>
 1006166:	e7b5      	b.n	10060d4 <mpu_configure_regions_and_partition.constprop.0+0xc4>
 1006168:	e000ed00 	.word	0xe000ed00

0100616c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 100616c:	2205      	movs	r2, #5
 100616e:	4b04      	ldr	r3, [pc, #16]	; (1006180 <arm_core_mpu_enable+0x14>)
 1006170:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 1006174:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1006178:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 100617c:	4770      	bx	lr
 100617e:	bf00      	nop
 1006180:	e000ed00 	.word	0xe000ed00

01006184 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 1006184:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 1006188:	2200      	movs	r2, #0
 100618a:	4b02      	ldr	r3, [pc, #8]	; (1006194 <arm_core_mpu_disable+0x10>)
 100618c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 1006190:	4770      	bx	lr
 1006192:	bf00      	nop
 1006194:	e000ed00 	.word	0xe000ed00

01006198 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 1006198:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 100619a:	4c03      	ldr	r4, [pc, #12]	; (10061a8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
 100619c:	7822      	ldrb	r2, [r4, #0]
 100619e:	f7ff ff37 	bl	1006010 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 10061a2:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 10061a4:	bd10      	pop	{r4, pc}
 10061a6:	bf00      	nop
 10061a8:	21003e79 	.word	0x21003e79

010061ac <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
 10061ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10061b0:	4d29      	ldr	r5, [pc, #164]	; (1006258 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
 10061b2:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
 10061b4:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
 10061b6:	f04f 0800 	mov.w	r8, #0
 10061ba:	46ab      	mov	fp, r5
	MPU->RNR = index;
 10061bc:	4f27      	ldr	r7, [pc, #156]	; (100625c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
 10061be:	45d0      	cmp	r8, sl
 10061c0:	da1b      	bge.n	10061fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
 10061c2:	f8d6 9004 	ldr.w	r9, [r6, #4]
 10061c6:	f1b9 0f00 	cmp.w	r9, #0
 10061ca:	d03f      	beq.n	100624c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
 10061cc:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 10061ce:	4608      	mov	r0, r1
 10061d0:	9101      	str	r1, [sp, #4]
 10061d2:	f008 f952 	bl	100e47a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 10061d6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 10061d8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 10061da:	eb09 0001 	add.w	r0, r9, r1
 10061de:	3801      	subs	r0, #1
 10061e0:	f008 f94b 	bl	100e47a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 10061e4:	4284      	cmp	r4, r0
 10061e6:	f04f 0214 	mov.w	r2, #20
 10061ea:	4b1d      	ldr	r3, [pc, #116]	; (1006260 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
 10061ec:	d008      	beq.n	1006200 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
 10061ee:	f06f 0315 	mvn.w	r3, #21
 10061f2:	fb02 f808 	mul.w	r8, r2, r8
 10061f6:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
 10061fa:	b003      	add	sp, #12
 10061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
 1006200:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
 1006204:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
 1006206:	d0f8      	beq.n	10061fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
 1006208:	7819      	ldrb	r1, [r3, #0]
 100620a:	42a1      	cmp	r1, r4
 100620c:	ddf5      	ble.n	10061fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
 100620e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
 1006212:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
 1006216:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
 100621a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 100621e:	f100 0108 	add.w	r1, r0, #8
 1006222:	7b00      	ldrb	r0, [r0, #12]
 1006224:	f364 0004 	bfi	r0, r4, #0, #5
 1006228:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
 100622a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 100622e:	790c      	ldrb	r4, [r1, #4]
 1006230:	0840      	lsrs	r0, r0, #1
 1006232:	f360 1447 	bfi	r4, r0, #5, #3
 1006236:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
 1006238:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 100623c:	f021 011f 	bic.w	r1, r1, #31
 1006240:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
 1006242:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 1006246:	f021 011f 	bic.w	r1, r1, #31
 100624a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
 100624c:	f108 0801 	add.w	r8, r8, #1
 1006250:	3514      	adds	r5, #20
 1006252:	360c      	adds	r6, #12
 1006254:	e7b3      	b.n	10061be <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
 1006256:	bf00      	nop
 1006258:	21001d14 	.word	0x21001d14
 100625c:	e000ed00 	.word	0xe000ed00
 1006260:	21003e79 	.word	0x21003e79

01006264 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 1006264:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 1006266:	4d0e      	ldr	r5, [pc, #56]	; (10062a0 <z_arm_mpu_init+0x3c>)
 1006268:	682c      	ldr	r4, [r5, #0]
 100626a:	2c08      	cmp	r4, #8
 100626c:	d815      	bhi.n	100629a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 100626e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
 1006270:	f7ff ff88 	bl	1006184 <arm_core_mpu_disable>
	MPU->MAIR0 =
 1006274:	4b0b      	ldr	r3, [pc, #44]	; (10062a4 <z_arm_mpu_init+0x40>)
 1006276:	4a0c      	ldr	r2, [pc, #48]	; (10062a8 <z_arm_mpu_init+0x44>)
 1006278:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 100627c:	4284      	cmp	r4, r0
 100627e:	d105      	bne.n	100628c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 1006280:	4b0a      	ldr	r3, [pc, #40]	; (10062ac <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 1006282:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
 1006284:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 1006286:	f7ff ff71 	bl	100616c <arm_core_mpu_enable>
}
 100628a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 100628c:	6869      	ldr	r1, [r5, #4]
 100628e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 1006292:	f7ff fea3 	bl	1005fdc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1006296:	3001      	adds	r0, #1
 1006298:	e7f0      	b.n	100627c <z_arm_mpu_init+0x18>
		return -1;
 100629a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100629e:	e7f4      	b.n	100628a <z_arm_mpu_init+0x26>
 10062a0:	01010368 	.word	0x01010368
 10062a4:	e000ed00 	.word	0xe000ed00
 10062a8:	0044ffaa 	.word	0x0044ffaa
 10062ac:	21003e79 	.word	0x21003e79

010062b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
 10062b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
 10062b2:	4b09      	ldr	r3, [pc, #36]	; (10062d8 <gpio_nrfx_init+0x28>)
 10062b4:	781a      	ldrb	r2, [r3, #0]
 10062b6:	b96a      	cbnz	r2, 10062d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
 10062b8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 10062ba:	200a      	movs	r0, #10
		gpio_initialized = true;
 10062bc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 10062be:	2105      	movs	r1, #5
 10062c0:	f7ff fc14 	bl	1005aec <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
 10062c4:	200a      	movs	r0, #10
 10062c6:	f7ff fbdf 	bl	1005a88 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
 10062ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 10062ce:	4b03      	ldr	r3, [pc, #12]	; (10062dc <gpio_nrfx_init+0x2c>)
 10062d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
 10062d4:	2000      	movs	r0, #0
 10062d6:	bd08      	pop	{r3, pc}
 10062d8:	21003e7a 	.word	0x21003e7a
 10062dc:	4100a000 	.word	0x4100a000

010062e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
 10062e0:	4b2d      	ldr	r3, [pc, #180]	; (1006398 <gpio_nrfx_config+0xb8>)
{
 10062e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
 10062e4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
 10062e6:	482d      	ldr	r0, [pc, #180]	; (100639c <gpio_nrfx_config+0xbc>)
 10062e8:	4013      	ands	r3, r2
 10062ea:	4283      	cmp	r3, r0
 10062ec:	d045      	beq.n	100637a <gpio_nrfx_config+0x9a>
 10062ee:	d80d      	bhi.n	100630c <gpio_nrfx_config+0x2c>
 10062f0:	2b06      	cmp	r3, #6
 10062f2:	d015      	beq.n	1006320 <gpio_nrfx_config+0x40>
 10062f4:	d805      	bhi.n	1006302 <gpio_nrfx_config+0x22>
 10062f6:	b19b      	cbz	r3, 1006320 <gpio_nrfx_config+0x40>
 10062f8:	2b02      	cmp	r3, #2
 10062fa:	d040      	beq.n	100637e <gpio_nrfx_config+0x9e>
 10062fc:	f06f 0015 	mvn.w	r0, #21
 1006300:	e03a      	b.n	1006378 <gpio_nrfx_config+0x98>
 1006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1006306:	d1f9      	bne.n	10062fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
 1006308:	2301      	movs	r3, #1
 100630a:	e009      	b.n	1006320 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
 100630c:	4824      	ldr	r0, [pc, #144]	; (10063a0 <gpio_nrfx_config+0xc0>)
 100630e:	4283      	cmp	r3, r0
 1006310:	d037      	beq.n	1006382 <gpio_nrfx_config+0xa2>
 1006312:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 1006316:	d036      	beq.n	1006386 <gpio_nrfx_config+0xa6>
 1006318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 100631c:	d1ee      	bne.n	10062fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
 100631e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
 1006320:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
 1006322:	bf4c      	ite	mi
 1006324:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
 1006326:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
 100632a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
 100632e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
 1006330:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
 1006334:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
 1006338:	d506      	bpl.n	1006348 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 100633a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100633e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 1006340:	d023      	beq.n	100638a <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
 1006342:	2201      	movs	r2, #1
 1006344:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
 1006346:	60ba      	str	r2, [r7, #8]
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
 1006348:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
 100634a:	4a16      	ldr	r2, [pc, #88]	; (10063a4 <gpio_nrfx_config+0xc4>)
 100634c:	4c16      	ldr	r4, [pc, #88]	; (10063a8 <gpio_nrfx_config+0xc8>)
    *p_pin = pin_number & 0x1F;
 100634e:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
 1006352:	2f01      	cmp	r7, #1
 1006354:	bf08      	it	eq
 1006356:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 1006358:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
 100635c:	2000      	movs	r0, #0
 100635e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1006362:	f8d1 4200 	ldr.w	r4, [r1, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 1006366:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 100636a:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 100636e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 1006372:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
 1006374:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
 1006378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
 100637a:	2307      	movs	r3, #7
 100637c:	e7d0      	b.n	1006320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
 100637e:	2304      	movs	r3, #4
 1006380:	e7ce      	b.n	1006320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
 1006382:	2305      	movs	r3, #5
 1006384:	e7cc      	b.n	1006320 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
 1006386:	2303      	movs	r3, #3
 1006388:	e7ca      	b.n	1006320 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 100638a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
 100638c:	bf42      	ittt	mi
 100638e:	2201      	movmi	r2, #1
 1006390:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
 1006392:	60fa      	strmi	r2, [r7, #12]
}
 1006394:	e7d8      	b.n	1006348 <gpio_nrfx_config+0x68>
 1006396:	bf00      	nop
 1006398:	00f00006 	.word	0x00f00006
 100639c:	00100006 	.word	0x00100006
 10063a0:	00400002 	.word	0x00400002
 10063a4:	418c0800 	.word	0x418c0800
 10063a8:	418c0500 	.word	0x418c0500

010063ac <nrf_gpio_cfg_sense_set>:
{
 10063ac:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
 10063ae:	4b09      	ldr	r3, [pc, #36]	; (10063d4 <nrf_gpio_cfg_sense_set+0x28>)
 10063b0:	4c09      	ldr	r4, [pc, #36]	; (10063d8 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
 10063b2:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
 10063b6:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
 10063b8:	2801      	cmp	r0, #1
 10063ba:	bf08      	it	eq
 10063bc:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
 10063be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 10063c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 10063c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
 10063ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 10063ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 10063d2:	bd10      	pop	{r4, pc}
 10063d4:	418c0500 	.word	0x418c0500
 10063d8:	418c0800 	.word	0x418c0800

010063dc <check_level_trigger_pins>:
{
 10063dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
 10063e0:	6903      	ldr	r3, [r0, #16]
{
 10063e2:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
 10063e4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
 10063e8:	68de      	ldr	r6, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
 10063ea:	430a      	orrs	r2, r1
 10063ec:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
 10063f0:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
 10063f2:	2401      	movs	r4, #1
	uint32_t pin = 0U;
 10063f4:	f04f 0900 	mov.w	r9, #0
	return port->config;
 10063f8:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
 10063fc:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
 10063fe:	f8da 2004 	ldr.w	r2, [sl, #4]
        case 1: return NRF_P1;
 1006402:	f8df b068 	ldr.w	fp, [pc, #104]	; 100646c <check_level_trigger_pins+0x90>
    return p_reg->IN;
 1006406:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
 1006408:	405d      	eors	r5, r3
        case 1: return NRF_P1;
 100640a:	4b19      	ldr	r3, [pc, #100]	; (1006470 <check_level_trigger_pins+0x94>)
	uint32_t out = pin_states & level_pins;
 100640c:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
 1006410:	b917      	cbnz	r7, 1006418 <check_level_trigger_pins+0x3c>
}
 1006412:	4628      	mov	r0, r5
 1006414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
 1006418:	423c      	tst	r4, r7
 100641a:	d022      	beq.n	1006462 <check_level_trigger_pins+0x86>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 100641c:	f89a 2008 	ldrb.w	r2, [sl, #8]
 1006420:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
 1006424:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 1006426:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
			if (!(level_pins & bit)) {
 100642a:	d114      	bne.n	1006456 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
 100642c:	ea4f 1c50 	mov.w	ip, r0, lsr #5
        case 1: return NRF_P1;
 1006430:	f1bc 0f01 	cmp.w	ip, #1
 1006434:	bf14      	ite	ne
 1006436:	4659      	movne	r1, fp
 1006438:	4619      	moveq	r1, r3
    *p_pin = pin_number & 0x1F;
 100643a:	f000 021f 	and.w	r2, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100643e:	3280      	adds	r2, #128	; 0x80
 1006440:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
 1006444:	f3c2 4201 	ubfx	r2, r2, #16, #2
				if (high) {
 1006448:	2a02      	cmp	r2, #2
					*sense_levels |= bit;
 100644a:	bf02      	ittt	eq
 100644c:	f8d8 2000 	ldreq.w	r2, [r8]
 1006450:	4322      	orreq	r2, r4
 1006452:	f8c8 2000 	streq.w	r2, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
 1006456:	2100      	movs	r1, #0
 1006458:	f7ff ffa8 	bl	10063ac <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
 100645c:	4b04      	ldr	r3, [pc, #16]	; (1006470 <check_level_trigger_pins+0x94>)
 100645e:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
 1006462:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
 1006466:	0064      	lsls	r4, r4, #1
 1006468:	e7d2      	b.n	1006410 <check_level_trigger_pins+0x34>
 100646a:	bf00      	nop
 100646c:	418c0500 	.word	0x418c0500
 1006470:	418c0800 	.word	0x418c0800

01006474 <gpiote_event_handler>:
{
 1006474:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
 1006476:	2400      	movs	r4, #0
{
 1006478:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
 100647a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
 100647e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1006482:	4e28      	ldr	r6, [pc, #160]	; (1006524 <gpiote_event_handler+0xb0>)
 1006484:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
 1006488:	b16d      	cbz	r5, 10064a6 <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
 100648a:	a902      	add	r1, sp, #8
 100648c:	4826      	ldr	r0, [pc, #152]	; (1006528 <gpiote_event_handler+0xb4>)
 100648e:	f7ff ffa5 	bl	10063dc <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
 1006492:	a903      	add	r1, sp, #12
		fired_triggers[0] =
 1006494:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
 1006496:	4825      	ldr	r0, [pc, #148]	; (100652c <gpiote_event_handler+0xb8>)
 1006498:	f7ff ffa0 	bl	10063dc <check_level_trigger_pins>
		fired_triggers[1] =
 100649c:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100649e:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
 10064a2:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
 10064a6:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
 10064a8:	2601      	movs	r6, #1
 10064aa:	4694      	mov	ip, r2
{
 10064ac:	4920      	ldr	r1, [pc, #128]	; (1006530 <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
 10064ae:	4c1d      	ldr	r4, [pc, #116]	; (1006524 <gpiote_event_handler+0xb0>)
 10064b0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
 10064b4:	fa06 f002 	lsl.w	r0, r6, r2
 10064b8:	4218      	tst	r0, r3
 10064ba:	d016      	beq.n	10064ea <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10064bc:	680b      	ldr	r3, [r1, #0]
 10064be:	b1a3      	cbz	r3, 10064ea <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 10064c0:	f502 73a2 	add.w	r3, r2, #324	; 0x144
 10064c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
 10064c8:	af04      	add	r7, sp, #16
 10064ca:	f3c3 3040 	ubfx	r0, r3, #13, #1
 10064ce:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 10064d2:	f850 7c10 	ldr.w	r7, [r0, #-16]
 10064d6:	f3c3 2304 	ubfx	r3, r3, #8, #5
 10064da:	fa06 f303 	lsl.w	r3, r6, r3
 10064de:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10064e0:	f8c1 c000 	str.w	ip, [r1]
 10064e4:	f840 3c10 	str.w	r3, [r0, #-16]
 10064e8:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
 10064ea:	3201      	adds	r2, #1
 10064ec:	2a08      	cmp	r2, #8
 10064ee:	f101 0104 	add.w	r1, r1, #4
 10064f2:	d1dd      	bne.n	10064b0 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
 10064f4:	9a00      	ldr	r2, [sp, #0]
 10064f6:	b122      	cbz	r2, 1006502 <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
 10064f8:	4b0e      	ldr	r3, [pc, #56]	; (1006534 <gpiote_event_handler+0xc0>)
 10064fa:	490b      	ldr	r1, [pc, #44]	; (1006528 <gpiote_event_handler+0xb4>)
 10064fc:	6858      	ldr	r0, [r3, #4]
 10064fe:	f008 f8a8 	bl	100e652 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
 1006502:	9a01      	ldr	r2, [sp, #4]
 1006504:	b122      	cbz	r2, 1006510 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
 1006506:	4b0c      	ldr	r3, [pc, #48]	; (1006538 <gpiote_event_handler+0xc4>)
 1006508:	4908      	ldr	r1, [pc, #32]	; (100652c <gpiote_event_handler+0xb8>)
 100650a:	6858      	ldr	r0, [r3, #4]
 100650c:	f008 f8a1 	bl	100e652 <gpio_fire_callbacks.isra.0>
	if (port_event) {
 1006510:	b12d      	cbz	r5, 100651e <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
 1006512:	4805      	ldr	r0, [pc, #20]	; (1006528 <gpiote_event_handler+0xb4>)
 1006514:	f008 f8ae 	bl	100e674 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
 1006518:	4804      	ldr	r0, [pc, #16]	; (100652c <gpiote_event_handler+0xb8>)
 100651a:	f008 f8ab 	bl	100e674 <cfg_level_pins>
}
 100651e:	b005      	add	sp, #20
 1006520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1006522:	bf00      	nop
 1006524:	4100a000 	.word	0x4100a000
 1006528:	010101b0 	.word	0x010101b0
 100652c:	010101c8 	.word	0x010101c8
 1006530:	4100a100 	.word	0x4100a100
 1006534:	21001d30 	.word	0x21001d30
 1006538:	21001d4c 	.word	0x21001d4c

0100653c <gpio_nrfx_pin_interrupt_configure>:
{
 100653c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100653e:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1006540:	6842      	ldr	r2, [r0, #4]
 1006542:	f001 051f 	and.w	r5, r1, #31
 1006546:	7a12      	ldrb	r2, [r2, #8]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
 1006548:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
 100654c:	460e      	mov	r6, r1
	return port->data;
 100654e:	6907      	ldr	r7, [r0, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
 1006550:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
 1006554:	d110      	bne.n	1006578 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
 1006556:	4963      	ldr	r1, [pc, #396]	; (10066e4 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
 1006558:	f8df c18c 	ldr.w	ip, [pc, #396]	; 10066e8 <gpio_nrfx_pin_interrupt_configure+0x1ac>
    return pin_number >> 5;
 100655c:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
 100655e:	2801      	cmp	r0, #1
 1006560:	bf08      	it	eq
 1006562:	4661      	moveq	r1, ip
    *p_pin = pin_number & 0x1F;
 1006564:	f005 021f 	and.w	r2, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
 1006568:	3280      	adds	r2, #128	; 0x80
 100656a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
 100656e:	07d0      	lsls	r0, r2, #31
 1006570:	d507      	bpl.n	1006582 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
 1006572:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1006576:	e09a      	b.n	10066ae <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
 1006578:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 100657c:	68f9      	ldr	r1, [r7, #12]
 100657e:	f000 8098 	beq.w	10066b2 <gpio_nrfx_pin_interrupt_configure+0x176>
 1006582:	2101      	movs	r1, #1
 1006584:	68fa      	ldr	r2, [r7, #12]
 1006586:	40b1      	lsls	r1, r6
 1006588:	4311      	orrs	r1, r2
 100658a:	60f9      	str	r1, [r7, #12]
 100658c:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
 100658e:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
 1006590:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
 1006592:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
 1006594:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
 1006598:	bf0c      	ite	eq
 100659a:	430a      	orreq	r2, r1
 100659c:	438a      	bicne	r2, r1
 100659e:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
 10065a0:	69ba      	ldr	r2, [r7, #24]
 10065a2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 10065a6:	bf0c      	ite	eq
 10065a8:	430a      	orreq	r2, r1
 10065aa:	438a      	bicne	r2, r1
 10065ac:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
 10065ae:	693a      	ldr	r2, [r7, #16]
 10065b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 10065b4:	bf0c      	ite	eq
 10065b6:	4311      	orreq	r1, r2
 10065b8:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
 10065bc:	4a4b      	ldr	r2, [pc, #300]	; (10066ec <gpio_nrfx_pin_interrupt_configure+0x1b0>)
 10065be:	6139      	str	r1, [r7, #16]
 10065c0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 10065c4:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 10065c6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 10065ca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 10065ce:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
 10065d2:	428d      	cmp	r5, r1
 10065d4:	d172      	bne.n	10066bc <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
 10065d6:	fa23 f100 	lsr.w	r1, r3, r0
 10065da:	07c9      	lsls	r1, r1, #31
 10065dc:	d56e      	bpl.n	10066bc <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
 10065de:	0083      	lsls	r3, r0, #2
 10065e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10065e4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10065e8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 10065ec:	f021 0101 	bic.w	r1, r1, #1
 10065f0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
 10065f4:	2301      	movs	r3, #1
 10065f6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
 10065f8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
 10065fc:	b2c0      	uxtb	r0, r0
 10065fe:	f005 fa51 	bl	100baa4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
 1006602:	4628      	mov	r0, r5
 1006604:	2100      	movs	r1, #0
 1006606:	f7ff fed1 	bl	10063ac <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
 100660a:	68f8      	ldr	r0, [r7, #12]
 100660c:	40f0      	lsrs	r0, r6
 100660e:	f010 0001 	ands.w	r0, r0, #1
 1006612:	d04c      	beq.n	10066ae <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
 1006614:	6978      	ldr	r0, [r7, #20]
 1006616:	40f0      	lsrs	r0, r6
 1006618:	f010 0401 	ands.w	r4, r0, #1
 100661c:	d055      	beq.n	10066ca <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
 100661e:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
 1006620:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
 1006624:	40f3      	lsrs	r3, r6
 1006626:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
 1006628:	bf57      	itett	pl
 100662a:	6939      	ldrpl	r1, [r7, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
 100662c:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
 100662e:	fa21 f606 	lsrpl.w	r6, r1, r6
 1006632:	f006 0601 	andpl.w	r6, r6, #1
 1006636:	bf5c      	itt	pl
 1006638:	f1c6 0602 	rsbpl	r6, r6, #2
 100663c:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
 100663e:	f005 fa51 	bl	100bae4 <nrfx_gpiote_channel_alloc>
 1006642:	4b2b      	ldr	r3, [pc, #172]	; (10066f0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
 1006644:	4298      	cmp	r0, r3
 1006646:	d13d      	bne.n	10066c4 <gpio_nrfx_pin_interrupt_configure+0x188>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1006648:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
 100664a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100664e:	022d      	lsls	r5, r5, #8
 1006650:	009a      	lsls	r2, r3, #2
 1006652:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 1006656:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 100665a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100665e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 1006662:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
 1006666:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 100666a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100666e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
 1006672:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1006674:	430d      	orrs	r5, r1
    return ((uint32_t)p_reg + event);
 1006676:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100667a:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100667e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 1006682:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1006686:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
 1006688:	f89d 1007 	ldrb.w	r1, [sp, #7]
 100668c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
 100668e:	008b      	lsls	r3, r1, #2
 1006690:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1006694:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1006698:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 100669c:	f042 0201 	orr.w	r2, r2, #1
 10066a0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
 10066a4:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
 10066a6:	4a11      	ldr	r2, [pc, #68]	; (10066ec <gpio_nrfx_pin_interrupt_configure+0x1b0>)
 10066a8:	408b      	lsls	r3, r1
 10066aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 10066ae:	b003      	add	sp, #12
 10066b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
 10066b2:	2201      	movs	r2, #1
 10066b4:	40b2      	lsls	r2, r6
 10066b6:	ea21 0102 	bic.w	r1, r1, r2
 10066ba:	e766      	b.n	100658a <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
 10066bc:	3001      	adds	r0, #1
 10066be:	2808      	cmp	r0, #8
 10066c0:	d181      	bne.n	10065c6 <gpio_nrfx_pin_interrupt_configure+0x8a>
 10066c2:	e79e      	b.n	1006602 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
 10066c4:	f06f 0012 	mvn.w	r0, #18
 10066c8:	e7f1      	b.n	10066ae <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
 10066ca:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
 10066cc:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
 10066ce:	40f1      	lsrs	r1, r6
 10066d0:	f001 0101 	and.w	r1, r1, #1
 10066d4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
 10066d8:	b2c9      	uxtb	r1, r1
 10066da:	f7ff fe67 	bl	10063ac <nrf_gpio_cfg_sense_set>
	int res = 0;
 10066de:	4620      	mov	r0, r4
 10066e0:	e7e5      	b.n	10066ae <gpio_nrfx_pin_interrupt_configure+0x172>
 10066e2:	bf00      	nop
 10066e4:	418c0500 	.word	0x418c0500
 10066e8:	418c0800 	.word	0x418c0800
 10066ec:	4100a000 	.word	0x4100a000
 10066f0:	0bad0000 	.word	0x0bad0000

010066f4 <vipm_nrf_0_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
 10066f4:	4b02      	ldr	r3, [pc, #8]	; (1006700 <vipm_nrf_0_register_callback+0xc>)
 10066f6:	6019      	str	r1, [r3, #0]
 10066f8:	641a      	str	r2, [r3, #64]	; 0x40
 10066fa:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 10066fe:	4770      	bx	lr
 1006700:	21001d78 	.word	0x21001d78

01006704 <vipm_nrf_init>:
{
 1006704:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
 1006706:	4d0b      	ldr	r5, [pc, #44]	; (1006734 <vipm_nrf_init+0x30>)
 1006708:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
 100670c:	b97c      	cbnz	r4, 100672e <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
 100670e:	4a0a      	ldr	r2, [pc, #40]	; (1006738 <vipm_nrf_init+0x34>)
 1006710:	490a      	ldr	r1, [pc, #40]	; (100673c <vipm_nrf_init+0x38>)
 1006712:	4620      	mov	r0, r4
 1006714:	f005 fa1e 	bl	100bb54 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
 1006718:	4622      	mov	r2, r4
 100671a:	2101      	movs	r1, #1
 100671c:	2012      	movs	r0, #18
 100671e:	f7ff f9e5 	bl	1005aec <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
 1006722:	4807      	ldr	r0, [pc, #28]	; (1006740 <vipm_nrf_init+0x3c>)
 1006724:	f005 fa2e 	bl	100bb84 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
 1006728:	2301      	movs	r3, #1
 100672a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
 100672e:	2000      	movs	r0, #0
 1006730:	bd38      	pop	{r3, r4, r5, pc}
 1006732:	bf00      	nop
 1006734:	21001d78 	.word	0x21001d78
 1006738:	21001d70 	.word	0x21001d70
 100673c:	01006745 	.word	0x01006745
 1006740:	010103cc 	.word	0x010103cc

01006744 <vipm_dispatcher>:
{
 1006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1006748:	4605      	mov	r5, r0
		event_mask &= ~BIT(event_idx);
 100674a:	f04f 0801 	mov.w	r8, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
 100674e:	4e0e      	ldr	r6, [pc, #56]	; (1006788 <vipm_dispatcher+0x44>)
	while (event_mask) {
 1006750:	b90d      	cbnz	r5, 1006756 <vipm_dispatcher+0x12>
}
 1006752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1006756:	fa95 f3a5 	rbit	r3, r5
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 100675a:	fab3 f383 	clz	r3, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
 100675e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
		event_mask &= ~BIT(event_idx);
 1006762:	fa08 f203 	lsl.w	r2, r8, r3
 1006766:	ea25 0502 	bic.w	r5, r5, r2
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
 100676a:	2f00      	cmp	r7, #0
 100676c:	d0f0      	beq.n	1006750 <vipm_dispatcher+0xc>
			nrfx_vipm_data.callback[event_idx]
 100676e:	f103 0420 	add.w	r4, r3, #32
 1006772:	f103 0110 	add.w	r1, r3, #16
 1006776:	2300      	movs	r3, #0
 1006778:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 100677c:	461a      	mov	r2, r3
 100677e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 1006782:	47b8      	blx	r7
 1006784:	e7e4      	b.n	1006750 <vipm_dispatcher+0xc>
 1006786:	bf00      	nop
 1006788:	21001d78 	.word	0x21001d78

0100678c <vipm_nrf_1_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
 100678c:	2a10      	cmp	r2, #16

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100678e:	bf9f      	itttt	ls
 1006790:	2201      	movls	r2, #1
 1006792:	4b03      	ldrls	r3, [pc, #12]	; (10067a0 <vipm_nrf_1_send+0x14>)
 1006794:	2000      	movls	r0, #0
 1006796:	605a      	strls	r2, [r3, #4]
 1006798:	bf88      	it	hi
 100679a:	f06f 0015 	mvnhi.w	r0, #21
 100679e:	4770      	bx	lr
 10067a0:	41012000 	.word	0x41012000

010067a4 <random_byte_get>:
	__asm__ volatile(
 10067a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 10067a8:	f3ef 8211 	mrs	r2, BASEPRI
 10067ac:	f383 8811 	msr	BASEPRI, r3
 10067b0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
 10067b4:	4b09      	ldr	r3, [pc, #36]	; (10067dc <random_byte_get+0x38>)
 10067b6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
 10067ba:	b161      	cbz	r1, 10067d6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10067bc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
 10067be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10067c2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 10067c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
 10067ca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
 10067cc:	f382 8811 	msr	BASEPRI, r2
 10067d0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
 10067d4:	4770      	bx	lr
	int retval = -EAGAIN;
 10067d6:	f06f 000a 	mvn.w	r0, #10
 10067da:	e7f7      	b.n	10067cc <random_byte_get+0x28>
 10067dc:	41009000 	.word	0x41009000

010067e0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 10067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10067e2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
 10067e4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
 10067e6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
 10067e8:	f04f 0040 	mov.w	r0, #64	; 0x40
 10067ec:	f3ef 8e11 	mrs	lr, BASEPRI
 10067f0:	f380 8811 	msr	BASEPRI, r0
 10067f4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 10067f8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 10067fa:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
 10067fe:	1ba4      	subs	r4, r4, r6
 1006800:	403c      	ands	r4, r7
	if (available < len) {
 1006802:	42a2      	cmp	r2, r4
		len = available;
 1006804:	bf88      	it	hi
 1006806:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 1006808:	18b0      	adds	r0, r6, r2
 100680a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
 100680c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
 100680e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
 1006810:	f38e 8811 	msr	BASEPRI, lr
 1006814:	f3bf 8f6f 	isb	sy
 1006818:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
 100681a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
 100681c:	4290      	cmp	r0, r2
 100681e:	d119      	bne.n	1006854 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 1006820:	4566      	cmp	r6, ip
 1006822:	d10d      	bne.n	1006840 <rng_pool_get+0x60>
	__asm__ volatile(
 1006824:	f04f 0540 	mov.w	r5, #64	; 0x40
 1006828:	f3ef 8011 	mrs	r0, BASEPRI
 100682c:	f385 8811 	msr	BASEPRI, r5
 1006830:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 1006834:	781d      	ldrb	r5, [r3, #0]
 1006836:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
 1006838:	f380 8811 	msr	BASEPRI, r0
 100683c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 1006840:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
 1006842:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
 1006844:	b290      	uxth	r0, r2
	available = available - len;
 1006846:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
 1006848:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 100684a:	bf22      	ittt	cs
 100684c:	2201      	movcs	r2, #1
 100684e:	4b06      	ldrcs	r3, [pc, #24]	; (1006868 <rng_pool_get+0x88>)
 1006850:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
 1006852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
 1006854:	eb03 0e05 	add.w	lr, r3, r5
 1006858:	f89e e005 	ldrb.w	lr, [lr, #5]
		first = (first + 1) & mask;
 100685c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
 100685e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
 1006862:	403d      	ands	r5, r7
 1006864:	e7da      	b.n	100681c <rng_pool_get+0x3c>
 1006866:	bf00      	nop
 1006868:	41009000 	.word	0x41009000

0100686c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 100686c:	43db      	mvns	r3, r3
{
 100686e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 1006872:	f013 0501 	ands.w	r5, r3, #1
{
 1006876:	460e      	mov	r6, r1
 1006878:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 100687a:	d004      	beq.n	1006886 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
 100687c:	4821      	ldr	r0, [pc, #132]	; (1006904 <entropy_nrf5_get_entropy_isr+0x98>)
 100687e:	f7ff ffaf 	bl	10067e0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 1006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 1006886:	b3a2      	cbz	r2, 10068f2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
 1006888:	f04f 0340 	mov.w	r3, #64	; 0x40
 100688c:	f3ef 8811 	mrs	r8, BASEPRI
 1006890:	f383 8811 	msr	BASEPRI, r3
 1006894:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 1006898:	2009      	movs	r0, #9
 100689a:	f7ff f919 	bl	1005ad0 <arch_irq_is_enabled>
 100689e:	4607      	mov	r7, r0
		irq_disable(IRQN);
 10068a0:	2009      	movs	r0, #9
 10068a2:	f7ff f901 	bl	1005aa8 <arch_irq_disable>
	__asm__ volatile(
 10068a6:	f388 8811 	msr	BASEPRI, r8
 10068aa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10068ae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1006908 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10068b2:	f44f 7a00 	mov.w	sl, #512	; 0x200
 10068b6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
 10068ba:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 10068be:	2301      	movs	r3, #1
 10068c0:	4625      	mov	r5, r4
 10068c2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 100690c <entropy_nrf5_get_entropy_isr+0xa0>
 10068c6:	f8c8 3000 	str.w	r3, [r8]
 10068ca:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
 10068ce:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
 10068d2:	b183      	cbz	r3, 10068f6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
 10068d4:	f7ff ff66 	bl	10067a4 <random_byte_get>
			if (byte < 0) {
 10068d8:	1e03      	subs	r3, r0, #0
 10068da:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
 10068de:	dbf6      	blt.n	10068ce <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
 10068e0:	3d01      	subs	r5, #1
 10068e2:	b2ad      	uxth	r5, r5
 10068e4:	5573      	strb	r3, [r6, r5]
		} while (len);
 10068e6:	2d00      	cmp	r5, #0
 10068e8:	d1f1      	bne.n	10068ce <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
 10068ea:	b117      	cbz	r7, 10068f2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
 10068ec:	2009      	movs	r0, #9
 10068ee:	f7ff f8cb 	bl	1005a88 <arch_irq_enable>
	return cnt;
 10068f2:	4620      	mov	r0, r4
 10068f4:	e7c5      	b.n	1006882 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 10068f6:	f3bf 8f4f 	dsb	sy
				__WFE();
 10068fa:	bf20      	wfe
				__SEV();
 10068fc:	bf40      	sev
				__WFE();
 10068fe:	bf20      	wfe
 1006900:	e7e5      	b.n	10068ce <entropy_nrf5_get_entropy_isr+0x62>
 1006902:	bf00      	nop
 1006904:	21001e60 	.word	0x21001e60
 1006908:	41009000 	.word	0x41009000
 100690c:	e000e100 	.word	0xe000e100

01006910 <entropy_nrf5_get_entropy>:
{
 1006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1006914:	460d      	mov	r5, r1
 1006916:	4614      	mov	r4, r2
	return z_impl_k_sem_take(sem, timeout);
 1006918:	4f12      	ldr	r7, [pc, #72]	; (1006964 <entropy_nrf5_get_entropy+0x54>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
 100691a:	f107 0835 	add.w	r8, r7, #53	; 0x35
 100691e:	f107 0910 	add.w	r9, r7, #16
	while (len) {
 1006922:	b914      	cbnz	r4, 100692a <entropy_nrf5_get_entropy+0x1a>
}
 1006924:	4620      	mov	r0, r4
 1006926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100692a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100692e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1006932:	4638      	mov	r0, r7
 1006934:	f005 fe7a 	bl	100c62c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
 1006938:	4622      	mov	r2, r4
 100693a:	4629      	mov	r1, r5
 100693c:	4640      	mov	r0, r8
 100693e:	f7ff ff4f 	bl	10067e0 <rng_pool_get>
 1006942:	4606      	mov	r6, r0
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 1006944:	4638      	mov	r0, r7
 1006946:	f005 fe51 	bl	100c5ec <z_impl_k_sem_give>
		if (bytes == 0U) {
 100694a:	b93e      	cbnz	r6, 100695c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
 100694c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1006950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006954:	4648      	mov	r0, r9
 1006956:	f005 fe69 	bl	100c62c <z_impl_k_sem_take>
			continue;
 100695a:	e7e2      	b.n	1006922 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
 100695c:	1ba4      	subs	r4, r4, r6
 100695e:	b2a4      	uxth	r4, r4
		buf += bytes;
 1006960:	4435      	add	r5, r6
 1006962:	e7de      	b.n	1006922 <entropy_nrf5_get_entropy+0x12>
 1006964:	21001e40 	.word	0x21001e40

01006968 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
 1006968:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
 100696a:	2201      	movs	r2, #1
 100696c:	4c17      	ldr	r4, [pc, #92]	; (10069cc <entropy_nrf5_init+0x64>)
 100696e:	4611      	mov	r1, r2
 1006970:	4620      	mov	r0, r4
 1006972:	f009 f8dd 	bl	100fb30 <z_impl_k_sem_init>
 1006976:	2201      	movs	r2, #1
 1006978:	2100      	movs	r1, #0
 100697a:	f104 0010 	add.w	r0, r4, #16
 100697e:	f009 f8d7 	bl	100fb30 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
 1006982:	f240 4307 	movw	r3, #1031	; 0x407
 1006986:	8723      	strh	r3, [r4, #56]	; 0x38
	rngp->first_alloc = 0U;
 1006988:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 100698c:	6223      	str	r3, [r4, #32]
	rngp->threshold	  = threshold;
 100698e:	230c      	movs	r3, #12
	rngp->first_alloc = 0U;
 1006990:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
 1006992:	2101      	movs	r1, #1
	rngp->threshold	  = threshold;
 1006994:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
 1006998:	4b0d      	ldr	r3, [pc, #52]	; (10069d0 <entropy_nrf5_init+0x68>)
	rngp->first_alloc = 0U;
 100699a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	rngp->first_read  = 0U;
 100699e:	86e5      	strh	r5, [r4, #54]	; 0x36
 10069a0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
 10069a4:	2009      	movs	r0, #9
 10069a6:	f022 0201 	bic.w	r2, r2, #1
 10069aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10069ae:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 10069b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 10069b6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
 10069ba:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 10069bc:	6019      	str	r1, [r3, #0]
 10069be:	f7ff f895 	bl	1005aec <z_arm_irq_priority_set>
	irq_enable(IRQN);
 10069c2:	2009      	movs	r0, #9
 10069c4:	f7ff f860 	bl	1005a88 <arch_irq_enable>

	return 0;
}
 10069c8:	4628      	mov	r0, r5
 10069ca:	bd38      	pop	{r3, r4, r5, pc}
 10069cc:	21001e40 	.word	0x21001e40
 10069d0:	41009000 	.word	0x41009000

010069d4 <isr>:
{
 10069d4:	b510      	push	{r4, lr}
	byte = random_byte_get();
 10069d6:	f7ff fee5 	bl	10067a4 <random_byte_get>
	if (byte < 0) {
 10069da:	2800      	cmp	r0, #0
 10069dc:	db20      	blt.n	1006a20 <isr+0x4c>
	uint8_t last  = rngp->last;
 10069de:	4b17      	ldr	r3, [pc, #92]	; (1006a3c <isr+0x68>)
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
 10069e0:	b2c0      	uxtb	r0, r0
	uint8_t last  = rngp->last;
 10069e2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
	if (((last - first) & mask) == mask) {
 10069e6:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
	uint8_t mask  = rngp->mask;
 10069ea:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
	if (((last - first) & mask) == mask) {
 10069ee:	1a51      	subs	r1, r2, r1
 10069f0:	ea34 0101 	bics.w	r1, r4, r1
 10069f4:	d10d      	bne.n	1006a12 <isr+0x3e>
	uint8_t last  = rngp->last;
 10069f6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	if (((last - first) & mask) == mask) {
 10069fa:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
	uint8_t mask  = rngp->mask;
 10069fe:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
	if (((last - first) & mask) == mask) {
 1006a02:	1a51      	subs	r1, r2, r1
 1006a04:	ea34 0101 	bics.w	r1, r4, r1
 1006a08:	d10b      	bne.n	1006a22 <isr+0x4e>
 1006a0a:	2201      	movs	r2, #1
 1006a0c:	4b0c      	ldr	r3, [pc, #48]	; (1006a40 <isr+0x6c>)
 1006a0e:	605a      	str	r2, [r3, #4]
}
 1006a10:	e00e      	b.n	1006a30 <isr+0x5c>
	rngp->buffer[last] = byte;
 1006a12:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
 1006a14:	3201      	adds	r2, #1
 1006a16:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
 1006a18:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
	rngp->last = (last + 1) & mask;
 1006a1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 1006a20:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
 1006a22:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
 1006a24:	3201      	adds	r2, #1
 1006a26:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
 1006a28:	f881 003a 	strb.w	r0, [r1, #58]	; 0x3a
	rngp->last = (last + 1) & mask;
 1006a2c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	z_impl_k_sem_give(sem);
 1006a30:	4804      	ldr	r0, [pc, #16]	; (1006a44 <isr+0x70>)
}
 1006a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1006a36:	f005 bdd9 	b.w	100c5ec <z_impl_k_sem_give>
 1006a3a:	bf00      	nop
 1006a3c:	21001e40 	.word	0x21001e40
 1006a40:	41009000 	.word	0x41009000
 1006a44:	21001e50 	.word	0x21001e50

01006a48 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
 1006a48:	4602      	mov	r2, r0
 1006a4a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 1006a4c:	4801      	ldr	r0, [pc, #4]	; (1006a54 <multithreading_lock_acquire+0xc>)
 1006a4e:	f005 bd13 	b.w	100c478 <z_impl_k_mutex_lock>
 1006a52:	bf00      	nop
 1006a54:	21000244 	.word	0x21000244

01006a58 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
 1006a58:	4801      	ldr	r0, [pc, #4]	; (1006a60 <multithreading_lock_release+0x8>)
 1006a5a:	f005 bd85 	b.w	100c568 <z_impl_k_mutex_unlock>
 1006a5e:	bf00      	nop
 1006a60:	21000244 	.word	0x21000244

01006a64 <mpsl_lib_init>:
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
 1006a64:	2332      	movs	r3, #50	; 0x32
{
 1006a66:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.source = m_config_clock_source_get();
 1006a68:	2501      	movs	r5, #1
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
 1006a6a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
 1006a6e:	2300      	movs	r3, #0
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
 1006a70:	211a      	movs	r1, #26
 1006a72:	4668      	mov	r0, sp
 1006a74:	4a0e      	ldr	r2, [pc, #56]	; (1006ab0 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
 1006a76:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
 1006a7a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
 1006a7e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
 1006a82:	f7fc ff1b 	bl	10038bc <mpsl_init>
	if (err) {
 1006a86:	4604      	mov	r4, r0
 1006a88:	b970      	cbnz	r0, 1006aa8 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1006a8a:	4601      	mov	r1, r0
 1006a8c:	462a      	mov	r2, r5
 1006a8e:	200c      	movs	r0, #12
 1006a90:	f7ff f82c 	bl	1005aec <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1006a94:	462a      	mov	r2, r5
 1006a96:	4621      	mov	r1, r4
 1006a98:	2011      	movs	r0, #17
 1006a9a:	f7ff f827 	bl	1005aec <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1006a9e:	462a      	mov	r2, r5
 1006aa0:	4621      	mov	r1, r4
 1006aa2:	2008      	movs	r0, #8
 1006aa4:	f7ff f822 	bl	1005aec <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
 1006aa8:	4620      	mov	r0, r4
 1006aaa:	b003      	add	sp, #12
 1006aac:	bd30      	pop	{r4, r5, pc}
 1006aae:	bf00      	nop
 1006ab0:	0100e6fd 	.word	0x0100e6fd

01006ab4 <mpsl_low_prio_irq_handler>:
	z_impl_k_sem_give(sem);
 1006ab4:	4801      	ldr	r0, [pc, #4]	; (1006abc <mpsl_low_prio_irq_handler+0x8>)
 1006ab6:	f005 bd99 	b.w	100c5ec <z_impl_k_sem_give>
 1006aba:	bf00      	nop
 1006abc:	21000258 	.word	0x21000258

01006ac0 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
 1006ac0:	b530      	push	{r4, r5, lr}
 1006ac2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 1006ac4:	2200      	movs	r2, #0
 1006ac6:	2300      	movs	r3, #0
 1006ac8:	2400      	movs	r4, #0
 1006aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 1006ace:	f06f 0307 	mvn.w	r3, #7
 1006ad2:	4d0c      	ldr	r5, [pc, #48]	; (1006b04 <mpsl_signal_thread_init+0x44>)
 1006ad4:	e9cd 3403 	strd	r3, r4, [sp, #12]
 1006ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1006adc:	4628      	mov	r0, r5
 1006ade:	e9cd 4401 	strd	r4, r4, [sp, #4]
 1006ae2:	4b09      	ldr	r3, [pc, #36]	; (1006b08 <mpsl_signal_thread_init+0x48>)
 1006ae4:	4909      	ldr	r1, [pc, #36]	; (1006b0c <mpsl_signal_thread_init+0x4c>)
 1006ae6:	9400      	str	r4, [sp, #0]
 1006ae8:	f005 fc3e 	bl	100c368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 1006aec:	4908      	ldr	r1, [pc, #32]	; (1006b10 <mpsl_signal_thread_init+0x50>)
 1006aee:	4628      	mov	r0, r5
 1006af0:	f008 fffe 	bl	100faf0 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
 1006af4:	4622      	mov	r2, r4
 1006af6:	2104      	movs	r1, #4
 1006af8:	201a      	movs	r0, #26
 1006afa:	f7fe fff7 	bl	1005aec <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
 1006afe:	4620      	mov	r0, r4
 1006b00:	b009      	add	sp, #36	; 0x24
 1006b02:	bd30      	pop	{r4, r5, pc}
 1006b04:	21000888 	.word	0x21000888
 1006b08:	01006b15 	.word	0x01006b15
 1006b0c:	21004fe8 	.word	0x21004fe8
 1006b10:	010105a5 	.word	0x010105a5

01006b14 <signal_thread>:
{
 1006b14:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
 1006b16:	4c09      	ldr	r4, [pc, #36]	; (1006b3c <signal_thread+0x28>)
 1006b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1006b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006b20:	4620      	mov	r0, r4
 1006b22:	f005 fd83 	bl	100c62c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
 1006b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 1006b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1006b2e:	f7ff ff8b 	bl	1006a48 <multithreading_lock_acquire>
		mpsl_low_priority_process();
 1006b32:	f7fd fdc8 	bl	10046c6 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
 1006b36:	f7ff ff8f 	bl	1006a58 <multithreading_lock_release>
	while (true) {
 1006b3a:	e7ed      	b.n	1006b18 <signal_thread+0x4>
 1006b3c:	21000258 	.word	0x21000258

01006b40 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 1006b40:	4b01      	ldr	r3, [pc, #4]	; (1006b48 <mpsl_hfclk_callback+0x8>)
 1006b42:	2000      	movs	r0, #0
 1006b44:	681b      	ldr	r3, [r3, #0]
 1006b46:	4718      	bx	r3
 1006b48:	21001e84 	.word	0x21001e84

01006b4c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
 1006b4c:	b120      	cbz	r0, 1006b58 <nrfx_clock_start+0xc>
 1006b4e:	2801      	cmp	r0, #1
 1006b50:	d106      	bne.n	1006b60 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
 1006b52:	4804      	ldr	r0, [pc, #16]	; (1006b64 <nrfx_clock_start+0x18>)
 1006b54:	f7fc b9a8 	b.w	1002ea8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 1006b58:	4b03      	ldr	r3, [pc, #12]	; (1006b68 <nrfx_clock_start+0x1c>)
 1006b5a:	2001      	movs	r0, #1
 1006b5c:	681b      	ldr	r3, [r3, #0]
 1006b5e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
 1006b60:	4770      	bx	lr
 1006b62:	bf00      	nop
 1006b64:	01006b41 	.word	0x01006b41
 1006b68:	21001e84 	.word	0x21001e84

01006b6c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
 1006b6c:	4b01      	ldr	r3, [pc, #4]	; (1006b74 <nrfx_clock_init+0x8>)
 1006b6e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
 1006b70:	4801      	ldr	r0, [pc, #4]	; (1006b78 <nrfx_clock_init+0xc>)
 1006b72:	4770      	bx	lr
 1006b74:	21001e84 	.word	0x21001e84
 1006b78:	0bad0000 	.word	0x0bad0000

01006b7c <temp_nrf5_mpsl_channel_get>:
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1006b7c:	290c      	cmp	r1, #12
{
 1006b7e:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
 1006b80:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1006b82:	d115      	bne.n	1006bb0 <temp_nrf5_mpsl_channel_get+0x34>
		return -ENOTSUP;
	}

	uval = data->sample;
 1006b84:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
 1006b86:	4c0c      	ldr	r4, [pc, #48]	; (1006bb8 <temp_nrf5_mpsl_channel_get+0x3c>)
	uval_abs = (uval < 0) ? (-uval) : uval;
 1006b88:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
 1006b8c:	2800      	cmp	r0, #0
	uval_abs = (uval < 0) ? (-uval) : uval;
 1006b8e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
		val->val2 = (int32_t)val2_abs;
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
 1006b92:	f04f 0000 	mov.w	r0, #0
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
 1006b96:	ea4f 0193 	mov.w	r1, r3, lsr #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
 1006b9a:	f003 0303 	and.w	r3, r3, #3
 1006b9e:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
 1006ba2:	bfbd      	ittte	lt
 1006ba4:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
 1006ba6:	425b      	neglt	r3, r3
		val->val1 = -(int32_t)val1_abs;
 1006ba8:	6011      	strlt	r1, [r2, #0]
		val->val1 = (int32_t)val1_abs;
 1006baa:	6011      	strge	r1, [r2, #0]
		val->val2 = (int32_t)val2_abs;
 1006bac:	6053      	str	r3, [r2, #4]
}
 1006bae:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 1006bb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1006bb4:	e7fb      	b.n	1006bae <temp_nrf5_mpsl_channel_get+0x32>
 1006bb6:	bf00      	nop
 1006bb8:	0003d090 	.word	0x0003d090

01006bbc <nrf_802154_random_init>:
	state = 1664525 * num + 1013904223;
	return num;
}

void nrf_802154_random_init(void)
{
 1006bbc:	b538      	push	{r3, r4, r5, lr}
 1006bbe:	4807      	ldr	r0, [pc, #28]	; (1006bdc <nrf_802154_random_init+0x20>)
 1006bc0:	f005 fac6 	bl	100c150 <z_impl_device_get_binding>
 1006bc4:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 1006bc6:	4d06      	ldr	r5, [pc, #24]	; (1006be0 <nrf_802154_random_init+0x24>)
 1006bc8:	68a3      	ldr	r3, [r4, #8]
 1006bca:	2204      	movs	r2, #4
 1006bcc:	681b      	ldr	r3, [r3, #0]
 1006bce:	4620      	mov	r0, r4
 1006bd0:	4903      	ldr	r1, [pc, #12]	; (1006be0 <nrf_802154_random_init+0x24>)
 1006bd2:	4798      	blx	r3
	__ASSERT_NO_MSG(dev != NULL);

	do {
		err = entropy_get_entropy(dev, (uint8_t *)&state, sizeof(state));
		__ASSERT_NO_MSG(err == 0);
	} while (state == 0);
 1006bd4:	682b      	ldr	r3, [r5, #0]
 1006bd6:	2b00      	cmp	r3, #0
 1006bd8:	d0f6      	beq.n	1006bc8 <nrf_802154_random_init+0xc>
}
 1006bda:	bd38      	pop	{r3, r4, r5, pc}
 1006bdc:	010105a1 	.word	0x010105a1
 1006be0:	21001e90 	.word	0x21001e90

01006be4 <nrf_802154_random_get>:
	uint32_t num = state;
 1006be4:	4a03      	ldr	r2, [pc, #12]	; (1006bf4 <nrf_802154_random_get+0x10>)
	state = 1664525 * num + 1013904223;
 1006be6:	4904      	ldr	r1, [pc, #16]	; (1006bf8 <nrf_802154_random_get+0x14>)
	uint32_t num = state;
 1006be8:	6810      	ldr	r0, [r2, #0]
	state = 1664525 * num + 1013904223;
 1006bea:	4b04      	ldr	r3, [pc, #16]	; (1006bfc <nrf_802154_random_get+0x18>)
 1006bec:	fb01 3300 	mla	r3, r1, r0, r3
 1006bf0:	6013      	str	r3, [r2, #0]
}

uint32_t nrf_802154_random_get(void)
{
	return next();
}
 1006bf2:	4770      	bx	lr
 1006bf4:	21001e90 	.word	0x21001e90
 1006bf8:	0019660d 	.word	0x0019660d
 1006bfc:	3c6ef35f 	.word	0x3c6ef35f

01006c00 <nrf_802154_clock_hfclk_start>:
	hfclk_is_running = true;
	nrf_802154_clock_hfclk_ready();
}

void nrf_802154_clock_hfclk_start(void)
{
 1006c00:	b508      	push	{r3, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 1006c02:	2000      	movs	r0, #0
 1006c04:	f7fe fce2 	bl	10055cc <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
 1006c08:	2300      	movs	r3, #0
 1006c0a:	4905      	ldr	r1, [pc, #20]	; (1006c20 <nrf_802154_clock_hfclk_start+0x20>)
 1006c0c:	60cb      	str	r3, [r1, #12]
 1006c0e:	4b05      	ldr	r3, [pc, #20]	; (1006c24 <nrf_802154_clock_hfclk_start+0x24>)
 1006c10:	604b      	str	r3, [r1, #4]
 1006c12:	2303      	movs	r3, #3
 1006c14:	608b      	str	r3, [r1, #8]

	sys_notify_init_callback(&hfclk_cli.notify, hfclk_on_callback);

	ret = onoff_request(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
}
 1006c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = onoff_request(mgr, &hfclk_cli);
 1006c1a:	f007 b864 	b.w	100dce6 <onoff_request>
 1006c1e:	bf00      	nop
 1006c20:	21001e94 	.word	0x21001e94
 1006c24:	01006c7d 	.word	0x01006c7d

01006c28 <nrf_802154_clock_hfclk_stop>:

void nrf_802154_clock_hfclk_stop(void)
{
 1006c28:	b510      	push	{r4, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 1006c2a:	2000      	movs	r0, #0
 1006c2c:	f7fe fcce 	bl	10055cc <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
 1006c30:	4906      	ldr	r1, [pc, #24]	; (1006c4c <nrf_802154_clock_hfclk_stop+0x24>)
 1006c32:	4604      	mov	r4, r0
 1006c34:	f007 f8c5 	bl	100ddc2 <onoff_cancel>

	if (rv == -EALREADY) {
 1006c38:	3078      	adds	r0, #120	; 0x78
 1006c3a:	d102      	bne.n	1006c42 <nrf_802154_clock_hfclk_stop+0x1a>
		rv = onoff_release(mgr);
 1006c3c:	4620      	mov	r0, r4
 1006c3e:	f007 f89b 	bl	100dd78 <onoff_release>

	__ASSERT_NO_MSG(mgr != NULL);

	ret = onoff_cancel_or_release(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
	hfclk_is_running = false;
 1006c42:	2200      	movs	r2, #0
 1006c44:	4b02      	ldr	r3, [pc, #8]	; (1006c50 <nrf_802154_clock_hfclk_stop+0x28>)
 1006c46:	701a      	strb	r2, [r3, #0]
}
 1006c48:	bd10      	pop	{r4, pc}
 1006c4a:	bf00      	nop
 1006c4c:	21001e94 	.word	0x21001e94
 1006c50:	21003e7b 	.word	0x21003e7b

01006c54 <nrf_802154_clock_lfclk_start>:
	lfclk_is_running = true;
	nrf_802154_clock_lfclk_ready();
}

void nrf_802154_clock_lfclk_start(void)
{
 1006c54:	b508      	push	{r3, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
 1006c56:	2001      	movs	r0, #1
 1006c58:	f7fe fcb8 	bl	10055cc <z_nrf_clock_control_get_onoff>
 1006c5c:	2300      	movs	r3, #0
 1006c5e:	4905      	ldr	r1, [pc, #20]	; (1006c74 <nrf_802154_clock_lfclk_start+0x20>)
 1006c60:	60cb      	str	r3, [r1, #12]
 1006c62:	4b05      	ldr	r3, [pc, #20]	; (1006c78 <nrf_802154_clock_lfclk_start+0x24>)
 1006c64:	604b      	str	r3, [r1, #4]
 1006c66:	2303      	movs	r3, #3
 1006c68:	608b      	str	r3, [r1, #8]

	sys_notify_init_callback(&lfclk_cli.notify, lfclk_on_callback);

	ret = onoff_request(mgr, &lfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
}
 1006c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = onoff_request(mgr, &lfclk_cli);
 1006c6e:	f007 b83a 	b.w	100dce6 <onoff_request>
 1006c72:	bf00      	nop
 1006c74:	21001ea4 	.word	0x21001ea4
 1006c78:	01006c91 	.word	0x01006c91

01006c7c <hfclk_on_callback>:
	hfclk_is_running = true;
 1006c7c:	2201      	movs	r2, #1
{
 1006c7e:	b508      	push	{r3, lr}
	hfclk_is_running = true;
 1006c80:	4b02      	ldr	r3, [pc, #8]	; (1006c8c <hfclk_on_callback+0x10>)
 1006c82:	701a      	strb	r2, [r3, #0]
	nrf_802154_clock_hfclk_ready();
 1006c84:	f006 fd7a 	bl	100d77c <nrf_802154_clock_hfclk_ready>
}
 1006c88:	bd08      	pop	{r3, pc}
 1006c8a:	bf00      	nop
 1006c8c:	21003e7b 	.word	0x21003e7b

01006c90 <lfclk_on_callback>:
	lfclk_is_running = true;
 1006c90:	2201      	movs	r2, #1
{
 1006c92:	b508      	push	{r3, lr}
	lfclk_is_running = true;
 1006c94:	4b02      	ldr	r3, [pc, #8]	; (1006ca0 <lfclk_on_callback+0x10>)
 1006c96:	701a      	strb	r2, [r3, #0]
	nrf_802154_clock_lfclk_ready();
 1006c98:	f000 f888 	bl	1006dac <nrf_802154_clock_lfclk_ready>
}
 1006c9c:	bd08      	pop	{r3, pc}
 1006c9e:	bf00      	nop
 1006ca0:	21003e7c 	.word	0x21003e7c

01006ca4 <nrf_802154_irq_set_pending>:
}

void nrf_802154_irq_set_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for setting pending IRQ */
	NVIC_SetPendingIRQ(irqn);
 1006ca4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 1006ca6:	2b00      	cmp	r3, #0
 1006ca8:	db09      	blt.n	1006cbe <nrf_802154_irq_set_pending+0x1a>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1006caa:	2201      	movs	r2, #1
 1006cac:	f000 001f 	and.w	r0, r0, #31
 1006cb0:	fa02 f000 	lsl.w	r0, r2, r0
 1006cb4:	095b      	lsrs	r3, r3, #5
 1006cb6:	4a02      	ldr	r2, [pc, #8]	; (1006cc0 <nrf_802154_irq_set_pending+0x1c>)
 1006cb8:	3340      	adds	r3, #64	; 0x40
 1006cba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 1006cbe:	4770      	bx	lr
 1006cc0:	e000e100 	.word	0xe000e100

01006cc4 <nrf_802154_irq_clear_pending>:

void nrf_802154_irq_clear_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for clearing pending IRQ */
	NVIC_ClearPendingIRQ(irqn);
 1006cc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 1006cc6:	2b00      	cmp	r3, #0
 1006cc8:	db09      	blt.n	1006cde <nrf_802154_irq_clear_pending+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1006cca:	2201      	movs	r2, #1
 1006ccc:	f000 001f 	and.w	r0, r0, #31
 1006cd0:	fa02 f000 	lsl.w	r0, r2, r0
 1006cd4:	095b      	lsrs	r3, r3, #5
 1006cd6:	4a02      	ldr	r2, [pc, #8]	; (1006ce0 <nrf_802154_irq_clear_pending+0x1c>)
 1006cd8:	3360      	adds	r3, #96	; 0x60
 1006cda:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 1006cde:	4770      	bx	lr
 1006ce0:	e000e100 	.word	0xe000e100

01006ce4 <nrf_802154_irq_priority_get>:
	return irq_is_enabled(irqn);
}

uint32_t nrf_802154_irq_priority_get(uint32_t irqn)
{
	return NVIC_GetPriority(irqn);
 1006ce4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 1006ce6:	2b00      	cmp	r3, #0
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 1006ce8:	bfad      	iteet	ge
 1006cea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 1006cee:	4b05      	ldrlt	r3, [pc, #20]	; (1006d04 <nrf_802154_irq_priority_get+0x20>)
 1006cf0:	f000 000f 	andlt.w	r0, r0, #15
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 1006cf4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
 1006cf8:	bfac      	ite	ge
 1006cfa:	f893 0300 	ldrbge.w	r0, [r3, #768]	; 0x300
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 1006cfe:	5c18      	ldrblt	r0, [r3, r0]
 1006d00:	0940      	lsrs	r0, r0, #5
}
 1006d02:	4770      	bx	lr
 1006d04:	e000ed14 	.word	0xe000ed14

01006d08 <temperature_update_init>:

	k_work_reschedule(&temperature.work, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
}

static int temperature_update_init(const struct device *dev)
{
 1006d08:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	__ASSERT_NO_MSG(device_is_ready(temperature.dev));

	k_work_init_delayable(&temperature.work, work_handler);
 1006d0a:	4c06      	ldr	r4, [pc, #24]	; (1006d24 <temperature_update_init+0x1c>)
 1006d0c:	4906      	ldr	r1, [pc, #24]	; (1006d28 <temperature_update_init+0x20>)
 1006d0e:	4620      	mov	r0, r4
 1006d10:	f008 ff7f 	bl	100fc12 <k_work_init_delayable>
	k_work_schedule(&temperature.work, K_NO_WAIT);
 1006d14:	2200      	movs	r2, #0
 1006d16:	2300      	movs	r3, #0
 1006d18:	4620      	mov	r0, r4
 1006d1a:	f005 fdf7 	bl	100c90c <k_work_schedule>

	return 0;
}
 1006d1e:	2000      	movs	r0, #0
 1006d20:	bd10      	pop	{r4, pc}
 1006d22:	bf00      	nop
 1006d24:	21000018 	.word	0x21000018
 1006d28:	01006d2d 	.word	0x01006d2d

01006d2c <work_handler>:
{
 1006d2c:	b513      	push	{r0, r1, r4, lr}
	err = sensor_sample_fetch(temperature.dev);
 1006d2e:	4c0f      	ldr	r4, [pc, #60]	; (1006d6c <work_handler+0x40>)
 1006d30:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 1006d32:	6883      	ldr	r3, [r0, #8]
 1006d34:	2138      	movs	r1, #56	; 0x38
 1006d36:	68db      	ldr	r3, [r3, #12]
 1006d38:	4798      	blx	r3
	if (!err) {
 1006d3a:	b970      	cbnz	r0, 1006d5a <work_handler+0x2e>
		err = sensor_channel_get(temperature.dev, SENSOR_CHAN_DIE_TEMP, &val);
 1006d3c:	6820      	ldr	r0, [r4, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 1006d3e:	6883      	ldr	r3, [r0, #8]
 1006d40:	466a      	mov	r2, sp
 1006d42:	210c      	movs	r1, #12
 1006d44:	691b      	ldr	r3, [r3, #16]
 1006d46:	4798      	blx	r3
	if (!err && (temperature.value != val.val1)) {
 1006d48:	b938      	cbnz	r0, 1006d5a <work_handler+0x2e>
 1006d4a:	9b00      	ldr	r3, [sp, #0]
 1006d4c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 1006d50:	429a      	cmp	r2, r3
 1006d52:	d002      	beq.n	1006d5a <work_handler+0x2e>
		temperature.value = val.val1;
 1006d54:	7123      	strb	r3, [r4, #4]
		nrf_802154_temperature_changed();
 1006d56:	f007 fd7c 	bl	100e852 <nrf_802154_temperature_changed>
	k_work_reschedule(&temperature.work, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
 1006d5a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 1006d5e:	2300      	movs	r3, #0
 1006d60:	4803      	ldr	r0, [pc, #12]	; (1006d70 <work_handler+0x44>)
 1006d62:	f005 fe07 	bl	100c974 <k_work_reschedule>
}
 1006d66:	b002      	add	sp, #8
 1006d68:	bd10      	pop	{r4, pc}
 1006d6a:	bf00      	nop
 1006d6c:	21000010 	.word	0x21000010
 1006d70:	21000018 	.word	0x21000018

01006d74 <nrf_802154_temperature_get>:
}

int8_t nrf_802154_temperature_get(void)
{
	return temperature.value;
}
 1006d74:	4b01      	ldr	r3, [pc, #4]	; (1006d7c <nrf_802154_temperature_get+0x8>)
 1006d76:	f993 0004 	ldrsb.w	r0, [r3, #4]
 1006d7a:	4770      	bx	lr
 1006d7c:	21000010 	.word	0x21000010

01006d80 <rtc_irq_handler>:
static bool m_is_running;
static int32_t m_rtc_channel;
static bool m_in_critical_section;

void rtc_irq_handler(int32_t id, uint32_t cc_value, void *user_data)
{
 1006d80:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1006d82:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1006d86:	b672      	cpsid	i

	assert(id == m_rtc_channel);

	nrf_802154_sl_mcu_critical_enter(state);

	m_is_running = false;
 1006d88:	2200      	movs	r2, #0
 1006d8a:	4b06      	ldr	r3, [pc, #24]	; (1006da4 <rtc_irq_handler+0x24>)
 1006d8c:	701a      	strb	r2, [r3, #0]
	(void)z_nrf_rtc_timer_compare_int_lock(m_rtc_channel);
 1006d8e:	4b06      	ldr	r3, [pc, #24]	; (1006da8 <rtc_irq_handler+0x28>)
 1006d90:	6818      	ldr	r0, [r3, #0]
 1006d92:	f7fe fd35 	bl	1005800 <z_nrf_rtc_timer_compare_int_lock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1006d96:	f384 8810 	msr	PRIMASK, r4

	nrf_802154_sl_mcu_critical_exit(state);

	nrf_802154_lp_timer_fired();
}
 1006d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_802154_lp_timer_fired();
 1006d9e:	f006 be85 	b.w	100daac <nrf_802154_lp_timer_fired>
 1006da2:	bf00      	nop
 1006da4:	21003e7f 	.word	0x21003e7f
 1006da8:	21001eb4 	.word	0x21001eb4

01006dac <nrf_802154_clock_lfclk_ready>:
	nrf_802154_sl_mcu_critical_exit(state);
}

void nrf_802154_clock_lfclk_ready(void)
{
	m_clock_ready = true;
 1006dac:	2201      	movs	r2, #1
 1006dae:	4b01      	ldr	r3, [pc, #4]	; (1006db4 <nrf_802154_clock_lfclk_ready+0x8>)
 1006db0:	701a      	strb	r2, [r3, #0]
}
 1006db2:	4770      	bx	lr
 1006db4:	21003e7d 	.word	0x21003e7d

01006db8 <nrf_802154_lp_timer_init>:

void nrf_802154_lp_timer_init(void)
{
 1006db8:	b508      	push	{r3, lr}
	m_in_critical_section = false;
 1006dba:	2300      	movs	r3, #0
 1006dbc:	4a0a      	ldr	r2, [pc, #40]	; (1006de8 <nrf_802154_lp_timer_init+0x30>)
 1006dbe:	7013      	strb	r3, [r2, #0]
	m_is_running = false;
 1006dc0:	4a0a      	ldr	r2, [pc, #40]	; (1006dec <nrf_802154_lp_timer_init+0x34>)
 1006dc2:	7013      	strb	r3, [r2, #0]

	/* Setup low frequency clock. */
	nrf_802154_clock_lfclk_start();
 1006dc4:	f7ff ff46 	bl	1006c54 <nrf_802154_clock_lfclk_start>

	while (!m_clock_ready) {
 1006dc8:	4a09      	ldr	r2, [pc, #36]	; (1006df0 <nrf_802154_lp_timer_init+0x38>)
 1006dca:	7813      	ldrb	r3, [r2, #0]
 1006dcc:	2b00      	cmp	r3, #0
 1006dce:	d0fc      	beq.n	1006dca <nrf_802154_lp_timer_init+0x12>
		/* Intentionally empty */
	}

	m_rtc_channel = z_nrf_rtc_timer_chan_alloc();
 1006dd0:	f7fe fd68 	bl	10058a4 <z_nrf_rtc_timer_chan_alloc>
 1006dd4:	4a07      	ldr	r2, [pc, #28]	; (1006df4 <nrf_802154_lp_timer_init+0x3c>)
	if (m_rtc_channel < 0) {
 1006dd6:	2800      	cmp	r0, #0
	m_rtc_channel = z_nrf_rtc_timer_chan_alloc();
 1006dd8:	6010      	str	r0, [r2, #0]
	if (m_rtc_channel < 0) {
 1006dda:	db03      	blt.n	1006de4 <nrf_802154_lp_timer_init+0x2c>
		assert(false);
		return;
	}

	(void)z_nrf_rtc_timer_compare_int_lock(m_rtc_channel);
}
 1006ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)z_nrf_rtc_timer_compare_int_lock(m_rtc_channel);
 1006de0:	f7fe bd0e 	b.w	1005800 <z_nrf_rtc_timer_compare_int_lock>
}
 1006de4:	bd08      	pop	{r3, pc}
 1006de6:	bf00      	nop
 1006de8:	21003e7e 	.word	0x21003e7e
 1006dec:	21003e7f 	.word	0x21003e7f
 1006df0:	21003e7d 	.word	0x21003e7d
 1006df4:	21001eb4 	.word	0x21001eb4

01006df8 <nrf_802154_lp_timer_critical_section_enter>:

	nrf_802154_clock_lfclk_stop();
}

void nrf_802154_lp_timer_critical_section_enter(void)
{
 1006df8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1006dfa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1006dfe:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	if (!m_in_critical_section) {
 1006e00:	4c05      	ldr	r4, [pc, #20]	; (1006e18 <nrf_802154_lp_timer_critical_section_enter+0x20>)
 1006e02:	7823      	ldrb	r3, [r4, #0]
 1006e04:	b92b      	cbnz	r3, 1006e12 <nrf_802154_lp_timer_critical_section_enter+0x1a>
		(void)z_nrf_rtc_timer_compare_int_lock(m_rtc_channel);
 1006e06:	4b05      	ldr	r3, [pc, #20]	; (1006e1c <nrf_802154_lp_timer_critical_section_enter+0x24>)
 1006e08:	6818      	ldr	r0, [r3, #0]
 1006e0a:	f7fe fcf9 	bl	1005800 <z_nrf_rtc_timer_compare_int_lock>
		m_in_critical_section = true;
 1006e0e:	2301      	movs	r3, #1
 1006e10:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1006e12:	f385 8810 	msr	PRIMASK, r5
	}

	nrf_802154_sl_mcu_critical_exit(state);
}
 1006e16:	bd38      	pop	{r3, r4, r5, pc}
 1006e18:	21003e7e 	.word	0x21003e7e
 1006e1c:	21001eb4 	.word	0x21001eb4

01006e20 <nrf_802154_lp_timer_critical_section_exit>:

void nrf_802154_lp_timer_critical_section_exit(void)
{
 1006e20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1006e22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1006e26:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	m_in_critical_section = false;
 1006e28:	2200      	movs	r2, #0
 1006e2a:	4b05      	ldr	r3, [pc, #20]	; (1006e40 <nrf_802154_lp_timer_critical_section_exit+0x20>)
 1006e2c:	701a      	strb	r2, [r3, #0]

	z_nrf_rtc_timer_compare_int_unlock(m_rtc_channel, m_is_running);
 1006e2e:	4b05      	ldr	r3, [pc, #20]	; (1006e44 <nrf_802154_lp_timer_critical_section_exit+0x24>)
 1006e30:	7819      	ldrb	r1, [r3, #0]
 1006e32:	4b05      	ldr	r3, [pc, #20]	; (1006e48 <nrf_802154_lp_timer_critical_section_exit+0x28>)
 1006e34:	6818      	ldr	r0, [r3, #0]
 1006e36:	f7fe fd01 	bl	100583c <z_nrf_rtc_timer_compare_int_unlock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1006e3a:	f384 8810 	msr	PRIMASK, r4

	nrf_802154_sl_mcu_critical_exit(state);
}
 1006e3e:	bd10      	pop	{r4, pc}
 1006e40:	21003e7e 	.word	0x21003e7e
 1006e44:	21003e7f 	.word	0x21003e7f
 1006e48:	21001eb4 	.word	0x21001eb4

01006e4c <nrf_802154_lp_timer_start>:
{
	return NRF_802154_SL_US_PER_TICK;
}

void nrf_802154_lp_timer_start(uint32_t t0, uint32_t dt)
{
 1006e4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t cc_value = NRF_802154_SL_US_TO_RTC_TICKS(t0 + dt);
 1006e4e:	2500      	movs	r5, #0
 1006e50:	4408      	add	r0, r1
 1006e52:	4629      	mov	r1, r5
 1006e54:	f006 fcf6 	bl	100d844 <NRF_802154_SL_US_TO_RTC_TICKS>
	z_nrf_rtc_timer_compare_set(m_rtc_channel, cc_value, rtc_irq_handler, NULL);
 1006e58:	4c0a      	ldr	r4, [pc, #40]	; (1006e84 <nrf_802154_lp_timer_start+0x38>)
	uint32_t cc_value = NRF_802154_SL_US_TO_RTC_TICKS(t0 + dt);
 1006e5a:	4601      	mov	r1, r0
	z_nrf_rtc_timer_compare_set(m_rtc_channel, cc_value, rtc_irq_handler, NULL);
 1006e5c:	462b      	mov	r3, r5
 1006e5e:	4a0a      	ldr	r2, [pc, #40]	; (1006e88 <nrf_802154_lp_timer_start+0x3c>)
 1006e60:	6820      	ldr	r0, [r4, #0]
 1006e62:	f7fe fd03 	bl	100586c <z_nrf_rtc_timer_compare_set>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1006e66:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1006e6a:	b672      	cpsid	i
	m_is_running = true;
 1006e6c:	2201      	movs	r2, #1
 1006e6e:	4b07      	ldr	r3, [pc, #28]	; (1006e8c <nrf_802154_lp_timer_start+0x40>)
	z_nrf_rtc_timer_compare_int_unlock(m_rtc_channel, (m_in_critical_section == false));
 1006e70:	6820      	ldr	r0, [r4, #0]
	m_is_running = true;
 1006e72:	701a      	strb	r2, [r3, #0]
	z_nrf_rtc_timer_compare_int_unlock(m_rtc_channel, (m_in_critical_section == false));
 1006e74:	4b06      	ldr	r3, [pc, #24]	; (1006e90 <nrf_802154_lp_timer_start+0x44>)
 1006e76:	7819      	ldrb	r1, [r3, #0]
 1006e78:	4051      	eors	r1, r2
 1006e7a:	f7fe fcdf 	bl	100583c <z_nrf_rtc_timer_compare_int_unlock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1006e7e:	f385 8810 	msr	PRIMASK, r5
	timer_start_at(m_rtc_channel, t0, dt);
}
 1006e82:	bd38      	pop	{r3, r4, r5, pc}
 1006e84:	21001eb4 	.word	0x21001eb4
 1006e88:	01006d81 	.word	0x01006d81
 1006e8c:	21003e7f 	.word	0x21003e7f
 1006e90:	21003e7e 	.word	0x21003e7e

01006e94 <nrf_802154_lp_timer_stop>:
{
	return m_is_running;
}

void nrf_802154_lp_timer_stop(void)
{
 1006e94:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1006e96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1006e9a:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	m_is_running = false;
 1006e9c:	2200      	movs	r2, #0
 1006e9e:	4b04      	ldr	r3, [pc, #16]	; (1006eb0 <nrf_802154_lp_timer_stop+0x1c>)
 1006ea0:	701a      	strb	r2, [r3, #0]
	(void)z_nrf_rtc_timer_compare_int_lock(m_rtc_channel);
 1006ea2:	4b04      	ldr	r3, [pc, #16]	; (1006eb4 <nrf_802154_lp_timer_stop+0x20>)
 1006ea4:	6818      	ldr	r0, [r3, #0]
 1006ea6:	f7fe fcab 	bl	1005800 <z_nrf_rtc_timer_compare_int_lock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1006eaa:	f384 8810 	msr	PRIMASK, r4

	nrf_802154_sl_mcu_critical_exit(state);
}
 1006eae:	bd10      	pop	{r4, pc}
 1006eb0:	21003e7f 	.word	0x21003e7f
 1006eb4:	21001eb4 	.word	0x21001eb4

01006eb8 <register_endpoint>:
	return NRF_802154_SERIALIZATION_ERROR_OK;
}

/* Make sure we register endpoint before RPMsg Service is initialized. */
static int register_endpoint(const struct device *arg)
{
 1006eb8:	b508      	push	{r3, lr}
	int status;

	status = rpmsg_service_register_endpoint("nrf_spinel", endpoint_cb);
 1006eba:	4905      	ldr	r1, [pc, #20]	; (1006ed0 <register_endpoint+0x18>)
 1006ebc:	4805      	ldr	r0, [pc, #20]	; (1006ed4 <register_endpoint+0x1c>)
 1006ebe:	f7fe fa65 	bl	100538c <rpmsg_service_register_endpoint>

	if (status < 0) {
 1006ec2:	2800      	cmp	r0, #0
		LOG_ERR("Registering endpoint failed with %d", status);
		return status;
	}

	endpoint_id = status;
 1006ec4:	bfa2      	ittt	ge
 1006ec6:	4b04      	ldrge	r3, [pc, #16]	; (1006ed8 <register_endpoint+0x20>)
 1006ec8:	6018      	strge	r0, [r3, #0]
	return 0;
 1006eca:	2000      	movge	r0, #0
}
 1006ecc:	bd08      	pop	{r3, pc}
 1006ece:	bf00      	nop
 1006ed0:	0100e7ff 	.word	0x0100e7ff
 1006ed4:	010105b8 	.word	0x010105b8
 1006ed8:	21001eb8 	.word	0x21001eb8

01006edc <spinel_packet_send_thread_fn>:
	k_sem_give(&send_sem);
	return (nrf_802154_ser_err_t)len;
}

static void spinel_packet_send_thread_fn(void *arg1, void *arg2, void *arg3)
{
 1006edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1006ede:	4e12      	ldr	r6, [pc, #72]	; (1006f28 <spinel_packet_send_thread_fn+0x4c>)
	LOG_DBG("Spinel backend send thread started");
	while (true) {
		k_sem_take(&send_sem, K_FOREVER);
		struct ringbuffer *buf = &ring_buffer[rd_idx];
 1006ee0:	4c12      	ldr	r4, [pc, #72]	; (1006f2c <spinel_packet_send_thread_fn+0x50>)
		uint32_t expected_ret = buf->len;
 1006ee2:	4d13      	ldr	r5, [pc, #76]	; (1006f30 <spinel_packet_send_thread_fn+0x54>)
 1006ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1006ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006eec:	4630      	mov	r0, r6
 1006eee:	f005 fb9d 	bl	100c62c <z_impl_k_sem_take>
 1006ef2:	f44f 7382 	mov.w	r3, #260	; 0x104
		struct ringbuffer *buf = &ring_buffer[rd_idx];
 1006ef6:	7821      	ldrb	r1, [r4, #0]
		uint32_t expected_ret = buf->len;
 1006ef8:	4359      	muls	r1, r3

		LOG_DBG("Sending %u bytes from send thread", buf->len);
		int ret = rpmsg_service_send(endpoint_id, buf->data, buf->len);
 1006efa:	4b0e      	ldr	r3, [pc, #56]	; (1006f34 <spinel_packet_send_thread_fn+0x58>)
		uint32_t expected_ret = buf->len;
 1006efc:	586f      	ldr	r7, [r5, r1]
		int ret = rpmsg_service_send(endpoint_id, buf->data, buf->len);
 1006efe:	3104      	adds	r1, #4
 1006f00:	6818      	ldr	r0, [r3, #0]
 1006f02:	463a      	mov	r2, r7
 1006f04:	4429      	add	r1, r5
 1006f06:	f7fe fa5d 	bl	10053c4 <rpmsg_service_send>
	return (i + 1) % RING_BUFFER_LEN;
 1006f0a:	7823      	ldrb	r3, [r4, #0]

		rd_idx = get_rb_idx_plus_1(rd_idx);

		if (ret != expected_ret) {
 1006f0c:	4287      	cmp	r7, r0
	return (i + 1) % RING_BUFFER_LEN;
 1006f0e:	f103 0301 	add.w	r3, r3, #1
 1006f12:	f003 030f 	and.w	r3, r3, #15
 1006f16:	7023      	strb	r3, [r4, #0]
		if (ret != expected_ret) {
 1006f18:	d0e4      	beq.n	1006ee4 <spinel_packet_send_thread_fn+0x8>
			nrf_802154_ser_err_data_t err = {
 1006f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				.reason = NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE,
			};

			nrf_802154_serialization_error(&err);
 1006f1e:	a801      	add	r0, sp, #4
			nrf_802154_ser_err_data_t err = {
 1006f20:	9301      	str	r3, [sp, #4]
			nrf_802154_serialization_error(&err);
 1006f22:	f006 fe36 	bl	100db92 <nrf_802154_serialization_error>
	while (true) {
 1006f26:	e7dd      	b.n	1006ee4 <spinel_packet_send_thread_fn+0x8>
 1006f28:	21000268 	.word	0x21000268
 1006f2c:	21003e80 	.word	0x21003e80
 1006f30:	21001ebc 	.word	0x21001ebc
 1006f34:	21001eb8 	.word	0x21001eb8

01006f38 <nrf_802154_spinel_encoded_packet_send>:
K_THREAD_DEFINE(spinel_packet_send_thread, SEND_THREAD_STACK_SIZE,
		spinel_packet_send_thread_fn, NULL, NULL, NULL, K_PRIO_COOP(0), 0, 0);

nrf_802154_ser_err_t nrf_802154_spinel_encoded_packet_send(const void *p_data,
							   size_t      data_len)
{
 1006f38:	b538      	push	{r3, r4, r5, lr}
 1006f3a:	4605      	mov	r5, r0
 1006f3c:	460c      	mov	r4, r1
	if (k_is_in_isr()) {
 1006f3e:	f008 fdd1 	bl	100fae4 <k_is_in_isr>
 1006f42:	b1c8      	cbz	r0, 1006f78 <nrf_802154_spinel_encoded_packet_send+0x40>
	if (get_rb_idx_plus_1(wr_idx) == rd_idx) {
 1006f44:	4912      	ldr	r1, [pc, #72]	; (1006f90 <nrf_802154_spinel_encoded_packet_send+0x58>)
 1006f46:	4813      	ldr	r0, [pc, #76]	; (1006f94 <nrf_802154_spinel_encoded_packet_send+0x5c>)
 1006f48:	780b      	ldrb	r3, [r1, #0]
 1006f4a:	7800      	ldrb	r0, [r0, #0]
	return (i + 1) % RING_BUFFER_LEN;
 1006f4c:	1c5a      	adds	r2, r3, #1
 1006f4e:	f002 020f 	and.w	r2, r2, #15
	if (get_rb_idx_plus_1(wr_idx) == rd_idx) {
 1006f52:	4290      	cmp	r0, r2
 1006f54:	d019      	beq.n	1006f8a <nrf_802154_spinel_encoded_packet_send+0x52>
	wr_idx = get_rb_idx_plus_1(wr_idx);
 1006f56:	700a      	strb	r2, [r1, #0]
	buf->len = len;
 1006f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 1006f5c:	4353      	muls	r3, r2
 1006f5e:	480e      	ldr	r0, [pc, #56]	; (1006f98 <nrf_802154_spinel_encoded_packet_send+0x60>)
	memcpy(buf->data, data, len);
 1006f60:	4622      	mov	r2, r4
	buf->len = len;
 1006f62:	50c4      	str	r4, [r0, r3]
	memcpy(buf->data, data, len);
 1006f64:	3304      	adds	r3, #4
 1006f66:	4629      	mov	r1, r5
 1006f68:	4418      	add	r0, r3
 1006f6a:	f007 fb14 	bl	100e596 <memcpy>
	z_impl_k_sem_give(sem);
 1006f6e:	480b      	ldr	r0, [pc, #44]	; (1006f9c <nrf_802154_spinel_encoded_packet_send+0x64>)
 1006f70:	f005 fb3c 	bl	100c5ec <z_impl_k_sem_give>
	return (nrf_802154_ser_err_t)len;
 1006f74:	4620      	mov	r0, r4
	LOG_DBG("Sending %u bytes directly", data_len);
	int ret = rpmsg_service_send(endpoint_id, p_data, data_len);

	return ((ret < 0) ? NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE
			  : (nrf_802154_ser_err_t) ret);
}
 1006f76:	bd38      	pop	{r3, r4, r5, pc}
	int ret = rpmsg_service_send(endpoint_id, p_data, data_len);
 1006f78:	4b09      	ldr	r3, [pc, #36]	; (1006fa0 <nrf_802154_spinel_encoded_packet_send+0x68>)
 1006f7a:	4622      	mov	r2, r4
 1006f7c:	4629      	mov	r1, r5
 1006f7e:	6818      	ldr	r0, [r3, #0]
 1006f80:	f7fe fa20 	bl	10053c4 <rpmsg_service_send>
			  : (nrf_802154_ser_err_t) ret);
 1006f84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 1006f88:	e7f5      	b.n	1006f76 <nrf_802154_spinel_encoded_packet_send+0x3e>
		return NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE;
 1006f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1006f8e:	e7f2      	b.n	1006f76 <nrf_802154_spinel_encoded_packet_send+0x3e>
 1006f90:	21003e81 	.word	0x21003e81
 1006f94:	21003e80 	.word	0x21003e80
 1006f98:	21001ebc 	.word	0x21001ebc
 1006f9c:	21000268 	.word	0x21000268
 1006fa0:	21001eb8 	.word	0x21001eb8

01006fa4 <nrf_802154_spinel_response_notifier_init>:

static spinel_prop_key_t awaited_property = AWAITED_PROPERTY_NONE;

void nrf_802154_spinel_response_notifier_init(void)
{
	notify_buff.free = true;
 1006fa4:	2201      	movs	r2, #1
 1006fa6:	4b03      	ldr	r3, [pc, #12]	; (1006fb4 <nrf_802154_spinel_response_notifier_init+0x10>)
 1006fa8:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
	return z_impl_k_mutex_init(mutex);
 1006fac:	4802      	ldr	r0, [pc, #8]	; (1006fb8 <nrf_802154_spinel_response_notifier_init+0x14>)
 1006fae:	f008 bdb8 	b.w	100fb22 <z_impl_k_mutex_init>
 1006fb2:	bf00      	nop
 1006fb4:	21002f10 	.word	0x21002f10
 1006fb8:	21002efc 	.word	0x21002efc

01006fbc <nrf_802154_init>:

    return end_timestamp - (frame_symbols * PHY_US_PER_SYMBOL);
}

void nrf_802154_init(void)
{
 1006fbc:	b513      	push	{r0, r1, r4, lr}
    nrf_802154_sl_crit_sect_interface_t crit_sect_int =
 1006fbe:	466c      	mov	r4, sp
 1006fc0:	4b15      	ldr	r3, [pc, #84]	; (1007018 <nrf_802154_init+0x5c>)
 1006fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 1006fc6:	e884 0003 	stmia.w	r4, {r0, r1}
    {
        .enter = nrf_802154_critical_section_enter,
        .exit  = nrf_802154_critical_section_exit
    };

    nrf_802154_ack_data_init();
 1006fca:	f002 ffc7 	bl	1009f5c <nrf_802154_ack_data_init>
    nrf_802154_core_init();
 1006fce:	f000 fe95 	bl	1007cfc <nrf_802154_core_init>
    nrf_802154_clock_init();
 1006fd2:	f007 fbe7 	bl	100e7a4 <nrf_802154_clock_init>
    nrf_802154_critical_section_init();
 1006fd6:	f001 f8a3 	bl	1008120 <nrf_802154_critical_section_init>
    nrf_802154_debug_init();
 1006fda:	f007 fd33 	bl	100ea44 <nrf_802154_debug_init>
    nrf_802154_notification_init();
 1006fde:	f003 fbc1 	bl	100a764 <nrf_802154_notification_init>
    nrf_802154_lp_timer_init();
 1006fe2:	f7ff fee9 	bl	1006db8 <nrf_802154_lp_timer_init>
    nrf_802154_pib_init();
 1006fe6:	f001 f92f 	bl	1008248 <nrf_802154_pib_init>
    nrf_802154_security_pib_init();
 1006fea:	f002 fea1 	bl	1009d30 <nrf_802154_security_pib_init>
    nrf_802154_rsch_prio_drop_init();
 1006fee:	f003 fc1b 	bl	100a828 <nrf_802154_rsch_prio_drop_init>
    nrf_802154_random_init();
 1006ff2:	f7ff fde3 	bl	1006bbc <nrf_802154_random_init>
    nrf_802154_request_init();
 1006ff6:	f003 fc5d 	bl	100a8b4 <nrf_802154_request_init>
    nrf_802154_rsch_crit_sect_init(&crit_sect_int);
 1006ffa:	4620      	mov	r0, r4
 1006ffc:	f006 fbd6 	bl	100d7ac <nrf_802154_rsch_crit_sect_init>
    nrf_802154_rsch_init();
 1007000:	f006 fa58 	bl	100d4b4 <nrf_802154_rsch_init>
    nrf_802154_rx_buffer_init();
 1007004:	f001 fa40 	bl	1008488 <nrf_802154_rx_buffer_init>
    nrf_802154_temperature_init();
 1007008:	f007 fbd9 	bl	100e7be <nrf_802154_temperature_init>
    nrf_802154_timer_coord_init();
 100700c:	f009 f811 	bl	1010032 <nrf_802154_timer_coord_init>
    nrf_802154_timer_sched_init();
 1007010:	f006 fce6 	bl	100d9e0 <nrf_802154_timer_sched_init>
#if NRF_802154_DELAYED_TRX_ENABLED
    nrf_802154_delayed_trx_init();
#endif
}
 1007014:	b002      	add	sp, #8
 1007016:	bd10      	pop	{r4, pc}
 1007018:	01010248 	.word	0x01010248

0100701c <nrf_802154_transmit_raw>:
}

#if NRF_802154_USE_RAW_API
bool nrf_802154_transmit_raw(uint8_t                              * p_data,
                             const nrf_802154_transmit_metadata_t * p_metadata)
{
 100701c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        {
            .frame_props = NRF_802154_TRANSMITTED_FRAME_PROPS_DEFAULT_INIT,
            .cca         = true
        };

        p_metadata = &metadata_default;
 100701e:	4b0e      	ldr	r3, [pc, #56]	; (1007058 <nrf_802154_transmit_raw+0x3c>)
{
 1007020:	4602      	mov	r2, r0
        p_metadata = &metadata_default;
 1007022:	2900      	cmp	r1, #0
 1007024:	bf18      	it	ne
 1007026:	460b      	movne	r3, r1
    }

    nrf_802154_transmit_params_t params =
 1007028:	8819      	ldrh	r1, [r3, #0]
 100702a:	789b      	ldrb	r3, [r3, #2]
 100702c:	f8ad 100c 	strh.w	r1, [sp, #12]
 1007030:	f88d 300e 	strb.w	r3, [sp, #14]
 1007034:	2300      	movs	r3, #0
 1007036:	f89d 000d 	ldrb.w	r0, [sp, #13]
 100703a:	f88d 300f 	strb.w	r3, [sp, #15]
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 100703e:	b910      	cbnz	r0, 1007046 <nrf_802154_transmit_raw+0x2a>
        .cca         = p_metadata->cca,
        .immediate   = false
    };

    result = are_frame_properties_valid(&params.frame_props);
    if (result)
 1007040:	f89d 300c 	ldrb.w	r3, [sp, #12]
 1007044:	b92b      	cbnz	r3, 1007052 <nrf_802154_transmit_raw+0x36>
    {
        result = nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 1007046:	2100      	movs	r1, #0
 1007048:	ab03      	add	r3, sp, #12
 100704a:	4608      	mov	r0, r1
 100704c:	9100      	str	r1, [sp, #0]
 100704e:	f007 fedb 	bl	100ee08 <nrf_802154_request_transmit>
                                             NULL);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 1007052:	b005      	add	sp, #20
 1007054:	f85d fb04 	ldr.w	pc, [sp], #4
 1007058:	010105df 	.word	0x010105df

0100705c <nrf_802154_transmit_csma_ca_raw>:
#if NRF_802154_CSMA_CA_ENABLED
#if NRF_802154_USE_RAW_API

bool nrf_802154_transmit_csma_ca_raw(uint8_t                                      * p_data,
                                     const nrf_802154_transmit_csma_ca_metadata_t * p_metadata)
{
 100705c:	b508      	push	{r3, lr}
    bool result;

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (p_metadata == NULL)
 100705e:	b139      	cbz	r1, 1007070 <nrf_802154_transmit_csma_ca_raw+0x14>
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 1007060:	784b      	ldrb	r3, [r1, #1]
 1007062:	b90b      	cbnz	r3, 1007068 <nrf_802154_transmit_csma_ca_raw+0xc>

        p_metadata = &metadata_default;
    }

    result = are_frame_properties_valid(&p_metadata->frame_props);
    if (result)
 1007064:	780b      	ldrb	r3, [r1, #0]
 1007066:	b92b      	cbnz	r3, 1007074 <nrf_802154_transmit_csma_ca_raw+0x18>
    {
        nrf_802154_csma_ca_start(p_data, p_metadata);
 1007068:	f002 fc1a 	bl	10098a0 <nrf_802154_csma_ca_start>
 100706c:	2001      	movs	r0, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 100706e:	bd08      	pop	{r3, pc}
 1007070:	4901      	ldr	r1, [pc, #4]	; (1007078 <nrf_802154_transmit_csma_ca_raw+0x1c>)
 1007072:	e7f7      	b.n	1007064 <nrf_802154_transmit_csma_ca_raw+0x8>
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 1007074:	2000      	movs	r0, #0
 1007076:	e7fa      	b.n	100706e <nrf_802154_transmit_csma_ca_raw+0x12>
 1007078:	010105dd 	.word	0x010105dd

0100707c <nrf_802154_received_raw>:
    (void)p_data;
}

#if NRF_802154_USE_RAW_API
__WEAK void nrf_802154_received_raw(uint8_t * p_data, int8_t power, uint8_t lqi)
{
 100707c:	b508      	push	{r3, lr}
    nrf_802154_received_timestamp_raw(p_data,
 100707e:	4b02      	ldr	r3, [pc, #8]	; (1007088 <nrf_802154_received_raw+0xc>)
 1007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1007082:	f004 f975 	bl	100b370 <nrf_802154_received_timestamp_raw>
                                      power,
                                      lqi,
                                      nrf_802154_stat_timestamp_read(last_rx_end_timestamp));
}
 1007086:	bd08      	pop	{r3, pc}
 1007088:	21003468 	.word	0x21003468

0100708c <rx_buffer_is_available>:
 * @retval true   There is available rx buffer.
 * @retval false  Currently there is no available rx buffer.
 */
static bool rx_buffer_is_available(void)
{
    return (mp_current_rx_buffer != NULL) && (mp_current_rx_buffer->free);
 100708c:	4b03      	ldr	r3, [pc, #12]	; (100709c <rx_buffer_is_available+0x10>)
 100708e:	6818      	ldr	r0, [r3, #0]
 1007090:	b108      	cbz	r0, 1007096 <rx_buffer_is_available+0xa>
 1007092:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
}
 1007096:	f000 0001 	and.w	r0, r0, #1
 100709a:	4770      	bx	lr
 100709c:	21003460 	.word	0x21003460

010070a0 <rx_buffer_get>:
/** Get pointer to available rx buffer.
 *
 * @returns Pointer to available rx buffer or NULL if rx buffer is not available.
 */
static uint8_t * rx_buffer_get(void)
{
 10070a0:	b508      	push	{r3, lr}
    return rx_buffer_is_available() ? mp_current_rx_buffer->data : NULL;
 10070a2:	f7ff fff3 	bl	100708c <rx_buffer_is_available>
 10070a6:	b108      	cbz	r0, 10070ac <rx_buffer_get+0xc>
 10070a8:	4b01      	ldr	r3, [pc, #4]	; (10070b0 <rx_buffer_get+0x10>)
 10070aa:	6818      	ldr	r0, [r3, #0]
}
 10070ac:	bd08      	pop	{r3, pc}
 10070ae:	bf00      	nop
 10070b0:	21003460 	.word	0x21003460

010070b4 <receive_failed_notify>:
{
 10070b4:	b510      	push	{r4, lr}
 10070b6:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 10070b8:	f001 f8ba 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_receive_failed(error, m_rx_window_id);
 10070bc:	4b04      	ldr	r3, [pc, #16]	; (10070d0 <receive_failed_notify+0x1c>)
 10070be:	4620      	mov	r0, r4
 10070c0:	6819      	ldr	r1, [r3, #0]
 10070c2:	f007 fe23 	bl	100ed0c <nrf_802154_notify_receive_failed>
}
 10070c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 10070ca:	f001 b835 	b.w	1008138 <nrf_802154_critical_section_nesting_deny>
 10070ce:	bf00      	nop
 10070d0:	21003458 	.word	0x21003458

010070d4 <received_frame_notify_and_nesting_allow>:
{
 10070d4:	b510      	push	{r4, lr}
 10070d6:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 10070d8:	f001 f8aa 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_received(p_data,      // data
 10070dc:	4b05      	ldr	r3, [pc, #20]	; (10070f4 <received_frame_notify_and_nesting_allow+0x20>)
 10070de:	4620      	mov	r0, r4
 10070e0:	781a      	ldrb	r2, [r3, #0]
 10070e2:	4b05      	ldr	r3, [pc, #20]	; (10070f8 <received_frame_notify_and_nesting_allow+0x24>)
 10070e4:	f993 1000 	ldrsb.w	r1, [r3]
 10070e8:	f007 fe0e 	bl	100ed08 <nrf_802154_notify_received>
}
 10070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 10070f0:	f001 b822 	b.w	1008138 <nrf_802154_critical_section_nesting_deny>
 10070f4:	21003e85 	.word	0x21003e85
 10070f8:	21003e86 	.word	0x21003e86

010070fc <transmit_failed_notify_and_nesting_allow>:
{
 10070fc:	b510      	push	{r4, lr}
 10070fe:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 1007100:	f001 f896 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    transmit_failed_notify(mp_tx_data, error);
 1007104:	4b04      	ldr	r3, [pc, #16]	; (1007118 <transmit_failed_notify_and_nesting_allow+0x1c>)
 1007106:	4621      	mov	r1, r4
 1007108:	6818      	ldr	r0, [r3, #0]
 100710a:	f007 fbff 	bl	100e90c <transmit_failed_notify>
}
 100710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 1007112:	f001 b811 	b.w	1008138 <nrf_802154_critical_section_nesting_deny>
 1007116:	bf00      	nop
 1007118:	21003464 	.word	0x21003464

0100711c <rx_data_clear>:
    (void)nrf_802154_frame_parser_data_init(mp_current_rx_buffer->data,
 100711c:	2200      	movs	r2, #0
 100711e:	4803      	ldr	r0, [pc, #12]	; (100712c <rx_data_clear+0x10>)
 1007120:	4611      	mov	r1, r2
 1007122:	4b03      	ldr	r3, [pc, #12]	; (1007130 <rx_data_clear+0x14>)
 1007124:	6800      	ldr	r0, [r0, #0]
 1007126:	f007 bd13 	b.w	100eb50 <nrf_802154_frame_parser_data_init>
 100712a:	bf00      	nop
 100712c:	21003460 	.word	0x21003460
 1007130:	21003428 	.word	0x21003428

01007134 <critical_section_can_be_processed_now>:
 *
 * @retval true   There is enough time in current timeslot or timeslot is denied at the moment.
 * @retval false  Current timeslot ends too shortly to process critical section inside.
 */
static bool critical_section_can_be_processed_now(void)
{
 1007134:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
 1007136:	4b06      	ldr	r3, [pc, #24]	; (1007150 <critical_section_can_be_processed_now+0x1c>)
 1007138:	781b      	ldrb	r3, [r3, #0]
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 100713a:	b133      	cbz	r3, 100714a <critical_section_can_be_processed_now+0x16>
    return nrf_802154_rsch_timeslot_us_left_get() >= MAX_CRIT_SECT_TIME;
 100713c:	f008 ff74 	bl	1010028 <nrf_802154_rsch_timeslot_us_left_get>
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 1007140:	283b      	cmp	r0, #59	; 0x3b
 1007142:	bf94      	ite	ls
 1007144:	2000      	movls	r0, #0
 1007146:	2001      	movhi	r0, #1
}
 1007148:	bd08      	pop	{r3, pc}
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 100714a:	2001      	movs	r0, #1
 100714c:	e7fc      	b.n	1007148 <critical_section_can_be_processed_now+0x14>
 100714e:	bf00      	nop
 1007150:	21003e88 	.word	0x21003e88

01007154 <transmitted_frame_notify>:
{
 1007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 1007156:	4604      	mov	r4, r0
 1007158:	460e      	mov	r6, r1
 100715a:	4615      	mov	r5, r2
 100715c:	b085      	sub	sp, #20
    uint8_t                           * p_frame  = mp_tx_data;
 100715e:	4b0e      	ldr	r3, [pc, #56]	; (1007198 <transmitted_frame_notify+0x44>)
    nrf_802154_transmit_done_metadata_t metadata = {0};
 1007160:	2210      	movs	r2, #16
 1007162:	2100      	movs	r1, #0
 1007164:	4668      	mov	r0, sp
    uint8_t                           * p_frame  = mp_tx_data;
 1007166:	681f      	ldr	r7, [r3, #0]
    nrf_802154_transmit_done_metadata_t metadata = {0};
 1007168:	f007 fa20 	bl	100e5ac <memset>
    metadata.data.transmitted.p_ack = p_ack;
 100716c:	9401      	str	r4, [sp, #4]
    metadata.data.transmitted.power = power;
 100716e:	f88d 6009 	strb.w	r6, [sp, #9]
    metadata.data.transmitted.lqi   = lqi;
 1007172:	f88d 500a 	strb.w	r5, [sp, #10]
    if (p_ack == NULL)
 1007176:	b114      	cbz	r4, 100717e <transmitted_frame_notify+0x2a>
        metadata.data.transmitted.time = nrf_802154_stat_timestamp_read(last_ack_end_timestamp);
 1007178:	4b08      	ldr	r3, [pc, #32]	; (100719c <transmitted_frame_notify+0x48>)
 100717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100717c:	9303      	str	r3, [sp, #12]
    nrf_802154_critical_section_nesting_allow();
 100717e:	f001 f857 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_core_hooks_transmitted(p_frame);
 1007182:	4638      	mov	r0, r7
 1007184:	f007 fc51 	bl	100ea2a <nrf_802154_core_hooks_transmitted>
    nrf_802154_notify_transmitted(p_frame, &metadata);
 1007188:	4669      	mov	r1, sp
 100718a:	4638      	mov	r0, r7
 100718c:	f007 fdc0 	bl	100ed10 <nrf_802154_notify_transmitted>
    nrf_802154_critical_section_nesting_deny();
 1007190:	f000 ffd2 	bl	1008138 <nrf_802154_critical_section_nesting_deny>
}
 1007194:	b005      	add	sp, #20
 1007196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1007198:	21003464 	.word	0x21003464
 100719c:	21003468 	.word	0x21003468

010071a0 <min_required_rsch_prio>:
    switch (state)
 10071a0:	1e43      	subs	r3, r0, #1
 10071a2:	2b09      	cmp	r3, #9
 10071a4:	d813      	bhi.n	10071ce <min_required_rsch_prio+0x2e>
 10071a6:	e8df f003 	tbb	[pc, r3]
 10071aa:	0505      	.short	0x0505
 10071ac:	07090b09 	.word	0x07090b09
 10071b0:	09090707 	.word	0x09090707
 10071b4:	2001      	movs	r0, #1
 10071b6:	4770      	bx	lr
            return RSCH_PRIO_RX;
 10071b8:	2002      	movs	r0, #2
 10071ba:	4770      	bx	lr
            return RSCH_PRIO_TX;
 10071bc:	2004      	movs	r0, #4
 10071be:	4770      	bx	lr
            if (m_flags.tx_diminished_prio)
 10071c0:	4b04      	ldr	r3, [pc, #16]	; (10071d4 <min_required_rsch_prio+0x34>)
 10071c2:	781b      	ldrb	r3, [r3, #0]
                return RSCH_PRIO_IDLE_LISTENING;
 10071c4:	f013 0f10 	tst.w	r3, #16
 10071c8:	bf18      	it	ne
 10071ca:	2001      	movne	r0, #1
 10071cc:	4770      	bx	lr
            return RSCH_PRIO_IDLE;
 10071ce:	2000      	movs	r0, #0
}
 10071d0:	4770      	bx	lr
 10071d2:	bf00      	nop
 10071d4:	21003e84 	.word	0x21003e84

010071d8 <are_preconditions_met>:
{
 10071d8:	b508      	push	{r3, lr}
    current_prio  = m_rsch_priority;
 10071da:	4b06      	ldr	r3, [pc, #24]	; (10071f4 <are_preconditions_met+0x1c>)
 10071dc:	7819      	ldrb	r1, [r3, #0]
    current_state = m_state;
 10071de:	4b06      	ldr	r3, [pc, #24]	; (10071f8 <are_preconditions_met+0x20>)
    current_prio  = m_rsch_priority;
 10071e0:	b2c9      	uxtb	r1, r1
    current_state = m_state;
 10071e2:	7818      	ldrb	r0, [r3, #0]
    return (min_required_rsch_prio(state) <= prio);
 10071e4:	f7ff ffdc 	bl	10071a0 <min_required_rsch_prio>
}
 10071e8:	4281      	cmp	r1, r0
 10071ea:	bf34      	ite	cc
 10071ec:	2000      	movcc	r0, #0
 10071ee:	2001      	movcs	r0, #1
 10071f0:	bd08      	pop	{r3, pc}
 10071f2:	bf00      	nop
 10071f4:	21003e87 	.word	0x21003e87
 10071f8:	21003e89 	.word	0x21003e89

010071fc <state_set>:
    m_state = state;
 10071fc:	4a01      	ldr	r2, [pc, #4]	; (1007204 <state_set+0x8>)
 10071fe:	7010      	strb	r0, [r2, #0]
    request_preconditions_for_state(state);
 1007200:	f007 bba9 	b.w	100e956 <request_preconditions_for_state>
 1007204:	21003e89 	.word	0x21003e89

01007208 <on_rx_prestarted_timeout>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void on_rx_prestarted_timeout(void * p_context)
{
 1007208:	b508      	push	{r3, lr}
     * could be decremented. Allowing for critical section nesting here resolves the problem.
     * TODO: After the bug is fixed, change to nrf_802154_critical_section_enter and check if
     * critical section was successfully entered.
     */

    nrf_802154_critical_section_forcefully_enter();
 100720a:	f007 fc18 	bl	100ea3e <nrf_802154_critical_section_forcefully_enter>

    nrf_802154_sl_ant_div_rx_preamble_timeout_notify();
 100720e:	f008 fe95 	bl	100ff3c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>
     * If timer is still running here, it means that timer handling has been preempted by HELPER1
     * radio event after removing the timer from scheduler, but before handling this callback.
     * In that case, process the timeout as usual, but notify antenna diversity module that another
     * preamble was detected in order to repeat RSSI measurements.
     */
    if (nrf_802154_timer_sched_is_running(&m_rx_prestarted_timer))
 1007212:	4809      	ldr	r0, [pc, #36]	; (1007238 <on_rx_prestarted_timeout+0x30>)
 1007214:	f006 fc32 	bl	100da7c <nrf_802154_timer_sched_is_running>
 1007218:	b108      	cbz	r0, 100721e <on_rx_prestarted_timeout+0x16>
    {
        nrf_802154_sl_ant_div_rx_preamble_detected_notify();
 100721a:	f008 fe90 	bl	100ff3e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
    }

    /* If nrf_802154_trx_receive_frame_prestarted boosted preconditions beyond those normally
     * required by current state, they need to be restored now.
     */
    if (nrf_802154_pib_coex_rx_request_mode_get() ==
 100721e:	f001 f8ed 	bl	10083fc <nrf_802154_pib_coex_rx_request_mode_get>
 1007222:	2801      	cmp	r0, #1
 1007224:	d103      	bne.n	100722e <on_rx_prestarted_timeout+0x26>
        NRF_802154_COEX_RX_REQUEST_MODE_ENERGY_DETECTION)
    {
        request_preconditions_for_state(m_state);
 1007226:	4b05      	ldr	r3, [pc, #20]	; (100723c <on_rx_prestarted_timeout+0x34>)
 1007228:	7818      	ldrb	r0, [r3, #0]
 100722a:	f007 fb94 	bl	100e956 <request_preconditions_for_state>
    }
    nrf_802154_critical_section_exit();
}
 100722e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_critical_section_exit();
 1007232:	f000 bfcf 	b.w	10081d4 <nrf_802154_critical_section_exit>
 1007236:	bf00      	nop
 1007238:	21003444 	.word	0x21003444
 100723c:	21003e89 	.word	0x21003e89

01007240 <rx_init>:
    return m_rsch_timeslot_is_granted;
 1007240:	4b13      	ldr	r3, [pc, #76]	; (1007290 <rx_init+0x50>)
{
 1007242:	b510      	push	{r4, lr}
    return m_rsch_timeslot_is_granted;
 1007244:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1007246:	b30b      	cbz	r3, 100728c <rx_init+0x4c>
    if (!are_preconditions_met())
 1007248:	f7ff ffc6 	bl	10071d8 <are_preconditions_met>
 100724c:	b1f0      	cbz	r0, 100728c <rx_init+0x4c>
    m_flags.frame_filtered        = false;
 100724e:	4a11      	ldr	r2, [pc, #68]	; (1007294 <rx_init+0x54>)
 1007250:	7813      	ldrb	r3, [r2, #0]
 1007252:	f023 0307 	bic.w	r3, r3, #7
 1007256:	7013      	strb	r3, [r2, #0]
    free_buffer = rx_buffer_is_available();
 1007258:	f7ff ff18 	bl	100708c <rx_buffer_is_available>
 100725c:	4604      	mov	r4, r0
    nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 100725e:	f7ff ff1f 	bl	10070a0 <rx_buffer_get>
 1007262:	f001 fbd7 	bl	1008a14 <nrf_802154_trx_receive_buffer_set>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U, m_trx_receive_frame_notifications_mask);
 1007266:	4b0c      	ldr	r3, [pc, #48]	; (1007298 <rx_init+0x58>)
 1007268:	2003      	movs	r0, #3
 100726a:	7819      	ldrb	r1, [r3, #0]
 100726c:	f001 fc00 	bl	1008a70 <nrf_802154_trx_receive_frame>
    if (!free_buffer)
 1007270:	b93c      	cbnz	r4, 1007282 <rx_init+0x42>
        rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 1007272:	f001 f917 	bl	10084a4 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 1007276:	4b09      	ldr	r3, [pc, #36]	; (100729c <rx_init+0x5c>)
 1007278:	6018      	str	r0, [r3, #0]
        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 100727a:	f7ff ff11 	bl	10070a0 <rx_buffer_get>
 100727e:	f001 fbc9 	bl	1008a14 <nrf_802154_trx_receive_buffer_set>
    rx_data_clear();
 1007282:	f7ff ff4b 	bl	100711c <rx_data_clear>
    mp_ack = NULL;
 1007286:	2200      	movs	r2, #0
 1007288:	4b05      	ldr	r3, [pc, #20]	; (10072a0 <rx_init+0x60>)
 100728a:	601a      	str	r2, [r3, #0]
}
 100728c:	bd10      	pop	{r4, pc}
 100728e:	bf00      	nop
 1007290:	21003e88 	.word	0x21003e88
 1007294:	21003e84 	.word	0x21003e84
 1007298:	21003e8a 	.word	0x21003e8a
 100729c:	21003460 	.word	0x21003460
 10072a0:	2100345c 	.word	0x2100345c

010072a4 <tx_init>:
    return m_rsch_timeslot_is_granted;
 10072a4:	4b16      	ldr	r3, [pc, #88]	; (1007300 <tx_init+0x5c>)
{
 10072a6:	b570      	push	{r4, r5, r6, lr}
    return m_rsch_timeslot_is_granted;
 10072a8:	781b      	ldrb	r3, [r3, #0]
{
 10072aa:	4606      	mov	r6, r0
 10072ac:	460d      	mov	r5, r1
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
 10072ae:	b913      	cbnz	r3, 10072b6 <tx_init+0x12>
        return false;
 10072b0:	2400      	movs	r4, #0
}
 10072b2:	4620      	mov	r0, r4
 10072b4:	bd70      	pop	{r4, r5, r6, pc}
            nrf_802154_tx_duration_get(p_data[0], cca, ack_is_requested(p_data))))
 10072b6:	7804      	ldrb	r4, [r0, #0]
 10072b8:	f007 fb35 	bl	100e926 <ack_is_requested>
{
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));

    if (phr)
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10072bc:	0163      	lsls	r3, r4, #5
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
        psdu_length,
        true,
        true);

    if (ack_requested)
 10072be:	b9d8      	cbnz	r0, 10072f8 <tx_init+0x54>
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
 10072c0:	f103 00ee 	add.w	r0, r3, #238	; 0xee
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
    }

    if (cca)
 10072c4:	b10d      	cbz	r5, 10072ca <tx_init+0x26>
    {
        us_time += RX_RAMP_UP_TIME + RX_RAMP_DOWN_TIME + PHY_US_TIME_FROM_SYMBOLS(
 10072c6:	30a8      	adds	r0, #168	; 0xa8
 10072c8:	b200      	sxth	r0, r0
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
 10072ca:	f008 fe7d 	bl	100ffc8 <nrf_802154_rsch_timeslot_request>
 10072ce:	2800      	cmp	r0, #0
 10072d0:	d0ee      	beq.n	10072b0 <tx_init+0xc>
    if (!are_preconditions_met())
 10072d2:	f7ff ff81 	bl	10071d8 <are_preconditions_met>
 10072d6:	4604      	mov	r4, r0
 10072d8:	2800      	cmp	r0, #0
 10072da:	d0e9      	beq.n	10072b0 <tx_init+0xc>
    m_flags.tx_with_cca = cca;
 10072dc:	4b09      	ldr	r3, [pc, #36]	; (1007304 <tx_init+0x60>)
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
 10072de:	4630      	mov	r0, r6
    m_flags.tx_with_cca = cca;
 10072e0:	781a      	ldrb	r2, [r3, #0]
 10072e2:	f365 02c3 	bfi	r2, r5, #3, #1
 10072e6:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
 10072e8:	f002 f9ec 	bl	10096c4 <nrf_802154_tx_work_buffer_get>
 10072ec:	4b06      	ldr	r3, [pc, #24]	; (1007308 <tx_init+0x64>)
 10072ee:	4629      	mov	r1, r5
 10072f0:	781a      	ldrb	r2, [r3, #0]
 10072f2:	f001 fcc9 	bl	1008c88 <nrf_802154_trx_transmit_frame>
    return true;
 10072f6:	e7dc      	b.n	10072b2 <tx_init+0xe>
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
 10072f8:	f203 404e 	addw	r0, r3, #1102	; 0x44e
 10072fc:	e7e2      	b.n	10072c4 <tx_init+0x20>
 10072fe:	bf00      	nop
 1007300:	21003e88 	.word	0x21003e88
 1007304:	21003e84 	.word	0x21003e84
 1007308:	21003e8b 	.word	0x21003e8b

0100730c <cca_init>:
{
 100730c:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
 100730e:	4b07      	ldr	r3, [pc, #28]	; (100732c <cca_init+0x20>)
 1007310:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(nrf_802154_cca_duration_get()))
 1007312:	b153      	cbz	r3, 100732a <cca_init+0x1e>
 1007314:	20ae      	movs	r0, #174	; 0xae
 1007316:	f008 fe57 	bl	100ffc8 <nrf_802154_rsch_timeslot_request>
 100731a:	b130      	cbz	r0, 100732a <cca_init+0x1e>
    if (!are_preconditions_met())
 100731c:	f7ff ff5c 	bl	10071d8 <are_preconditions_met>
 1007320:	b118      	cbz	r0, 100732a <cca_init+0x1e>
}
 1007322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_standalone_cca();
 1007326:	f001 be8b 	b.w	1009040 <nrf_802154_trx_standalone_cca>
}
 100732a:	bd08      	pop	{r3, pc}
 100732c:	21003e88 	.word	0x21003e88

01007330 <continuous_carrier_init>:
{
 1007330:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
 1007332:	4b05      	ldr	r3, [pc, #20]	; (1007348 <continuous_carrier_init+0x18>)
 1007334:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1007336:	b133      	cbz	r3, 1007346 <continuous_carrier_init+0x16>
    if (!are_preconditions_met())
 1007338:	f7ff ff4e 	bl	10071d8 <are_preconditions_met>
 100733c:	b118      	cbz	r0, 1007346 <continuous_carrier_init+0x16>
}
 100733e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_continuous_carrier();
 1007342:	f001 bea3 	b.w	100908c <nrf_802154_trx_continuous_carrier>
}
 1007346:	bd08      	pop	{r3, pc}
 1007348:	21003e88 	.word	0x21003e88

0100734c <modulated_carrier_init>:
    return m_rsch_timeslot_is_granted;
 100734c:	4b06      	ldr	r3, [pc, #24]	; (1007368 <modulated_carrier_init+0x1c>)
{
 100734e:	b510      	push	{r4, lr}
    return m_rsch_timeslot_is_granted;
 1007350:	781b      	ldrb	r3, [r3, #0]
{
 1007352:	4604      	mov	r4, r0
    if (!timeslot_is_granted())
 1007354:	b13b      	cbz	r3, 1007366 <modulated_carrier_init+0x1a>
    if (!are_preconditions_met())
 1007356:	f7ff ff3f 	bl	10071d8 <are_preconditions_met>
 100735a:	b120      	cbz	r0, 1007366 <modulated_carrier_init+0x1a>
    nrf_802154_trx_modulated_carrier(p_data);
 100735c:	4620      	mov	r0, r4
}
 100735e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_trx_modulated_carrier(p_data);
 1007362:	f001 beb3 	b.w	10090cc <nrf_802154_trx_modulated_carrier>
}
 1007366:	bd10      	pop	{r4, pc}
 1007368:	21003e88 	.word	0x21003e88

0100736c <ed_init>:
    return m_rsch_timeslot_is_granted;
 100736c:	4b11      	ldr	r3, [pc, #68]	; (10073b4 <ed_init+0x48>)
{
 100736e:	b510      	push	{r4, lr}
    return m_rsch_timeslot_is_granted;
 1007370:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1007372:	b1eb      	cbz	r3, 10073b0 <ed_init+0x44>
    if (!are_preconditions_met())
 1007374:	f7ff ff30 	bl	10071d8 <are_preconditions_met>
 1007378:	b1d0      	cbz	r0, 10073b0 <ed_init+0x44>
    nrf_802154_sl_ant_div_energy_detection_requested_notify(&m_ed_time_left);
 100737a:	4c0f      	ldr	r4, [pc, #60]	; (10073b8 <ed_init+0x4c>)
 100737c:	4620      	mov	r0, r4
 100737e:	f008 fddf 	bl	100ff40 <nrf_802154_sl_ant_div_energy_detection_requested_notify>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1007382:	f008 fe51 	bl	1010028 <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
 1007386:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
 100738a:	d311      	bcc.n	10073b0 <ed_init+0x44>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 100738c:	6822      	ldr	r2, [r4, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 100738e:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
 1007390:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
 1007392:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1007396:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = 0U;
 100739a:	bf8c      	ite	hi
 100739c:	2200      	movhi	r2, #0
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 100739e:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
            requested_iters = iters_left_in_timeslot;
 10073a2:	6022      	str	r2, [r4, #0]
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 10073a4:	bf98      	it	ls
 10073a6:	4618      	movls	r0, r3
}
 10073a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_trx_energy_detection(trx_ed_count);
 10073ac:	f001 beb4 	b.w	1009118 <nrf_802154_trx_energy_detection>
}
 10073b0:	bd10      	pop	{r4, pc}
 10073b2:	bf00      	nop
 10073b4:	21003e88 	.word	0x21003e88
 10073b8:	21003440 	.word	0x21003440

010073bc <on_preconditions_approved>:
{
 10073bc:	b510      	push	{r4, lr}
 10073be:	4604      	mov	r4, r0
    nrf_802154_trx_abort();
 10073c0:	f001 fd64 	bl	1008e8c <nrf_802154_trx_abort>
    switch (state)
 10073c4:	1ea0      	subs	r0, r4, #2
 10073c6:	2808      	cmp	r0, #8
 10073c8:	d825      	bhi.n	1007416 <on_preconditions_approved+0x5a>
 10073ca:	e8df f000 	tbb	[pc, r0]
 10073ce:	2405      	.short	0x2405
 10073d0:	12241009 	.word	0x12241009
 10073d4:	1a16      	.short	0x1a16
 10073d6:	1e          	.byte	0x1e
 10073d7:	00          	.byte	0x00
}
 10073d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rx_init();
 10073dc:	f7ff bf30 	b.w	1007240 <rx_init>
            (void)tx_init(mp_tx_data, true);
 10073e0:	2101      	movs	r1, #1
}
 10073e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (void)tx_init(mp_tx_data, false);
 10073e6:	4b0c      	ldr	r3, [pc, #48]	; (1007418 <on_preconditions_approved+0x5c>)
 10073e8:	6818      	ldr	r0, [r3, #0]
 10073ea:	f7ff bf5b 	b.w	10072a4 <tx_init>
 10073ee:	2100      	movs	r1, #0
 10073f0:	e7f7      	b.n	10073e2 <on_preconditions_approved+0x26>
}
 10073f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ed_init();
 10073f6:	f7ff bfb9 	b.w	100736c <ed_init>
}
 10073fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            cca_init();
 10073fe:	f7ff bf85 	b.w	100730c <cca_init>
}
 1007402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            continuous_carrier_init();
 1007406:	f7ff bf93 	b.w	1007330 <continuous_carrier_init>
            modulated_carrier_init(mp_tx_data);
 100740a:	4b03      	ldr	r3, [pc, #12]	; (1007418 <on_preconditions_approved+0x5c>)
}
 100740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            modulated_carrier_init(mp_tx_data);
 1007410:	6818      	ldr	r0, [r3, #0]
 1007412:	f7ff bf9b 	b.w	100734c <modulated_carrier_init>
}
 1007416:	bd10      	pop	{r4, pc}
 1007418:	21003464 	.word	0x21003464

0100741c <operation_terminated_notify>:
    switch (state)
 100741c:	3802      	subs	r0, #2
{
 100741e:	b510      	push	{r4, lr}
    switch (state)
 1007420:	2806      	cmp	r0, #6
 1007422:	d832      	bhi.n	100748a <operation_terminated_notify+0x6e>
 1007424:	e8df f000 	tbb	[pc, r0]
 1007428:	20200c04 	.word	0x20200c04
 100742c:	2720      	.short	0x2720
 100742e:	2c          	.byte	0x2c
 100742f:	00          	.byte	0x00
            if (receiving_psdu_now)
 1007430:	b359      	cbz	r1, 100748a <operation_terminated_notify+0x6e>
}
 1007432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_ABORTED, m_rx_window_id);
 1007436:	4b15      	ldr	r3, [pc, #84]	; (100748c <operation_terminated_notify+0x70>)
 1007438:	2006      	movs	r0, #6
 100743a:	6819      	ldr	r1, [r3, #0]
 100743c:	f007 bc66 	b.w	100ed0c <nrf_802154_notify_receive_failed>
            mp_current_rx_buffer->free = false;
 1007440:	2200      	movs	r2, #0
 1007442:	4c13      	ldr	r4, [pc, #76]	; (1007490 <operation_terminated_notify+0x74>)
            nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_ABORTED);
 1007444:	2106      	movs	r1, #6
            mp_current_rx_buffer->free = false;
 1007446:	6823      	ldr	r3, [r4, #0]
 1007448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_ABORTED);
 100744c:	4b11      	ldr	r3, [pc, #68]	; (1007494 <operation_terminated_notify+0x78>)
 100744e:	6818      	ldr	r0, [r3, #0]
 1007450:	f007 faed 	bl	100ea2e <nrf_802154_core_hooks_tx_ack_failed>
    nrf_802154_notify_received(p_data,      // data
 1007454:	4b10      	ldr	r3, [pc, #64]	; (1007498 <operation_terminated_notify+0x7c>)
 1007456:	6820      	ldr	r0, [r4, #0]
 1007458:	781a      	ldrb	r2, [r3, #0]
 100745a:	4b10      	ldr	r3, [pc, #64]	; (100749c <operation_terminated_notify+0x80>)
}
 100745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_notify_received(p_data,      // data
 1007460:	f993 1000 	ldrsb.w	r1, [r3]
 1007464:	f007 bc50 	b.w	100ed08 <nrf_802154_notify_received>
            transmit_failed_notify(mp_tx_data, NRF_802154_TX_ERROR_ABORTED);
 1007468:	4b0d      	ldr	r3, [pc, #52]	; (10074a0 <operation_terminated_notify+0x84>)
 100746a:	2106      	movs	r1, #6
}
 100746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            transmit_failed_notify(mp_tx_data, NRF_802154_TX_ERROR_ABORTED);
 1007470:	6818      	ldr	r0, [r3, #0]
 1007472:	f007 ba4b 	b.w	100e90c <transmit_failed_notify>
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
 1007476:	2001      	movs	r0, #1
}
 1007478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
 100747c:	f007 bc69 	b.w	100ed52 <nrf_802154_notify_energy_detection_failed>
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
 1007480:	2001      	movs	r0, #1
}
 1007482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
 1007486:	f007 bc68 	b.w	100ed5a <nrf_802154_notify_cca_failed>
}
 100748a:	bd10      	pop	{r4, pc}
 100748c:	21003458 	.word	0x21003458
 1007490:	21003460 	.word	0x21003460
 1007494:	2100345c 	.word	0x2100345c
 1007498:	21003e85 	.word	0x21003e85
 100749c:	21003e86 	.word	0x21003e86
 10074a0:	21003464 	.word	0x21003464

010074a4 <current_operation_terminate>:
{
 10074a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10074a8:	4680      	mov	r8, r0
 10074aa:	4617      	mov	r7, r2
    bool result = nrf_802154_core_hooks_terminate(term_lvl, req_orig);
 10074ac:	f000 fdfe 	bl	10080ac <nrf_802154_core_hooks_terminate>
    if (result)
 10074b0:	4604      	mov	r4, r0
 10074b2:	b908      	cbnz	r0, 10074b8 <current_operation_terminate+0x14>
    switch (state)
 10074b4:	2400      	movs	r4, #0
 10074b6:	e031      	b.n	100751c <current_operation_terminate+0x78>
        if (m_state == RADIO_STATE_RX)
 10074b8:	4d1c      	ldr	r5, [pc, #112]	; (100752c <current_operation_terminate+0x88>)
 10074ba:	782b      	ldrb	r3, [r5, #0]
 10074bc:	2b02      	cmp	r3, #2
 10074be:	d10d      	bne.n	10074dc <current_operation_terminate+0x38>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 10074c0:	f001 fa92 	bl	10089e8 <nrf_802154_trx_psdu_is_being_received>
 10074c4:	4606      	mov	r6, r0
        result = can_terminate_current_operation(m_state, term_lvl, receiving_psdu_now);
 10074c6:	782b      	ldrb	r3, [r5, #0]
    switch (state)
 10074c8:	2b0a      	cmp	r3, #10
 10074ca:	d8f3      	bhi.n	10074b4 <current_operation_terminate+0x10>
 10074cc:	e8df f003 	tbb	[pc, r3]
 10074d0:	29080d0d 	.word	0x29080d0d
 10074d4:	29292929 	.word	0x29292929
 10074d8:	0d29      	.short	0x0d29
 10074da:	0d          	.byte	0x0d
 10074db:	00          	.byte	0x00
        bool receiving_psdu_now = false;
 10074dc:	2600      	movs	r6, #0
 10074de:	e7f2      	b.n	10074c6 <current_operation_terminate+0x22>
            result = (term_lvl >= NRF_802154_TERM_802154) || !receiving_psdu_now;
 10074e0:	f1b8 0f00 	cmp.w	r8, #0
 10074e4:	d101      	bne.n	10074ea <current_operation_terminate+0x46>
        if (result)
 10074e6:	2e00      	cmp	r6, #0
 10074e8:	d1e4      	bne.n	10074b4 <current_operation_terminate+0x10>
    nrf_802154_trx_abort();
 10074ea:	f001 fccf 	bl	1008e8c <nrf_802154_trx_abort>
            if (m_state == RADIO_STATE_RX)
 10074ee:	782b      	ldrb	r3, [r5, #0]
 10074f0:	2b02      	cmp	r3, #2
 10074f2:	d108      	bne.n	1007506 <current_operation_terminate+0x62>
                nrf_802154_timer_sched_remove(&m_rx_prestarted_timer, NULL);
 10074f4:	480e      	ldr	r0, [pc, #56]	; (1007530 <current_operation_terminate+0x8c>)
 10074f6:	2100      	movs	r1, #0
 10074f8:	f008 fdc0 	bl	101007c <nrf_802154_timer_sched_remove>
                nrf_802154_sl_ant_div_rx_aborted_notify();
 10074fc:	f008 fd1d 	bl	100ff3a <nrf_802154_sl_ant_div_rx_aborted_notify>
                request_preconditions_for_state(m_state);
 1007500:	7828      	ldrb	r0, [r5, #0]
 1007502:	f007 fa28 	bl	100e956 <request_preconditions_for_state>
            if (m_state == RADIO_STATE_ED)
 1007506:	782b      	ldrb	r3, [r5, #0]
 1007508:	2b07      	cmp	r3, #7
 100750a:	d101      	bne.n	1007510 <current_operation_terminate+0x6c>
                nrf_802154_sl_ant_div_energy_detection_aborted_notify();
 100750c:	f008 fd19 	bl	100ff42 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>
            if (notify)
 1007510:	b127      	cbz	r7, 100751c <current_operation_terminate+0x78>
                operation_terminated_notify(m_state, receiving_psdu_now);
 1007512:	4631      	mov	r1, r6
 1007514:	7828      	ldrb	r0, [r5, #0]
 1007516:	f7ff ff81 	bl	100741c <operation_terminated_notify>
        result = can_terminate_current_operation(m_state, term_lvl, receiving_psdu_now);
 100751a:	463c      	mov	r4, r7
}
 100751c:	4620      	mov	r0, r4
 100751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (result)
 1007522:	f1b8 0f00 	cmp.w	r8, #0
 1007526:	d0c5      	beq.n	10074b4 <current_operation_terminate+0x10>
 1007528:	e7df      	b.n	10074ea <current_operation_terminate+0x46>
 100752a:	bf00      	nop
 100752c:	21003e89 	.word	0x21003e89
 1007530:	21003444 	.word	0x21003444

01007534 <nrf_802154_rsch_crit_sect_prio_changed>:
{
 1007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    rsch_prio_t old_prio = m_rsch_priority;
 1007536:	4a54      	ldr	r2, [pc, #336]	; (1007688 <nrf_802154_rsch_crit_sect_prio_changed+0x154>)
{
 1007538:	4604      	mov	r4, r0
    rsch_prio_t old_prio = m_rsch_priority;
 100753a:	7813      	ldrb	r3, [r2, #0]
    m_rsch_priority = prio;
 100753c:	7010      	strb	r0, [r2, #0]
    if ((old_prio == RSCH_PRIO_IDLE) && (prio != RSCH_PRIO_IDLE))
 100753e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 1007542:	b993      	cbnz	r3, 100756a <nrf_802154_rsch_crit_sect_prio_changed+0x36>
 1007544:	2800      	cmp	r0, #0
 1007546:	d057      	beq.n	10075f8 <nrf_802154_rsch_crit_sect_prio_changed+0xc4>
    nrf_802154_trx_enable();
 1007548:	f001 f932 	bl	10087b0 <nrf_802154_trx_enable>
    m_rsch_timeslot_is_granted = true;
 100754c:	2201      	movs	r2, #1
 100754e:	4b4f      	ldr	r3, [pc, #316]	; (100768c <nrf_802154_rsch_crit_sect_prio_changed+0x158>)
 1007550:	701a      	strb	r2, [r3, #0]
    nrf_802154_timer_coord_start();
 1007552:	f008 fd6f 	bl	1010034 <nrf_802154_timer_coord_start>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
 1007556:	4f4e      	ldr	r7, [pc, #312]	; (1007690 <nrf_802154_rsch_crit_sect_prio_changed+0x15c>)
 1007558:	7838      	ldrb	r0, [r7, #0]
    return (min_required_rsch_prio(state) <= prio);
 100755a:	f7ff fe21 	bl	10071a0 <min_required_rsch_prio>
    if (old_prio_allows && !new_prio_allows)
 100755e:	4285      	cmp	r5, r0
 1007560:	d34d      	bcc.n	10075fe <nrf_802154_rsch_crit_sect_prio_changed+0xca>
 1007562:	4284      	cmp	r4, r0
 1007564:	f0c0 8085 	bcc.w	1007672 <nrf_802154_rsch_crit_sect_prio_changed+0x13e>
}
 1007568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ((old_prio != RSCH_PRIO_IDLE) && (prio == RSCH_PRIO_IDLE))
 100756a:	2800      	cmp	r0, #0
 100756c:	d1f3      	bne.n	1007556 <nrf_802154_rsch_crit_sect_prio_changed+0x22>
    return m_rsch_timeslot_is_granted;
 100756e:	4b47      	ldr	r3, [pc, #284]	; (100768c <nrf_802154_rsch_crit_sect_prio_changed+0x158>)
 1007570:	781a      	ldrb	r2, [r3, #0]
    if (timeslot_is_granted())
 1007572:	2a00      	cmp	r2, #0
 1007574:	d0f8      	beq.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
        if (m_state == RADIO_STATE_RX)
 1007576:	4d46      	ldr	r5, [pc, #280]	; (1007690 <nrf_802154_rsch_crit_sect_prio_changed+0x15c>)
        m_rsch_timeslot_is_granted = false;
 1007578:	7018      	strb	r0, [r3, #0]
        if (m_state == RADIO_STATE_RX)
 100757a:	782b      	ldrb	r3, [r5, #0]
 100757c:	2b02      	cmp	r3, #2
 100757e:	d102      	bne.n	1007586 <nrf_802154_rsch_crit_sect_prio_changed+0x52>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 1007580:	f001 fa32 	bl	10089e8 <nrf_802154_trx_psdu_is_being_received>
 1007584:	4604      	mov	r4, r0
    nrf_802154_trx_disable();
 1007586:	f001 f995 	bl	10088b4 <nrf_802154_trx_disable>
        nrf_802154_timer_coord_stop();
 100758a:	f008 fd54 	bl	1010036 <nrf_802154_timer_coord_stop>
        nrf_802154_rsch_continuous_ended();
 100758e:	f005 ffcf 	bl	100d530 <nrf_802154_rsch_continuous_ended>
        result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_RSCH);
 1007592:	2102      	movs	r1, #2
 1007594:	2001      	movs	r0, #1
 1007596:	f000 fd89 	bl	10080ac <nrf_802154_core_hooks_terminate>
        switch (m_state)
 100759a:	782b      	ldrb	r3, [r5, #0]
 100759c:	3b01      	subs	r3, #1
 100759e:	2b05      	cmp	r3, #5
 10075a0:	d8e2      	bhi.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
 10075a2:	e8df f003 	tbb	[pc, r3]
 10075a6:	0803      	.short	0x0803
 10075a8:	2121210f 	.word	0x2121210f
                state_set(RADIO_STATE_SLEEP);
 10075ac:	2000      	movs	r0, #0
}
 10075ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                state_set(RADIO_STATE_SLEEP);
 10075b2:	f7ff be23 	b.w	10071fc <state_set>
                if (receiving_psdu_now)
 10075b6:	2c00      	cmp	r4, #0
 10075b8:	d0d6      	beq.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
}
 10075ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    receive_failed_notify(NRF_802154_RX_ERROR_TIMESLOT_ENDED);
 10075be:	2005      	movs	r0, #5
 10075c0:	f7ff bd78 	b.w	10070b4 <receive_failed_notify>
                state_set(RADIO_STATE_RX);
 10075c4:	2002      	movs	r0, #2
 10075c6:	f7ff fe19 	bl	10071fc <state_set>
                mp_current_rx_buffer->free = false;
 10075ca:	2200      	movs	r2, #0
 10075cc:	4c31      	ldr	r4, [pc, #196]	; (1007694 <nrf_802154_rsch_crit_sect_prio_changed+0x160>)
                nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_TIMESLOT_ENDED);
 10075ce:	2104      	movs	r1, #4
                mp_current_rx_buffer->free = false;
 10075d0:	6823      	ldr	r3, [r4, #0]
 10075d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_TIMESLOT_ENDED);
 10075d6:	4b30      	ldr	r3, [pc, #192]	; (1007698 <nrf_802154_rsch_crit_sect_prio_changed+0x164>)
 10075d8:	6818      	ldr	r0, [r3, #0]
 10075da:	f007 fa28 	bl	100ea2e <nrf_802154_core_hooks_tx_ack_failed>
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
 10075de:	6820      	ldr	r0, [r4, #0]
}
 10075e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
 10075e4:	f7ff bd76 	b.w	10070d4 <received_frame_notify_and_nesting_allow>
                state_set(RADIO_STATE_RX);
 10075e8:	2002      	movs	r0, #2
 10075ea:	f7ff fe07 	bl	10071fc <state_set>
}
 10075ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_TIMESLOT_ENDED);
 10075f2:	2004      	movs	r0, #4
 10075f4:	f7ff bd82 	b.w	10070fc <transmit_failed_notify_and_nesting_allow>
        nrf_802154_rsch_continuous_ended();
 10075f8:	f005 ff9a 	bl	100d530 <nrf_802154_rsch_continuous_ended>
 10075fc:	e7ab      	b.n	1007556 <nrf_802154_rsch_crit_sect_prio_changed+0x22>
    else if (!old_prio_allows && new_prio_allows)
 10075fe:	4284      	cmp	r4, r0
 1007600:	d3b2      	bcc.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
 1007602:	783b      	ldrb	r3, [r7, #0]
            current_state_is_cca_tx &&
 1007604:	2d02      	cmp	r5, #2
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
 1007606:	b2db      	uxtb	r3, r3
            current_state_is_cca_tx &&
 1007608:	d107      	bne.n	100761a <nrf_802154_rsch_crit_sect_prio_changed+0xe6>
    return (only_coex_was_unapproved &&
 100760a:	2c04      	cmp	r4, #4
 100760c:	d105      	bne.n	100761a <nrf_802154_rsch_crit_sect_prio_changed+0xe6>
            all_preconditions_are_approved &&
 100760e:	2b04      	cmp	r3, #4
 1007610:	d103      	bne.n	100761a <nrf_802154_rsch_crit_sect_prio_changed+0xe6>
    bool coex_tx_request_mode_allows    = (m_coex_tx_request_mode ==
 1007612:	4b22      	ldr	r3, [pc, #136]	; (100769c <nrf_802154_rsch_crit_sect_prio_changed+0x168>)
            current_state_is_cca_tx &&
 1007614:	781b      	ldrb	r3, [r3, #0]
 1007616:	2b03      	cmp	r3, #3
 1007618:	d0a6      	beq.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
            on_preconditions_approved(m_state);
 100761a:	7838      	ldrb	r0, [r7, #0]
 100761c:	e01c      	b.n	1007658 <nrf_802154_rsch_crit_sect_prio_changed+0x124>
        receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 100761e:	f001 f9e3 	bl	10089e8 <nrf_802154_trx_psdu_is_being_received>
 1007622:	4605      	mov	r5, r0
    nrf_802154_trx_abort();
 1007624:	f001 fc32 	bl	1008e8c <nrf_802154_trx_abort>
    switch (state)
 1007628:	1eb3      	subs	r3, r6, #2
 100762a:	2b04      	cmp	r3, #4
 100762c:	d808      	bhi.n	1007640 <nrf_802154_rsch_crit_sect_prio_changed+0x10c>
 100762e:	e8df f003 	tbb	[pc, r3]
 1007632:	1c03      	.short	0x1c03
 1007634:	1c17      	.short	0x1c17
 1007636:	1c          	.byte	0x1c
 1007637:	00          	.byte	0x00
            if (receiving_psdu_now)
 1007638:	b115      	cbz	r5, 1007640 <nrf_802154_rsch_crit_sect_prio_changed+0x10c>
                receive_failed_notify(NRF_802154_RX_ERROR_ABORTED);
 100763a:	2006      	movs	r0, #6
 100763c:	f7ff fd3a 	bl	10070b4 <receive_failed_notify>
    operation_terminated_notify(state, receiving_psdu_now);
 1007640:	4629      	mov	r1, r5
 1007642:	4630      	mov	r0, r6
 1007644:	f7ff feea 	bl	100741c <operation_terminated_notify>
        radio_state_t new_state = m_state;
 1007648:	7839      	ldrb	r1, [r7, #0]
 100764a:	b2c9      	uxtb	r1, r1
    return (min_required_rsch_prio(state) <= prio);
 100764c:	4608      	mov	r0, r1
 100764e:	f7ff fda7 	bl	10071a0 <min_required_rsch_prio>
        if (is_state_allowed_for_prio(prio, new_state))
 1007652:	4284      	cmp	r4, r0
 1007654:	d388      	bcc.n	1007568 <nrf_802154_rsch_crit_sect_prio_changed+0x34>
            on_preconditions_approved(new_state);
 1007656:	4608      	mov	r0, r1
}
 1007658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            on_preconditions_approved(m_state);
 100765c:	f7ff beae 	b.w	10073bc <on_preconditions_approved>
            m_flags.tx_diminished_prio = false;
 1007660:	4b0f      	ldr	r3, [pc, #60]	; (10076a0 <nrf_802154_rsch_crit_sect_prio_changed+0x16c>)
 1007662:	781a      	ldrb	r2, [r3, #0]
 1007664:	f36f 1204 	bfc	r2, #4, #1
 1007668:	701a      	strb	r2, [r3, #0]
            state_set(RADIO_STATE_RX);
 100766a:	2002      	movs	r0, #2
 100766c:	f7ff fdc6 	bl	10071fc <state_set>
            break;
 1007670:	e7e6      	b.n	1007640 <nrf_802154_rsch_crit_sect_prio_changed+0x10c>
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 1007672:	2101      	movs	r1, #1
        on_preconditions_denied(m_state);
 1007674:	783e      	ldrb	r6, [r7, #0]
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 1007676:	4608      	mov	r0, r1
        on_preconditions_denied(m_state);
 1007678:	b2f6      	uxtb	r6, r6
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 100767a:	f000 fd17 	bl	10080ac <nrf_802154_core_hooks_terminate>
    if (state == RADIO_STATE_RX)
 100767e:	2e02      	cmp	r6, #2
 1007680:	d0cd      	beq.n	100761e <nrf_802154_rsch_crit_sect_prio_changed+0xea>
    bool receiving_psdu_now = false;
 1007682:	2500      	movs	r5, #0
 1007684:	e7ce      	b.n	1007624 <nrf_802154_rsch_crit_sect_prio_changed+0xf0>
 1007686:	bf00      	nop
 1007688:	21003e87 	.word	0x21003e87
 100768c:	21003e88 	.word	0x21003e88
 1007690:	21003e89 	.word	0x21003e89
 1007694:	21003460 	.word	0x21003460
 1007698:	2100345c 	.word	0x2100345c
 100769c:	21003e82 	.word	0x21003e82
 10076a0:	21003e84 	.word	0x21003e84

010076a4 <nrf_802154_trx_receive_frame_prestarted>:

void nrf_802154_trx_receive_frame_prestarted(void)
{
 10076a4:	b538      	push	{r3, r4, r5, lr}
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 10076a6:	2000      	movs	r0, #0
 10076a8:	f008 fc50 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10076ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10076b0:	b672      	cpsid	i
    }

    assert(m_state == RADIO_STATE_RX);

#if (NRF_802154_STATS_COUNT_ENERGY_DETECTED_EVENTS)
    nrf_802154_stat_counter_increment(received_energy_events);
 10076b2:	4a14      	ldr	r2, [pc, #80]	; (1007704 <nrf_802154_trx_receive_frame_prestarted+0x60>)
 10076b4:	6893      	ldr	r3, [r2, #8]
 10076b6:	3301      	adds	r3, #1
 10076b8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10076ba:	f381 8810 	msr	PRIMASK, r1
#endif

    nrf_802154_sl_ant_div_rx_preamble_detected_notify();
 10076be:	f008 fc3e 	bl	100ff3e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 10076c2:	2000      	movs	r0, #0
 10076c4:	f008 fc42 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>
 10076c8:	4604      	mov	r4, r0

    // Antenna diversity module should be notified if framestart doesn't come.
    bool rx_timeout_should_be_started = antenna_diversity_is_enabled();

    if (nrf_802154_pib_coex_rx_request_mode_get() ==
 10076ca:	f000 fe97 	bl	10083fc <nrf_802154_pib_coex_rx_request_mode_get>
 10076ce:	2801      	cmp	r0, #1
 10076d0:	d115      	bne.n	10076fe <nrf_802154_trx_receive_frame_prestarted+0x5a>
        NRF_802154_COEX_RX_REQUEST_MODE_ENERGY_DETECTION)
    {
        // Request boosted preconditions for receive
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 10076d2:	2002      	movs	r0, #2
 10076d4:	f008 fcaa 	bl	101002c <nrf_802154_rsch_crit_sect_prio_request>
     * module.
     */
    if (rx_timeout_should_be_started)
    {

        uint32_t now = nrf_802154_timer_sched_time_get();
 10076d8:	f008 fcc5 	bl	1010066 <nrf_802154_timer_sched_time_get>

        nrf_802154_timer_sched_remove(&m_rx_prestarted_timer, NULL);
 10076dc:	4c0a      	ldr	r4, [pc, #40]	; (1007708 <nrf_802154_trx_receive_frame_prestarted+0x64>)
        uint32_t now = nrf_802154_timer_sched_time_get();
 10076de:	4605      	mov	r5, r0
        nrf_802154_timer_sched_remove(&m_rx_prestarted_timer, NULL);
 10076e0:	2100      	movs	r1, #0
 10076e2:	4620      	mov	r0, r4
 10076e4:	f008 fcca 	bl	101007c <nrf_802154_timer_sched_remove>

        m_rx_prestarted_timer.t0       = now;
        m_rx_prestarted_timer.dt       = PRESTARTED_TIMER_TIMEOUT_US;
 10076e8:	23a0      	movs	r3, #160	; 0xa0
 10076ea:	6063      	str	r3, [r4, #4]
        m_rx_prestarted_timer.callback = on_rx_prestarted_timeout;
 10076ec:	4b07      	ldr	r3, [pc, #28]	; (100770c <nrf_802154_trx_receive_frame_prestarted+0x68>)

        nrf_802154_timer_sched_add(&m_rx_prestarted_timer, true);
 10076ee:	4620      	mov	r0, r4
        m_rx_prestarted_timer.t0       = now;
 10076f0:	6025      	str	r5, [r4, #0]
        m_rx_prestarted_timer.callback = on_rx_prestarted_timeout;
 10076f2:	60a3      	str	r3, [r4, #8]
        nrf_802154_timer_sched_add(&m_rx_prestarted_timer, true);
 10076f4:	2101      	movs	r1, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 10076f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        nrf_802154_timer_sched_add(&m_rx_prestarted_timer, true);
 10076fa:	f006 b983 	b.w	100da04 <nrf_802154_timer_sched_add>
    if (rx_timeout_should_be_started)
 10076fe:	2c00      	cmp	r4, #0
 1007700:	d1ea      	bne.n	10076d8 <nrf_802154_trx_receive_frame_prestarted+0x34>
}
 1007702:	bd38      	pop	{r3, r4, r5, pc}
 1007704:	21003468 	.word	0x21003468
 1007708:	21003444 	.word	0x21003444
 100770c:	01007209 	.word	0x01007209

01007710 <nrf_802154_trx_receive_frame_started>:

void nrf_802154_trx_receive_frame_started(void)
{
 1007710:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1007712:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1007716:	b672      	cpsid	i

    assert(m_state == RADIO_STATE_RX);
    assert((m_trx_receive_frame_notifications_mask & TRX_RECEIVE_NOTIFICATION_STARTED) != 0U);

#if (NRF_802154_STATS_COUNT_RECEIVED_PREAMBLES)
    nrf_802154_stat_counter_increment(received_preambles);
 1007718:	4a10      	ldr	r2, [pc, #64]	; (100775c <nrf_802154_trx_receive_frame_started+0x4c>)
 100771a:	68d3      	ldr	r3, [r2, #12]
 100771c:	3301      	adds	r3, #1
 100771e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1007720:	f381 8810 	msr	PRIMASK, r1
#endif

    switch (nrf_802154_pib_coex_rx_request_mode_get())
 1007724:	f000 fe6a 	bl	10083fc <nrf_802154_pib_coex_rx_request_mode_get>
 1007728:	2801      	cmp	r0, #1
 100772a:	d00d      	beq.n	1007748 <nrf_802154_trx_receive_frame_started+0x38>
 100772c:	2802      	cmp	r0, #2
 100772e:	d00f      	beq.n	1007750 <nrf_802154_trx_receive_frame_started+0x40>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 1007730:	2000      	movs	r0, #0
 1007732:	f008 fc0b 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>

        default:
            break;
    }

    if (antenna_diversity_is_enabled())
 1007736:	b178      	cbz	r0, 1007758 <nrf_802154_trx_receive_frame_started+0x48>
    {
        // If antenna diversity is enabled, rx_prestarted_timer would be started even
        // in different coex rx request modes than NRF_802154_COEX_RX_REQUEST_MODE_ENERGY_DETECTION
        nrf_802154_timer_sched_remove(&m_rx_prestarted_timer, NULL);
 1007738:	2100      	movs	r1, #0
 100773a:	4809      	ldr	r0, [pc, #36]	; (1007760 <nrf_802154_trx_receive_frame_started+0x50>)
 100773c:	f008 fc9e 	bl	101007c <nrf_802154_timer_sched_remove>
        nrf_802154_sl_ant_div_rx_frame_started_notify();
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_sl_ant_div_rx_frame_started_notify();
 1007744:	f008 bbf6 	b.w	100ff34 <nrf_802154_sl_ant_div_rx_frame_started_notify>
            nrf_802154_timer_sched_remove(&m_rx_prestarted_timer, NULL);
 1007748:	2100      	movs	r1, #0
 100774a:	4805      	ldr	r0, [pc, #20]	; (1007760 <nrf_802154_trx_receive_frame_started+0x50>)
 100774c:	f008 fc96 	bl	101007c <nrf_802154_timer_sched_remove>
            nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 1007750:	2002      	movs	r0, #2
 1007752:	f008 fc6b 	bl	101002c <nrf_802154_rsch_crit_sect_prio_request>
            break;
 1007756:	e7eb      	b.n	1007730 <nrf_802154_trx_receive_frame_started+0x20>
}
 1007758:	bd08      	pop	{r3, pc}
 100775a:	bf00      	nop
 100775c:	21003468 	.word	0x21003468
 1007760:	21003444 	.word	0x21003444

01007764 <nrf_802154_trx_receive_frame_bcmatched>:

#if !NRF_802154_DISABLE_BCC_MATCHING
uint8_t nrf_802154_trx_receive_frame_bcmatched(uint8_t bcc)
{
 1007764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    prev_num_data_bytes = num_data_bytes;

    assert(num_data_bytes >= PHR_SIZE + FCF_SIZE);
    assert(m_state == RADIO_STATE_RX);

    if (!m_flags.frame_filtered)
 1007768:	4d53      	ldr	r5, [pc, #332]	; (10078b8 <nrf_802154_trx_receive_frame_bcmatched+0x154>)
{
 100776a:	4604      	mov	r4, r0
    if (!m_flags.frame_filtered)
 100776c:	782b      	ldrb	r3, [r5, #0]
    num_data_bytes      = bcc;
 100776e:	f88d 0007 	strb.w	r0, [sp, #7]
    if (!m_flags.frame_filtered)
 1007772:	f013 0601 	ands.w	r6, r3, #1
 1007776:	d168      	bne.n	100784a <nrf_802154_trx_receive_frame_bcmatched+0xe6>
    {
        filter_result = nrf_802154_filter_frame_part(&m_current_rx_frame_data,
 1007778:	f8df 8140 	ldr.w	r8, [pc, #320]	; 10078bc <nrf_802154_trx_receive_frame_bcmatched+0x158>
 100777c:	f10d 0107 	add.w	r1, sp, #7
 1007780:	4640      	mov	r0, r8
 1007782:	f002 f8df 	bl	1009944 <nrf_802154_filter_frame_part>
                                                     &num_data_bytes);

        if (filter_result == NRF_802154_RX_ERROR_NONE)
 1007786:	4607      	mov	r7, r0
 1007788:	b9b8      	cbnz	r0, 10077ba <nrf_802154_trx_receive_frame_bcmatched+0x56>
        {
            if (num_data_bytes != prev_num_data_bytes)
 100778a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100778e:	42a3      	cmp	r3, r4
 1007790:	f040 8082 	bne.w	1007898 <nrf_802154_trx_receive_frame_bcmatched+0x134>
            {
                bcc = num_data_bytes;
            }
            else
            {
                m_flags.frame_filtered = true;
 1007794:	782b      	ldrb	r3, [r5, #0]

                /* Request boosted preconditions */
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 1007796:	2002      	movs	r0, #2
                m_flags.frame_filtered = true;
 1007798:	f043 0301 	orr.w	r3, r3, #1
 100779c:	702b      	strb	r3, [r5, #0]
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 100779e:	f008 fc45 	bl	101002c <nrf_802154_rsch_crit_sect_prio_request>

                /* Request next bcc match event to occur when basic data necessary for Ack
                 * generation is received. */
                m_flags.frame_parsed = false;
 10077a2:	782b      	ldrb	r3, [r5, #0]
 10077a4:	f366 0341 	bfi	r3, r6, #1, #1
 10077a8:	702b      	strb	r3, [r5, #0]
                nrf_802154_ack_generator_reset();
 10077aa:	f007 fa25 	bl	100ebf8 <nrf_802154_ack_generator_reset>

                bcc = PHR_SIZE +
                      nrf_802154_frame_parser_addressing_end_offset_get(&m_current_rx_frame_data) +
 10077ae:	f898 4014 	ldrb.w	r4, [r8, #20]
 10077b2:	3402      	adds	r4, #2
                bcc = PHR_SIZE +
 10077b4:	b2e4      	uxtb	r4, r4
    bool                  frame_accepted = true;
 10077b6:	2601      	movs	r6, #1
 10077b8:	e013      	b.n	10077e2 <nrf_802154_trx_receive_frame_bcmatched+0x7e>
                      SECURITY_CONTROL_SIZE;
            }
        }
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
 10077ba:	2809      	cmp	r0, #9
 10077bc:	d140      	bne.n	1007840 <nrf_802154_trx_receive_frame_bcmatched+0xdc>
    nrf_802154_trx_abort();
 10077be:	f001 fb65 	bl	1008e8c <nrf_802154_trx_abort>
                 (!nrf_802154_pib_promiscuous_get()))
        {
            trx_abort();
            rx_init();
 10077c2:	f7ff fd3d 	bl	1007240 <rx_init>

            frame_accepted = false;

            /* Release boosted preconditions */
            request_preconditions_for_state(m_state);
 10077c6:	4b3e      	ldr	r3, [pc, #248]	; (10078c0 <nrf_802154_trx_receive_frame_bcmatched+0x15c>)
 10077c8:	7818      	ldrb	r0, [r3, #0]
 10077ca:	f007 f8c4 	bl	100e956 <request_preconditions_for_state>

            if ((mp_current_rx_buffer->data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) !=
 10077ce:	4b3d      	ldr	r3, [pc, #244]	; (10078c4 <nrf_802154_trx_receive_frame_bcmatched+0x160>)
 10077d0:	681b      	ldr	r3, [r3, #0]
 10077d2:	785b      	ldrb	r3, [r3, #1]
 10077d4:	f003 0307 	and.w	r3, r3, #7
 10077d8:	2b02      	cmp	r3, #2
 10077da:	d002      	beq.n	10077e2 <nrf_802154_trx_receive_frame_bcmatched+0x7e>
                FRAME_TYPE_ACK)
            {
                receive_failed_notify(filter_result);
 10077dc:	4638      	mov	r0, r7
 10077de:	f7ff fc69 	bl	10070b4 <receive_failed_notify>
    else
    {
        // Nothing to do
    }

    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 10077e2:	782b      	ldrb	r3, [r5, #0]
 10077e4:	075a      	lsls	r2, r3, #29
 10077e6:	d415      	bmi.n	1007814 <nrf_802154_trx_receive_frame_bcmatched+0xb0>
 10077e8:	b1a6      	cbz	r6, 1007814 <nrf_802154_trx_receive_frame_bcmatched+0xb0>
    {
        if (nrf_802154_rsch_timeslot_request(nrf_802154_rx_duration_get(
                                                 mp_current_rx_buffer->data[0],
 10077ea:	4f36      	ldr	r7, [pc, #216]	; (10078c4 <nrf_802154_trx_receive_frame_bcmatched+0x160>)
 10077ec:	6838      	ldr	r0, [r7, #0]
        if (nrf_802154_rsch_timeslot_request(nrf_802154_rx_duration_get(
 10077ee:	7806      	ldrb	r6, [r0, #0]
 10077f0:	f007 f899 	bl	100e926 <ack_is_requested>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10077f4:	0173      	lsls	r3, r6, #5
{
    // SHR + PHR + PSDU
    // if ACK: + aTurnaroundTime + ACK frame duration
    uint16_t us_time = nrf_802154_frame_duration_get(psdu_length, true, true);

    if (ack_requested)
 10077f6:	2800      	cmp	r0, #0
 10077f8:	d150      	bne.n	100789c <nrf_802154_trx_receive_frame_bcmatched+0x138>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SHR_SYMBOLS);
 10077fa:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 10077fe:	f008 fbe3 	bl	100ffc8 <nrf_802154_rsch_timeslot_request>
 1007802:	2800      	cmp	r0, #0
 1007804:	d04d      	beq.n	10078a2 <nrf_802154_trx_receive_frame_bcmatched+0x13e>
                                                 ack_is_requested(mp_current_rx_buffer->data))))
        {
            m_flags.rx_timeslot_requested = true;
 1007806:	782b      	ldrb	r3, [r5, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
 1007808:	6838      	ldr	r0, [r7, #0]
            m_flags.rx_timeslot_requested = true;
 100780a:	f043 0304 	orr.w	r3, r3, #4
 100780e:	702b      	strb	r3, [r5, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
 1007810:	f007 f90e 	bl	100ea30 <nrf_802154_core_hooks_rx_started>

            nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_TIMESLOT_ENDED, m_rx_window_id);
        }
    }

    if (m_flags.frame_filtered &&
 1007814:	782b      	ldrb	r3, [r5, #0]
 1007816:	f003 0303 	and.w	r3, r3, #3
 100781a:	2b03      	cmp	r3, #3
 100781c:	d10c      	bne.n	1007838 <nrf_802154_trx_receive_frame_bcmatched+0xd4>
 * @retval  false AR bit is not set.
 */
static inline bool nrf_802154_frame_parser_ar_bit_is_set(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 100781e:	4d27      	ldr	r5, [pc, #156]	; (10078bc <nrf_802154_trx_receive_frame_bcmatched+0x158>)
 1007820:	682b      	ldr	r3, [r5, #0]
 1007822:	785b      	ldrb	r3, [r3, #1]
        m_flags.frame_parsed &&
 1007824:	069b      	lsls	r3, r3, #26
 1007826:	d507      	bpl.n	1007838 <nrf_802154_trx_receive_frame_bcmatched+0xd4>
        nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
        nrf_802154_pib_auto_ack_get())
 1007828:	f000 fd44 	bl	10082b4 <nrf_802154_pib_auto_ack_get>
        nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
 100782c:	b120      	cbz	r0, 1007838 <nrf_802154_trx_receive_frame_bcmatched+0xd4>
    {
        mp_ack = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
 100782e:	4628      	mov	r0, r5
 1007830:	f007 f9e9 	bl	100ec06 <nrf_802154_ack_generator_create>
 1007834:	4b24      	ldr	r3, [pc, #144]	; (10078c8 <nrf_802154_trx_receive_frame_bcmatched+0x164>)
 1007836:	6018      	str	r0, [r3, #0]
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return bcc;
}
 1007838:	4620      	mov	r0, r4
 100783a:	b002      	add	sp, #8
 100783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                 (!nrf_802154_pib_promiscuous_get()))
 1007840:	f000 fd28 	bl	1008294 <nrf_802154_pib_promiscuous_get>
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
 1007844:	2800      	cmp	r0, #0
 1007846:	d0ba      	beq.n	10077be <nrf_802154_trx_receive_frame_bcmatched+0x5a>
 1007848:	e7b5      	b.n	10077b6 <nrf_802154_trx_receive_frame_bcmatched+0x52>
    else if (!m_flags.frame_parsed)
 100784a:	0798      	lsls	r0, r3, #30
 100784c:	d4b3      	bmi.n	10077b6 <nrf_802154_trx_receive_frame_bcmatched+0x52>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100784e:	4f1b      	ldr	r7, [pc, #108]	; (10078bc <nrf_802154_trx_receive_frame_bcmatched+0x158>)
 1007850:	683b      	ldr	r3, [r7, #0]
 1007852:	785b      	ldrb	r3, [r3, #1]
        if (nrf_802154_frame_parser_security_enabled_bit_is_set(&m_current_rx_frame_data))
 1007854:	0719      	lsls	r1, r3, #28
 1007856:	d517      	bpl.n	1007888 <nrf_802154_trx_receive_frame_bcmatched+0x124>
            if (nrf_802154_frame_parser_valid_data_extend(
 1007858:	2205      	movs	r2, #5
 100785a:	4621      	mov	r1, r4
 100785c:	4638      	mov	r0, r7
 100785e:	f007 f997 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
 1007862:	b120      	cbz	r0, 100786e <nrf_802154_trx_receive_frame_bcmatched+0x10a>
                m_flags.frame_parsed = true;
 1007864:	782b      	ldrb	r3, [r5, #0]
 1007866:	f043 0302 	orr.w	r3, r3, #2
 100786a:	702b      	strb	r3, [r5, #0]
 100786c:	e7b9      	b.n	10077e2 <nrf_802154_trx_receive_frame_bcmatched+0x7e>
            else if (nrf_802154_frame_parser_valid_data_extend(
 100786e:	2204      	movs	r2, #4
 1007870:	4638      	mov	r0, r7
 1007872:	f89d 1007 	ldrb.w	r1, [sp, #7]
 1007876:	f007 f98b 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
 100787a:	4606      	mov	r6, r0
 100787c:	2800      	cmp	r0, #0
 100787e:	d09a      	beq.n	10077b6 <nrf_802154_trx_receive_frame_bcmatched+0x52>
                bcc = PHR_SIZE +
 1007880:	7d7c      	ldrb	r4, [r7, #21]
 1007882:	3401      	adds	r4, #1
 1007884:	b2e4      	uxtb	r4, r4
 1007886:	e7ac      	b.n	10077e2 <nrf_802154_trx_receive_frame_bcmatched+0x7e>
        else if (nrf_802154_frame_parser_valid_data_extend(
 1007888:	2203      	movs	r2, #3
 100788a:	4621      	mov	r1, r4
 100788c:	4638      	mov	r0, r7
 100788e:	f007 f97f 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
 1007892:	2800      	cmp	r0, #0
 1007894:	d1e6      	bne.n	1007864 <nrf_802154_trx_receive_frame_bcmatched+0x100>
 1007896:	e78e      	b.n	10077b6 <nrf_802154_trx_receive_frame_bcmatched+0x52>
 1007898:	461c      	mov	r4, r3
 100789a:	e78c      	b.n	10077b6 <nrf_802154_trx_receive_frame_bcmatched+0x52>
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(A_TURNAROUND_TIME_SYMBOLS +
 100789c:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 10078a0:	e7ad      	b.n	10077fe <nrf_802154_trx_receive_frame_bcmatched+0x9a>
    nrf_802154_trx_abort();
 10078a2:	f001 faf3 	bl	1008e8c <nrf_802154_trx_abort>
            rx_init();
 10078a6:	f7ff fccb 	bl	1007240 <rx_init>
            nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_TIMESLOT_ENDED, m_rx_window_id);
 10078aa:	4b08      	ldr	r3, [pc, #32]	; (10078cc <nrf_802154_trx_receive_frame_bcmatched+0x168>)
 10078ac:	2005      	movs	r0, #5
 10078ae:	6819      	ldr	r1, [r3, #0]
 10078b0:	f007 fa2c 	bl	100ed0c <nrf_802154_notify_receive_failed>
 10078b4:	e7ae      	b.n	1007814 <nrf_802154_trx_receive_frame_bcmatched+0xb0>
 10078b6:	bf00      	nop
 10078b8:	21003e84 	.word	0x21003e84
 10078bc:	21003428 	.word	0x21003428
 10078c0:	21003e89 	.word	0x21003e89
 10078c4:	21003460 	.word	0x21003460
 10078c8:	2100345c 	.word	0x2100345c
 10078cc:	21003458 	.word	0x21003458

010078d0 <nrf_802154_trx_receive_frame_crcerror>:
    m_flags.frame_filtered        = false;
 10078d0:	4a0a      	ldr	r2, [pc, #40]	; (10078fc <nrf_802154_trx_receive_frame_crcerror+0x2c>)
}

#endif

void nrf_802154_trx_receive_frame_crcerror(void)
{
 10078d2:	b508      	push	{r3, lr}
    m_flags.frame_filtered        = false;
 10078d4:	7813      	ldrb	r3, [r2, #0]
 10078d6:	f023 0307 	bic.w	r3, r3, #7
 10078da:	7013      	strb	r3, [r2, #0]

#endif

    assert(m_state == RADIO_STATE_RX);
    rx_flags_clear();
    rx_data_clear();
 10078dc:	f7ff fc1e 	bl	100711c <rx_data_clear>

    // We don't change receive buffer, receive will go to the same that was already used
#if !NRF_802154_DISABLE_BCC_MATCHING
    request_preconditions_for_state(m_state);
 10078e0:	4b07      	ldr	r3, [pc, #28]	; (1007900 <nrf_802154_trx_receive_frame_crcerror+0x30>)
 10078e2:	7818      	ldrb	r0, [r3, #0]
 10078e4:	f007 f837 	bl	100e956 <request_preconditions_for_state>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U, m_trx_receive_frame_notifications_mask);
 10078e8:	4b06      	ldr	r3, [pc, #24]	; (1007904 <nrf_802154_trx_receive_frame_crcerror+0x34>)
 10078ea:	2003      	movs	r0, #3
 10078ec:	7819      	ldrb	r1, [r3, #0]
 10078ee:	f001 f8bf 	bl	1008a70 <nrf_802154_trx_receive_frame>
#if NRF_802154_NOTIFY_CRCERROR
    receive_failed_notify(NRF_802154_RX_ERROR_INVALID_FCS);
#endif // NRF_802154_NOTIFY_CRCERROR

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 10078f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    receive_failed_notify(NRF_802154_RX_ERROR_INVALID_FCS);
 10078f6:	2002      	movs	r0, #2
 10078f8:	f7ff bbdc 	b.w	10070b4 <receive_failed_notify>
 10078fc:	21003e84 	.word	0x21003e84
 1007900:	21003e89 	.word	0x21003e89
 1007904:	21003e8a 	.word	0x21003e8a

01007908 <nrf_802154_trx_receive_frame_received>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_trx_receive_frame_received(void)
{
 1007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    uint8_t * p_received_data = mp_current_rx_buffer->data;
 100790c:	4d4d      	ldr	r5, [pc, #308]	; (1007a44 <nrf_802154_trx_receive_frame_received+0x13c>)
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
        return;
    }
#endif // NRF_802154_DISABLE_BCC_MATCHING

    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 100790e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1007a48 <nrf_802154_trx_receive_frame_received+0x140>
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 1007912:	682c      	ldr	r4, [r5, #0]
    m_last_rssi = rssi_last_measurement_get();
 1007914:	f007 f817 	bl	100e946 <rssi_last_measurement_get>
 1007918:	4b4c      	ldr	r3, [pc, #304]	; (1007a4c <nrf_802154_trx_receive_frame_received+0x144>)
 100791a:	7018      	strb	r0, [r3, #0]
    uint32_t lqi = RX_FRAME_LQI(p_data);
 100791c:	7823      	ldrb	r3, [r4, #0]
 100791e:	4423      	add	r3, r4
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
 1007920:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 1007924:	f007 f8be 	bl	100eaa4 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
 1007928:	0080      	lsls	r0, r0, #2
    return (uint8_t)lqi;
 100792a:	28ff      	cmp	r0, #255	; 0xff
 100792c:	bf28      	it	cs
 100792e:	20ff      	movcs	r0, #255	; 0xff
 1007930:	4b47      	ldr	r3, [pc, #284]	; (1007a50 <nrf_802154_trx_receive_frame_received+0x148>)
 1007932:	7018      	strb	r0, [r3, #0]
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 1007934:	f898 3000 	ldrb.w	r3, [r8]
 1007938:	07d9      	lsls	r1, r3, #31
 100793a:	d528      	bpl.n	100798e <nrf_802154_trx_receive_frame_received+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100793c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1007940:	b672      	cpsid	i
    {
        nrf_802154_stat_counter_increment(received_frames);
 1007942:	4e44      	ldr	r6, [pc, #272]	; (1007a54 <nrf_802154_trx_receive_frame_received+0x14c>)
 1007944:	6873      	ldr	r3, [r6, #4]
 1007946:	3301      	adds	r3, #1
 1007948:	6073      	str	r3, [r6, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100794a:	f382 8810 	msr	PRIMASK, r2
    return p_parser_data->p_frame[PHR_OFFSET];
 100794e:	4f42      	ldr	r7, [pc, #264]	; (1007a58 <nrf_802154_trx_receive_frame_received+0x150>)
        uint32_t ts = timer_coord_timestamp_get();

        nrf_802154_stat_timestamp_write(last_rx_end_timestamp, ts);
#endif

        nrf_802154_sl_ant_div_rx_frame_received_notify();
 1007950:	f008 faf2 	bl	100ff38 <nrf_802154_sl_ant_div_rx_frame_received_notify>
 1007954:	683b      	ldr	r3, [r7, #0]

        bool send_ack     = false;
        bool parse_result = nrf_802154_frame_parser_valid_data_extend(
 1007956:	2206      	movs	r2, #6
            &m_current_rx_frame_data,
            PHR_SIZE + nrf_802154_frame_parser_frame_length_get(&m_current_rx_frame_data),
 1007958:	7819      	ldrb	r1, [r3, #0]
        bool parse_result = nrf_802154_frame_parser_valid_data_extend(
 100795a:	4638      	mov	r0, r7
            PHR_SIZE + nrf_802154_frame_parser_frame_length_get(&m_current_rx_frame_data),
 100795c:	3101      	adds	r1, #1
        bool parse_result = nrf_802154_frame_parser_valid_data_extend(
 100795e:	b2c9      	uxtb	r1, r1
 1007960:	f007 f916 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
            PARSE_LEVEL_FULL);

        if (m_flags.frame_filtered &&
 1007964:	f898 3000 	ldrb.w	r3, [r8]
 1007968:	07da      	lsls	r2, r3, #31
 100796a:	d41f      	bmi.n	10079ac <nrf_802154_trx_receive_frame_received+0xa4>
                received_frame_notify_and_nesting_allow(p_received_data);
            }
        }
        else
        {
            request_preconditions_for_state(m_state);
 100796c:	4b3b      	ldr	r3, [pc, #236]	; (1007a5c <nrf_802154_trx_receive_frame_received+0x154>)
 100796e:	7818      	ldrb	r0, [r3, #0]
 1007970:	f006 fff1 	bl	100e956 <request_preconditions_for_state>
            // Filter out received ACK frame if promiscuous mode is disabled.
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
 1007974:	7863      	ldrb	r3, [r4, #1]
 1007976:	f003 0307 	and.w	r3, r3, #7
 100797a:	2b02      	cmp	r3, #2
 100797c:	d057      	beq.n	1007a2e <nrf_802154_trx_receive_frame_received+0x126>
                nrf_802154_pib_promiscuous_get())
            {
                // Current buffer will be passed to the application
                mp_current_rx_buffer->free = false;
 100797e:	2200      	movs	r2, #0
 1007980:	682b      	ldr	r3, [r5, #0]
 1007982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

                // Find new buffer
                rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 1007986:	f000 fd8d 	bl	10084a4 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 100798a:	6028      	str	r0, [r5, #0]

                rx_init();
 100798c:	e036      	b.n	10079fc <nrf_802154_trx_receive_frame_received+0xf4>
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 100798e:	f000 fc81 	bl	1008294 <nrf_802154_pib_promiscuous_get>
 1007992:	2800      	cmp	r0, #0
 1007994:	d1d2      	bne.n	100793c <nrf_802154_trx_receive_frame_received+0x34>
    else
    {
        // CRC is OK, but filtering operation did not end - it is invalid frame with valid CRC
        // or problem due to software latency (i.e. handled BCMATCH, CRCERROR, CRCOK from two
        // consecutively received frames).
        request_preconditions_for_state(m_state);
 1007996:	4b31      	ldr	r3, [pc, #196]	; (1007a5c <nrf_802154_trx_receive_frame_received+0x154>)
 1007998:	7818      	ldrb	r0, [r3, #0]
 100799a:	f006 ffdc 	bl	100e956 <request_preconditions_for_state>
        rx_init();
 100799e:	f7ff fc4f 	bl	1007240 <rx_init>
        receive_failed_notify(NRF_802154_RX_ERROR_RUNTIME);
#endif  // NRF_802154_DISABLE_BCC_MATCHING
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 10079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        receive_failed_notify(NRF_802154_RX_ERROR_RUNTIME);
 10079a6:	2004      	movs	r0, #4
 10079a8:	f7ff bb84 	b.w	10070b4 <receive_failed_notify>
        if (m_flags.frame_filtered &&
 10079ac:	2800      	cmp	r0, #0
 10079ae:	d0dd      	beq.n	100796c <nrf_802154_trx_receive_frame_received+0x64>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 10079b0:	683b      	ldr	r3, [r7, #0]
 10079b2:	785b      	ldrb	r3, [r3, #1]
            parse_result &&
 10079b4:	069b      	lsls	r3, r3, #26
 10079b6:	d5d9      	bpl.n	100796c <nrf_802154_trx_receive_frame_received+0x64>
            nrf_802154_pib_auto_ack_get())
 10079b8:	f000 fc7c 	bl	10082b4 <nrf_802154_pib_auto_ack_get>
            nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
 10079bc:	2800      	cmp	r0, #0
 10079be:	d0d5      	beq.n	100796c <nrf_802154_trx_receive_frame_received+0x64>
            nrf_802154_tx_work_buffer_reset(&m_default_frame_props);
 10079c0:	4827      	ldr	r0, [pc, #156]	; (1007a60 <nrf_802154_trx_receive_frame_received+0x158>)
 10079c2:	f001 fe67 	bl	1009694 <nrf_802154_tx_work_buffer_reset>
            mp_ack   = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
 10079c6:	4638      	mov	r0, r7
 10079c8:	f007 f91d 	bl	100ec06 <nrf_802154_ack_generator_create>
 10079cc:	4f25      	ldr	r7, [pc, #148]	; (1007a64 <nrf_802154_trx_receive_frame_received+0x15c>)
 10079ce:	6038      	str	r0, [r7, #0]
        if (send_ack)
 10079d0:	2800      	cmp	r0, #0
 10079d2:	d0cb      	beq.n	100796c <nrf_802154_trx_receive_frame_received+0x64>
            state_set(RADIO_STATE_TX_ACK);
 10079d4:	2003      	movs	r0, #3
 10079d6:	f7ff fc11 	bl	10071fc <state_set>
            if (is_state_allowed_for_prio(m_rsch_priority, RADIO_STATE_TX_ACK))
 10079da:	4b23      	ldr	r3, [pc, #140]	; (1007a68 <nrf_802154_trx_receive_frame_received+0x160>)
 10079dc:	781b      	ldrb	r3, [r3, #0]
 10079de:	2b03      	cmp	r3, #3
 10079e0:	d913      	bls.n	1007a0a <nrf_802154_trx_receive_frame_received+0x102>
                if (nrf_802154_trx_transmit_ack(nrf_802154_tx_work_buffer_get(mp_ack), ACK_IFS))
 10079e2:	6838      	ldr	r0, [r7, #0]
 10079e4:	f001 fe6e 	bl	10096c4 <nrf_802154_tx_work_buffer_get>
 10079e8:	21c0      	movs	r1, #192	; 0xc0
 10079ea:	f001 f9d5 	bl	1008d98 <nrf_802154_trx_transmit_ack>
 10079ee:	bb30      	cbnz	r0, 1007a3e <nrf_802154_trx_receive_frame_received+0x136>
                    mp_current_rx_buffer->free = false;
 10079f0:	682b      	ldr	r3, [r5, #0]
 10079f2:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
                state_set(RADIO_STATE_RX);
 10079f6:	2002      	movs	r0, #2
 10079f8:	f7ff fc00 	bl	10071fc <state_set>
                rx_init();
 10079fc:	f7ff fc20 	bl	1007240 <rx_init>
                received_frame_notify_and_nesting_allow(p_received_data);
 1007a00:	4620      	mov	r0, r4
}
 1007a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                received_frame_notify_and_nesting_allow(p_received_data);
 1007a06:	f7ff bb65 	b.w	10070d4 <received_frame_notify_and_nesting_allow>
                if (!nrf_802154_rsch_prec_is_approved(RSCH_PREC_COEX,
 1007a0a:	2104      	movs	r1, #4
 1007a0c:	2002      	movs	r0, #2
 1007a0e:	f005 fe97 	bl	100d740 <nrf_802154_rsch_prec_is_approved>
 1007a12:	b938      	cbnz	r0, 1007a24 <nrf_802154_trx_receive_frame_received+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1007a14:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1007a18:	b672      	cpsid	i
                    nrf_802154_stat_counter_increment(coex_denied_requests);
 1007a1a:	69b3      	ldr	r3, [r6, #24]
 1007a1c:	3301      	adds	r3, #1
 1007a1e:	61b3      	str	r3, [r6, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1007a20:	f382 8810 	msr	PRIMASK, r2
                mp_current_rx_buffer->free = false;
 1007a24:	2200      	movs	r2, #0
 1007a26:	682b      	ldr	r3, [r5, #0]
 1007a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 1007a2c:	e7e3      	b.n	10079f6 <nrf_802154_trx_receive_frame_received+0xee>
                nrf_802154_pib_promiscuous_get())
 1007a2e:	f000 fc31 	bl	1008294 <nrf_802154_pib_promiscuous_get>
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
 1007a32:	2800      	cmp	r0, #0
 1007a34:	d1a3      	bne.n	100797e <nrf_802154_trx_receive_frame_received+0x76>
}
 1007a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                rx_init();
 1007a3a:	f7ff bc01 	b.w	1007240 <rx_init>
}
 1007a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1007a42:	bf00      	nop
 1007a44:	21003460 	.word	0x21003460
 1007a48:	21003e84 	.word	0x21003e84
 1007a4c:	21003e86 	.word	0x21003e86
 1007a50:	21003e85 	.word	0x21003e85
 1007a54:	21003468 	.word	0x21003468
 1007a58:	21003428 	.word	0x21003428
 1007a5c:	21003e89 	.word	0x21003e89
 1007a60:	010105e2 	.word	0x010105e2
 1007a64:	2100345c 	.word	0x2100345c
 1007a68:	21003e87 	.word	0x21003e87

01007a6c <nrf_802154_trx_transmit_frame_started>:
    uint8_t * p_frame = mp_tx_data;
 1007a6c:	4b06      	ldr	r3, [pc, #24]	; (1007a88 <nrf_802154_trx_transmit_frame_started+0x1c>)

void nrf_802154_trx_transmit_frame_started(void)
{
 1007a6e:	b510      	push	{r4, lr}
    uint8_t * p_frame = mp_tx_data;
 1007a70:	681c      	ldr	r4, [r3, #0]
    if (nrf_802154_core_hooks_tx_started(p_frame))
 1007a72:	4620      	mov	r0, r4
 1007a74:	f000 fb42 	bl	10080fc <nrf_802154_core_hooks_tx_started>
 1007a78:	b120      	cbz	r0, 1007a84 <nrf_802154_trx_transmit_frame_started+0x18>
        nrf_802154_tx_started(p_frame);
 1007a7a:	4620      	mov	r0, r4

    assert((m_state == RADIO_STATE_TX) || (m_state == RADIO_STATE_CCA_TX));
    transmit_started_notify();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_802154_tx_started(p_frame);
 1007a80:	f006 bf43 	b.w	100e90a <nrf_802154_tx_started>
}
 1007a84:	bd10      	pop	{r4, pc}
 1007a86:	bf00      	nop
 1007a88:	21003464 	.word	0x21003464

01007a8c <nrf_802154_trx_transmit_ack_started>:

void nrf_802154_trx_transmit_ack_started(void)
{
 1007a8c:	b510      	push	{r4, lr}
    nrf_802154_core_hooks_tx_ack_started(mp_ack);
 1007a8e:	4c04      	ldr	r4, [pc, #16]	; (1007aa0 <nrf_802154_trx_transmit_ack_started+0x14>)
 1007a90:	6820      	ldr	r0, [r4, #0]
 1007a92:	f006 ffd0 	bl	100ea36 <nrf_802154_core_hooks_tx_ack_started>
    nrf_802154_tx_ack_started(mp_ack);
 1007a96:	6820      	ldr	r0, [r4, #0]

    assert(m_state == RADIO_STATE_TX_ACK);
    transmit_ack_started_notify();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_tx_ack_started(mp_ack);
 1007a9c:	f003 bc62 	b.w	100b364 <nrf_802154_tx_ack_started>
 1007aa0:	2100345c 	.word	0x2100345c

01007aa4 <nrf_802154_trx_transmit_ack_transmitted>:
                                                                          true);

    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
#endif

    uint8_t * p_received_data = mp_current_rx_buffer->data;
 1007aa4:	4b07      	ldr	r3, [pc, #28]	; (1007ac4 <nrf_802154_trx_transmit_ack_transmitted+0x20>)
{
 1007aa6:	b510      	push	{r4, lr}
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 1007aa8:	681c      	ldr	r4, [r3, #0]

    // Current buffer used for receive operation will be passed to the application
    mp_current_rx_buffer->free = false;
 1007aaa:	2300      	movs	r3, #0

    state_set(RADIO_STATE_RX);
 1007aac:	2002      	movs	r0, #2
    mp_current_rx_buffer->free = false;
 1007aae:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    state_set(RADIO_STATE_RX);
 1007ab2:	f7ff fba3 	bl	10071fc <state_set>

    rx_init();
 1007ab6:	f7ff fbc3 	bl	1007240 <rx_init>

    received_frame_notify_and_nesting_allow(p_received_data);
 1007aba:	4620      	mov	r0, r4

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    received_frame_notify_and_nesting_allow(p_received_data);
 1007ac0:	f7ff bb08 	b.w	10070d4 <received_frame_notify_and_nesting_allow>
 1007ac4:	21003460 	.word	0x21003460

01007ac8 <nrf_802154_trx_transmit_frame_transmitted>:
    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
#endif
#endif

    if (ack_is_requested(mp_tx_data))
 1007ac8:	4b15      	ldr	r3, [pc, #84]	; (1007b20 <nrf_802154_trx_transmit_frame_transmitted+0x58>)
{
 1007aca:	b510      	push	{r4, lr}
    if (ack_is_requested(mp_tx_data))
 1007acc:	6818      	ldr	r0, [r3, #0]
 1007ace:	f006 ff2a 	bl	100e926 <ack_is_requested>
 1007ad2:	4604      	mov	r4, r0
 1007ad4:	b1b0      	cbz	r0, 1007b04 <nrf_802154_trx_transmit_frame_transmitted+0x3c>
    {
        state_set(RADIO_STATE_RX_ACK);
 1007ad6:	2006      	movs	r0, #6
 1007ad8:	f7ff fb90 	bl	10071fc <state_set>

        bool rx_buffer_free = rx_buffer_is_available();
 1007adc:	f7ff fad6 	bl	100708c <rx_buffer_is_available>
 1007ae0:	4604      	mov	r4, r0

        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1007ae2:	f7ff fadd 	bl	10070a0 <rx_buffer_get>
 1007ae6:	f000 ff95 	bl	1008a14 <nrf_802154_trx_receive_buffer_set>
        nrf_802154_timer_coord_timestamp_prepare(nrf_radio_event_address_get(NRF_RADIO,
                                                                             NRF_RADIO_EVENT_CRCOK));
#endif
#endif

        nrf_802154_trx_receive_ack();
 1007aea:	f001 f84d 	bl	1008b88 <nrf_802154_trx_receive_ack>

#if NRF_802154_TOTAL_TIMES_MEASUREMENT_ENABLED
        m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
#endif

        if (!rx_buffer_free)
 1007aee:	b9ac      	cbnz	r4, 1007b1c <nrf_802154_trx_transmit_frame_transmitted+0x54>
        {
            rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 1007af0:	f000 fcd8 	bl	10084a4 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 1007af4:	4b0b      	ldr	r3, [pc, #44]	; (1007b24 <nrf_802154_trx_transmit_frame_transmitted+0x5c>)
 1007af6:	6018      	str	r0, [r3, #0]

            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1007af8:	f7ff fad2 	bl	10070a0 <rx_buffer_get>

        transmitted_frame_notify(NULL, 0, 0);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1007b00:	f000 bf88 	b.w	1008a14 <nrf_802154_trx_receive_buffer_set>
        state_set(RADIO_STATE_RX);
 1007b04:	2002      	movs	r0, #2
 1007b06:	f7ff fb79 	bl	10071fc <state_set>
        rx_init();
 1007b0a:	f7ff fb99 	bl	1007240 <rx_init>
        transmitted_frame_notify(NULL, 0, 0);
 1007b0e:	4622      	mov	r2, r4
 1007b10:	4621      	mov	r1, r4
 1007b12:	4620      	mov	r0, r4
}
 1007b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        transmitted_frame_notify(NULL, 0, 0);
 1007b18:	f7ff bb1c 	b.w	1007154 <transmitted_frame_notify>
}
 1007b1c:	bd10      	pop	{r4, pc}
 1007b1e:	bf00      	nop
 1007b20:	21003464 	.word	0x21003464
 1007b24:	21003460 	.word	0x21003460

01007b28 <nrf_802154_trx_receive_ack_received>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_trx_receive_ack_received(void)
{
 1007b28:	b530      	push	{r4, r5, lr}
    update_total_times_on_receive_end(listening_start_hp_timestamp,
                                      receive_end_hp_timestamp,
                                      mp_current_rx_buffer->data[PHR_OFFSET]);
#endif

    if (ack_match_check(mp_tx_data, p_ack_data))
 1007b2a:	4b3b      	ldr	r3, [pc, #236]	; (1007c18 <nrf_802154_trx_receive_ack_received+0xf0>)
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
 1007b2c:	4d3b      	ldr	r5, [pc, #236]	; (1007c1c <nrf_802154_trx_receive_ack_received+0xf4>)
    if (ack_match_check(mp_tx_data, p_ack_data))
 1007b2e:	6818      	ldr	r0, [r3, #0]
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
 1007b30:	682c      	ldr	r4, [r5, #0]
{
 1007b32:	b08d      	sub	sp, #52	; 0x34
    if ((p_tx_data == NULL) || (p_ack_data == NULL))
 1007b34:	2800      	cmp	r0, #0
 1007b36:	d03b      	beq.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
 1007b38:	2c00      	cmp	r4, #0
 1007b3a:	d039      	beq.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
    if ((p_ack_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK)
 1007b3c:	7863      	ldrb	r3, [r4, #1]
 1007b3e:	f003 0307 	and.w	r3, r3, #7
 1007b42:	2b02      	cmp	r3, #2
 1007b44:	d134      	bne.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
    if ((p_tx_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK) == FRAME_VERSION_2)
 1007b46:	7883      	ldrb	r3, [r0, #2]
 1007b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 1007b4c:	2b20      	cmp	r3, #32
 1007b4e:	d13a      	bne.n	1007bc6 <nrf_802154_trx_receive_ack_received+0x9e>
                                                     p_tx_frame[PHR_OFFSET] + PHR_SIZE,
 1007b50:	7801      	ldrb	r1, [r0, #0]
    parse_result = nrf_802154_frame_parser_data_init(p_tx_frame,
 1007b52:	466b      	mov	r3, sp
                                                     p_tx_frame[PHR_OFFSET] + PHR_SIZE,
 1007b54:	3101      	adds	r1, #1
    parse_result = nrf_802154_frame_parser_data_init(p_tx_frame,
 1007b56:	2203      	movs	r2, #3
 1007b58:	b2c9      	uxtb	r1, r1
 1007b5a:	f006 fff9 	bl	100eb50 <nrf_802154_frame_parser_data_init>
    if (!parse_result)
 1007b5e:	b338      	cbz	r0, 1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
                                                     p_ack_frame[PHR_OFFSET] + PHR_SIZE,
 1007b60:	7821      	ldrb	r1, [r4, #0]
    parse_result = nrf_802154_frame_parser_data_init(p_ack_frame,
 1007b62:	2203      	movs	r2, #3
                                                     p_ack_frame[PHR_OFFSET] + PHR_SIZE,
 1007b64:	3101      	adds	r1, #1
    parse_result = nrf_802154_frame_parser_data_init(p_ack_frame,
 1007b66:	ab06      	add	r3, sp, #24
 1007b68:	b2c9      	uxtb	r1, r1
 1007b6a:	4620      	mov	r0, r4
 1007b6c:	f006 fff0 	bl	100eb50 <nrf_802154_frame_parser_data_init>
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1007b70:	9906      	ldr	r1, [sp, #24]
 1007b72:	4602      	mov	r2, r0
 1007b74:	788b      	ldrb	r3, [r1, #2]
    if (nrf_802154_frame_parser_frame_version_get(&ack_data) != FRAME_VERSION_2)
 1007b76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 1007b7a:	2b20      	cmp	r3, #32
 1007b7c:	d118      	bne.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
 * @returns  Offset of the frame Source Address field.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->mhr.src.addr_offset;
 1007b7e:	f89d 0009 	ldrb.w	r0, [sp, #9]
static inline const uint8_t * nrf_802154_frame_parser_src_addr_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    uint8_t offset = nrf_802154_frame_parser_src_addr_offset_get(p_parser_data);

    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1007b82:	28ff      	cmp	r0, #255	; 0xff
    {
        return NULL;
    }

    return &p_parser_data->p_frame[offset];
 1007b84:	bf16      	itet	ne
 1007b86:	9b00      	ldrne	r3, [sp, #0]
        return NULL;
 1007b88:	2000      	moveq	r0, #0
    return &p_parser_data->p_frame[offset];
 1007b8a:	18c0      	addne	r0, r0, r3
    return p_parser_data->mhr.dst.addr_offset;
 1007b8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1007b90:	2bff      	cmp	r3, #255	; 0xff
        return NULL;
 1007b92:	bf0c      	ite	eq
 1007b94:	2100      	moveq	r1, #0
    return &p_parser_data->p_frame[offset];
 1007b96:	18c9      	addne	r1, r1, r3
    if (!parse_result ||
 1007b98:	b152      	cbz	r2, 1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
 1007b9a:	b148      	cbz	r0, 1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
        (p_tx_src_addr == NULL) ||
 1007b9c:	b141      	cbz	r1, 1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
 * @returns  Source address size in bytes.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_size_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.src_addr_size;
 1007b9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
        (p_ack_dst_addr == NULL) ||
 1007ba2:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 1007ba6:	429a      	cmp	r2, r3
 1007ba8:	d102      	bne.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
        (0 != memcmp(p_tx_src_addr,
 1007baa:	f006 fccb 	bl	100e544 <memcmp>
        (tx_src_addr_size != ack_dst_addr_size) ||
 1007bae:	b1a0      	cbz	r0, 1007bda <nrf_802154_trx_receive_ack_received+0xb2>
    state_set(RADIO_STATE_RX);
 1007bb0:	2002      	movs	r0, #2
 1007bb2:	f7ff fb23 	bl	10071fc <state_set>
    rx_init();
 1007bb6:	f7ff fb43 	bl	1007240 <rx_init>
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_INVALID_ACK);
 1007bba:	2002      	movs	r0, #2
    {
        on_bad_ack();
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007bbc:	b00d      	add	sp, #52	; 0x34
 1007bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_INVALID_ACK);
 1007bc2:	f7ff ba9b 	b.w	10070fc <transmit_failed_notify_and_nesting_allow>
    if (p_ack_data[PHR_OFFSET] != IMM_ACK_LENGTH)
 1007bc6:	7823      	ldrb	r3, [r4, #0]
 1007bc8:	2b05      	cmp	r3, #5
 1007bca:	d1f1      	bne.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
    switch (p_ack_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK)
 1007bcc:	78a3      	ldrb	r3, [r4, #2]
 1007bce:	069b      	lsls	r3, r3, #26
 1007bd0:	d4ee      	bmi.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
    if (p_ack_data[DSN_OFFSET] != p_tx_data[DSN_OFFSET])
 1007bd2:	78e2      	ldrb	r2, [r4, #3]
 1007bd4:	78c3      	ldrb	r3, [r0, #3]
 1007bd6:	429a      	cmp	r2, r3
 1007bd8:	d1ea      	bne.n	1007bb0 <nrf_802154_trx_receive_ack_received+0x88>
        mp_current_rx_buffer->free = false;
 1007bda:	2300      	movs	r3, #0
        rx_buffer_t * p_ack_buffer = mp_current_rx_buffer;
 1007bdc:	682c      	ldr	r4, [r5, #0]
        state_set(RADIO_STATE_RX);
 1007bde:	2002      	movs	r0, #2
        mp_current_rx_buffer->free = false;
 1007be0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        state_set(RADIO_STATE_RX);
 1007be4:	f7ff fb0a 	bl	10071fc <state_set>
        rx_init();
 1007be8:	f7ff fb2a 	bl	1007240 <rx_init>
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 1007bec:	f006 feab 	bl	100e946 <rssi_last_measurement_get>
    uint32_t lqi = RX_FRAME_LQI(p_data);
 1007bf0:	7823      	ldrb	r3, [r4, #0]
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 1007bf2:	4605      	mov	r5, r0
    uint32_t lqi = RX_FRAME_LQI(p_data);
 1007bf4:	4423      	add	r3, r4
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
 1007bf6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 1007bfa:	f006 ff53 	bl	100eaa4 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
 1007bfe:	0082      	lsls	r2, r0, #2
    return (uint8_t)lqi;
 1007c00:	2aff      	cmp	r2, #255	; 0xff
 1007c02:	bf28      	it	cs
 1007c04:	22ff      	movcs	r2, #255	; 0xff
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 1007c06:	4629      	mov	r1, r5
 1007c08:	4620      	mov	r0, r4
 1007c0a:	b2d2      	uxtb	r2, r2
}
 1007c0c:	b00d      	add	sp, #52	; 0x34
 1007c0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 1007c12:	f7ff ba9f 	b.w	1007154 <transmitted_frame_notify>
 1007c16:	bf00      	nop
 1007c18:	21003464 	.word	0x21003464
 1007c1c:	21003460 	.word	0x21003460

01007c20 <nrf_802154_trx_transmit_frame_ccaidle>:
    // of the nrf_802154_trx_transmit_frame does not contain TRX_TRANSMIT_NOTIFICATION_CCASTARTED.
    assert(false);
}

void nrf_802154_trx_transmit_frame_ccaidle(void)
{
 1007c20:	b508      	push	{r3, lr}

    // Update stat timestamp of CCASTART event
    nrf_802154_stat_timestamp_write(last_cca_start_timestamp, ts);
#endif

    if (m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE)
 1007c22:	4b06      	ldr	r3, [pc, #24]	; (1007c3c <nrf_802154_trx_transmit_frame_ccaidle+0x1c>)
 1007c24:	781b      	ldrb	r3, [r3, #0]
 1007c26:	2b03      	cmp	r3, #3
 1007c28:	d107      	bne.n	1007c3a <nrf_802154_trx_transmit_frame_ccaidle+0x1a>
    {
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_TX);
 1007c2a:	2004      	movs	r0, #4
 1007c2c:	f008 f9fe 	bl	101002c <nrf_802154_rsch_crit_sect_prio_request>
        m_flags.tx_diminished_prio = false;
 1007c30:	4b03      	ldr	r3, [pc, #12]	; (1007c40 <nrf_802154_trx_transmit_frame_ccaidle+0x20>)
 1007c32:	781a      	ldrb	r2, [r3, #0]
 1007c34:	f36f 1204 	bfc	r2, #4, #1
 1007c38:	701a      	strb	r2, [r3, #0]
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007c3a:	bd08      	pop	{r3, pc}
 1007c3c:	21003e82 	.word	0x21003e82
 1007c40:	21003e84 	.word	0x21003e84

01007c44 <nrf_802154_trx_transmit_frame_ccabusy>:

void nrf_802154_trx_transmit_frame_ccabusy(void)
{
 1007c44:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1007c46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1007c4a:	b672      	cpsid	i
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    nrf_802154_stat_counter_increment(cca_failed_attempts);
 1007c4c:	4a07      	ldr	r2, [pc, #28]	; (1007c6c <nrf_802154_trx_transmit_frame_ccabusy+0x28>)
 1007c4e:	6813      	ldr	r3, [r2, #0]
 1007c50:	3301      	adds	r3, #1
 1007c52:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1007c54:	f381 8810 	msr	PRIMASK, r1
    uint32_t t_listening = RX_RAMP_UP_TIME + PHY_US_TIME_FROM_SYMBOLS(A_CCA_DURATION_SYMBOLS);

    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
#endif

    state_set(RADIO_STATE_RX);
 1007c58:	2002      	movs	r0, #2
 1007c5a:	f7ff facf 	bl	10071fc <state_set>
    rx_init();
 1007c5e:	f7ff faef 	bl	1007240 <rx_init>

    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_BUSY_CHANNEL);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_BUSY_CHANNEL);
 1007c66:	2001      	movs	r0, #1
 1007c68:	f7ff ba48 	b.w	10070fc <transmit_failed_notify_and_nesting_allow>
 1007c6c:	21003468 	.word	0x21003468

01007c70 <nrf_802154_trx_energy_detection_finished>:

void nrf_802154_trx_energy_detection_finished(uint8_t ed_sample)
{
 1007c70:	b538      	push	{r3, r4, r5, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (m_ed_result < ed_sample)
 1007c72:	4c20      	ldr	r4, [pc, #128]	; (1007cf4 <nrf_802154_trx_energy_detection_finished+0x84>)
    {
        // Collect maximum value of samples provided by trx
        m_ed_result = ed_sample;
    }

    if (m_ed_time_left >= ED_ITER_DURATION)
 1007c74:	4d20      	ldr	r5, [pc, #128]	; (1007cf8 <nrf_802154_trx_energy_detection_finished+0x88>)
    if (m_ed_result < ed_sample)
 1007c76:	7823      	ldrb	r3, [r4, #0]
 1007c78:	4283      	cmp	r3, r0
    if (m_ed_time_left >= ED_ITER_DURATION)
 1007c7a:	682b      	ldr	r3, [r5, #0]
        m_ed_result = ed_sample;
 1007c7c:	bf38      	it	cc
 1007c7e:	7020      	strbcc	r0, [r4, #0]
    if (m_ed_time_left >= ED_ITER_DURATION)
 1007c80:	2b7f      	cmp	r3, #127	; 0x7f
 1007c82:	d915      	bls.n	1007cb0 <nrf_802154_trx_energy_detection_finished+0x40>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1007c84:	f008 f9d0 	bl	1010028 <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
 1007c88:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
 1007c8c:	d330      	bcc.n	1007cf0 <nrf_802154_trx_energy_detection_finished+0x80>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1007c8e:	682a      	ldr	r2, [r5, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1007c90:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
 1007c92:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
 1007c94:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1007c98:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = 0U;
 1007c9c:	bf8e      	itee	hi
 1007c9e:	2200      	movhi	r2, #0
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 1007ca0:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
 1007ca4:	4618      	movls	r0, r3
 1007ca6:	602a      	str	r2, [r5, #0]
        energy_detected_notify(ed_result_get(m_ed_result));

    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1007ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_trx_energy_detection(trx_ed_count);
 1007cac:	f001 ba34 	b.w	1009118 <nrf_802154_trx_energy_detection>
    else if (nrf_802154_sl_ant_div_energy_detection_finished_notify())
 1007cb0:	f008 f948 	bl	100ff44 <nrf_802154_sl_ant_div_energy_detection_finished_notify>
 1007cb4:	b118      	cbz	r0, 1007cbe <nrf_802154_trx_energy_detection_finished+0x4e>
}
 1007cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ed_init();
 1007cba:	f7ff bb57 	b.w	100736c <ed_init>
        nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
 1007cbe:	f000 fb11 	bl	10082e4 <nrf_802154_pib_channel_get>
 1007cc2:	f006 ff1e 	bl	100eb02 <nrf_802154_trx_channel_set>
        state_set(RADIO_STATE_RX);
 1007cc6:	2002      	movs	r0, #2
 1007cc8:	f7ff fa98 	bl	10071fc <state_set>
        rx_init();
 1007ccc:	f7ff fab8 	bl	1007240 <rx_init>
    result  = nrf_802154_rssi_ed_corrected_get(ed_sample);
 1007cd0:	7820      	ldrb	r0, [r4, #0]
 1007cd2:	f006 feee 	bl	100eab2 <nrf_802154_rssi_ed_corrected_get>
    result *= ED_RESULT_FACTOR;
 1007cd6:	0084      	lsls	r4, r0, #2
    nrf_802154_critical_section_nesting_allow();
 1007cd8:	f000 faaa 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    return (uint8_t)result;
 1007cdc:	2cff      	cmp	r4, #255	; 0xff
 1007cde:	bf28      	it	cs
 1007ce0:	24ff      	movcs	r4, #255	; 0xff
    nrf_802154_notify_energy_detected(result);
 1007ce2:	b2e0      	uxtb	r0, r4
 1007ce4:	f007 f833 	bl	100ed4e <nrf_802154_notify_energy_detected>
}
 1007ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf_802154_critical_section_nesting_deny();
 1007cec:	f000 ba24 	b.w	1008138 <nrf_802154_critical_section_nesting_deny>
}
 1007cf0:	bd38      	pop	{r3, r4, r5, pc}
 1007cf2:	bf00      	nop
 1007cf4:	21003e83 	.word	0x21003e83
 1007cf8:	21003440 	.word	0x21003440

01007cfc <nrf_802154_core_init>:
/***************************************************************************************************
 * @section API functions
 **************************************************************************************************/

void nrf_802154_core_init(void)
{
 1007cfc:	b508      	push	{r3, lr}
    m_state                    = RADIO_STATE_SLEEP;
 1007cfe:	2300      	movs	r3, #0
 1007d00:	4a04      	ldr	r2, [pc, #16]	; (1007d14 <nrf_802154_core_init+0x18>)
 1007d02:	7013      	strb	r3, [r2, #0]
    m_rsch_timeslot_is_granted = false;
 1007d04:	4a04      	ldr	r2, [pc, #16]	; (1007d18 <nrf_802154_core_init+0x1c>)
 1007d06:	7013      	strb	r3, [r2, #0]

    nrf_802154_trx_init();
 1007d08:	f006 fef2 	bl	100eaf0 <nrf_802154_trx_init>
    nrf_802154_ack_generator_init();
}
 1007d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_ack_generator_init();
 1007d10:	f006 bf6b 	b.w	100ebea <nrf_802154_ack_generator_init>
 1007d14:	21003e89 	.word	0x21003e89
 1007d18:	21003e88 	.word	0x21003e88

01007d1c <nrf_802154_core_sleep>:
{
    return m_state;
}

bool nrf_802154_core_sleep(nrf_802154_term_t term_lvl)
{
 1007d1c:	b538      	push	{r3, r4, r5, lr}
 1007d1e:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
 1007d20:	f006 fe8a 	bl	100ea38 <nrf_802154_critical_section_enter>

    if (result)
 1007d24:	4604      	mov	r4, r0
 1007d26:	b130      	cbz	r0, 1007d36 <nrf_802154_core_sleep+0x1a>
    {
        if ((m_state != RADIO_STATE_SLEEP) && (m_state != RADIO_STATE_FALLING_ASLEEP))
 1007d28:	4b11      	ldr	r3, [pc, #68]	; (1007d70 <nrf_802154_core_sleep+0x54>)
 1007d2a:	781a      	ldrb	r2, [r3, #0]
 1007d2c:	b92a      	cbnz	r2, 1007d3a <nrf_802154_core_sleep+0x1e>
    bool result = nrf_802154_critical_section_enter();
 1007d2e:	4625      	mov	r5, r4
                    state_set(RADIO_STATE_SLEEP);
                }
            }
        }

        nrf_802154_critical_section_exit();
 1007d30:	f000 fa50 	bl	10081d4 <nrf_802154_critical_section_exit>
 1007d34:	462c      	mov	r4, r5
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007d36:	4620      	mov	r0, r4
 1007d38:	bd38      	pop	{r3, r4, r5, pc}
        if ((m_state != RADIO_STATE_SLEEP) && (m_state != RADIO_STATE_FALLING_ASLEEP))
 1007d3a:	781b      	ldrb	r3, [r3, #0]
 1007d3c:	2b01      	cmp	r3, #1
 1007d3e:	d0f6      	beq.n	1007d2e <nrf_802154_core_sleep+0x12>
            result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1007d40:	2201      	movs	r2, #1
 1007d42:	4628      	mov	r0, r5
 1007d44:	4611      	mov	r1, r2
 1007d46:	f7ff fbad 	bl	10074a4 <current_operation_terminate>
            if (result)
 1007d4a:	4605      	mov	r5, r0
 1007d4c:	2800      	cmp	r0, #0
 1007d4e:	d0ef      	beq.n	1007d30 <nrf_802154_core_sleep+0x14>
    return m_rsch_timeslot_is_granted;
 1007d50:	4b08      	ldr	r3, [pc, #32]	; (1007d74 <nrf_802154_core_sleep+0x58>)
 1007d52:	781b      	ldrb	r3, [r3, #0]
                if (timeslot_is_granted())
 1007d54:	b133      	cbz	r3, 1007d64 <nrf_802154_core_sleep+0x48>
                    state_set(RADIO_STATE_FALLING_ASLEEP);
 1007d56:	2001      	movs	r0, #1
 1007d58:	f7ff fa50 	bl	10071fc <state_set>
    if (nrf_802154_trx_go_idle())
 1007d5c:	f001 f94e 	bl	1008ffc <nrf_802154_trx_go_idle>
 1007d60:	2800      	cmp	r0, #0
 1007d62:	d1e4      	bne.n	1007d2e <nrf_802154_core_sleep+0x12>
    nrf_802154_timer_coord_stop();
 1007d64:	f008 f967 	bl	1010036 <nrf_802154_timer_coord_stop>
        state_set(RADIO_STATE_SLEEP);
 1007d68:	2000      	movs	r0, #0
 1007d6a:	f7ff fa47 	bl	10071fc <state_set>
 1007d6e:	e7df      	b.n	1007d30 <nrf_802154_core_sleep+0x14>
 1007d70:	21003e89 	.word	0x21003e89
 1007d74:	21003e88 	.word	0x21003e88

01007d78 <nrf_802154_core_receive>:
bool nrf_802154_core_receive(nrf_802154_term_t              term_lvl,
                             req_originator_t               req_orig,
                             nrf_802154_notification_func_t notify_function,
                             bool                           notify_abort,
                             uint32_t                       id)
{
 1007d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1007d7c:	4606      	mov	r6, r0
 1007d7e:	460f      	mov	r7, r1
 1007d80:	4615      	mov	r5, r2
 1007d82:	4698      	mov	r8, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
 1007d84:	f006 fe58 	bl	100ea38 <nrf_802154_critical_section_enter>

    if (result)
 1007d88:	4604      	mov	r4, r0
 1007d8a:	b358      	cbz	r0, 1007de4 <nrf_802154_core_receive+0x6c>
    {
        if ((m_state != RADIO_STATE_RX) && (m_state != RADIO_STATE_TX_ACK))
 1007d8c:	4b17      	ldr	r3, [pc, #92]	; (1007dec <nrf_802154_core_receive+0x74>)
 1007d8e:	781a      	ldrb	r2, [r3, #0]
 1007d90:	2a02      	cmp	r2, #2
 1007d92:	d006      	beq.n	1007da2 <nrf_802154_core_receive+0x2a>
 1007d94:	781b      	ldrb	r3, [r3, #0]
 1007d96:	2b03      	cmp	r3, #3
 1007d98:	d003      	beq.n	1007da2 <nrf_802154_core_receive+0x2a>
        {
            if (critical_section_can_be_processed_now())
 1007d9a:	f7ff f9cb 	bl	1007134 <critical_section_can_be_processed_now>
 1007d9e:	b940      	cbnz	r0, 1007db2 <nrf_802154_core_receive+0x3a>
                    rx_init();
                }
            }
            else
            {
                result = false;
 1007da0:	2400      	movs	r4, #0
            }
        }

        if (notify_function != NULL)
 1007da2:	b10d      	cbz	r5, 1007da8 <nrf_802154_core_receive+0x30>
        {
            notify_function(result);
 1007da4:	4620      	mov	r0, r4
 1007da6:	47a8      	blx	r5
        }

        nrf_802154_critical_section_exit();
 1007da8:	f000 fa14 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007dac:	4620      	mov	r0, r4
 1007dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                result = current_operation_terminate(term_lvl, req_orig, notify_abort);
 1007db2:	4642      	mov	r2, r8
 1007db4:	4639      	mov	r1, r7
 1007db6:	4630      	mov	r0, r6
 1007db8:	f7ff fb74 	bl	10074a4 <current_operation_terminate>
                if (result)
 1007dbc:	4604      	mov	r4, r0
 1007dbe:	2800      	cmp	r0, #0
 1007dc0:	d0ee      	beq.n	1007da0 <nrf_802154_core_receive+0x28>
    if (nrf_802154_wifi_coex_is_enabled())
 1007dc2:	f008 f964 	bl	101008e <nrf_802154_wifi_coex_is_enabled>
 1007dc6:	b108      	cbz	r0, 1007dcc <nrf_802154_core_receive+0x54>
        switch (nrf_802154_pib_coex_rx_request_mode_get())
 1007dc8:	f000 fb18 	bl	10083fc <nrf_802154_pib_coex_rx_request_mode_get>
                    m_trx_receive_frame_notifications_mask =
 1007dcc:	2203      	movs	r2, #3
 1007dce:	4b08      	ldr	r3, [pc, #32]	; (1007df0 <nrf_802154_core_receive+0x78>)
                    state_set(RADIO_STATE_RX);
 1007dd0:	2002      	movs	r0, #2
                    m_trx_receive_frame_notifications_mask =
 1007dd2:	701a      	strb	r2, [r3, #0]
                    m_rx_window_id = id;
 1007dd4:	9a06      	ldr	r2, [sp, #24]
 1007dd6:	4b07      	ldr	r3, [pc, #28]	; (1007df4 <nrf_802154_core_receive+0x7c>)
 1007dd8:	601a      	str	r2, [r3, #0]
                    state_set(RADIO_STATE_RX);
 1007dda:	f7ff fa0f 	bl	10071fc <state_set>
                    rx_init();
 1007dde:	f7ff fa2f 	bl	1007240 <rx_init>
 1007de2:	e7de      	b.n	1007da2 <nrf_802154_core_receive+0x2a>
        if (notify_function != NULL)
 1007de4:	2d00      	cmp	r5, #0
 1007de6:	d0e1      	beq.n	1007dac <nrf_802154_core_receive+0x34>
            notify_function(false);
 1007de8:	47a8      	blx	r5
 1007dea:	e7df      	b.n	1007dac <nrf_802154_core_receive+0x34>
 1007dec:	21003e89 	.word	0x21003e89
 1007df0:	21003e8a 	.word	0x21003e8a
 1007df4:	21003458 	.word	0x21003458

01007df8 <nrf_802154_core_transmit>:
bool nrf_802154_core_transmit(nrf_802154_term_t              term_lvl,
                              req_originator_t               req_orig,
                              uint8_t                      * p_data,
                              nrf_802154_transmit_params_t * p_params,
                              nrf_802154_notification_func_t notify_function)
{
 1007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1007dfc:	9f08      	ldr	r7, [sp, #32]
 1007dfe:	4680      	mov	r8, r0
 1007e00:	4689      	mov	r9, r1
 1007e02:	4616      	mov	r6, r2
 1007e04:	461c      	mov	r4, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1007e06:	f006 fdad 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1007e0a:	4605      	mov	r5, r0
 1007e0c:	2800      	cmp	r0, #0
 1007e0e:	d054      	beq.n	1007eba <nrf_802154_core_transmit+0xc2>
    {
        if (nrf_802154_core_hooks_pre_transmission(p_data, p_params, &transmit_failed_notify))
 1007e10:	4621      	mov	r1, r4
 1007e12:	4630      	mov	r0, r6
 1007e14:	4a2b      	ldr	r2, [pc, #172]	; (1007ec4 <nrf_802154_core_transmit+0xcc>)
 1007e16:	f006 fe04 	bl	100ea22 <nrf_802154_core_hooks_pre_transmission>
 1007e1a:	b130      	cbz	r0, 1007e2a <nrf_802154_core_transmit+0x32>
        {
            result = current_operation_terminate(term_lvl, req_orig, true);
 1007e1c:	2201      	movs	r2, #1
 1007e1e:	4649      	mov	r1, r9
 1007e20:	4640      	mov	r0, r8
 1007e22:	f7ff fb3f 	bl	10074a4 <current_operation_terminate>

            if (result)
 1007e26:	b940      	cbnz	r0, 1007e3a <nrf_802154_core_transmit+0x42>
                m_trx_transmit_frame_notifications_mask =
                    make_trx_frame_transmit_notification_mask(p_params->cca);
                m_flags.tx_diminished_prio =
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;

                state_set(p_params->cca ? RADIO_STATE_CCA_TX : RADIO_STATE_TX);
 1007e28:	2500      	movs	r5, #0
                    result = true;
                }
            }
        }

        if (notify_function != NULL)
 1007e2a:	b10f      	cbz	r7, 1007e30 <nrf_802154_core_transmit+0x38>
        {
            notify_function(result);
 1007e2c:	4628      	mov	r0, r5
 1007e2e:	47b8      	blx	r7
        }

        nrf_802154_critical_section_exit();
 1007e30:	f000 f9d0 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007e34:	4628      	mov	r0, r5
 1007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_802154_tx_work_buffer_reset(&p_params->frame_props);
 1007e3a:	4620      	mov	r0, r4
 1007e3c:	f001 fc2a 	bl	1009694 <nrf_802154_tx_work_buffer_reset>
                result = nrf_802154_core_hooks_tx_setup(p_data, p_params, &transmit_failed_notify);
 1007e40:	4621      	mov	r1, r4
 1007e42:	4630      	mov	r0, r6
 1007e44:	4a1f      	ldr	r2, [pc, #124]	; (1007ec4 <nrf_802154_core_transmit+0xcc>)
 1007e46:	f006 fdee 	bl	100ea26 <nrf_802154_core_hooks_tx_setup>
            if (result)
 1007e4a:	2800      	cmp	r0, #0
 1007e4c:	d0ec      	beq.n	1007e28 <nrf_802154_core_transmit+0x30>
                m_coex_tx_request_mode                  = nrf_802154_pib_coex_tx_request_mode_get();
 1007e4e:	f000 fadb 	bl	1008408 <nrf_802154_pib_coex_tx_request_mode_get>
 1007e52:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1007ec8 <nrf_802154_core_transmit+0xd0>
 1007e56:	f888 0000 	strb.w	r0, [r8]
    if (nrf_802154_wifi_coex_is_enabled())
 1007e5a:	f008 f918 	bl	101008e <nrf_802154_wifi_coex_is_enabled>
 1007e5e:	bb30      	cbnz	r0, 1007eae <nrf_802154_core_transmit+0xb6>
    nrf_802154_trx_transmit_notifications_t result = TRX_TRANSMIT_NOTIFICATION_NONE;
 1007e60:	2300      	movs	r3, #0
                m_trx_transmit_frame_notifications_mask =
 1007e62:	4a1a      	ldr	r2, [pc, #104]	; (1007ecc <nrf_802154_core_transmit+0xd4>)
 1007e64:	7013      	strb	r3, [r2, #0]
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
 1007e66:	f898 3000 	ldrb.w	r3, [r8]
                m_flags.tx_diminished_prio =
 1007e6a:	4a19      	ldr	r2, [pc, #100]	; (1007ed0 <nrf_802154_core_transmit+0xd8>)
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
 1007e6c:	1ed9      	subs	r1, r3, #3
 1007e6e:	424b      	negs	r3, r1
 1007e70:	414b      	adcs	r3, r1
                m_flags.tx_diminished_prio =
 1007e72:	7811      	ldrb	r1, [r2, #0]
 1007e74:	f363 1104 	bfi	r1, r3, #4, #1
                state_set(p_params->cca ? RADIO_STATE_CCA_TX : RADIO_STATE_TX);
 1007e78:	78a3      	ldrb	r3, [r4, #2]
                m_flags.tx_diminished_prio =
 1007e7a:	7011      	strb	r1, [r2, #0]
                state_set(p_params->cca ? RADIO_STATE_CCA_TX : RADIO_STATE_TX);
 1007e7c:	2b00      	cmp	r3, #0
 1007e7e:	bf14      	ite	ne
 1007e80:	2004      	movne	r0, #4
 1007e82:	2005      	moveq	r0, #5
 1007e84:	f7ff f9ba 	bl	10071fc <state_set>
                mp_tx_data = p_data;
 1007e88:	4b12      	ldr	r3, [pc, #72]	; (1007ed4 <nrf_802154_core_transmit+0xdc>)
                result = tx_init(p_data, p_params->cca);
 1007e8a:	4630      	mov	r0, r6
 1007e8c:	78a1      	ldrb	r1, [r4, #2]
                mp_tx_data = p_data;
 1007e8e:	601e      	str	r6, [r3, #0]
                result = tx_init(p_data, p_params->cca);
 1007e90:	f7ff fa08 	bl	10072a4 <tx_init>
                if (p_params->immediate)
 1007e94:	78e3      	ldrb	r3, [r4, #3]
                result = tx_init(p_data, p_params->cca);
 1007e96:	4606      	mov	r6, r0
                if (p_params->immediate)
 1007e98:	2b00      	cmp	r3, #0
 1007e9a:	d0c6      	beq.n	1007e2a <nrf_802154_core_transmit+0x32>
                    if (!result)
 1007e9c:	2800      	cmp	r0, #0
 1007e9e:	d1c4      	bne.n	1007e2a <nrf_802154_core_transmit+0x32>
                        state_set(RADIO_STATE_RX);
 1007ea0:	2002      	movs	r0, #2
 1007ea2:	f7ff f9ab 	bl	10071fc <state_set>
                result = tx_init(p_data, p_params->cca);
 1007ea6:	4635      	mov	r5, r6
                        rx_init();
 1007ea8:	f7ff f9ca 	bl	1007240 <rx_init>
 1007eac:	e7bd      	b.n	1007e2a <nrf_802154_core_transmit+0x32>
        switch (nrf_802154_pib_coex_tx_request_mode_get())
 1007eae:	f000 faab 	bl	1008408 <nrf_802154_pib_coex_tx_request_mode_get>
 1007eb2:	2803      	cmp	r0, #3
 1007eb4:	d1d4      	bne.n	1007e60 <nrf_802154_core_transmit+0x68>
                result |= TRX_TRANSMIT_NOTIFICATION_CCAIDLE;
 1007eb6:	2302      	movs	r3, #2
 1007eb8:	e7d3      	b.n	1007e62 <nrf_802154_core_transmit+0x6a>
        if (notify_function != NULL)
 1007eba:	2f00      	cmp	r7, #0
 1007ebc:	d0ba      	beq.n	1007e34 <nrf_802154_core_transmit+0x3c>
            notify_function(false);
 1007ebe:	47b8      	blx	r7
 1007ec0:	e7b8      	b.n	1007e34 <nrf_802154_core_transmit+0x3c>
 1007ec2:	bf00      	nop
 1007ec4:	0100e90d 	.word	0x0100e90d
 1007ec8:	21003e82 	.word	0x21003e82
 1007ecc:	21003e8b 	.word	0x21003e8b
 1007ed0:	21003e84 	.word	0x21003e84
 1007ed4:	21003464 	.word	0x21003464

01007ed8 <nrf_802154_core_energy_detection>:

bool nrf_802154_core_energy_detection(nrf_802154_term_t term_lvl, uint32_t time_us)
{
 1007ed8:	b570      	push	{r4, r5, r6, lr}
 1007eda:	4606      	mov	r6, r0
 1007edc:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1007ede:	f006 fd41 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1007ee2:	4604      	mov	r4, r0
 1007ee4:	b1a8      	cbz	r0, 1007f12 <nrf_802154_core_energy_detection+0x3a>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1007ee6:	2201      	movs	r2, #1
 1007ee8:	4630      	mov	r0, r6
 1007eea:	4611      	mov	r1, r2
 1007eec:	f7ff fada 	bl	10074a4 <current_operation_terminate>

        if (result)
 1007ef0:	4604      	mov	r4, r0
 1007ef2:	b160      	cbz	r0, 1007f0e <nrf_802154_core_energy_detection+0x36>
            if (time_us < ED_ITER_DURATION)
            {
                time_us = ED_ITER_DURATION;
            }

            m_ed_time_left = time_us;
 1007ef4:	2d80      	cmp	r5, #128	; 0x80
 1007ef6:	bf38      	it	cc
 1007ef8:	2580      	movcc	r5, #128	; 0x80
            m_ed_result    = 0;
 1007efa:	2200      	movs	r2, #0
            m_ed_time_left = time_us;
 1007efc:	4b06      	ldr	r3, [pc, #24]	; (1007f18 <nrf_802154_core_energy_detection+0x40>)

            state_set(RADIO_STATE_ED);
 1007efe:	2007      	movs	r0, #7
            m_ed_time_left = time_us;
 1007f00:	601d      	str	r5, [r3, #0]
            m_ed_result    = 0;
 1007f02:	4b06      	ldr	r3, [pc, #24]	; (1007f1c <nrf_802154_core_energy_detection+0x44>)
 1007f04:	701a      	strb	r2, [r3, #0]
            state_set(RADIO_STATE_ED);
 1007f06:	f7ff f979 	bl	10071fc <state_set>
            ed_init();
 1007f0a:	f7ff fa2f 	bl	100736c <ed_init>
        }

        nrf_802154_critical_section_exit();
 1007f0e:	f000 f961 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007f12:	4620      	mov	r0, r4
 1007f14:	bd70      	pop	{r4, r5, r6, pc}
 1007f16:	bf00      	nop
 1007f18:	21003440 	.word	0x21003440
 1007f1c:	21003e83 	.word	0x21003e83

01007f20 <nrf_802154_core_modulated_carrier>:
    return result;
}

bool nrf_802154_core_modulated_carrier(nrf_802154_term_t term_lvl,
                                       const uint8_t   * p_data)
{
 1007f20:	b570      	push	{r4, r5, r6, lr}
 1007f22:	4606      	mov	r6, r0
 1007f24:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1007f26:	f006 fd1d 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1007f2a:	4604      	mov	r4, r0
 1007f2c:	b180      	cbz	r0, 1007f50 <nrf_802154_core_modulated_carrier+0x30>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1007f2e:	2201      	movs	r2, #1
 1007f30:	4630      	mov	r0, r6
 1007f32:	4611      	mov	r1, r2
 1007f34:	f7ff fab6 	bl	10074a4 <current_operation_terminate>

        if (result)
 1007f38:	4604      	mov	r4, r0
 1007f3a:	b138      	cbz	r0, 1007f4c <nrf_802154_core_modulated_carrier+0x2c>
        {
            state_set(RADIO_STATE_MODULATED_CARRIER);
 1007f3c:	200a      	movs	r0, #10
 1007f3e:	f7ff f95d 	bl	10071fc <state_set>
            mp_tx_data = (uint8_t *)p_data;
 1007f42:	4b04      	ldr	r3, [pc, #16]	; (1007f54 <nrf_802154_core_modulated_carrier+0x34>)
            modulated_carrier_init(p_data);
 1007f44:	4628      	mov	r0, r5
            mp_tx_data = (uint8_t *)p_data;
 1007f46:	601d      	str	r5, [r3, #0]
            modulated_carrier_init(p_data);
 1007f48:	f7ff fa00 	bl	100734c <modulated_carrier_init>
        }

        nrf_802154_critical_section_exit();
 1007f4c:	f000 f942 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007f50:	4620      	mov	r0, r4
 1007f52:	bd70      	pop	{r4, r5, r6, pc}
 1007f54:	21003464 	.word	0x21003464

01007f58 <nrf_802154_core_notify_buffer_free>:

bool nrf_802154_core_notify_buffer_free(uint8_t * p_data)
{
 1007f58:	b510      	push	{r4, lr}
 1007f5a:	4604      	mov	r4, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    rx_buffer_t * p_buffer     = (rx_buffer_t *)p_data;
    bool          in_crit_sect = critical_section_enter_and_verify_timeslot_length();
 1007f5c:	f006 fd02 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    p_buffer->free = true;
 1007f60:	2301      	movs	r3, #1
 1007f62:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80

    if (in_crit_sect)
 1007f66:	b168      	cbz	r0, 1007f84 <nrf_802154_core_notify_buffer_free+0x2c>
    return m_rsch_timeslot_is_granted;
 1007f68:	4b07      	ldr	r3, [pc, #28]	; (1007f88 <nrf_802154_core_notify_buffer_free+0x30>)
 1007f6a:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 1007f6c:	b143      	cbz	r3, 1007f80 <nrf_802154_core_notify_buffer_free+0x28>
        {
            if (nrf_802154_trx_receive_is_buffer_missing())
 1007f6e:	f000 fd41 	bl	10089f4 <nrf_802154_trx_receive_is_buffer_missing>
 1007f72:	b128      	cbz	r0, 1007f80 <nrf_802154_core_notify_buffer_free+0x28>
    mp_current_rx_buffer = p_rx_buffer;
 1007f74:	4b05      	ldr	r3, [pc, #20]	; (1007f8c <nrf_802154_core_notify_buffer_free+0x34>)
 1007f76:	601c      	str	r4, [r3, #0]
            {
                rx_buffer_in_use_set(p_buffer);
                nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1007f78:	f7ff f892 	bl	10070a0 <rx_buffer_get>
 1007f7c:	f000 fd4a 	bl	1008a14 <nrf_802154_trx_receive_buffer_set>
            }
        }

        nrf_802154_critical_section_exit();
 1007f80:	f000 f928 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return true;
}
 1007f84:	2001      	movs	r0, #1
 1007f86:	bd10      	pop	{r4, pc}
 1007f88:	21003e88 	.word	0x21003e88
 1007f8c:	21003460 	.word	0x21003460

01007f90 <nrf_802154_core_channel_update>:

bool nrf_802154_core_channel_update(req_originator_t req_orig)
{
 1007f90:	b570      	push	{r4, r5, r6, lr}
 1007f92:	4606      	mov	r6, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1007f94:	f006 fce6 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1007f98:	4604      	mov	r4, r0
 1007f9a:	b1c8      	cbz	r0, 1007fd0 <nrf_802154_core_channel_update+0x40>
    return m_rsch_timeslot_is_granted;
 1007f9c:	4d13      	ldr	r5, [pc, #76]	; (1007fec <nrf_802154_core_channel_update+0x5c>)
 1007f9e:	782b      	ldrb	r3, [r5, #0]
    {
        if (timeslot_is_granted())
 1007fa0:	b11b      	cbz	r3, 1007faa <nrf_802154_core_channel_update+0x1a>
        {
            nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
 1007fa2:	f000 f99f 	bl	10082e4 <nrf_802154_pib_channel_get>
 1007fa6:	f006 fdac 	bl	100eb02 <nrf_802154_trx_channel_set>
        }

        switch (m_state)
 1007faa:	4b11      	ldr	r3, [pc, #68]	; (1007ff0 <nrf_802154_core_channel_update+0x60>)
 1007fac:	781a      	ldrb	r2, [r3, #0]
 1007fae:	2a09      	cmp	r2, #9
 1007fb0:	b2d3      	uxtb	r3, r2
 1007fb2:	d00f      	beq.n	1007fd4 <nrf_802154_core_channel_update+0x44>
 1007fb4:	2b0a      	cmp	r3, #10
 1007fb6:	d013      	beq.n	1007fe0 <nrf_802154_core_channel_update+0x50>
 1007fb8:	2b02      	cmp	r3, #2
 1007fba:	d107      	bne.n	1007fcc <nrf_802154_core_channel_update+0x3c>
        {
            case RADIO_STATE_RX:
                if (current_operation_terminate(NRF_802154_TERM_802154, req_orig, true))
 1007fbc:	2201      	movs	r2, #1
 1007fbe:	4631      	mov	r1, r6
 1007fc0:	4610      	mov	r0, r2
 1007fc2:	f7ff fa6f 	bl	10074a4 <current_operation_terminate>
 1007fc6:	b108      	cbz	r0, 1007fcc <nrf_802154_core_channel_update+0x3c>
                {
                    rx_init();
 1007fc8:	f7ff f93a 	bl	1007240 <rx_init>
            default:
                // Don't perform any additional action in any other state.
                break;
        }

        nrf_802154_critical_section_exit();
 1007fcc:	f000 f902 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1007fd0:	4620      	mov	r0, r4
 1007fd2:	bd70      	pop	{r4, r5, r6, pc}
    return m_rsch_timeslot_is_granted;
 1007fd4:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
 1007fd6:	2b00      	cmp	r3, #0
 1007fd8:	d0f8      	beq.n	1007fcc <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_continuous_carrier_restart();
 1007fda:	f001 f871 	bl	10090c0 <nrf_802154_trx_continuous_carrier_restart>
 1007fde:	e7f5      	b.n	1007fcc <nrf_802154_core_channel_update+0x3c>
    return m_rsch_timeslot_is_granted;
 1007fe0:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
 1007fe2:	2b00      	cmp	r3, #0
 1007fe4:	d0f2      	beq.n	1007fcc <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_modulated_carrier_restart();
 1007fe6:	f001 f891 	bl	100910c <nrf_802154_trx_modulated_carrier_restart>
 1007fea:	e7ef      	b.n	1007fcc <nrf_802154_core_channel_update+0x3c>
 1007fec:	21003e88 	.word	0x21003e88
 1007ff0:	21003e89 	.word	0x21003e89

01007ff4 <nrf_802154_core_cca_cfg_update>:

bool nrf_802154_core_cca_cfg_update(void)
{
 1007ff4:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1007ff6:	f006 fcb5 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1007ffa:	4604      	mov	r4, r0
 1007ffc:	b130      	cbz	r0, 100800c <nrf_802154_core_cca_cfg_update+0x18>
    return m_rsch_timeslot_is_granted;
 1007ffe:	4b04      	ldr	r3, [pc, #16]	; (1008010 <nrf_802154_core_cca_cfg_update+0x1c>)
 1008000:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 1008002:	b10b      	cbz	r3, 1008008 <nrf_802154_core_cca_cfg_update+0x14>
        {
            nrf_802154_trx_cca_configuration_update();
 1008004:	f006 fd7f 	bl	100eb06 <nrf_802154_trx_cca_configuration_update>
        }

        nrf_802154_critical_section_exit();
 1008008:	f000 f8e4 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 100800c:	4620      	mov	r0, r4
 100800e:	bd10      	pop	{r4, pc}
 1008010:	21003e88 	.word	0x21003e88

01008014 <nrf_802154_core_rssi_measure>:

bool nrf_802154_core_rssi_measure(void)
{
 1008014:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1008016:	f006 fca5 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 100801a:	4604      	mov	r4, r0
 100801c:	b168      	cbz	r0, 100803a <nrf_802154_core_rssi_measure+0x26>
    return m_rsch_timeslot_is_granted;
 100801e:	4b09      	ldr	r3, [pc, #36]	; (1008044 <nrf_802154_core_rssi_measure+0x30>)
 1008020:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted() && (m_state == RADIO_STATE_RX))
 1008022:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 1008026:	b133      	cbz	r3, 1008036 <nrf_802154_core_rssi_measure+0x22>
 1008028:	4b07      	ldr	r3, [pc, #28]	; (1008048 <nrf_802154_core_rssi_measure+0x34>)
 100802a:	781b      	ldrb	r3, [r3, #0]
 100802c:	2b02      	cmp	r3, #2
 100802e:	d106      	bne.n	100803e <nrf_802154_core_rssi_measure+0x2a>
        {
            result = nrf_802154_trx_rssi_measure();
 1008030:	f000 fde6 	bl	1008c00 <nrf_802154_trx_rssi_measure>
 1008034:	4604      	mov	r4, r0
        else
        {
            result = false;
        }

        nrf_802154_critical_section_exit();
 1008036:	f000 f8cd 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 100803a:	4620      	mov	r0, r4
 100803c:	bd10      	pop	{r4, pc}
            result = false;
 100803e:	2400      	movs	r4, #0
 1008040:	e7f9      	b.n	1008036 <nrf_802154_core_rssi_measure+0x22>
 1008042:	bf00      	nop
 1008044:	21003e88 	.word	0x21003e88
 1008048:	21003e89 	.word	0x21003e89

0100804c <nrf_802154_core_last_rssi_measurement_get>:

bool nrf_802154_core_last_rssi_measurement_get(int8_t * p_rssi)
{
 100804c:	b538      	push	{r3, r4, r5, lr}
 100804e:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result       = false;
    bool in_crit_sect = false;
    bool rssi_started = nrf_802154_trx_rssi_measure_is_started();
 1008050:	f000 fe02 	bl	1008c58 <nrf_802154_trx_rssi_measure_is_started>

    if (rssi_started)
 1008054:	b198      	cbz	r0, 100807e <nrf_802154_core_last_rssi_measurement_get+0x32>
    {
        in_crit_sect = critical_section_enter_and_verify_timeslot_length();
 1008056:	f006 fc85 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>
    }

    if (rssi_started && in_crit_sect)
 100805a:	b180      	cbz	r0, 100807e <nrf_802154_core_last_rssi_measurement_get+0x32>
    return m_rsch_timeslot_is_granted;
 100805c:	4b0a      	ldr	r3, [pc, #40]	; (1008088 <nrf_802154_core_last_rssi_measurement_get+0x3c>)
 100805e:	781b      	ldrb	r3, [r3, #0]
    {
        // Checking if a timeslot is granted is valid only in a critical section
        if (timeslot_is_granted())
 1008060:	b183      	cbz	r3, 1008084 <nrf_802154_core_last_rssi_measurement_get+0x38>
        {
            rssi_started = nrf_802154_trx_rssi_measure_is_started();
 1008062:	f000 fdf9 	bl	1008c58 <nrf_802154_trx_rssi_measure_is_started>
            if (rssi_started)
 1008066:	b168      	cbz	r0, 1008084 <nrf_802154_core_last_rssi_measurement_get+0x38>
    while (!nrf_802154_trx_rssi_sample_is_available())
 1008068:	f000 fe04 	bl	1008c74 <nrf_802154_trx_rssi_sample_is_available>
 100806c:	4604      	mov	r4, r0
 100806e:	2800      	cmp	r0, #0
 1008070:	d0fa      	beq.n	1008068 <nrf_802154_core_last_rssi_measurement_get+0x1c>
            {
                rssi_measurement_wait();
                *p_rssi = rssi_last_measurement_get();
 1008072:	f006 fc68 	bl	100e946 <rssi_last_measurement_get>
 1008076:	7028      	strb	r0, [r5, #0]
        }
    }

    if (in_crit_sect)
    {
        nrf_802154_critical_section_exit();
 1008078:	f000 f8ac 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
 100807c:	e000      	b.n	1008080 <nrf_802154_core_last_rssi_measurement_get+0x34>
    bool result       = false;
 100807e:	2400      	movs	r4, #0
}
 1008080:	4620      	mov	r0, r4
 1008082:	bd38      	pop	{r3, r4, r5, pc}
    bool result       = false;
 1008084:	2400      	movs	r4, #0
 1008086:	e7f7      	b.n	1008078 <nrf_802154_core_last_rssi_measurement_get+0x2c>
 1008088:	21003e88 	.word	0x21003e88

0100808c <nrf_802154_core_antenna_update>:
{
    return m_last_lqi;
}

bool nrf_802154_core_antenna_update(void)
{
 100808c:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 100808e:	f006 fc69 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1008092:	4604      	mov	r4, r0
 1008094:	b130      	cbz	r0, 10080a4 <nrf_802154_core_antenna_update+0x18>
    return m_rsch_timeslot_is_granted;
 1008096:	4b04      	ldr	r3, [pc, #16]	; (10080a8 <nrf_802154_core_antenna_update+0x1c>)
 1008098:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 100809a:	b10b      	cbz	r3, 10080a0 <nrf_802154_core_antenna_update+0x14>
        {
            nrf_802154_trx_antenna_update();
 100809c:	f000 fc70 	bl	1008980 <nrf_802154_trx_antenna_update>
        }

        nrf_802154_critical_section_exit();
 10080a0:	f000 f898 	bl	10081d4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 10080a4:	4620      	mov	r0, r4
 10080a6:	bd10      	pop	{r4, pc}
 10080a8:	21003e88 	.word	0x21003e88

010080ac <nrf_802154_core_hooks_terminate>:

    NULL,
};

bool nrf_802154_core_hooks_terminate(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
 10080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10080ae:	4605      	mov	r5, r0
 10080b0:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
 10080b2:	2400      	movs	r4, #0
 10080b4:	4f06      	ldr	r7, [pc, #24]	; (10080d0 <nrf_802154_core_hooks_terminate+0x24>)
    {
        if (m_abort_hooks[i] == NULL)
 10080b6:	f857 3b04 	ldr.w	r3, [r7], #4
 10080ba:	b133      	cbz	r3, 10080ca <nrf_802154_core_hooks_terminate+0x1e>
        {
            break;
        }

        result = m_abort_hooks[i](term_lvl, req_orig);
 10080bc:	4631      	mov	r1, r6
 10080be:	4628      	mov	r0, r5
 10080c0:	4798      	blx	r3

        if (!result)
 10080c2:	b118      	cbz	r0, 10080cc <nrf_802154_core_hooks_terminate+0x20>
    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
 10080c4:	3401      	adds	r4, #1
 10080c6:	2c03      	cmp	r4, #3
 10080c8:	d1f5      	bne.n	10080b6 <nrf_802154_core_hooks_terminate+0xa>
 10080ca:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 10080cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10080ce:	bf00      	nop
 10080d0:	01010494 	.word	0x01010494

010080d4 <nrf_802154_core_hooks_tx_failed>:
        m_transmitted_hooks[i](p_frame);
    }
}

bool nrf_802154_core_hooks_tx_failed(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 10080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10080d6:	4605      	mov	r5, r0
 10080d8:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
 10080da:	2400      	movs	r4, #0
 10080dc:	4f06      	ldr	r7, [pc, #24]	; (10080f8 <nrf_802154_core_hooks_tx_failed+0x24>)
    {
        if (m_tx_failed_hooks[i] == NULL)
 10080de:	f857 3b04 	ldr.w	r3, [r7], #4
 10080e2:	b133      	cbz	r3, 10080f2 <nrf_802154_core_hooks_tx_failed+0x1e>
        {
            break;
        }

        result = m_tx_failed_hooks[i](p_frame, error);
 10080e4:	4631      	mov	r1, r6
 10080e6:	4628      	mov	r0, r5
 10080e8:	4798      	blx	r3

        if (!result)
 10080ea:	b118      	cbz	r0, 10080f4 <nrf_802154_core_hooks_tx_failed+0x20>
    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
 10080ec:	3401      	adds	r4, #1
 10080ee:	2c03      	cmp	r4, #3
 10080f0:	d1f5      	bne.n	10080de <nrf_802154_core_hooks_tx_failed+0xa>
 10080f2:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 10080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10080f6:	bf00      	nop
 10080f8:	010104a0 	.word	0x010104a0

010080fc <nrf_802154_core_hooks_tx_started>:
        m_tx_ack_failed_hooks[i](p_ack, error);
    }
}

bool nrf_802154_core_hooks_tx_started(uint8_t * p_frame)
{
 10080fc:	b570      	push	{r4, r5, r6, lr}
 10080fe:	4605      	mov	r5, r0
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
 1008100:	2400      	movs	r4, #0
 1008102:	4e06      	ldr	r6, [pc, #24]	; (100811c <nrf_802154_core_hooks_tx_started+0x20>)
    {
        if (m_tx_started_hooks[i] == NULL)
 1008104:	f856 3b04 	ldr.w	r3, [r6], #4
 1008108:	b12b      	cbz	r3, 1008116 <nrf_802154_core_hooks_tx_started+0x1a>
        {
            break;
        }

        result = m_tx_started_hooks[i](p_frame);
 100810a:	4628      	mov	r0, r5
 100810c:	4798      	blx	r3

        if (!result)
 100810e:	b118      	cbz	r0, 1008118 <nrf_802154_core_hooks_tx_started+0x1c>
    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
 1008110:	3401      	adds	r4, #1
 1008112:	2c03      	cmp	r4, #3
 1008114:	d1f6      	bne.n	1008104 <nrf_802154_core_hooks_tx_started+0x8>
 1008116:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 1008118:	bd70      	pop	{r4, r5, r6, pc}
 100811a:	bf00      	nop
 100811c:	010104ac 	.word	0x010104ac

01008120 <nrf_802154_critical_section_init>:
 * @section API functions
 **************************************************************************************************/

void nrf_802154_critical_section_init(void)
{
    m_nested_critical_section_counter          = 0;
 1008120:	2200      	movs	r2, #0
 1008122:	4b03      	ldr	r3, [pc, #12]	; (1008130 <nrf_802154_critical_section_init+0x10>)
 1008124:	701a      	strb	r2, [r3, #0]
    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
 1008126:	22ff      	movs	r2, #255	; 0xff
 1008128:	4b02      	ldr	r3, [pc, #8]	; (1008134 <nrf_802154_critical_section_init+0x14>)
 100812a:	701a      	strb	r2, [r3, #0]
}
 100812c:	4770      	bx	lr
 100812e:	bf00      	nop
 1008130:	21003e8e 	.word	0x21003e8e
 1008134:	21003e8d 	.word	0x21003e8d

01008138 <nrf_802154_critical_section_nesting_deny>:
void nrf_802154_critical_section_nesting_deny(void)
{
    assert(m_nested_critical_section_allowed_priority >= 0);
    assert(m_nested_critical_section_counter >= 1);

    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
 1008138:	22ff      	movs	r2, #255	; 0xff
 100813a:	4b01      	ldr	r3, [pc, #4]	; (1008140 <nrf_802154_critical_section_nesting_deny+0x8>)
 100813c:	701a      	strb	r2, [r3, #0]
}
 100813e:	4770      	bx	lr
 1008140:	21003e8d 	.word	0x21003e8d

01008144 <nrf_802154_critical_section_active_vector_priority_get>:
    return m_nested_critical_section_counter > 1;
}

uint32_t nrf_802154_critical_section_active_vector_priority_get(void)
{
    uint32_t  active_vector_id = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) >> SCB_ICSR_VECTACTIVE_Pos;
 1008144:	4b05      	ldr	r3, [pc, #20]	; (100815c <nrf_802154_critical_section_active_vector_priority_get+0x18>)
 1008146:	6858      	ldr	r0, [r3, #4]
 1008148:	f3c0 0008 	ubfx	r0, r0, #0, #9
    IRQn_Type irq_number;
    uint32_t  active_priority;

    // Check if this function is called from main thread.
    if (active_vector_id == 0)
 100814c:	b118      	cbz	r0, 1008156 <nrf_802154_critical_section_active_vector_priority_get+0x12>
        return UINT32_MAX;
    }

    assert(active_vector_id >= CMSIS_IRQ_NUM_VECTACTIVE_DIFF);

    irq_number      = (IRQn_Type)(active_vector_id - CMSIS_IRQ_NUM_VECTACTIVE_DIFF);
 100814e:	3810      	subs	r0, #16
    active_priority = nrf_802154_irq_priority_get(irq_number);
 1008150:	b240      	sxtb	r0, r0
 1008152:	f7fe bdc7 	b.w	1006ce4 <nrf_802154_irq_priority_get>

    return active_priority;
}
 1008156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100815a:	4770      	bx	lr
 100815c:	e000ed00 	.word	0xe000ed00

01008160 <critical_section_enter>:
{
 1008160:	b538      	push	{r3, r4, r5, lr}
    if (forced ||
 1008162:	4604      	mov	r4, r0
 1008164:	4d18      	ldr	r5, [pc, #96]	; (10081c8 <critical_section_enter+0x68>)
 1008166:	b1f8      	cbz	r0, 10081a8 <critical_section_enter+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008168:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100816c:	b672      	cpsid	i
__STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;

#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 100816e:	e8d5 3f4f 	ldrexb	r3, [r5]
        while (__STREXB(cnt + 1, &m_nested_critical_section_counter));
 1008172:	3301      	adds	r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 1008174:	b2db      	uxtb	r3, r3
 1008176:	e8c5 3f42 	strexb	r2, r3, [r5]
 100817a:	2a00      	cmp	r2, #0
 100817c:	d1f7      	bne.n	100816e <critical_section_enter+0xe>
        nrf_802154_critical_section_rsch_enter();
 100817e:	f007 ff57 	bl	1010030 <nrf_802154_critical_section_rsch_enter>
        nrf_802154_lp_timer_critical_section_enter();
 1008182:	f7fe fe39 	bl	1006df8 <nrf_802154_lp_timer_critical_section_enter>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
 1008186:	2101      	movs	r1, #1
 1008188:	4608      	mov	r0, r1
 100818a:	f005 fad9 	bl	100d740 <nrf_802154_rsch_prec_is_approved>
 100818e:	b110      	cbz	r0, 1008196 <critical_section_enter+0x36>
        nrf_802154_irq_disable(RADIO_IRQn);
 1008190:	2008      	movs	r0, #8
 1008192:	f006 fb12 	bl	100e7ba <nrf_802154_irq_disable>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1008196:	f384 8810 	msr	PRIMASK, r4
        m_critical_section_monitor++;
 100819a:	4a0c      	ldr	r2, [pc, #48]	; (10081cc <critical_section_enter+0x6c>)
        result = true;
 100819c:	2401      	movs	r4, #1
        m_critical_section_monitor++;
 100819e:	7813      	ldrb	r3, [r2, #0]
 10081a0:	3301      	adds	r3, #1
 10081a2:	b2db      	uxtb	r3, r3
 10081a4:	7013      	strb	r3, [r2, #0]
        result = true;
 10081a6:	e00d      	b.n	10081c4 <critical_section_enter+0x64>
        (m_nested_critical_section_counter == 0) ||
 10081a8:	782b      	ldrb	r3, [r5, #0]
    if (forced ||
 10081aa:	2b00      	cmp	r3, #0
 10081ac:	d0dc      	beq.n	1008168 <critical_section_enter+0x8>
           active_priority_convert(nrf_802154_critical_section_active_vector_priority_get());
 10081ae:	f7ff ffc9 	bl	1008144 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
 10081b2:	1c43      	adds	r3, r0, #1
 10081b4:	bf08      	it	eq
 10081b6:	207f      	moveq	r0, #127	; 0x7f
    return m_nested_critical_section_allowed_priority ==
 10081b8:	4b05      	ldr	r3, [pc, #20]	; (10081d0 <critical_section_enter+0x70>)
 10081ba:	781a      	ldrb	r2, [r3, #0]
        (m_nested_critical_section_counter == 0) ||
 10081bc:	b243      	sxtb	r3, r0
    return m_nested_critical_section_allowed_priority ==
 10081be:	b252      	sxtb	r2, r2
        (m_nested_critical_section_counter == 0) ||
 10081c0:	4293      	cmp	r3, r2
 10081c2:	d0d1      	beq.n	1008168 <critical_section_enter+0x8>
}
 10081c4:	4620      	mov	r0, r4
 10081c6:	bd38      	pop	{r3, r4, r5, pc}
 10081c8:	21003e8e 	.word	0x21003e8e
 10081cc:	21003e8c 	.word	0x21003e8c
 10081d0:	21003e8d 	.word	0x21003e8d

010081d4 <nrf_802154_critical_section_exit>:
{
 10081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t     cnt = m_nested_critical_section_counter;
 10081d6:	4d14      	ldr	r5, [pc, #80]	; (1008228 <nrf_802154_critical_section_exit+0x54>)
        monitor = m_critical_section_monitor;
 10081d8:	4f14      	ldr	r7, [pc, #80]	; (100822c <nrf_802154_critical_section_exit+0x58>)
    uint8_t     cnt = m_nested_critical_section_counter;
 10081da:	782c      	ldrb	r4, [r5, #0]
 10081dc:	b2e4      	uxtb	r4, r4
        monitor = m_critical_section_monitor;
 10081de:	783e      	ldrb	r6, [r7, #0]
        if (cnt == 1)
 10081e0:	2c01      	cmp	r4, #1
        monitor = m_critical_section_monitor;
 10081e2:	b2f6      	uxtb	r6, r6
        if (cnt == 1)
 10081e4:	d10b      	bne.n	10081fe <nrf_802154_critical_section_exit+0x2a>
            nrf_802154_critical_section_rsch_exit();
 10081e6:	f005 fb15 	bl	100d814 <nrf_802154_critical_section_rsch_exit>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
 10081ea:	4621      	mov	r1, r4
 10081ec:	4620      	mov	r0, r4
 10081ee:	f005 faa7 	bl	100d740 <nrf_802154_rsch_prec_is_approved>
 10081f2:	b110      	cbz	r0, 10081fa <nrf_802154_critical_section_exit+0x26>
        nrf_802154_irq_enable(RADIO_IRQn);
 10081f4:	2008      	movs	r0, #8
 10081f6:	f006 fade 	bl	100e7b6 <nrf_802154_irq_enable>
            nrf_802154_lp_timer_critical_section_exit();
 10081fa:	f7fe fe11 	bl	1006e20 <nrf_802154_lp_timer_critical_section_exit>
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 10081fe:	e8d5 3f4f 	ldrexb	r3, [r5]
        while (__STREXB(atomic_cnt - 1, &m_nested_critical_section_counter));
 1008202:	3b01      	subs	r3, #1
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 1008204:	b2db      	uxtb	r3, r3
 1008206:	e8c5 3f42 	strexb	r2, r3, [r5]
 100820a:	2a00      	cmp	r2, #0
 100820c:	d1f7      	bne.n	10081fe <nrf_802154_critical_section_exit+0x2a>
        if (cnt == 1)
 100820e:	2c01      	cmp	r4, #1
 1008210:	d109      	bne.n	1008226 <nrf_802154_critical_section_exit+0x52>
            if (nrf_802154_critical_section_rsch_event_is_pending() ||
 1008212:	f005 fb0f 	bl	100d834 <nrf_802154_critical_section_rsch_event_is_pending>
 1008216:	b910      	cbnz	r0, 100821e <nrf_802154_critical_section_exit+0x4a>
                (monitor != m_critical_section_monitor))
 1008218:	783b      	ldrb	r3, [r7, #0]
            if (nrf_802154_critical_section_rsch_event_is_pending() ||
 100821a:	429e      	cmp	r6, r3
 100821c:	d003      	beq.n	1008226 <nrf_802154_critical_section_exit+0x52>
                result = critical_section_enter(false);
 100821e:	2000      	movs	r0, #0
 1008220:	f7ff ff9e 	bl	1008160 <critical_section_enter>
    while (cnt == 1);
 1008224:	e7db      	b.n	10081de <nrf_802154_critical_section_exit+0xa>
}
 1008226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1008228:	21003e8e 	.word	0x21003e8e
 100822c:	21003e8c 	.word	0x21003e8c

01008230 <nrf_802154_critical_section_nesting_allow>:
{
 1008230:	b508      	push	{r3, lr}
    m_nested_critical_section_allowed_priority = active_priority_convert(
 1008232:	f7ff ff87 	bl	1008144 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
 1008236:	1c43      	adds	r3, r0, #1
 1008238:	bf08      	it	eq
 100823a:	207f      	moveq	r0, #127	; 0x7f
    m_nested_critical_section_allowed_priority = active_priority_convert(
 100823c:	4b01      	ldr	r3, [pc, #4]	; (1008244 <nrf_802154_critical_section_nesting_allow+0x14>)
 100823e:	b240      	sxtb	r0, r0
 1008240:	7018      	strb	r0, [r3, #0]
}
 1008242:	bd08      	pop	{r3, pc}
 1008244:	21003e8d 	.word	0x21003e8d

01008248 <nrf_802154_pib_init>:
    return result;
}

void nrf_802154_pib_init(void)
{
    m_data.promiscuous = false;
 1008248:	235a      	movs	r3, #90	; 0x5a
{
 100824a:	b510      	push	{r4, lr}
    m_data.promiscuous = false;
 100824c:	4c10      	ldr	r4, [pc, #64]	; (1008290 <nrf_802154_pib_init+0x48>)
    m_data.auto_ack    = true;
    m_data.pan_coord   = false;
    m_data.channel     = 11;

    memset(m_data.pan_id, 0xff, sizeof(m_data.pan_id));
 100824e:	2202      	movs	r2, #2
 1008250:	21ff      	movs	r1, #255	; 0xff
 1008252:	1c60      	adds	r0, r4, #1
    m_data.promiscuous = false;
 1008254:	7463      	strb	r3, [r4, #17]
    memset(m_data.pan_id, 0xff, sizeof(m_data.pan_id));
 1008256:	f006 f9a9 	bl	100e5ac <memset>
    m_data.short_addr[0] = 0xfe;
 100825a:	23fe      	movs	r3, #254	; 0xfe
 100825c:	70e3      	strb	r3, [r4, #3]
    m_data.short_addr[1] = 0xff;
 100825e:	23ff      	movs	r3, #255	; 0xff
    memset(m_data.extended_addr, 0, sizeof(m_data.extended_addr));
 1008260:	2208      	movs	r2, #8
 1008262:	2100      	movs	r1, #0
 1008264:	1d60      	adds	r0, r4, #5
    m_data.short_addr[1] = 0xff;
 1008266:	7123      	strb	r3, [r4, #4]
    memset(m_data.extended_addr, 0, sizeof(m_data.extended_addr));
 1008268:	f006 f9a0 	bl	100e5ac <memset>

    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
 100826c:	2300      	movs	r3, #0
 100826e:	7363      	strb	r3, [r4, #13]
    m_data.cca.ed_threshold   = NRF_802154_CCA_ED_THRESHOLD_DEFAULT;
 1008270:	232d      	movs	r3, #45	; 0x2d
 1008272:	73a3      	strb	r3, [r4, #14]
    m_data.cca.corr_threshold = NRF_802154_CCA_CORR_THRESHOLD_DEFAULT;
 1008274:	73e3      	strb	r3, [r4, #15]
    m_data.cca.corr_limit     = NRF_802154_CCA_CORR_LIMIT_DEFAULT;
 1008276:	2302      	movs	r3, #2
 1008278:	7423      	strb	r3, [r4, #16]

#if NRF_802154_DISABLE_BCC_MATCHING
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_PREAMBLE;
#else
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_DESTINED;
 100827a:	2303      	movs	r3, #3
 100827c:	74a3      	strb	r3, [r4, #18]
#endif
    m_data.coex.tx_request_mode = NRF_802154_COEX_TX_REQUEST_MODE_FRAME_READY;

#if NRF_802154_CSMA_CA_ENABLED
    m_data.csmaca.min_be       = NRF_802154_CSMA_CA_MIN_BE_DEFAULT;
 100827e:	7523      	strb	r3, [r4, #20]
    m_data.csmaca.max_be       = NRF_802154_CSMA_CA_MAX_BE_DEFAULT;
 1008280:	2305      	movs	r3, #5
    m_data.coex.tx_request_mode = NRF_802154_COEX_TX_REQUEST_MODE_FRAME_READY;
 1008282:	2201      	movs	r2, #1
    m_data.csmaca.max_be       = NRF_802154_CSMA_CA_MAX_BE_DEFAULT;
 1008284:	7563      	strb	r3, [r4, #21]
    m_data.csmaca.max_backoffs = NRF_802154_CSMA_CA_MAX_CSMA_BACKOFFS_DEFAULT;
 1008286:	2304      	movs	r3, #4
    m_data.coex.tx_request_mode = NRF_802154_COEX_TX_REQUEST_MODE_FRAME_READY;
 1008288:	74e2      	strb	r2, [r4, #19]
    m_data.csmaca.max_backoffs = NRF_802154_CSMA_CA_MAX_CSMA_BACKOFFS_DEFAULT;
 100828a:	75a3      	strb	r3, [r4, #22]
#if NRF_802154_IFS_ENABLED
    m_data.ifs.min_sifs_period_us = MIN_SIFS_PERIOD_US;
    m_data.ifs.min_lifs_period_us = MIN_LIFS_PERIOD_US;
    m_data.ifs.mode               = NRF_802154_IFS_MODE_DISABLED;
#endif // NRF_802154_IFS_ENABLED
}
 100828c:	bd10      	pop	{r4, pc}
 100828e:	bf00      	nop
 1008290:	21003e8f 	.word	0x21003e8f

01008294 <nrf_802154_pib_promiscuous_get>:

bool nrf_802154_pib_promiscuous_get(void)
{
    return m_data.promiscuous;
 1008294:	4b02      	ldr	r3, [pc, #8]	; (10082a0 <nrf_802154_pib_promiscuous_get+0xc>)
 1008296:	7c58      	ldrb	r0, [r3, #17]
}
 1008298:	f000 0001 	and.w	r0, r0, #1
 100829c:	4770      	bx	lr
 100829e:	bf00      	nop
 10082a0:	21003e8f 	.word	0x21003e8f

010082a4 <nrf_802154_pib_promiscuous_set>:

void nrf_802154_pib_promiscuous_set(bool enabled)
{
    m_data.promiscuous = enabled;
 10082a4:	4b02      	ldr	r3, [pc, #8]	; (10082b0 <nrf_802154_pib_promiscuous_set+0xc>)
 10082a6:	7c5a      	ldrb	r2, [r3, #17]
 10082a8:	f360 0200 	bfi	r2, r0, #0, #1
 10082ac:	745a      	strb	r2, [r3, #17]
}
 10082ae:	4770      	bx	lr
 10082b0:	21003e8f 	.word	0x21003e8f

010082b4 <nrf_802154_pib_auto_ack_get>:

bool nrf_802154_pib_auto_ack_get(void)
{
    return m_data.auto_ack;
 10082b4:	4b02      	ldr	r3, [pc, #8]	; (10082c0 <nrf_802154_pib_auto_ack_get+0xc>)
 10082b6:	7c58      	ldrb	r0, [r3, #17]
}
 10082b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 10082bc:	4770      	bx	lr
 10082be:	bf00      	nop
 10082c0:	21003e8f 	.word	0x21003e8f

010082c4 <nrf_802154_pib_pan_coord_get>:
    m_data.auto_ack = enabled;
}

bool nrf_802154_pib_pan_coord_get(void)
{
    return m_data.pan_coord;
 10082c4:	4b02      	ldr	r3, [pc, #8]	; (10082d0 <nrf_802154_pib_pan_coord_get+0xc>)
 10082c6:	7c58      	ldrb	r0, [r3, #17]
}
 10082c8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 10082cc:	4770      	bx	lr
 10082ce:	bf00      	nop
 10082d0:	21003e8f 	.word	0x21003e8f

010082d4 <nrf_802154_pib_pan_coord_set>:

void nrf_802154_pib_pan_coord_set(bool enabled)
{
    m_data.pan_coord = enabled;
 10082d4:	4b02      	ldr	r3, [pc, #8]	; (10082e0 <nrf_802154_pib_pan_coord_set+0xc>)
 10082d6:	7c5a      	ldrb	r2, [r3, #17]
 10082d8:	f360 0282 	bfi	r2, r0, #2, #1
 10082dc:	745a      	strb	r2, [r3, #17]
}
 10082de:	4770      	bx	lr
 10082e0:	21003e8f 	.word	0x21003e8f

010082e4 <nrf_802154_pib_channel_get>:

uint8_t nrf_802154_pib_channel_get(void)
{
    return m_data.channel;
 10082e4:	4b01      	ldr	r3, [pc, #4]	; (10082ec <nrf_802154_pib_channel_get+0x8>)
 10082e6:	7c58      	ldrb	r0, [r3, #17]
}
 10082e8:	08c0      	lsrs	r0, r0, #3
 10082ea:	4770      	bx	lr
 10082ec:	21003e8f 	.word	0x21003e8f

010082f0 <nrf_802154_pib_channel_set>:

void nrf_802154_pib_channel_set(uint8_t channel)
{
    m_data.channel = channel;
 10082f0:	4b02      	ldr	r3, [pc, #8]	; (10082fc <nrf_802154_pib_channel_set+0xc>)
 10082f2:	7c5a      	ldrb	r2, [r3, #17]
 10082f4:	f360 02c7 	bfi	r2, r0, #3, #5
 10082f8:	745a      	strb	r2, [r3, #17]
}
 10082fa:	4770      	bx	lr
 10082fc:	21003e8f 	.word	0x21003e8f

01008300 <nrf_802154_pib_tx_power_get>:

nrf_radio_txpower_t nrf_802154_pib_tx_power_get(void)
{
 1008300:	b513      	push	{r0, r1, r4, lr}
    int8_t tx_power = nrf_802154_fal_tx_power_get(m_data.channel, m_data.tx_power);
 1008302:	4b16      	ldr	r3, [pc, #88]	; (100835c <nrf_802154_pib_tx_power_get+0x5c>)
 1008304:	7c58      	ldrb	r0, [r3, #17]
 1008306:	f993 1000 	ldrsb.w	r1, [r3]
 100830a:	08c0      	lsrs	r0, r0, #3
 100830c:	f7fc f9f8 	bl	1004700 <nrf_802154_fal_tx_power_get>
    const nrf_radio_txpower_t allowed_values[] =
 1008310:	23d8      	movs	r3, #216	; 0xd8
 1008312:	f88d 3000 	strb.w	r3, [sp]
 1008316:	23ec      	movs	r3, #236	; 0xec
 1008318:	f88d 3001 	strb.w	r3, [sp, #1]
 100831c:	23f0      	movs	r3, #240	; 0xf0
 100831e:	f88d 3002 	strb.w	r3, [sp, #2]
 1008322:	23f4      	movs	r3, #244	; 0xf4
 1008324:	f88d 3003 	strb.w	r3, [sp, #3]
 1008328:	23f8      	movs	r3, #248	; 0xf8
 100832a:	f88d 3004 	strb.w	r3, [sp, #4]
 100832e:	23fc      	movs	r3, #252	; 0xfc
 1008330:	f88d 3005 	strb.w	r3, [sp, #5]
 1008334:	2300      	movs	r3, #0
    if (integer_tx_power < (int8_t)radio_tx_power)
 1008336:	1e02      	subs	r2, r0, #0
    const nrf_radio_txpower_t allowed_values[] =
 1008338:	f88d 3006 	strb.w	r3, [sp, #6]
    if (integer_tx_power < (int8_t)radio_tx_power)
 100833c:	da0b      	bge.n	1008356 <nrf_802154_pib_tx_power_get+0x56>
 100833e:	4669      	mov	r1, sp
            if (integer_tx_power <= (int8_t)allowed_values[i])
 1008340:	f811 0b01 	ldrb.w	r0, [r1], #1
 1008344:	b244      	sxtb	r4, r0
 1008346:	42a2      	cmp	r2, r4
 1008348:	dd03      	ble.n	1008352 <nrf_802154_pib_tx_power_get+0x52>
        for (uint32_t i = 0; i < NUMELTS(allowed_values); i++)
 100834a:	3301      	adds	r3, #1
 100834c:	2b07      	cmp	r3, #7
 100834e:	d1f7      	bne.n	1008340 <nrf_802154_pib_tx_power_get+0x40>
    nrf_radio_txpower_t radio_tx_power = allowed_values[NUMELTS(allowed_values) - 1];
 1008350:	2000      	movs	r0, #0

    return to_radio_tx_power_convert(tx_power);
}
 1008352:	b002      	add	sp, #8
 1008354:	bd10      	pop	{r4, pc}
    nrf_radio_txpower_t radio_tx_power = allowed_values[NUMELTS(allowed_values) - 1];
 1008356:	4618      	mov	r0, r3
 1008358:	e7fb      	b.n	1008352 <nrf_802154_pib_tx_power_get+0x52>
 100835a:	bf00      	nop
 100835c:	21003e8f 	.word	0x21003e8f

01008360 <nrf_802154_pib_tx_power_set>:

void nrf_802154_pib_tx_power_set(int8_t dbm)
{
    m_data.tx_power = dbm;
 1008360:	4b01      	ldr	r3, [pc, #4]	; (1008368 <nrf_802154_pib_tx_power_set+0x8>)
 1008362:	7018      	strb	r0, [r3, #0]
}
 1008364:	4770      	bx	lr
 1008366:	bf00      	nop
 1008368:	21003e8f 	.word	0x21003e8f

0100836c <nrf_802154_pib_pan_id_get>:

const uint8_t * nrf_802154_pib_pan_id_get(void)
{
    return m_data.pan_id;
}
 100836c:	4800      	ldr	r0, [pc, #0]	; (1008370 <nrf_802154_pib_pan_id_get+0x4>)
 100836e:	4770      	bx	lr
 1008370:	21003e90 	.word	0x21003e90

01008374 <nrf_802154_pib_pan_id_set>:

void nrf_802154_pib_pan_id_set(const uint8_t * p_pan_id)
{
 1008374:	4601      	mov	r1, r0
    memcpy(m_data.pan_id, p_pan_id, PAN_ID_SIZE);
 1008376:	2202      	movs	r2, #2
 1008378:	4801      	ldr	r0, [pc, #4]	; (1008380 <nrf_802154_pib_pan_id_set+0xc>)
 100837a:	f006 b90c 	b.w	100e596 <memcpy>
 100837e:	bf00      	nop
 1008380:	21003e90 	.word	0x21003e90

01008384 <nrf_802154_pib_extended_address_get>:
}

const uint8_t * nrf_802154_pib_extended_address_get(void)
{
    return m_data.extended_addr;
}
 1008384:	4800      	ldr	r0, [pc, #0]	; (1008388 <nrf_802154_pib_extended_address_get+0x4>)
 1008386:	4770      	bx	lr
 1008388:	21003e94 	.word	0x21003e94

0100838c <nrf_802154_pib_extended_address_set>:

void nrf_802154_pib_extended_address_set(const uint8_t * p_extended_address)
{
 100838c:	4601      	mov	r1, r0
    memcpy(m_data.extended_addr, p_extended_address, EXTENDED_ADDRESS_SIZE);
 100838e:	2208      	movs	r2, #8
 1008390:	4801      	ldr	r0, [pc, #4]	; (1008398 <nrf_802154_pib_extended_address_set+0xc>)
 1008392:	f006 b900 	b.w	100e596 <memcpy>
 1008396:	bf00      	nop
 1008398:	21003e94 	.word	0x21003e94

0100839c <nrf_802154_pib_short_address_get>:
}

const uint8_t * nrf_802154_pib_short_address_get(void)
{
    return m_data.short_addr;
}
 100839c:	4800      	ldr	r0, [pc, #0]	; (10083a0 <nrf_802154_pib_short_address_get+0x4>)
 100839e:	4770      	bx	lr
 10083a0:	21003e92 	.word	0x21003e92

010083a4 <nrf_802154_pib_short_address_set>:

void nrf_802154_pib_short_address_set(const uint8_t * p_short_address)
{
 10083a4:	4601      	mov	r1, r0
    memcpy(m_data.short_addr, p_short_address, SHORT_ADDRESS_SIZE);
 10083a6:	2202      	movs	r2, #2
 10083a8:	4801      	ldr	r0, [pc, #4]	; (10083b0 <nrf_802154_pib_short_address_set+0xc>)
 10083aa:	f006 b8f4 	b.w	100e596 <memcpy>
 10083ae:	bf00      	nop
 10083b0:	21003e92 	.word	0x21003e92

010083b4 <nrf_802154_pib_cca_cfg_set>:
}

void nrf_802154_pib_cca_cfg_set(const nrf_802154_cca_cfg_t * p_cca_cfg)
{
    switch (p_cca_cfg->mode)
 10083b4:	7803      	ldrb	r3, [r0, #0]
{
 10083b6:	4601      	mov	r1, r0
    switch (p_cca_cfg->mode)
 10083b8:	2b01      	cmp	r3, #1
 10083ba:	d00a      	beq.n	10083d2 <nrf_802154_pib_cca_cfg_set+0x1e>
 10083bc:	d903      	bls.n	10083c6 <nrf_802154_pib_cca_cfg_set+0x12>
 10083be:	3b02      	subs	r3, #2
 10083c0:	2b01      	cmp	r3, #1
 10083c2:	d90d      	bls.n	10083e0 <nrf_802154_pib_cca_cfg_set+0x2c>
 10083c4:	4770      	bx	lr
    {
        case NRF_RADIO_CCA_MODE_ED:
            m_data.cca.mode         = p_cca_cfg->mode;
 10083c6:	2200      	movs	r2, #0
 10083c8:	4b07      	ldr	r3, [pc, #28]	; (10083e8 <nrf_802154_pib_cca_cfg_set+0x34>)
 10083ca:	735a      	strb	r2, [r3, #13]
            m_data.cca.ed_threshold = p_cca_cfg->ed_threshold;
 10083cc:	7842      	ldrb	r2, [r0, #1]
 10083ce:	739a      	strb	r2, [r3, #14]
            break;
 10083d0:	4770      	bx	lr

        case NRF_RADIO_CCA_MODE_CARRIER:
            m_data.cca.mode           = p_cca_cfg->mode;
 10083d2:	4a05      	ldr	r2, [pc, #20]	; (10083e8 <nrf_802154_pib_cca_cfg_set+0x34>)
 10083d4:	7353      	strb	r3, [r2, #13]
            m_data.cca.corr_threshold = p_cca_cfg->corr_threshold;
 10083d6:	7883      	ldrb	r3, [r0, #2]
 10083d8:	73d3      	strb	r3, [r2, #15]
            m_data.cca.corr_limit     = p_cca_cfg->corr_limit;
 10083da:	78c3      	ldrb	r3, [r0, #3]
 10083dc:	7413      	strb	r3, [r2, #16]
            break;

        default:
            assert(false);
    }
}
 10083de:	4770      	bx	lr
            memcpy(&m_data.cca, p_cca_cfg, sizeof(m_data.cca));
 10083e0:	2204      	movs	r2, #4
 10083e2:	4802      	ldr	r0, [pc, #8]	; (10083ec <nrf_802154_pib_cca_cfg_set+0x38>)
 10083e4:	f006 b8d7 	b.w	100e596 <memcpy>
 10083e8:	21003e8f 	.word	0x21003e8f
 10083ec:	21003e9c 	.word	0x21003e9c

010083f0 <nrf_802154_pib_cca_cfg_get>:

void nrf_802154_pib_cca_cfg_get(nrf_802154_cca_cfg_t * p_cca_cfg)
{
    memcpy(p_cca_cfg, &m_data.cca, sizeof(m_data.cca));
 10083f0:	2204      	movs	r2, #4
 10083f2:	4901      	ldr	r1, [pc, #4]	; (10083f8 <nrf_802154_pib_cca_cfg_get+0x8>)
 10083f4:	f006 b8cf 	b.w	100e596 <memcpy>
 10083f8:	21003e9c 	.word	0x21003e9c

010083fc <nrf_802154_pib_coex_rx_request_mode_get>:
}

nrf_802154_coex_rx_request_mode_t nrf_802154_pib_coex_rx_request_mode_get(void)
{
    return m_data.coex.rx_request_mode;
}
 10083fc:	4b01      	ldr	r3, [pc, #4]	; (1008404 <nrf_802154_pib_coex_rx_request_mode_get+0x8>)
 10083fe:	7c98      	ldrb	r0, [r3, #18]
 1008400:	4770      	bx	lr
 1008402:	bf00      	nop
 1008404:	21003e8f 	.word	0x21003e8f

01008408 <nrf_802154_pib_coex_tx_request_mode_get>:
}

nrf_802154_coex_tx_request_mode_t nrf_802154_pib_coex_tx_request_mode_get(void)
{
    return m_data.coex.tx_request_mode;
}
 1008408:	4b01      	ldr	r3, [pc, #4]	; (1008410 <nrf_802154_pib_coex_tx_request_mode_get+0x8>)
 100840a:	7cd8      	ldrb	r0, [r3, #19]
 100840c:	4770      	bx	lr
 100840e:	bf00      	nop
 1008410:	21003e8f 	.word	0x21003e8f

01008414 <nrf_802154_pib_csmaca_min_be_get>:
}

uint8_t nrf_802154_pib_csmaca_min_be_get(void)
{
    return m_data.csmaca.min_be;
}
 1008414:	4b01      	ldr	r3, [pc, #4]	; (100841c <nrf_802154_pib_csmaca_min_be_get+0x8>)
 1008416:	7d18      	ldrb	r0, [r3, #20]
 1008418:	4770      	bx	lr
 100841a:	bf00      	nop
 100841c:	21003e8f 	.word	0x21003e8f

01008420 <nrf_802154_pib_csmaca_max_be_get>:
}

uint8_t nrf_802154_pib_csmaca_max_be_get(void)
{
    return m_data.csmaca.max_be;
}
 1008420:	4b01      	ldr	r3, [pc, #4]	; (1008428 <nrf_802154_pib_csmaca_max_be_get+0x8>)
 1008422:	7d58      	ldrb	r0, [r3, #21]
 1008424:	4770      	bx	lr
 1008426:	bf00      	nop
 1008428:	21003e8f 	.word	0x21003e8f

0100842c <nrf_802154_pib_csmaca_max_backoffs_get>:
}

uint8_t nrf_802154_pib_csmaca_max_backoffs_get(void)
{
    return m_data.csmaca.max_backoffs;
}
 100842c:	4b01      	ldr	r3, [pc, #4]	; (1008434 <nrf_802154_pib_csmaca_max_backoffs_get+0x8>)
 100842e:	7d98      	ldrb	r0, [r3, #22]
 1008430:	4770      	bx	lr
 1008432:	bf00      	nop
 1008434:	21003e8f 	.word	0x21003e8f

01008438 <nrf_802154_rssi_sample_temp_corr_value_get>:
    return (rssi_value < 0) ? (-(int8_t)abs_rssi_value) : ((int8_t)abs_rssi_value);
}

/* Implementation based on Errata 87 for nRF53 family. */
int8_t nrf_802154_rssi_sample_temp_corr_value_get(uint8_t rssi_sample)
{
 1008438:	b510      	push	{r4, lr}
 100843a:	4604      	mov	r4, r0
    int32_t temp;
    int32_t rssi_sample_i32;
    int8_t  compensated_rssi;

    temp            = (int32_t)nrf_802154_temperature_get();
 100843c:	f7fe fc9a 	bl	1006d74 <nrf_802154_temperature_get>
    rssi_sample_i32 = (int32_t)rssi_sample;

    compensated_rssi = normalize_rssi((RSSI_COEFF_A1 * rssi_sample_i32)
                                      + (RSSI_COEFF_A3 * POW_3(rssi_sample_i32))
 1008440:	22cd      	movs	r2, #205	; 0xcd
 1008442:	4362      	muls	r2, r4
                                      - (RSSI_COEFF_A2 * POW_2(rssi_sample_i32))
                                      - (RSSI_COEFF_TEMP * temp) - RSSI_COEFF_A0);
 1008444:	4b0d      	ldr	r3, [pc, #52]	; (100847c <nrf_802154_rssi_sample_temp_corr_value_get+0x44>)
 1008446:	f5a2 4222 	sub.w	r2, r2, #41472	; 0xa200
 100844a:	3a34      	subs	r2, #52	; 0x34
 100844c:	fb04 3302 	mla	r3, r4, r2, r3
 1008450:	4a0b      	ldr	r2, [pc, #44]	; (1008480 <nrf_802154_rssi_sample_temp_corr_value_get+0x48>)
 1008452:	fb04 2203 	mla	r2, r4, r3, r2
 1008456:	4b0b      	ldr	r3, [pc, #44]	; (1008484 <nrf_802154_rssi_sample_temp_corr_value_get+0x4c>)
 1008458:	fb03 2000 	mla	r0, r3, r0, r2
    abs_rssi_value = (rssi_value < 0) ? (-rssi_value) : rssi_value;
 100845c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 1008460:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    abs_rssi_value = (abs_rssi_value + (RSSI_COEFF_BASE / 2)) / RSSI_COEFF_BASE;
 1008464:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    return (rssi_value < 0) ? (-(int8_t)abs_rssi_value) : ((int8_t)abs_rssi_value);
 1008468:	2800      	cmp	r0, #0
    abs_rssi_value = (abs_rssi_value + (RSSI_COEFF_BASE / 2)) / RSSI_COEFF_BASE;
 100846a:	ea4f 5393 	mov.w	r3, r3, lsr #22
    return (rssi_value < 0) ? (-(int8_t)abs_rssi_value) : ((int8_t)abs_rssi_value);
 100846e:	bfb8      	it	lt
 1008470:	425b      	neglt	r3, r3
 1008472:	b25b      	sxtb	r3, r3

    return compensated_rssi - (int8_t)rssi_sample;
 1008474:	1b18      	subs	r0, r3, r4
}
 1008476:	b240      	sxtb	r0, r0
 1008478:	bd10      	pop	{r4, pc}
 100847a:	bf00      	nop
 100847c:	0063d70a 	.word	0x0063d70a
 1008480:	fe333333 	.word	0xfe333333
 1008484:	fffccccd 	.word	0xfffccccd

01008488 <nrf_802154_rx_buffer_init>:

rx_buffer_t nrf_802154_rx_buffers[NRF_802154_RX_BUFFERS]; ///< Receive buffers.

void nrf_802154_rx_buffer_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 1008488:	2300      	movs	r3, #0
    {
        nrf_802154_rx_buffers[i].free = true;
 100848a:	2101      	movs	r1, #1
 100848c:	4a04      	ldr	r2, [pc, #16]	; (10084a0 <nrf_802154_rx_buffer_init+0x18>)
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100848e:	3301      	adds	r3, #1
 1008490:	2b10      	cmp	r3, #16
        nrf_802154_rx_buffers[i].free = true;
 1008492:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 1008496:	f102 0281 	add.w	r2, r2, #129	; 0x81
 100849a:	d1f8      	bne.n	100848e <nrf_802154_rx_buffer_init+0x6>
    }
}
 100849c:	4770      	bx	lr
 100849e:	bf00      	nop
 10084a0:	21003ea6 	.word	0x21003ea6

010084a4 <nrf_802154_rx_buffer_free_find>:

rx_buffer_t * nrf_802154_rx_buffer_free_find(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 10084a4:	4a07      	ldr	r2, [pc, #28]	; (10084c4 <nrf_802154_rx_buffer_free_find+0x20>)
 10084a6:	2300      	movs	r3, #0
 10084a8:	4611      	mov	r1, r2
    {
        if (nrf_802154_rx_buffers[i].free)
 10084aa:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
 10084ae:	b118      	cbz	r0, 10084b8 <nrf_802154_rx_buffer_free_find+0x14>
        {
            return &nrf_802154_rx_buffers[i];
 10084b0:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
 10084b4:	18c8      	adds	r0, r1, r3
 10084b6:	4770      	bx	lr
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 10084b8:	3301      	adds	r3, #1
 10084ba:	2b10      	cmp	r3, #16
 10084bc:	f102 0281 	add.w	r2, r2, #129	; 0x81
 10084c0:	d1f3      	bne.n	10084aa <nrf_802154_rx_buffer_free_find+0x6>
        }
    }

    return NULL;
}
 10084c2:	4770      	bx	lr
 10084c4:	21003ea6 	.word	0x21003ea6

010084c8 <nrf_802154_swi_init>:
    nrf_802154_rsch_prio_drop_swi_irq_handler();
    nrf_802154_request_swi_irq_handler();
}

void nrf_802154_swi_init(void)
{
 10084c8:	b510      	push	{r4, lr}
#error NRF_802154_SWI_PRIORITY value out of the allowed range.
#endif

    static bool initialized = false;

    if (!initialized)
 10084ca:	4c07      	ldr	r4, [pc, #28]	; (10084e8 <nrf_802154_swi_init+0x20>)
 10084cc:	7823      	ldrb	r3, [r4, #0]
 10084ce:	b94b      	cbnz	r3, 10084e4 <nrf_802154_swi_init+0x1c>
    {
        nrf_802154_irq_init(NRF_802154_EGU_IRQN, NRF_802154_SWI_PRIORITY, swi_irq_handler);
 10084d0:	2101      	movs	r1, #1
 10084d2:	2014      	movs	r0, #20
 10084d4:	4a05      	ldr	r2, [pc, #20]	; (10084ec <nrf_802154_swi_init+0x24>)
 10084d6:	f006 f966 	bl	100e7a6 <nrf_802154_irq_init>
        nrf_802154_irq_enable(NRF_802154_EGU_IRQN);
 10084da:	2014      	movs	r0, #20
 10084dc:	f006 f96b 	bl	100e7b6 <nrf_802154_irq_enable>
        initialized = true;
 10084e0:	2301      	movs	r3, #1
 10084e2:	7023      	strb	r3, [r4, #0]
    }
}
 10084e4:	bd10      	pop	{r4, pc}
 10084e6:	bf00      	nop
 10084e8:	210046b6 	.word	0x210046b6
 10084ec:	0100eabb 	.word	0x0100eabb

010084f0 <fem_for_lna_reset>:
    }
}

/** Reset FEM configuration for LNA. */
static void fem_for_lna_reset(void)
{
 10084f0:	b508      	push	{r3, lr}
    mpsl_fem_lna_configuration_clear();
 10084f2:	f7fc f88f 	bl	1004614 <mpsl_fem_lna_configuration_clear>
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10084f6:	2201      	movs	r2, #1
 10084f8:	4b05      	ldr	r3, [pc, #20]	; (1008510 <fem_for_lna_reset+0x20>)
 10084fa:	611a      	str	r2, [r3, #16]
}

NRF_STATIC_INLINE void nrf_timer_shorts_disable(NRF_TIMER_Type * p_reg,
                                                uint32_t         mask)
{
    p_reg->SHORTS &= ~(mask);
 10084fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1008500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 1008504:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_timer_shorts_disable(NRF_802154_TIMER_INSTANCE, NRF_TIMER_SHORT_COMPARE0_STOP_MASK);
    nrf_802154_trx_ppi_for_fem_clear();
    /* There is no need to explicitly deactivate LNA pin during reset as mpsl_fem_abort_set is used
     * to provide a deactivation mechanism on DISABLED event.
     */
}
 1008508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_fem_clear();
 100850c:	f001 b894 	b.w	1009638 <nrf_802154_trx_ppi_for_fem_clear>
 1008510:	41018000 	.word	0x41018000

01008514 <standalone_cca_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void standalone_cca_finish(void)
{
 1008514:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 1008516:	2100      	movs	r1, #0
 1008518:	2004      	movs	r0, #4
 100851a:	f001 f825 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->SHORTS &= ~shorts_mask;
}

NRF_STATIC_INLINE void nrf_radio_shorts_set(NRF_RADIO_Type * p_reg, uint32_t shorts_mask)
{
    p_reg->SHORTS = shorts_mask;
 100851e:	2300      	movs	r3, #0
 1008520:	4c06      	ldr	r4, [pc, #24]	; (100853c <standalone_cca_finish+0x28>)
 1008522:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_lna_reset();
 1008526:	f7ff ffe3 	bl	10084f0 <fem_for_lna_reset>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_radio_int_disable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
 100852a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 100852e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008532:	2301      	movs	r3, #1
 1008534:	6323      	str	r3, [r4, #48]	; 0x30
 1008536:	6123      	str	r3, [r4, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 1008538:	bd10      	pop	{r4, pc}
 100853a:	bf00      	nop
 100853c:	41008000 	.word	0x41008000

01008540 <energy_detection_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void energy_detection_finish(void)
{
 1008540:	b508      	push	{r3, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 1008542:	2100      	movs	r1, #0
 1008544:	2004      	movs	r0, #4
 1008546:	f001 f80f 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    fem_for_lna_reset();
 100854a:	f7ff ffd1 	bl	10084f0 <fem_for_lna_reset>
    p_reg->INTENCLR = mask;
 100854e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1008552:	4b05      	ldr	r3, [pc, #20]	; (1008568 <energy_detection_finish+0x28>)
 1008554:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 1008558:	2200      	movs	r2, #0
 100855a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100855e:	2201      	movs	r2, #1
 1008560:	629a      	str	r2, [r3, #40]	; 0x28
 1008562:	611a      	str	r2, [r3, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_EDSTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 1008564:	bd08      	pop	{r3, pc}
 1008566:	bf00      	nop
 1008568:	41008000 	.word	0x41008000

0100856c <trigger_disable_to_start_rampup>:
{
 100856c:	b508      	push	{r3, lr}
    if (!nrf_802154_trx_ppi_for_ramp_up_was_triggered())
 100856e:	f001 f81d 	bl	10095ac <nrf_802154_trx_ppi_for_ramp_up_was_triggered>
 1008572:	b910      	cbnz	r0, 100857a <trigger_disable_to_start_rampup+0xe>
 1008574:	2201      	movs	r2, #1
 1008576:	4b01      	ldr	r3, [pc, #4]	; (100857c <trigger_disable_to_start_rampup+0x10>)
 1008578:	611a      	str	r2, [r3, #16]
}
 100857a:	bd08      	pop	{r3, pc}
 100857c:	41008000 	.word	0x41008000

01008580 <fem_for_tx_reset>:
{
 1008580:	b510      	push	{r4, lr}
 1008582:	4c09      	ldr	r4, [pc, #36]	; (10085a8 <fem_for_tx_reset+0x28>)
 1008584:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 1008588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 100858c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (cca)
 1008590:	b108      	cbz	r0, 1008596 <fem_for_tx_reset+0x16>
        mpsl_fem_lna_configuration_clear();
 1008592:	f7fc f83f 	bl	1004614 <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
 1008596:	f7fc f837 	bl	1004608 <mpsl_fem_pa_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 100859a:	f001 f84d 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 100859e:	f006 fab4 	bl	100eb0a <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10085a2:	2301      	movs	r3, #1
 10085a4:	6123      	str	r3, [r4, #16]
}
 10085a6:	bd10      	pop	{r4, pc}
 10085a8:	41018000 	.word	0x41018000

010085ac <txframe_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}

static void txframe_finish(void)
{
 10085ac:	b510      	push	{r4, lr}
     * If FEM is in use the PPI_EGU_TIMER_START might be triggered if radio reached DISABLED state,
     * so the TIMER may start counting from the value on which FEM activation finished. The TIMER's CC registers
     * are set in the past so even if TIMER started no spurious FEM PA activation will occur.
     * We need to disable PPI_EGU_TIMER_START and then shutdown TIMER as it is not used.
     */
    txframe_finish_disable_ppis(m_transmit_with_cca);
 10085ae:	4c09      	ldr	r4, [pc, #36]	; (10085d4 <txframe_finish+0x28>)
 10085b0:	7820      	ldrb	r0, [r4, #0]
 10085b2:	f006 fa8c 	bl	100eace <txframe_finish_disable_ppis>

    fem_for_tx_reset(m_transmit_with_cca);
 10085b6:	7820      	ldrb	r0, [r4, #0]
 10085b8:	f7ff ffe2 	bl	1008580 <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
 10085bc:	4a06      	ldr	r2, [pc, #24]	; (10085d8 <txframe_finish+0x2c>)
 10085be:	4b07      	ldr	r3, [pc, #28]	; (10085dc <txframe_finish+0x30>)
 10085c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 10085c4:	2300      	movs	r3, #0
 10085c6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    txframe_finish_disable_ints();

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
 10085ca:	4a05      	ldr	r2, [pc, #20]	; (10085e0 <txframe_finish+0x34>)
 10085cc:	7093      	strb	r3, [r2, #2]
#endif
    m_flags.missing_receive_buffer = false;
 10085ce:	7053      	strb	r3, [r2, #1]
     * All PPIs that were used are disabled (forks are cleared if used)
     * RADIO.SHORTS are cleared
     */

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 10085d0:	bd10      	pop	{r4, pc}
 10085d2:	bf00      	nop
 10085d4:	210046bc 	.word	0x210046bc
 10085d8:	41008000 	.word	0x41008000
 10085dc:	08060003 	.word	0x08060003
 10085e0:	210046b7 	.word	0x210046b7

010085e4 <rxframe_finish>:
{
 10085e4:	2320      	movs	r3, #32
 10085e6:	b510      	push	{r4, lr}
                     RADIO_RSSISAMPLE_RSSISAMPLE_Pos);
}

NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get(NRF_RADIO_Type const * p_reg)
{
    return (nrf_radio_state_t) p_reg->STATE;
 10085e8:	4911      	ldr	r1, [pc, #68]	; (1008630 <rxframe_finish+0x4c>)
 10085ea:	f8d1 2550 	ldr.w	r2, [r1, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_DISABLED)
 10085ee:	b2d2      	uxtb	r2, r2
 10085f0:	b10a      	cbz	r2, 10085f6 <rxframe_finish+0x12>
    for (uint32_t i = 0; i < MAX_RXRAMPDOWN_CYCLES; i++)
 10085f2:	3b01      	subs	r3, #1
 10085f4:	d1f9      	bne.n	10085ea <rxframe_finish+0x6>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 10085f6:	f006 fa88 	bl	100eb0a <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    rxframe_finish_disable_ppis();
 10085fa:	f006 fa6f 	bl	100eadc <rxframe_finish_disable_ppis>
    mpsl_fem_lna_configuration_clear();
 10085fe:	f7fc f809 	bl	1004614 <mpsl_fem_lna_configuration_clear>
    p_reg->SHORTS &= ~(mask);
 1008602:	4a0c      	ldr	r2, [pc, #48]	; (1008634 <rxframe_finish+0x50>)
    p_reg->INTENCLR = mask;
 1008604:	f243 4002 	movw	r0, #13314	; 0x3402
 1008608:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
}

NRF_STATIC_INLINE void nrf_egu_int_disable(NRF_EGU_Type * p_reg, uint32_t mask)
{
    NRFX_ASSERT(p_reg);
    p_reg->INTENCLR = mask;
 100860c:	2408      	movs	r4, #8
 100860e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 1008612:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    m_flags.psdu_being_received = false;
 1008616:	2300      	movs	r3, #0
 1008618:	4a07      	ldr	r2, [pc, #28]	; (1008638 <rxframe_finish+0x54>)
 100861a:	4905      	ldr	r1, [pc, #20]	; (1008630 <rxframe_finish+0x4c>)
 100861c:	7013      	strb	r3, [r2, #0]
 100861e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
 1008622:	4806      	ldr	r0, [pc, #24]	; (100863c <rxframe_finish+0x58>)
 1008624:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 1008628:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
 100862c:	7053      	strb	r3, [r2, #1]
}
 100862e:	bd10      	pop	{r4, pc}
 1008630:	41008000 	.word	0x41008000
 1008634:	41018000 	.word	0x41018000
 1008638:	210046b7 	.word	0x210046b7
 100863c:	41014000 	.word	0x41014000

01008640 <fem_for_pa_set>:
{
 1008640:	b508      	push	{r3, lr}
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0)
 1008642:	2100      	movs	r1, #0
 1008644:	4807      	ldr	r0, [pc, #28]	; (1008664 <fem_for_pa_set+0x24>)
 1008646:	f7fb ffd3 	bl	10045f0 <mpsl_fem_pa_configuration_set>
 100864a:	b950      	cbnz	r0, 1008662 <fem_for_pa_set+0x22>
    p_reg->SHORTS |= mask;
 100864c:	4a06      	ldr	r2, [pc, #24]	; (1008668 <fem_for_pa_set+0x28>)
 100864e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 1008652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 1008656:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 100865a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
 100865e:	f000 bfe1 	b.w	1009624 <nrf_802154_trx_ppi_for_fem_set>
}
 1008662:	bd08      	pop	{r3, pc}
 1008664:	010104cc 	.word	0x010104cc
 1008668:	41018000 	.word	0x41018000

0100866c <cca_configuration_update>:
{
 100866c:	b513      	push	{r0, r1, r4, lr}
    nrf_802154_pib_cca_cfg_get(&cca_cfg);
 100866e:	a801      	add	r0, sp, #4
 1008670:	f7ff febe 	bl	10083f0 <nrf_802154_pib_cca_cfg_get>
    nrf_radio_cca_configure(NRF_RADIO,
 1008674:	f89d 0005 	ldrb.w	r0, [sp, #5]
 1008678:	f89d 4004 	ldrb.w	r4, [sp, #4]
 100867c:	f006 fa1b 	bl	100eab6 <nrf_802154_rssi_cca_ed_threshold_corrected_get>
                                               uint8_t              cca_corr_cnt)
{
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
                      ((uint32_t)cca_ed_threshold   << RADIO_CCACTRL_CCAEDTHRES_Pos) |
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
 1008680:	f89d 3007 	ldrb.w	r3, [sp, #7]
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 1008684:	f89d 2006 	ldrb.w	r2, [sp, #6]
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
 1008688:	061b      	lsls	r3, r3, #24
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 100868a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 100868e:	4323      	orrs	r3, r4
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
 1008690:	4a03      	ldr	r2, [pc, #12]	; (10086a0 <cca_configuration_update+0x34>)
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 1008692:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
 1008696:	f8c2 366c 	str.w	r3, [r2, #1644]	; 0x66c
}
 100869a:	b002      	add	sp, #8
 100869c:	bd10      	pop	{r4, pc}
 100869e:	bf00      	nop
 10086a0:	41008000 	.word	0x41008000

010086a4 <channel_set>:
    nrf_radio_frequency_set(NRF_RADIO, 2405U + 5U * (channel - 11U));
 10086a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 10086a8:	f600 102e 	addw	r0, r0, #2350	; 0x92e
    if (radio_frequency < 2400)
 10086ac:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
        delta = ((uint32_t)(radio_frequency - 2360)) |
 10086b0:	bf38      	it	cc
 10086b2:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    p_reg->FREQUENCY = delta;
 10086b6:	4b04      	ldr	r3, [pc, #16]	; (10086c8 <channel_set+0x24>)
        delta = ((uint32_t)(radio_frequency - 2360)) |
 10086b8:	bf34      	ite	cc
 10086ba:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
        delta = ((uint32_t)(radio_frequency - 2400)) |
 10086be:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    p_reg->FREQUENCY = delta;
 10086c2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
 10086c6:	4770      	bx	lr
 10086c8:	41008000 	.word	0x41008000

010086cc <fem_for_lna_set>:
{
 10086cc:	b508      	push	{r3, lr}
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
 10086ce:	2100      	movs	r1, #0
 10086d0:	4807      	ldr	r0, [pc, #28]	; (10086f0 <fem_for_lna_set+0x24>)
 10086d2:	f7fb ff93 	bl	10045fc <mpsl_fem_lna_configuration_set>
 10086d6:	b950      	cbnz	r0, 10086ee <fem_for_lna_set+0x22>
 10086d8:	4a06      	ldr	r2, [pc, #24]	; (10086f4 <fem_for_lna_set+0x28>)
 10086da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 10086de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 10086e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 10086e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
 10086ea:	f000 bf9b 	b.w	1009624 <nrf_802154_trx_ppi_for_fem_set>
}
 10086ee:	bd08      	pop	{r3, pc}
 10086f0:	010104b8 	.word	0x010104b8
 10086f4:	41018000 	.word	0x41018000

010086f8 <rxack_finish>:
{
 10086f8:	b510      	push	{r4, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 10086fa:	2100      	movs	r1, #0
 10086fc:	2004      	movs	r0, #4
 10086fe:	f000 ff33 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->INTENCLR = mask;
 1008702:	f243 0302 	movw	r3, #12290	; 0x3002
 1008706:	4c0b      	ldr	r4, [pc, #44]	; (1008734 <rxack_finish+0x3c>)
 1008708:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
 100870c:	f7fb ff82 	bl	1004614 <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 1008710:	f000 ff92 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
 1008714:	4b08      	ldr	r3, [pc, #32]	; (1008738 <rxack_finish+0x40>)
 1008716:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100871a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 100871e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008722:	2201      	movs	r2, #1
 1008724:	611a      	str	r2, [r3, #16]
    p_reg->SHORTS = shorts_mask;
 1008726:	2300      	movs	r3, #0
    m_flags.missing_receive_buffer = false;
 1008728:	4a04      	ldr	r2, [pc, #16]	; (100873c <rxack_finish+0x44>)
 100872a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 100872e:	7053      	strb	r3, [r2, #1]
}
 1008730:	bd10      	pop	{r4, pc}
 1008732:	bf00      	nop
 1008734:	41008000 	.word	0x41008000
 1008738:	41018000 	.word	0x41018000
 100873c:	210046b7 	.word	0x210046b7

01008740 <rx_flags_clear>:
    m_flags.missing_receive_buffer = false;
 1008740:	2200      	movs	r2, #0
 1008742:	4b02      	ldr	r3, [pc, #8]	; (100874c <rx_flags_clear+0xc>)
 1008744:	705a      	strb	r2, [r3, #1]
    m_flags.psdu_being_received = false;
 1008746:	701a      	strb	r2, [r3, #0]
}
 1008748:	4770      	bx	lr
 100874a:	bf00      	nop
 100874c:	210046b7 	.word	0x210046b7

01008750 <nrf_timer_init>:
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
 1008750:	4b0a      	ldr	r3, [pc, #40]	; (100877c <nrf_timer_init+0x2c>)
 1008752:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 1008756:	f022 0203 	bic.w	r2, r2, #3
 100875a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
 100875e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 1008762:	f042 0203 	orr.w	r2, r2, #3
 1008766:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
 100876a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 100876e:	f022 020f 	bic.w	r2, r2, #15
 1008772:	f042 0204 	orr.w	r2, r2, #4
 1008776:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 100877a:	4770      	bx	lr
 100877c:	41018000 	.word	0x41018000

01008780 <nrf_802154_trx_module_reset>:
    m_trx_state                      = TRX_STATE_DISABLED;
 1008780:	2100      	movs	r1, #0
 1008782:	4b06      	ldr	r3, [pc, #24]	; (100879c <nrf_802154_trx_module_reset+0x1c>)
    memset(&m_flags, 0, sizeof(m_flags));
 1008784:	2205      	movs	r2, #5
    m_trx_state                      = TRX_STATE_DISABLED;
 1008786:	7019      	strb	r1, [r3, #0]
    m_timer_value_on_radio_end_event = 0;
 1008788:	4b05      	ldr	r3, [pc, #20]	; (10087a0 <nrf_802154_trx_module_reset+0x20>)
    memset(&m_flags, 0, sizeof(m_flags));
 100878a:	4806      	ldr	r0, [pc, #24]	; (10087a4 <nrf_802154_trx_module_reset+0x24>)
    m_timer_value_on_radio_end_event = 0;
 100878c:	6019      	str	r1, [r3, #0]
    m_transmit_with_cca              = false;
 100878e:	4b06      	ldr	r3, [pc, #24]	; (10087a8 <nrf_802154_trx_module_reset+0x28>)
 1008790:	7019      	strb	r1, [r3, #0]
    mp_receive_buffer                = NULL;
 1008792:	4b06      	ldr	r3, [pc, #24]	; (10087ac <nrf_802154_trx_module_reset+0x2c>)
 1008794:	6019      	str	r1, [r3, #0]
    memset(&m_flags, 0, sizeof(m_flags));
 1008796:	f005 bf09 	b.w	100e5ac <memset>
 100879a:	bf00      	nop
 100879c:	210046bd 	.word	0x210046bd
 10087a0:	210034b4 	.word	0x210034b4
 10087a4:	210046b7 	.word	0x210046b7
 10087a8:	210046bc 	.word	0x210046bc
 10087ac:	210034b8 	.word	0x210034b8

010087b0 <nrf_802154_trx_enable>:
{
 10087b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
 10087b2:	230f      	movs	r3, #15
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
 10087b4:	2600      	movs	r6, #0
 10087b6:	2501      	movs	r5, #1
 10087b8:	4c3a      	ldr	r4, [pc, #232]	; (10088a4 <nrf_802154_trx_enable+0xf4>)
 10087ba:	b085      	sub	sp, #20
 10087bc:	f8c4 6ffc 	str.w	r6, [r4, #4092]	; 0xffc
 10087c0:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
 10087c4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    uint32_t ficr_reg = *(volatile uint32_t *)(FICR_BASE + 0x84UL);
 10087c8:	4b37      	ldr	r3, [pc, #220]	; (10088a8 <nrf_802154_trx_enable+0xf8>)
    memset(&packet_conf, 0, sizeof(packet_conf));
 10087ca:	4631      	mov	r1, r6
    uint32_t ficr_reg = *(volatile uint32_t *)(FICR_BASE + 0x84UL);
 10087cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    memset(&packet_conf, 0, sizeof(packet_conf));
 10087d0:	220d      	movs	r2, #13
    *p_radio_reg = ficr_reg;
 10087d2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    memset(&packet_conf, 0, sizeof(packet_conf));
 10087d6:	4668      	mov	r0, sp
 10087d8:	f005 fee8 	bl	100e5ac <memset>
    packet_conf.plen   = NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO;
 10087dc:	2302      	movs	r3, #2
 10087de:	f88d 3005 	strb.w	r3, [sp, #5]
    packet_conf.maxlen = MAX_PACKET_SIZE;
 10087e2:	237f      	movs	r3, #127	; 0x7f
 10087e4:	f88d 3008 	strb.w	r3, [sp, #8]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
 10087e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
 10087ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
 10087f0:	041b      	lsls	r3, r3, #16
 10087f2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
 10087f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    packet_conf.lflen  = 8;
 10087fa:	2708      	movs	r7, #8
 10087fc:	42b3      	cmp	r3, r6
 10087fe:	bf0c      	ite	eq
 1008800:	4633      	moveq	r3, r6
 1008802:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
 1008806:	f89d 1004 	ldrb.w	r1, [sp, #4]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100880a:	4313      	orrs	r3, r2
 100880c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 1008810:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
 1008814:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 1008818:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 100881c:	433b      	orrs	r3, r7
 100881e:	f88d 7000 	strb.w	r7, [sp]
    packet_conf.crcinc = true;
 1008822:	f88d 5006 	strb.w	r5, [sp, #6]
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
 1008826:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
 100882a:	f89d 300a 	ldrb.w	r3, [sp, #10]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
 100882e:	f89d 2009 	ldrb.w	r2, [sp, #9]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
 1008832:	041b      	lsls	r3, r3, #16
 1008834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
 1008838:	f89d 200b 	ldrb.w	r2, [sp, #11]
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
 100883c:	f89d 100c 	ldrb.w	r1, [sp, #12]
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
 1008840:	42b2      	cmp	r2, r6
 1008842:	bf14      	ite	ne
 1008844:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 1008848:	4632      	moveq	r2, r6
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
 100884a:	42b1      	cmp	r1, r6
 100884c:	bf14      	ite	ne
 100884e:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 1008852:	4631      	moveq	r1, r6
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
 1008854:	430b      	orrs	r3, r1
 1008856:	4313      	orrs	r3, r2
 1008858:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
 100885c:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
 1008860:	f240 2302 	movw	r3, #514	; 0x202
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
 1008864:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
 1008868:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
 100886c:	4b0f      	ldr	r3, [pc, #60]	; (10088ac <nrf_802154_trx_enable+0xfc>)
 100886e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    nrf_802154_trx_ppi_for_enable();
 1008872:	f000 fe15 	bl	10094a0 <nrf_802154_trx_ppi_for_enable>
    cca_configuration_update();
 1008876:	f7ff fef9 	bl	100866c <cca_configuration_update>
    channel_set(nrf_802154_pib_channel_get());
 100887a:	f7ff fd33 	bl	10082e4 <nrf_802154_pib_channel_get>
 100887e:	f7ff ff11 	bl	10086a4 <channel_set>
    nrf_802154_custom_part_of_radio_init();
 1008882:	f006 f841 	bl	100e908 <nrf_802154_custom_part_of_radio_init>
    nrf_802154_irq_enable(RADIO_IRQn);
 1008886:	4638      	mov	r0, r7
 1008888:	f005 ff95 	bl	100e7b6 <nrf_802154_irq_enable>
    mpsl_fem_abort_set(NRF_802154_DPPI_RADIO_DISABLED,
 100888c:	4631      	mov	r1, r6
 100888e:	2007      	movs	r0, #7
 1008890:	f7fb fecc 	bl	100462c <mpsl_fem_abort_set>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 1008894:	2003      	movs	r0, #3
 1008896:	f7fb fec3 	bl	1004620 <mpsl_fem_deactivate_now>
    m_trx_state = TRX_STATE_IDLE;
 100889a:	4b05      	ldr	r3, [pc, #20]	; (10088b0 <nrf_802154_trx_enable+0x100>)
 100889c:	701d      	strb	r5, [r3, #0]
}
 100889e:	b005      	add	sp, #20
 10088a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10088a2:	bf00      	nop
 10088a4:	41008000 	.word	0x41008000
 10088a8:	01ff0000 	.word	0x01ff0000
 10088ac:	00011021 	.word	0x00011021
 10088b0:	210046bd 	.word	0x210046bd

010088b4 <nrf_802154_trx_disable>:
{
 10088b4:	b510      	push	{r4, lr}
    if (m_trx_state != TRX_STATE_DISABLED)
 10088b6:	4c2c      	ldr	r4, [pc, #176]	; (1008968 <nrf_802154_trx_disable+0xb4>)
 10088b8:	7823      	ldrb	r3, [r4, #0]
 10088ba:	2b00      	cmp	r3, #0
 10088bc:	d040      	beq.n	1008940 <nrf_802154_trx_disable+0x8c>
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
 10088be:	2200      	movs	r2, #0
 10088c0:	4b2a      	ldr	r3, [pc, #168]	; (100896c <nrf_802154_trx_disable+0xb8>)
        nrf_802154_irq_clear_pending(RADIO_IRQn);
 10088c2:	2008      	movs	r0, #8
 10088c4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
 10088c8:	f7fe f9fc 	bl	1006cc4 <nrf_802154_irq_clear_pending>
    switch (m_trx_state)
 10088cc:	7823      	ldrb	r3, [r4, #0]
 10088ce:	3b03      	subs	r3, #3
 10088d0:	2b08      	cmp	r3, #8
 10088d2:	d808      	bhi.n	10088e6 <nrf_802154_trx_disable+0x32>
 10088d4:	e8df f003 	tbb	[pc, r3]
 10088d8:	3a350705 	.word	0x3a350705
 10088dc:	44443541 	.word	0x44443541
 10088e0:	35          	.byte	0x35
 10088e1:	00          	.byte	0x00
            rxframe_finish_disable_ppis();
 10088e2:	f006 f8fb 	bl	100eadc <rxframe_finish_disable_ppis>
    nrf_802154_trx_ppi_for_disable();
 10088e6:	f000 fdf9 	bl	10094dc <nrf_802154_trx_ppi_for_disable>
 10088ea:	2208      	movs	r2, #8
 10088ec:	4b20      	ldr	r3, [pc, #128]	; (1008970 <nrf_802154_trx_disable+0xbc>)
 10088ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 10088f2:	2200      	movs	r2, #0
 10088f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 10088f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    p_reg->SHORTS &= ~(mask);
 10088fc:	4b1d      	ldr	r3, [pc, #116]	; (1008974 <nrf_802154_trx_disable+0xc0>)
 10088fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1008902:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 1008906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100890a:	2201      	movs	r2, #1
 100890c:	611a      	str	r2, [r3, #16]
 100890e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 1008912:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
        mpsl_fem_lna_configuration_clear();
 1008916:	f7fb fe7d 	bl	1004614 <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
 100891a:	f7fb fe75 	bl	1004608 <mpsl_fem_pa_configuration_clear>
        mpsl_fem_abort_clear();
 100891e:	f7fb fe8b 	bl	1004638 <mpsl_fem_abort_clear>
        if (m_trx_state != TRX_STATE_IDLE)
 1008922:	7823      	ldrb	r3, [r4, #0]
 1008924:	2b01      	cmp	r3, #1
 1008926:	d004      	beq.n	1008932 <nrf_802154_trx_disable+0x7e>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 1008928:	2003      	movs	r0, #3
 100892a:	f7fb fe79 	bl	1004620 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
 100892e:	f7fb fe59 	bl	10045e4 <mpsl_fem_disable>
        m_flags.psdu_being_received = false;
 1008932:	2300      	movs	r3, #0
 1008934:	4a10      	ldr	r2, [pc, #64]	; (1008978 <nrf_802154_trx_disable+0xc4>)
        m_trx_state = TRX_STATE_DISABLED;
 1008936:	7023      	strb	r3, [r4, #0]
        m_flags.psdu_being_received = false;
 1008938:	7013      	strb	r3, [r2, #0]
        m_flags.missing_receive_buffer = false;
 100893a:	7053      	strb	r3, [r2, #1]
        m_flags.rssi_started           = false;
 100893c:	70d3      	strb	r3, [r2, #3]
        m_flags.tx_started = false;
 100893e:	7093      	strb	r3, [r2, #2]
}
 1008940:	bd10      	pop	{r4, pc}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 1008942:	2100      	movs	r1, #0
 1008944:	2004      	movs	r0, #4
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 1008946:	f000 fe0f 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
 100894a:	e003      	b.n	1008954 <nrf_802154_trx_disable+0xa0>
            txframe_finish_disable_ppis(m_transmit_with_cca);
 100894c:	4b0b      	ldr	r3, [pc, #44]	; (100897c <nrf_802154_trx_disable+0xc8>)
 100894e:	7818      	ldrb	r0, [r3, #0]
 1008950:	f006 f8bd 	bl	100eace <txframe_finish_disable_ppis>
            nrf_802154_trx_ppi_for_fem_clear();
 1008954:	f000 fe70 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
            break;
 1008958:	e7c5      	b.n	10088e6 <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ack_tx_clear();
 100895a:	f000 fe51 	bl	1009600 <nrf_802154_trx_ppi_for_ack_tx_clear>
            break;
 100895e:	e7c2      	b.n	10088e6 <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 1008960:	2100      	movs	r1, #0
 1008962:	4608      	mov	r0, r1
 1008964:	e7ef      	b.n	1008946 <nrf_802154_trx_disable+0x92>
 1008966:	bf00      	nop
 1008968:	210046bd 	.word	0x210046bd
 100896c:	41008000 	.word	0x41008000
 1008970:	41014000 	.word	0x41014000
 1008974:	41018000 	.word	0x41018000
 1008978:	210046b7 	.word	0x210046b7
 100897c:	210046bc 	.word	0x210046bc

01008980 <nrf_802154_trx_antenna_update>:
{
 1008980:	b510      	push	{r4, lr}
    switch (m_trx_state)
 1008982:	4c18      	ldr	r4, [pc, #96]	; (10089e4 <nrf_802154_trx_antenna_update+0x64>)
 1008984:	7823      	ldrb	r3, [r4, #0]
 1008986:	3b03      	subs	r3, #3
 1008988:	2b08      	cmp	r3, #8
 100898a:	d80d      	bhi.n	10089a8 <nrf_802154_trx_antenna_update+0x28>
 100898c:	e8df f003 	tbb	[pc, r3]
 1008990:	24240505 	.word	0x24240505
 1008994:	24242405 	.word	0x24242405
 1008998:	05          	.byte	0x05
 1008999:	00          	.byte	0x00
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
 100899a:	2000      	movs	r0, #0
 100899c:	f007 fad6 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
 10089a0:	2801      	cmp	r0, #1
 10089a2:	d002      	beq.n	10089aa <nrf_802154_trx_antenna_update+0x2a>
 10089a4:	2802      	cmp	r0, #2
 10089a6:	d007      	beq.n	10089b8 <nrf_802154_trx_antenna_update+0x38>
}
 10089a8:	bd10      	pop	{r4, pc}
            result = nrf_802154_sl_ant_div_antenna_set(
 10089aa:	2000      	movs	r0, #0
            result = nrf_802154_sl_ant_div_antenna_set(
 10089ac:	f007 fad0 	bl	100ff50 <nrf_802154_sl_ant_div_cfg_antenna_get>
}
 10089b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            result = nrf_802154_sl_ant_div_antenna_set(
 10089b4:	f007 babc 	b.w	100ff30 <nrf_802154_sl_ant_div_antenna_set>
    switch (m_trx_state)
 10089b8:	7822      	ldrb	r2, [r4, #0]
 10089ba:	2a04      	cmp	r2, #4
 10089bc:	b2d3      	uxtb	r3, r2
 10089be:	d805      	bhi.n	10089cc <nrf_802154_trx_antenna_update+0x4c>
 10089c0:	2b02      	cmp	r3, #2
 10089c2:	d9f1      	bls.n	10089a8 <nrf_802154_trx_antenna_update+0x28>
}
 10089c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_sl_ant_div_rx_started_notify();
 10089c8:	f007 babe 	b.w	100ff48 <nrf_802154_sl_ant_div_rx_started_notify>
    switch (m_trx_state)
 10089cc:	2b07      	cmp	r3, #7
 10089ce:	d1eb      	bne.n	10089a8 <nrf_802154_trx_antenna_update+0x28>
}
 10089d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_sl_ant_div_txack_notify();
 10089d4:	f007 bab9 	b.w	100ff4a <nrf_802154_sl_ant_div_txack_notify>
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
 10089d8:	2001      	movs	r0, #1
 10089da:	f007 fab7 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
 10089de:	2801      	cmp	r0, #1
 10089e0:	d1e2      	bne.n	10089a8 <nrf_802154_trx_antenna_update+0x28>
 10089e2:	e7e3      	b.n	10089ac <nrf_802154_trx_antenna_update+0x2c>
 10089e4:	210046bd 	.word	0x210046bd

010089e8 <nrf_802154_trx_psdu_is_being_received>:
}
 10089e8:	4b01      	ldr	r3, [pc, #4]	; (10089f0 <nrf_802154_trx_psdu_is_being_received+0x8>)
 10089ea:	7818      	ldrb	r0, [r3, #0]
 10089ec:	4770      	bx	lr
 10089ee:	bf00      	nop
 10089f0:	210046b7 	.word	0x210046b7

010089f4 <nrf_802154_trx_receive_is_buffer_missing>:
    switch (m_trx_state)
 10089f4:	4b05      	ldr	r3, [pc, #20]	; (1008a0c <nrf_802154_trx_receive_is_buffer_missing+0x18>)
 10089f6:	781b      	ldrb	r3, [r3, #0]
 10089f8:	2b03      	cmp	r3, #3
 10089fa:	b2da      	uxtb	r2, r3
 10089fc:	d001      	beq.n	1008a02 <nrf_802154_trx_receive_is_buffer_missing+0xe>
 10089fe:	2a05      	cmp	r2, #5
 1008a00:	d102      	bne.n	1008a08 <nrf_802154_trx_receive_is_buffer_missing+0x14>
            return m_flags.missing_receive_buffer;
 1008a02:	4b03      	ldr	r3, [pc, #12]	; (1008a10 <nrf_802154_trx_receive_is_buffer_missing+0x1c>)
 1008a04:	7858      	ldrb	r0, [r3, #1]
 1008a06:	4770      	bx	lr
    switch (m_trx_state)
 1008a08:	2000      	movs	r0, #0
}
 1008a0a:	4770      	bx	lr
 1008a0c:	210046bd 	.word	0x210046bd
 1008a10:	210046b7 	.word	0x210046b7

01008a14 <nrf_802154_trx_receive_buffer_set>:
    mp_receive_buffer = p_receive_buffer;
 1008a14:	4a10      	ldr	r2, [pc, #64]	; (1008a58 <nrf_802154_trx_receive_buffer_set+0x44>)
{
 1008a16:	b510      	push	{r4, lr}
 1008a18:	4603      	mov	r3, r0
    mp_receive_buffer = p_receive_buffer;
 1008a1a:	6010      	str	r0, [r2, #0]
    if ((p_receive_buffer != NULL) && m_flags.missing_receive_buffer)
 1008a1c:	b1c8      	cbz	r0, 1008a52 <nrf_802154_trx_receive_buffer_set+0x3e>
 1008a1e:	4a0f      	ldr	r2, [pc, #60]	; (1008a5c <nrf_802154_trx_receive_buffer_set+0x48>)
 1008a20:	7850      	ldrb	r0, [r2, #1]
 1008a22:	b1b0      	cbz	r0, 1008a52 <nrf_802154_trx_receive_buffer_set+0x3e>
    switch (m_trx_state)
 1008a24:	490e      	ldr	r1, [pc, #56]	; (1008a60 <nrf_802154_trx_receive_buffer_set+0x4c>)
 1008a26:	7809      	ldrb	r1, [r1, #0]
 1008a28:	2903      	cmp	r1, #3
 1008a2a:	b2cc      	uxtb	r4, r1
 1008a2c:	d012      	beq.n	1008a54 <nrf_802154_trx_receive_buffer_set+0x40>
            shorts = SHORTS_RX_ACK | SHORTS_RX_FREE_BUFFER;
 1008a2e:	2c05      	cmp	r4, #5
 1008a30:	490c      	ldr	r1, [pc, #48]	; (1008a64 <nrf_802154_trx_receive_buffer_set+0x50>)
 1008a32:	bf18      	it	ne
 1008a34:	2100      	movne	r1, #0
    m_flags.missing_receive_buffer = false;
 1008a36:	2400      	movs	r4, #0
 1008a38:	7054      	strb	r4, [r2, #1]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 1008a3a:	4a0b      	ldr	r2, [pc, #44]	; (1008a68 <nrf_802154_trx_receive_buffer_set+0x54>)
 1008a3c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 1008a40:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return (nrf_radio_state_t) p_reg->STATE;
 1008a44:	f8d2 3550 	ldr.w	r3, [r2, #1360]	; 0x550
    if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_RXIDLE)
 1008a48:	b2db      	uxtb	r3, r3
 1008a4a:	2b02      	cmp	r3, #2
 1008a4c:	d101      	bne.n	1008a52 <nrf_802154_trx_receive_buffer_set+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008a4e:	2301      	movs	r3, #1
 1008a50:	6093      	str	r3, [r2, #8]
}
 1008a52:	bd10      	pop	{r4, pc}
    switch (m_trx_state)
 1008a54:	4905      	ldr	r1, [pc, #20]	; (1008a6c <nrf_802154_trx_receive_buffer_set+0x58>)
 1008a56:	e7ee      	b.n	1008a36 <nrf_802154_trx_receive_buffer_set+0x22>
 1008a58:	210034b8 	.word	0x210034b8
 1008a5c:	210046b7 	.word	0x210046b7
 1008a60:	210046bd 	.word	0x210046bd
 1008a64:	00080012 	.word	0x00080012
 1008a68:	41008000 	.word	0x41008000
 1008a6c:	00080052 	.word	0x00080052

01008a70 <nrf_802154_trx_receive_frame>:
{
 1008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1008a74:	f04f 0801 	mov.w	r8, #1
    m_trx_state = TRX_STATE_RXFRAME;
 1008a78:	2203      	movs	r2, #3
    m_flags.rssi_started = false;
 1008a7a:	2700      	movs	r7, #0
 1008a7c:	4b39      	ldr	r3, [pc, #228]	; (1008b64 <nrf_802154_trx_receive_frame+0xf4>)
 1008a7e:	4e3a      	ldr	r6, [pc, #232]	; (1008b68 <nrf_802154_trx_receive_frame+0xf8>)
 1008a80:	f8c3 8010 	str.w	r8, [r3, #16]
    m_trx_state = TRX_STATE_RXFRAME;
 1008a84:	4b39      	ldr	r3, [pc, #228]	; (1008b6c <nrf_802154_trx_receive_frame+0xfc>)
{
 1008a86:	460c      	mov	r4, r1
    m_trx_state = TRX_STATE_RXFRAME;
 1008a88:	701a      	strb	r2, [r3, #0]
{
 1008a8a:	4605      	mov	r5, r0
    rx_flags_clear();
 1008a8c:	f7ff fe58 	bl	1008740 <rx_flags_clear>
    m_flags.rssi_started = false;
 1008a90:	70f7      	strb	r7, [r6, #3]
    m_flags.rssi_settled = false;
 1008a92:	7137      	strb	r7, [r6, #4]
    nrf_radio_txpower_set(NRF_RADIO, nrf_802154_pib_tx_power_get());
 1008a94:	f7ff fc34 	bl	1008300 <nrf_802154_pib_tx_power_get>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
 1008a98:	4b35      	ldr	r3, [pc, #212]	; (1008b70 <nrf_802154_trx_receive_frame+0x100>)
    if (mp_receive_buffer != NULL)
 1008a9a:	4a36      	ldr	r2, [pc, #216]	; (1008b74 <nrf_802154_trx_receive_frame+0x104>)
 1008a9c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
 1008aa0:	6811      	ldr	r1, [r2, #0]
 1008aa2:	2900      	cmp	r1, #0
 1008aa4:	d051      	beq.n	1008b4a <nrf_802154_trx_receive_frame+0xda>
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
 1008aa6:	6812      	ldr	r2, [r2, #0]
        m_flags.missing_receive_buffer = false;
 1008aa8:	7077      	strb	r7, [r6, #1]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 1008aaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
 1008aae:	4a32      	ldr	r2, [pc, #200]	; (1008b78 <nrf_802154_trx_receive_frame+0x108>)
    p_reg->SHORTS = shorts_mask;
 1008ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008ab4:	2200      	movs	r2, #0
    nrf_radio_bcc_set(NRF_RADIO, bcc * 8U);
 1008ab6:	00ed      	lsls	r5, r5, #3
    p_reg->BCC = radio_bcc;
 1008ab8:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008abc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 1008ac0:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 1008ac4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 1008ac8:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 1008acc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 1008ad0:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    if ((notifications_mask & TRX_RECEIVE_NOTIFICATION_STARTED) != 0U)
 1008ad4:	07a1      	lsls	r1, r4, #30
 1008ad6:	bf45      	ittet	mi
 1008ad8:	f8c3 2104 	strmi.w	r2, [r3, #260]	; 0x104
        ints_to_enable |= NRF_RADIO_INT_ADDRESS_MASK;
 1008adc:	f243 4502 	movwmi	r5, #13314	; 0x3402
    ints_to_enable |= NRF_RADIO_INT_CRCOK_MASK;
 1008ae0:	f44f 5550 	movpl.w	r5, #13312	; 0x3400
 1008ae4:	f8d3 3104 	ldrmi.w	r3, [r3, #260]	; 0x104
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
 1008ae8:	f014 0001 	ands.w	r0, r4, #1
 1008aec:	d031      	beq.n	1008b52 <nrf_802154_trx_receive_frame+0xe2>
        nrf_802154_trx_ppi_for_radio_sync_set(EGU_SYNC_TASK);
 1008aee:	200c      	movs	r0, #12
 1008af0:	f000 fdaa 	bl	1009648 <nrf_802154_trx_ppi_for_radio_sync_set>
 1008af4:	2200      	movs	r2, #0
 1008af6:	4b1e      	ldr	r3, [pc, #120]	; (1008b70 <nrf_802154_trx_receive_frame+0x100>)
 1008af8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 1008afc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 1008b00:	4b1e      	ldr	r3, [pc, #120]	; (1008b7c <nrf_802154_trx_receive_frame+0x10c>)
 1008b02:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 1008b06:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    p_reg->INTENSET = mask;
 1008b0a:	2208      	movs	r2, #8
 1008b0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    p_reg->INTENSET = mask;
 1008b10:	4b17      	ldr	r3, [pc, #92]	; (1008b70 <nrf_802154_trx_receive_frame+0x100>)
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
 1008b12:	2100      	movs	r1, #0
 1008b14:	481a      	ldr	r0, [pc, #104]	; (1008b80 <nrf_802154_trx_receive_frame+0x110>)
 1008b16:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
 1008b1a:	f7fb fd6f 	bl	10045fc <mpsl_fem_lna_configuration_set>
 1008b1e:	4c11      	ldr	r4, [pc, #68]	; (1008b64 <nrf_802154_trx_receive_frame+0xf4>)
 1008b20:	b9e0      	cbnz	r0, 1008b5c <nrf_802154_trx_receive_frame+0xec>
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
 1008b22:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    m_timer_value_on_radio_end_event = delta_time;
 1008b26:	4a17      	ldr	r2, [pc, #92]	; (1008b84 <nrf_802154_trx_receive_frame+0x114>)
 1008b28:	6013      	str	r3, [r2, #0]
    nrf_802154_trx_antenna_update();
 1008b2a:	f7ff ff29 	bl	1008980 <nrf_802154_trx_antenna_update>
    p_reg->SHORTS |= mask;
 1008b2e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, true);
 1008b32:	2101      	movs	r1, #1
 1008b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 1008b38:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 1008b3c:	2004      	movs	r0, #4
 1008b3e:	f000 fce5 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 1008b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    trigger_disable_to_start_rampup();
 1008b46:	f7ff bd11 	b.w	100856c <trigger_disable_to_start_rampup>
    uint32_t shorts         = SHORTS_RX;
 1008b4a:	2252      	movs	r2, #82	; 0x52
        m_flags.missing_receive_buffer = true;
 1008b4c:	f886 8001 	strb.w	r8, [r6, #1]
 1008b50:	e7ae      	b.n	1008ab0 <nrf_802154_trx_receive_frame+0x40>
         nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX)))
 1008b52:	f007 f9fb 	bl	100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
 1008b56:	2800      	cmp	r0, #0
 1008b58:	d1c9      	bne.n	1008aee <nrf_802154_trx_receive_frame+0x7e>
 1008b5a:	e7d9      	b.n	1008b10 <nrf_802154_trx_receive_frame+0xa0>
    p_reg->CC[cc_channel] = cc_value;
 1008b5c:	2301      	movs	r3, #1
 1008b5e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}
 1008b62:	e7e0      	b.n	1008b26 <nrf_802154_trx_receive_frame+0xb6>
 1008b64:	41018000 	.word	0x41018000
 1008b68:	210046b7 	.word	0x210046b7
 1008b6c:	210046bd 	.word	0x210046bd
 1008b70:	41008000 	.word	0x41008000
 1008b74:	210034b8 	.word	0x210034b8
 1008b78:	00080052 	.word	0x00080052
 1008b7c:	41014000 	.word	0x41014000
 1008b80:	010104b8 	.word	0x010104b8
 1008b84:	210034b4 	.word	0x210034b4

01008b88 <nrf_802154_trx_receive_ack>:
    m_trx_state = TRX_STATE_RXACK;
 1008b88:	2205      	movs	r2, #5
 1008b8a:	4b18      	ldr	r3, [pc, #96]	; (1008bec <nrf_802154_trx_receive_ack+0x64>)
    if (mp_receive_buffer != NULL)
 1008b8c:	4918      	ldr	r1, [pc, #96]	; (1008bf0 <nrf_802154_trx_receive_ack+0x68>)
{
 1008b8e:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_RXACK;
 1008b90:	701a      	strb	r2, [r3, #0]
    if (mp_receive_buffer != NULL)
 1008b92:	6808      	ldr	r0, [r1, #0]
 1008b94:	4a17      	ldr	r2, [pc, #92]	; (1008bf4 <nrf_802154_trx_receive_ack+0x6c>)
 1008b96:	4b18      	ldr	r3, [pc, #96]	; (1008bf8 <nrf_802154_trx_receive_ack+0x70>)
 1008b98:	b320      	cbz	r0, 1008be4 <nrf_802154_trx_receive_ack+0x5c>
        m_flags.missing_receive_buffer = false;
 1008b9a:	2000      	movs	r0, #0
 1008b9c:	7050      	strb	r0, [r2, #1]
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
 1008b9e:	680a      	ldr	r2, [r1, #0]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 1008ba0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
 1008ba4:	4a15      	ldr	r2, [pc, #84]	; (1008bfc <nrf_802154_trx_receive_ack+0x74>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008ba6:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 1008ba8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008bac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
 1008bb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1008bb4:	f8c3 4130 	str.w	r4, [r3, #304]	; 0x130
 1008bb8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 1008bbc:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
 1008bc0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
    p_reg->INTENSET = mask;
 1008bc4:	f243 0202 	movw	r2, #12290	; 0x3002
 1008bc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 1008bcc:	f7ff fd7e 	bl	10086cc <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 1008bd0:	f7ff fed6 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 1008bd4:	4621      	mov	r1, r4
 1008bd6:	2004      	movs	r0, #4
 1008bd8:	f000 fc98 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 1008bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 1008be0:	f7ff bcc4 	b.w	100856c <trigger_disable_to_start_rampup>
        m_flags.missing_receive_buffer = true;
 1008be4:	2101      	movs	r1, #1
 1008be6:	7051      	strb	r1, [r2, #1]
    uint32_t shorts         = SHORTS_RX_ACK;
 1008be8:	2212      	movs	r2, #18
 1008bea:	e7dc      	b.n	1008ba6 <nrf_802154_trx_receive_ack+0x1e>
 1008bec:	210046bd 	.word	0x210046bd
 1008bf0:	210034b8 	.word	0x210034b8
 1008bf4:	210046b7 	.word	0x210046b7
 1008bf8:	41008000 	.word	0x41008000
 1008bfc:	00080012 	.word	0x00080012

01008c00 <nrf_802154_trx_rssi_measure>:
{
 1008c00:	b510      	push	{r4, lr}
    if (m_trx_state == TRX_STATE_RXFRAME)
 1008c02:	4b11      	ldr	r3, [pc, #68]	; (1008c48 <nrf_802154_trx_rssi_measure+0x48>)
 1008c04:	781b      	ldrb	r3, [r3, #0]
 1008c06:	2b03      	cmp	r3, #3
 1008c08:	d11b      	bne.n	1008c42 <nrf_802154_trx_rssi_measure+0x42>
    return (nrf_radio_state_t) p_reg->STATE;
 1008c0a:	4b10      	ldr	r3, [pc, #64]	; (1008c4c <nrf_802154_trx_rssi_measure+0x4c>)
 1008c0c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
        if ((radio_state == RADIO_STATE_STATE_RxIdle) || (radio_state == RADIO_STATE_STATE_Rx))
 1008c10:	3b02      	subs	r3, #2
 1008c12:	b2db      	uxtb	r3, r3
 1008c14:	2b01      	cmp	r3, #1
 1008c16:	d814      	bhi.n	1008c42 <nrf_802154_trx_rssi_measure+0x42>
            if (!m_flags.rssi_settled)
 1008c18:	4c0d      	ldr	r4, [pc, #52]	; (1008c50 <nrf_802154_trx_rssi_measure+0x50>)
 1008c1a:	7923      	ldrb	r3, [r4, #4]
 1008c1c:	b93b      	cbnz	r3, 1008c2e <nrf_802154_trx_rssi_measure+0x2e>
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
 1008c1e:	4b0d      	ldr	r3, [pc, #52]	; (1008c54 <nrf_802154_trx_rssi_measure+0x54>)
    delay_cycles(cycles);
 1008c20:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 1008c24:	f043 0301 	orr.w	r3, r3, #1
 1008c28:	4798      	blx	r3
                m_flags.rssi_settled = true;
 1008c2a:	2301      	movs	r3, #1
 1008c2c:	7123      	strb	r3, [r4, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008c2e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008c30:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008c32:	4b06      	ldr	r3, [pc, #24]	; (1008c4c <nrf_802154_trx_rssi_measure+0x4c>)
 1008c34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 1008c38:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008c3c:	6158      	str	r0, [r3, #20]
            m_flags.rssi_started = true;
 1008c3e:	70e0      	strb	r0, [r4, #3]
}
 1008c40:	bd10      	pop	{r4, pc}
    bool result = false;
 1008c42:	2000      	movs	r0, #0
 1008c44:	e7fc      	b.n	1008c40 <nrf_802154_trx_rssi_measure+0x40>
 1008c46:	bf00      	nop
 1008c48:	210046bd 	.word	0x210046bd
 1008c4c:	41008000 	.word	0x41008000
 1008c50:	210046b7 	.word	0x210046b7
 1008c54:	01010300 	.word	0x01010300

01008c58 <nrf_802154_trx_rssi_measure_is_started>:
}
 1008c58:	4b01      	ldr	r3, [pc, #4]	; (1008c60 <nrf_802154_trx_rssi_measure_is_started+0x8>)
 1008c5a:	78d8      	ldrb	r0, [r3, #3]
 1008c5c:	4770      	bx	lr
 1008c5e:	bf00      	nop
 1008c60:	210046b7 	.word	0x210046b7

01008c64 <nrf_802154_trx_rssi_last_sample_get>:
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
 1008c64:	4b02      	ldr	r3, [pc, #8]	; (1008c70 <nrf_802154_trx_rssi_last_sample_get+0xc>)
 1008c66:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
 1008c6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 1008c6e:	4770      	bx	lr
 1008c70:	41008000 	.word	0x41008000

01008c74 <nrf_802154_trx_rssi_sample_is_available>:
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1008c74:	4b03      	ldr	r3, [pc, #12]	; (1008c84 <nrf_802154_trx_rssi_sample_is_available+0x10>)
 1008c76:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
 1008c7a:	3800      	subs	r0, #0
 1008c7c:	bf18      	it	ne
 1008c7e:	2001      	movne	r0, #1
 1008c80:	4770      	bx	lr
 1008c82:	bf00      	nop
 1008c84:	41008000 	.word	0x41008000

01008c88 <nrf_802154_trx_transmit_frame>:
{
 1008c88:	b570      	push	{r4, r5, r6, lr}
 1008c8a:	4615      	mov	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008c8c:	2201      	movs	r2, #1
 1008c8e:	4b37      	ldr	r3, [pc, #220]	; (1008d6c <nrf_802154_trx_transmit_frame+0xe4>)
 1008c90:	4606      	mov	r6, r0
 1008c92:	611a      	str	r2, [r3, #16]
    m_trx_state         = TRX_STATE_TXFRAME;
 1008c94:	2206      	movs	r2, #6
 1008c96:	4b36      	ldr	r3, [pc, #216]	; (1008d70 <nrf_802154_trx_transmit_frame+0xe8>)
{
 1008c98:	460c      	mov	r4, r1
    m_trx_state         = TRX_STATE_TXFRAME;
 1008c9a:	701a      	strb	r2, [r3, #0]
    m_transmit_with_cca = cca;
 1008c9c:	4b35      	ldr	r3, [pc, #212]	; (1008d74 <nrf_802154_trx_transmit_frame+0xec>)
 1008c9e:	7019      	strb	r1, [r3, #0]
    nrf_radio_txpower_set(NRF_RADIO, nrf_802154_pib_tx_power_get());
 1008ca0:	f7ff fb2e 	bl	1008300 <nrf_802154_pib_tx_power_get>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
 1008ca4:	4b34      	ldr	r3, [pc, #208]	; (1008d78 <nrf_802154_trx_transmit_frame+0xf0>)
 1008ca6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PACKETPTR = (uint32_t)p_packet;
 1008caa:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    if (cca)
 1008cae:	2c00      	cmp	r4, #0
 1008cb0:	d04c      	beq.n	1008d4c <nrf_802154_trx_transmit_frame+0xc4>
    p_reg->SHORTS = shorts_mask;
 1008cb2:	4a32      	ldr	r2, [pc, #200]	; (1008d7c <nrf_802154_trx_transmit_frame+0xf4>)
 1008cb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008cb8:	2200      	movs	r2, #0
 1008cba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 1008cbe:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
    if (cca)
 1008cc2:	2c00      	cmp	r4, #0
 1008cc4:	d045      	beq.n	1008d52 <nrf_802154_trx_transmit_frame+0xca>
 1008cc6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1008cca:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCAIDLE) != 0U)
 1008cce:	07a9      	lsls	r1, r5, #30
 1008cd0:	bf45      	ittet	mi
 1008cd2:	f8c3 2144 	strmi.w	r2, [r3, #324]	; 0x144
 1008cd6:	f8d3 3144 	ldrmi.w	r3, [r3, #324]	; 0x144
        ints_to_enable |= NRF_RADIO_INT_CCABUSY_MASK;
 1008cda:	4b29      	ldrpl	r3, [pc, #164]	; (1008d80 <nrf_802154_trx_transmit_frame+0xf8>)
            ints_to_enable |= NRF_RADIO_INT_CCAIDLE_MASK;
 1008cdc:	4b29      	ldrmi	r3, [pc, #164]	; (1008d84 <nrf_802154_trx_transmit_frame+0xfc>)
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCASTARTED) != 0U)
 1008cde:	076a      	lsls	r2, r5, #29
 1008ce0:	d507      	bpl.n	1008cf2 <nrf_802154_trx_transmit_frame+0x6a>
 1008ce2:	2100      	movs	r1, #0
 1008ce4:	4a24      	ldr	r2, [pc, #144]	; (1008d78 <nrf_802154_trx_transmit_frame+0xf0>)
            ints_to_enable |= NRF_RADIO_INT_READY_MASK;
 1008ce6:	f043 0301 	orr.w	r3, r3, #1
 1008cea:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 1008cee:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 1008cf2:	2600      	movs	r6, #0
 1008cf4:	4a20      	ldr	r2, [pc, #128]	; (1008d78 <nrf_802154_trx_transmit_frame+0xf0>)
    ints_to_enable    |= NRF_RADIO_INT_ADDRESS_MASK;
 1008cf6:	f043 0302 	orr.w	r3, r3, #2
 1008cfa:	f8c2 6104 	str.w	r6, [r2, #260]	; 0x104
 1008cfe:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    m_flags.tx_started = false;
 1008d02:	4921      	ldr	r1, [pc, #132]	; (1008d88 <nrf_802154_trx_transmit_frame+0x100>)
 1008d04:	708e      	strb	r6, [r1, #2]
    p_reg->INTENSET = mask;
 1008d06:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (cca)
 1008d0a:	b344      	cbz	r4, 1008d5e <nrf_802154_trx_transmit_frame+0xd6>
        if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, &m_ccaidle) == 0)
 1008d0c:	491f      	ldr	r1, [pc, #124]	; (1008d8c <nrf_802154_trx_transmit_frame+0x104>)
 1008d0e:	4820      	ldr	r0, [pc, #128]	; (1008d90 <nrf_802154_trx_transmit_frame+0x108>)
 1008d10:	f7fb fc74 	bl	10045fc <mpsl_fem_lna_configuration_set>
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
 1008d14:	4631      	mov	r1, r6
        if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, &m_ccaidle) == 0)
 1008d16:	4605      	mov	r5, r0
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
 1008d18:	481c      	ldr	r0, [pc, #112]	; (1008d8c <nrf_802154_trx_transmit_frame+0x104>)
 1008d1a:	f7fb fc69 	bl	10045f0 <mpsl_fem_pa_configuration_set>
 1008d1e:	b9d8      	cbnz	r0, 1008d58 <nrf_802154_trx_transmit_frame+0xd0>
    p_reg->SHORTS |= mask;
 1008d20:	4a12      	ldr	r2, [pc, #72]	; (1008d6c <nrf_802154_trx_transmit_frame+0xe4>)
 1008d22:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 1008d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 1008d2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        nrf_802154_trx_ppi_for_fem_set();
 1008d2e:	f000 fc79 	bl	1009624 <nrf_802154_trx_ppi_for_fem_set>
    nrf_802154_trx_antenna_update();
 1008d32:	f7ff fe25 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
 1008d36:	2100      	movs	r1, #0
 1008d38:	2c00      	cmp	r4, #0
 1008d3a:	bf14      	ite	ne
 1008d3c:	2004      	movne	r0, #4
 1008d3e:	4608      	moveq	r0, r1
 1008d40:	f000 fbe4 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 1008d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    trigger_disable_to_start_rampup();
 1008d48:	f7ff bc10 	b.w	100856c <trigger_disable_to_start_rampup>
    p_reg->SHORTS = shorts_mask;
 1008d4c:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 1008d50:	e7b0      	b.n	1008cb4 <nrf_802154_trx_transmit_frame+0x2c>
    ints_to_enable |= NRF_RADIO_INT_PHYEND_MASK;
 1008d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 1008d56:	e7cc      	b.n	1008cf2 <nrf_802154_trx_transmit_frame+0x6a>
    if (success)
 1008d58:	2d00      	cmp	r5, #0
 1008d5a:	d1ea      	bne.n	1008d32 <nrf_802154_trx_transmit_frame+0xaa>
 1008d5c:	e7e0      	b.n	1008d20 <nrf_802154_trx_transmit_frame+0x98>
        success = (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0);
 1008d5e:	4621      	mov	r1, r4
 1008d60:	480c      	ldr	r0, [pc, #48]	; (1008d94 <nrf_802154_trx_transmit_frame+0x10c>)
 1008d62:	f7fb fc45 	bl	10045f0 <mpsl_fem_pa_configuration_set>
    if (success)
 1008d66:	2800      	cmp	r0, #0
 1008d68:	d1e3      	bne.n	1008d32 <nrf_802154_trx_transmit_frame+0xaa>
 1008d6a:	e7d9      	b.n	1008d20 <nrf_802154_trx_transmit_frame+0x98>
 1008d6c:	41018000 	.word	0x41018000
 1008d70:	210046bd 	.word	0x210046bd
 1008d74:	210046bc 	.word	0x210046bc
 1008d78:	41008000 	.word	0x41008000
 1008d7c:	00143800 	.word	0x00143800
 1008d80:	08040000 	.word	0x08040000
 1008d84:	08060000 	.word	0x08060000
 1008d88:	210046b7 	.word	0x210046b7
 1008d8c:	010104e0 	.word	0x010104e0
 1008d90:	010104b8 	.word	0x010104b8
 1008d94:	010104cc 	.word	0x010104cc

01008d98 <nrf_802154_trx_transmit_ack>:
    m_trx_state = TRX_STATE_TXACK;
 1008d98:	2207      	movs	r2, #7
 1008d9a:	4b36      	ldr	r3, [pc, #216]	; (1008e74 <nrf_802154_trx_transmit_ack+0xdc>)
    if (delay_us <= TXRU_TIME + EVENT_LAT)
 1008d9c:	293f      	cmp	r1, #63	; 0x3f
{
 1008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1008da2:	4d35      	ldr	r5, [pc, #212]	; (1008e78 <nrf_802154_trx_transmit_ack+0xe0>)
    m_trx_state = TRX_STATE_TXACK;
 1008da4:	701a      	strb	r2, [r3, #0]
    if (delay_us <= TXRU_TIME + EVENT_LAT)
 1008da6:	d804      	bhi.n	1008db2 <nrf_802154_trx_transmit_ack+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008da8:	2301      	movs	r3, #1
 1008daa:	612b      	str	r3, [r5, #16]
        return result;
 1008dac:	2000      	movs	r0, #0
}
 1008dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t timer_cc_ramp_up_start = m_timer_value_on_radio_end_event + delay_us - TXRU_TIME -
 1008db2:	4b32      	ldr	r3, [pc, #200]	; (1008e7c <nrf_802154_trx_transmit_ack+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008db4:	f04f 0800 	mov.w	r8, #0
 1008db8:	681e      	ldr	r6, [r3, #0]
    p_reg->SHORTS = shorts_mask;
 1008dba:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
    p_reg->PACKETPTR = (uint32_t)p_packet;
 1008dbe:	4c30      	ldr	r4, [pc, #192]	; (1008e80 <nrf_802154_trx_transmit_ack+0xe8>)
 1008dc0:	440e      	add	r6, r1
 1008dc2:	f1a6 073f 	sub.w	r7, r6, #63	; 0x3f
    p_reg->CC[cc_channel] = cc_value;
 1008dc6:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
 1008dca:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 1008dce:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008dd2:	f8c4 8154 	str.w	r8, [r4, #340]	; 0x154
 1008dd6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
 1008dda:	4b2a      	ldr	r3, [pc, #168]	; (1008e84 <nrf_802154_trx_transmit_ack+0xec>)
 1008ddc:	2214      	movs	r2, #20
 1008dde:	4618      	mov	r0, r3
 1008de0:	4641      	mov	r1, r8
 1008de2:	f005 fbe3 	bl	100e5ac <memset>
 1008de6:	2205      	movs	r2, #5
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
 1008de8:	4641      	mov	r1, r8
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
 1008dea:	3e17      	subs	r6, #23
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
 1008dec:	6045      	str	r5, [r0, #4]
 1008dee:	7402      	strb	r2, [r0, #16]
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
 1008df0:	60c6      	str	r6, [r0, #12]
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
 1008df2:	f7fb fbfd 	bl	10045f0 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS |= mask;
 1008df6:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 1008dfa:	bb98      	cbnz	r0, 1008e64 <nrf_802154_trx_transmit_ack+0xcc>
 1008dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 1008e00:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    nrf_802154_trx_antenna_update();
 1008e04:	f7ff fdbc 	bl	1008980 <nrf_802154_trx_antenna_update>
 1008e08:	2300      	movs	r3, #0
 1008e0a:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 1008e0e:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 1008e12:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 1008e16:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    nrf_802154_trx_ppi_for_ack_tx_set();
 1008e1a:	f000 fbdd 	bl	10095d8 <nrf_802154_trx_ppi_for_ack_tx_set>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008e1e:	2201      	movs	r2, #1
 1008e20:	4b15      	ldr	r3, [pc, #84]	; (1008e78 <nrf_802154_trx_transmit_ack+0xe0>)
 1008e22:	4d17      	ldr	r5, [pc, #92]	; (1008e80 <nrf_802154_trx_transmit_ack+0xe8>)
 1008e24:	64da      	str	r2, [r3, #76]	; 0x4c
    return (uint32_t)p_reg->CC[cc_channel];
 1008e26:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
 1008e2a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
    if ((timer_cc_now < timer_cc_ramp_up_start) &&
 1008e2e:	4297      	cmp	r7, r2
 1008e30:	d903      	bls.n	1008e3a <nrf_802154_trx_transmit_ack+0xa2>
 1008e32:	429f      	cmp	r7, r3
 1008e34:	d919      	bls.n	1008e6a <nrf_802154_trx_transmit_ack+0xd2>
        ((timer_cc_fem_start >= timer_cc_ramp_up_start) || (timer_cc_now > timer_cc_fem_start)))
 1008e36:	4293      	cmp	r3, r2
 1008e38:	d317      	bcc.n	1008e6a <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 1008e3a:	f005 fe66 	bl	100eb0a <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    return (nrf_radio_state_t) p_reg->STATE;
 1008e3e:	f8d5 3550 	ldr.w	r3, [r5, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_TXRU)
 1008e42:	b2db      	uxtb	r3, r3
 1008e44:	2b09      	cmp	r3, #9
 1008e46:	d010      	beq.n	1008e6a <nrf_802154_trx_transmit_ack+0xd2>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1008e48:	f8d5 4154 	ldr.w	r4, [r5, #340]	; 0x154
        else if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_TXREADY))
 1008e4c:	b96c      	cbnz	r4, 1008e6a <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ack_tx_clear();
 1008e4e:	f000 fbd7 	bl	1009600 <nrf_802154_trx_ppi_for_ack_tx_clear>
        mpsl_fem_pa_configuration_clear();
 1008e52:	f7fb fbd9 	bl	1004608 <mpsl_fem_pa_configuration_clear>
        mpsl_fem_deactivate_now(MPSL_FEM_PA);
 1008e56:	2001      	movs	r0, #1
 1008e58:	f7fb fbe2 	bl	1004620 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008e5c:	2201      	movs	r2, #1
 1008e5e:	4b06      	ldr	r3, [pc, #24]	; (1008e78 <nrf_802154_trx_transmit_ack+0xe0>)
 1008e60:	611a      	str	r2, [r3, #16]
 1008e62:	e7a3      	b.n	1008dac <nrf_802154_trx_transmit_ack+0x14>
    p_reg->SHORTS |= mask;
 1008e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 1008e68:	e7ca      	b.n	1008e00 <nrf_802154_trx_transmit_ack+0x68>
    p_reg->INTENSET = mask;
 1008e6a:	4b07      	ldr	r3, [pc, #28]	; (1008e88 <nrf_802154_trx_transmit_ack+0xf0>)
}
 1008e6c:	2001      	movs	r0, #1
    p_reg->INTENSET = mask;
 1008e6e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
 1008e72:	e79c      	b.n	1008dae <nrf_802154_trx_transmit_ack+0x16>
 1008e74:	210046bd 	.word	0x210046bd
 1008e78:	41018000 	.word	0x41018000
 1008e7c:	210034b4 	.word	0x210034b4
 1008e80:	41008000 	.word	0x41008000
 1008e84:	210034a0 	.word	0x210034a0
 1008e88:	08000002 	.word	0x08000002

01008e8c <nrf_802154_trx_abort>:
{
 1008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (m_trx_state)
 1008e8e:	4c53      	ldr	r4, [pc, #332]	; (1008fdc <nrf_802154_trx_abort+0x150>)
 1008e90:	7823      	ldrb	r3, [r4, #0]
 1008e92:	3b02      	subs	r3, #2
 1008e94:	2b09      	cmp	r3, #9
 1008e96:	d80c      	bhi.n	1008eb2 <nrf_802154_trx_abort+0x26>
 1008e98:	e8df f003 	tbb	[pc, r3]
 1008e9c:	2e2a0c05 	.word	0x2e2a0c05
 1008ea0:	78755f4a 	.word	0x78755f4a
 1008ea4:	9d89      	.short	0x9d89
    p_reg->INTENCLR = mask;
 1008ea6:	2210      	movs	r2, #16
 1008ea8:	4b4d      	ldr	r3, [pc, #308]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008eaa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    m_trx_state = TRX_STATE_FINISHED;
 1008eae:	230c      	movs	r3, #12
 1008eb0:	7023      	strb	r3, [r4, #0]
}
 1008eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rxframe_finish_disable_ppis();
 1008eb4:	f005 fe12 	bl	100eadc <rxframe_finish_disable_ppis>
 1008eb8:	f243 4502 	movw	r5, #13314	; 0x3402
    mpsl_fem_lna_configuration_clear();
 1008ebc:	f7fb fbaa 	bl	1004614 <mpsl_fem_lna_configuration_clear>
    m_flags.psdu_being_received = false;
 1008ec0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
 1008ec2:	2608      	movs	r6, #8
    p_reg->SHORTS &= ~(mask);
 1008ec4:	4b47      	ldr	r3, [pc, #284]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
 1008ec6:	4848      	ldr	r0, [pc, #288]	; (1008fe8 <nrf_802154_trx_abort+0x15c>)
 1008ec8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1008ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 1008ed0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 1008ed4:	4a42      	ldr	r2, [pc, #264]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008ed6:	7001      	strb	r1, [r0, #0]
 1008ed8:	f8c2 5308 	str.w	r5, [r2, #776]	; 0x308
 1008edc:	4d43      	ldr	r5, [pc, #268]	; (1008fec <nrf_802154_trx_abort+0x160>)
 1008ede:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 1008ee2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
 1008ee6:	7041      	strb	r1, [r0, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008ee8:	2101      	movs	r1, #1
 1008eea:	6111      	str	r1, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008eec:	6119      	str	r1, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 1008eee:	e7de      	b.n	1008eae <nrf_802154_trx_abort+0x22>
 1008ef0:	2201      	movs	r2, #1
 1008ef2:	4b3c      	ldr	r3, [pc, #240]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
 1008ef4:	611a      	str	r2, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 1008ef6:	e7da      	b.n	1008eae <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 1008ef8:	2100      	movs	r1, #0
 1008efa:	2004      	movs	r0, #4
 1008efc:	f000 fb34 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->INTENCLR = mask;
 1008f00:	f243 0302 	movw	r3, #12290	; 0x3002
 1008f04:	4d36      	ldr	r5, [pc, #216]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008f06:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
 1008f0a:	f7fb fb83 	bl	1004614 <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 1008f0e:	f000 fb93 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
 1008f12:	4b34      	ldr	r3, [pc, #208]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
    m_flags.missing_receive_buffer = false;
 1008f14:	4934      	ldr	r1, [pc, #208]	; (1008fe8 <nrf_802154_trx_abort+0x15c>)
 1008f16:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1008f1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 1008f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->SHORTS = shorts_mask;
 1008f22:	2200      	movs	r2, #0
 1008f24:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
 1008f28:	704a      	strb	r2, [r1, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008f2a:	2201      	movs	r2, #1
 1008f2c:	612a      	str	r2, [r5, #16]
 1008f2e:	e7e1      	b.n	1008ef4 <nrf_802154_trx_abort+0x68>
    p_reg->SHORTS = shorts_mask;
 1008f30:	2600      	movs	r6, #0

static void transmit_frame_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    txframe_finish_disable_ppis(m_transmit_with_cca);
 1008f32:	4f2f      	ldr	r7, [pc, #188]	; (1008ff0 <nrf_802154_trx_abort+0x164>)
 1008f34:	4d2a      	ldr	r5, [pc, #168]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008f36:	7838      	ldrb	r0, [r7, #0]
 1008f38:	f005 fdc9 	bl	100eace <txframe_finish_disable_ppis>
 1008f3c:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_tx_reset(m_transmit_with_cca);
 1008f40:	7838      	ldrb	r0, [r7, #0]
 1008f42:	f7ff fb1d 	bl	1008580 <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
 1008f46:	4b2b      	ldr	r3, [pc, #172]	; (1008ff4 <nrf_802154_trx_abort+0x168>)
 1008f48:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

    txframe_finish_disable_ints();
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
 1008f4c:	4b26      	ldr	r3, [pc, #152]	; (1008fe8 <nrf_802154_trx_abort+0x15c>)
 1008f4e:	709e      	strb	r6, [r3, #2]
#endif
    m_flags.missing_receive_buffer = false;
 1008f50:	705e      	strb	r6, [r3, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008f52:	2301      	movs	r3, #1
 1008f54:	632b      	str	r3, [r5, #48]	; 0x30
 1008f56:	612b      	str	r3, [r5, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
 1008f58:	e7a9      	b.n	1008eae <nrf_802154_trx_abort+0x22>

static void transmit_ack_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ack_tx_clear();
 1008f5a:	f000 fb51 	bl	1009600 <nrf_802154_trx_ppi_for_ack_tx_clear>
    p_reg->SHORTS = shorts_mask;
 1008f5e:	2300      	movs	r3, #0
 1008f60:	4d1f      	ldr	r5, [pc, #124]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008f62:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    mpsl_fem_pa_configuration_clear();
 1008f66:	f7fb fb4f 	bl	1004608 <mpsl_fem_pa_configuration_clear>
 1008f6a:	4b1e      	ldr	r3, [pc, #120]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
 1008f6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1008f70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 1008f74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008f78:	2201      	movs	r2, #1
 1008f7a:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
 1008f7c:	4b1e      	ldr	r3, [pc, #120]	; (1008ff8 <nrf_802154_trx_abort+0x16c>)
 1008f7e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008f82:	612a      	str	r2, [r5, #16]

    nrf_radio_int_disable(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK | NRF_RADIO_INT_ADDRESS_MASK);

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
 1008f84:	e793      	b.n	1008eae <nrf_802154_trx_abort+0x22>
    standalone_cca_finish();
 1008f86:	f7ff fac5 	bl	1008514 <standalone_cca_finish>
    m_trx_state = TRX_STATE_FINISHED;
 1008f8a:	e790      	b.n	1008eae <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 1008f8c:	2100      	movs	r1, #0
 1008f8e:	2501      	movs	r5, #1
 1008f90:	4608      	mov	r0, r1
 1008f92:	f000 fae9 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    mpsl_fem_pa_configuration_clear();
 1008f96:	f7fb fb37 	bl	1004608 <mpsl_fem_pa_configuration_clear>
 1008f9a:	4b12      	ldr	r3, [pc, #72]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
 1008f9c:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
 1008f9e:	f000 fb4b 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
 1008fa2:	4628      	mov	r0, r5
 1008fa4:	f7fb fb3c 	bl	1004620 <mpsl_fem_deactivate_now>
 1008fa8:	4b0d      	ldr	r3, [pc, #52]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008faa:	611d      	str	r5, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 1008fac:	e77f      	b.n	1008eae <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 1008fae:	2100      	movs	r1, #0
 1008fb0:	4608      	mov	r0, r1
 1008fb2:	f000 fad9 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->SHORTS = shorts_mask;
 1008fb6:	2300      	movs	r3, #0
 1008fb8:	2501      	movs	r5, #1
 1008fba:	4e09      	ldr	r6, [pc, #36]	; (1008fe0 <nrf_802154_trx_abort+0x154>)
 1008fbc:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
 1008fc0:	f7fb fb22 	bl	1004608 <mpsl_fem_pa_configuration_clear>
 1008fc4:	4b07      	ldr	r3, [pc, #28]	; (1008fe4 <nrf_802154_trx_abort+0x158>)
 1008fc6:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
 1008fc8:	f000 fb36 	bl	1009638 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
 1008fcc:	4628      	mov	r0, r5
 1008fce:	f7fb fb27 	bl	1004620 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008fd2:	6135      	str	r5, [r6, #16]
    m_trx_state = TRX_STATE_FINISHED;
 1008fd4:	e76b      	b.n	1008eae <nrf_802154_trx_abort+0x22>
    energy_detection_finish();
 1008fd6:	f7ff fab3 	bl	1008540 <energy_detection_finish>
 1008fda:	e768      	b.n	1008eae <nrf_802154_trx_abort+0x22>
 1008fdc:	210046bd 	.word	0x210046bd
 1008fe0:	41008000 	.word	0x41008000
 1008fe4:	41018000 	.word	0x41018000
 1008fe8:	210046b7 	.word	0x210046b7
 1008fec:	41014000 	.word	0x41014000
 1008ff0:	210046bc 	.word	0x210046bc
 1008ff4:	08060003 	.word	0x08060003
 1008ff8:	08000002 	.word	0x08000002

01008ffc <nrf_802154_trx_go_idle>:
    switch (m_trx_state)
 1008ffc:	4b0d      	ldr	r3, [pc, #52]	; (1009034 <nrf_802154_trx_go_idle+0x38>)
 1008ffe:	781a      	ldrb	r2, [r3, #0]
 1009000:	2a04      	cmp	r2, #4
 1009002:	b2d0      	uxtb	r0, r2
 1009004:	d005      	beq.n	1009012 <nrf_802154_trx_go_idle+0x16>
 1009006:	280c      	cmp	r0, #12
 1009008:	d006      	beq.n	1009018 <nrf_802154_trx_go_idle+0x1c>
 100900a:	1e83      	subs	r3, r0, #2
 100900c:	4258      	negs	r0, r3
 100900e:	4158      	adcs	r0, r3
 1009010:	4770      	bx	lr
 1009012:	2101      	movs	r1, #1
 1009014:	4a08      	ldr	r2, [pc, #32]	; (1009038 <nrf_802154_trx_go_idle+0x3c>)
 1009016:	6111      	str	r1, [r2, #16]
    m_trx_state = TRX_STATE_GOING_IDLE;
 1009018:	2202      	movs	r2, #2
 100901a:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100901c:	2200      	movs	r2, #0
 100901e:	4b07      	ldr	r3, [pc, #28]	; (100903c <nrf_802154_trx_go_idle+0x40>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1009020:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009022:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 1009026:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
 100902a:	2210      	movs	r2, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100902c:	6118      	str	r0, [r3, #16]
    p_reg->INTENSET = mask;
 100902e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
 1009032:	4770      	bx	lr
 1009034:	210046bd 	.word	0x210046bd
 1009038:	41018000 	.word	0x41018000
 100903c:	41008000 	.word	0x41008000

01009040 <nrf_802154_trx_standalone_cca>:
    m_trx_state = TRX_STATE_STANDALONE_CCA;
 1009040:	2208      	movs	r2, #8
 1009042:	4b10      	ldr	r3, [pc, #64]	; (1009084 <nrf_802154_trx_standalone_cca+0x44>)
{
 1009044:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_STANDALONE_CCA;
 1009046:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009048:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 100904a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 100904e:	4b0e      	ldr	r3, [pc, #56]	; (1009088 <nrf_802154_trx_standalone_cca+0x48>)
 1009050:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009054:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 1009058:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 100905c:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
 1009060:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    p_reg->INTENSET = mask;
 1009064:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 1009068:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 100906c:	f7ff fb2e 	bl	10086cc <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 1009070:	f7ff fc86 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 1009074:	4621      	mov	r1, r4
 1009076:	2004      	movs	r0, #4
 1009078:	f000 fa48 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100907c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 1009080:	f7ff ba74 	b.w	100856c <trigger_disable_to_start_rampup>
 1009084:	210046bd 	.word	0x210046bd
 1009088:	41008000 	.word	0x41008000

0100908c <nrf_802154_trx_continuous_carrier>:
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
 100908c:	2209      	movs	r2, #9
{
 100908e:	b508      	push	{r3, lr}
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
 1009090:	4b09      	ldr	r3, [pc, #36]	; (10090b8 <nrf_802154_trx_continuous_carrier+0x2c>)
 1009092:	701a      	strb	r2, [r3, #0]
    nrf_radio_txpower_set(NRF_RADIO, nrf_802154_pib_tx_power_get());
 1009094:	f7ff f934 	bl	1008300 <nrf_802154_pib_tx_power_get>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
 1009098:	4b08      	ldr	r3, [pc, #32]	; (10090bc <nrf_802154_trx_continuous_carrier+0x30>)
 100909a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    fem_for_pa_set();
 100909e:	f7ff facf 	bl	1008640 <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
 10090a2:	f7ff fc6d 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
 10090a6:	2100      	movs	r1, #0
 10090a8:	4608      	mov	r0, r1
 10090aa:	f000 fa2f 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 10090ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    trigger_disable_to_start_rampup();
 10090b2:	f7ff ba5b 	b.w	100856c <trigger_disable_to_start_rampup>
 10090b6:	bf00      	nop
 10090b8:	210046bd 	.word	0x210046bd
 10090bc:	41008000 	.word	0x41008000

010090c0 <nrf_802154_trx_continuous_carrier_restart>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10090c0:	2201      	movs	r2, #1
 10090c2:	4b01      	ldr	r3, [pc, #4]	; (10090c8 <nrf_802154_trx_continuous_carrier_restart+0x8>)
 10090c4:	611a      	str	r2, [r3, #16]
}
 10090c6:	4770      	bx	lr
 10090c8:	41008000 	.word	0x41008000

010090cc <nrf_802154_trx_modulated_carrier>:
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
 10090cc:	220a      	movs	r2, #10
 10090ce:	4b0d      	ldr	r3, [pc, #52]	; (1009104 <nrf_802154_trx_modulated_carrier+0x38>)
{
 10090d0:	b510      	push	{r4, lr}
 10090d2:	4604      	mov	r4, r0
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
 10090d4:	701a      	strb	r2, [r3, #0]
    nrf_radio_txpower_set(NRF_RADIO, nrf_802154_pib_tx_power_get());
 10090d6:	f7ff f913 	bl	1008300 <nrf_802154_pib_tx_power_get>
    p_reg->SHORTS = shorts_mask;
 10090da:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
 10090de:	4b0a      	ldr	r3, [pc, #40]	; (1009108 <nrf_802154_trx_modulated_carrier+0x3c>)
 10090e0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PACKETPTR = (uint32_t)p_packet;
 10090e4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 10090e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    fem_for_pa_set();
 10090ec:	f7ff faa8 	bl	1008640 <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
 10090f0:	f7ff fc46 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
 10090f4:	2100      	movs	r1, #0
 10090f6:	4608      	mov	r0, r1
 10090f8:	f000 fa08 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 10090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 1009100:	f7ff ba34 	b.w	100856c <trigger_disable_to_start_rampup>
 1009104:	210046bd 	.word	0x210046bd
 1009108:	41008000 	.word	0x41008000

0100910c <nrf_802154_trx_modulated_carrier_restart>:
 100910c:	2201      	movs	r2, #1
 100910e:	4b01      	ldr	r3, [pc, #4]	; (1009114 <nrf_802154_trx_modulated_carrier_restart+0x8>)
 1009110:	611a      	str	r2, [r3, #16]
 1009112:	4770      	bx	lr
 1009114:	41008000 	.word	0x41008000

01009118 <nrf_802154_trx_energy_detection>:
    m_trx_state = TRX_STATE_ENERGY_DETECTION;
 1009118:	220b      	movs	r2, #11
 100911a:	4b10      	ldr	r3, [pc, #64]	; (100915c <nrf_802154_trx_energy_detection+0x44>)
{
 100911c:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_ENERGY_DETECTION;
 100911e:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009120:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 1009122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    p_reg->EDCNT = (ed_loop_count & RADIO_EDCNT_EDCNT_Msk);
 1009126:	4b0e      	ldr	r3, [pc, #56]	; (1009160 <nrf_802154_trx_energy_detection+0x48>)
    ed_count--;
 1009128:	3801      	subs	r0, #1
 100912a:	f3c0 0014 	ubfx	r0, r0, #0, #21
 100912e:	f8c3 0664 	str.w	r0, [r3, #1636]	; 0x664
    p_reg->SHORTS = shorts_mask;
 1009132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009136:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
 100913a:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    p_reg->INTENSET = mask;
 100913e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 1009142:	f7ff fac3 	bl	10086cc <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 1009146:	f7ff fc1b 	bl	1008980 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 100914a:	4621      	mov	r1, r4
 100914c:	2004      	movs	r0, #4
 100914e:	f000 f9dd 	bl	100950c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 1009152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 1009156:	f7ff ba09 	b.w	100856c <trigger_disable_to_start_rampup>
 100915a:	bf00      	nop
 100915c:	210046bd 	.word	0x210046bd
 1009160:	41008000 	.word	0x41008000

01009164 <nrf_802154_radio_irq_handler>:
}

#endif

void nrf_802154_radio_irq_handler(void)
{
 1009164:	b570      	push	{r4, r5, r6, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // Prevent interrupting of this handler by requests from higher priority code.
    nrf_802154_critical_section_forcefully_enter();
 1009166:	f005 fc6a 	bl	100ea3e <nrf_802154_critical_section_forcefully_enter>
    return p_reg->INTENSET & mask;
 100916a:	4bb2      	ldr	r3, [pc, #712]	; (1009434 <nrf_802154_radio_irq_handler+0x2d0>)
 100916c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

#if defined(RADIO_INTENSET_SYNC_Msk)
    // Note: For NRF_RADIO_EVENT_SYNC we enable interrupt through EGU.
    // That's why we check here EGU's EGU_SYNC_INTMASK.
    // The RADIO does not have interrupt from SYNC event.
    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
 1009170:	0715      	lsls	r5, r2, #28
 1009172:	d50e      	bpl.n	1009192 <nrf_802154_radio_irq_handler+0x2e>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1009174:	4ab0      	ldr	r2, [pc, #704]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 1009176:	f8d2 1168 	ldr.w	r1, [r2, #360]	; 0x168
 100917a:	b151      	cbz	r1, 1009192 <nrf_802154_radio_irq_handler+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100917c:	2100      	movs	r1, #0
 100917e:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
 1009182:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 1009186:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 100918a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    nrf_802154_trx_receive_frame_prestarted();
 100918e:	f7fe fa89 	bl	10076a4 <nrf_802154_trx_receive_frame_prestarted>
    return p_reg->INTENSET & mask;
 1009192:	4ba9      	ldr	r3, [pc, #676]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 1009194:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

        irq_handler_sync();
    }
#endif

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_READY_MASK) &&
 1009198:	07d4      	lsls	r4, r2, #31
 100919a:	d50c      	bpl.n	10091b6 <nrf_802154_radio_irq_handler+0x52>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100919c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 10091a0:	b14a      	cbz	r2, 10091b6 <nrf_802154_radio_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10091a2:	2200      	movs	r2, #0
 10091a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 10091a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
 10091ac:	2201      	movs	r2, #1
 10091ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrf_802154_trx_transmit_frame_ccastarted();
 10091b2:	f005 fc09 	bl	100e9c8 <nrf_802154_trx_transmit_frame_ccastarted>
    return p_reg->INTENSET & mask;
 10091b6:	4ba0      	ldr	r3, [pc, #640]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 10091b8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_READY);

        irq_handler_ready();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_ADDRESS_MASK) &&
 10091bc:	0790      	lsls	r0, r2, #30
 10091be:	d515      	bpl.n	10091ec <nrf_802154_radio_irq_handler+0x88>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 10091c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 10091c4:	b192      	cbz	r2, 10091ec <nrf_802154_radio_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10091c6:	2200      	movs	r2, #0
 10091c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 10091cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    switch (m_trx_state)
 10091d0:	4a9a      	ldr	r2, [pc, #616]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 10091d2:	7812      	ldrb	r2, [r2, #0]
 10091d4:	3a03      	subs	r2, #3
 10091d6:	2a04      	cmp	r2, #4
 10091d8:	d808      	bhi.n	10091ec <nrf_802154_radio_irq_handler+0x88>
 10091da:	e8df f012 	tbh	[pc, r2, lsl #1]
 10091de:	0005      	.short	0x0005
 10091e0:	00d20007 	.word	0x00d20007
 10091e4:	00e100d8 	.word	0x00e100d8
            nrf_802154_trx_receive_frame_started();
 10091e8:	f7fe fa92 	bl	1007710 <nrf_802154_trx_receive_frame_started>
    return p_reg->INTENSET & mask;
 10091ec:	4c92      	ldr	r4, [pc, #584]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 10091ee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        irq_handler_address();
    }

#if !NRF_802154_DISABLE_BCC_MATCHING
    // Check MAC frame header.
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_BCMATCH_MASK) &&
 10091f2:	0559      	lsls	r1, r3, #21
 10091f4:	d519      	bpl.n	100922a <nrf_802154_radio_irq_handler+0xc6>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 10091f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 10091fa:	b1b3      	cbz	r3, 100922a <nrf_802154_radio_irq_handler+0xc6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10091fc:	2300      	movs	r3, #0
    m_flags.psdu_being_received = true;
 10091fe:	2201      	movs	r2, #1
 1009200:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 1009204:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 1009208:	4b8d      	ldr	r3, [pc, #564]	; (1009440 <nrf_802154_radio_irq_handler+0x2dc>)
 100920a:	701a      	strb	r2, [r3, #0]
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100920c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_CRCERROR))
 1009210:	b95b      	cbnz	r3, 100922a <nrf_802154_radio_irq_handler+0xc6>
    return p_reg->BCC;
 1009212:	f8d4 5560 	ldr.w	r5, [r4, #1376]	; 0x560
    current_bcc = nrf_radio_bcc_get(NRF_RADIO) / 8U;
 1009216:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    next_bcc = nrf_802154_trx_receive_frame_bcmatched(current_bcc);
 100921a:	4628      	mov	r0, r5
 100921c:	f7fe faa2 	bl	1007764 <nrf_802154_trx_receive_frame_bcmatched>
    if (next_bcc > current_bcc)
 1009220:	4285      	cmp	r5, r0
        nrf_radio_bcc_set(NRF_RADIO, next_bcc * 8);
 1009222:	bf3c      	itt	cc
 1009224:	00c0      	lslcc	r0, r0, #3
    p_reg->BCC = radio_bcc;
 1009226:	f8c4 0560 	strcc.w	r0, [r4, #1376]	; 0x560
    return p_reg->INTENSET & mask;
 100922a:	4b83      	ldr	r3, [pc, #524]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 100922c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    }

#endif // !NRF_802154_DISABLE_BCC_MATCHING

#if !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCERROR_MASK) &&
 1009230:	0492      	lsls	r2, r2, #18
 1009232:	d510      	bpl.n	1009256 <nrf_802154_radio_irq_handler+0xf2>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1009234:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 1009238:	b16a      	cbz	r2, 1009256 <nrf_802154_radio_irq_handler+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100923a:	2200      	movs	r2, #0
    switch (m_trx_state)
 100923c:	4c7f      	ldr	r4, [pc, #508]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 100923e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 1009242:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 1009246:	7823      	ldrb	r3, [r4, #0]
 1009248:	2b03      	cmp	r3, #3
 100924a:	b2da      	uxtb	r2, r3
 100924c:	f000 80ae 	beq.w	10093ac <nrf_802154_radio_irq_handler+0x248>
 1009250:	2a05      	cmp	r2, #5
 1009252:	f000 80b5 	beq.w	10093c0 <nrf_802154_radio_irq_handler+0x25c>
    return p_reg->INTENSET & mask;
 1009256:	4b78      	ldr	r3, [pc, #480]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 1009258:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

        irq_handler_crcerror();
    }
#endif // !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCOK_MASK) &&
 100925c:	04d6      	lsls	r6, r2, #19
 100925e:	d510      	bpl.n	1009282 <nrf_802154_radio_irq_handler+0x11e>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1009260:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 1009264:	b16a      	cbz	r2, 1009282 <nrf_802154_radio_irq_handler+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009266:	2200      	movs	r2, #0
    switch (m_trx_state)
 1009268:	4c74      	ldr	r4, [pc, #464]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 100926a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 100926e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 1009272:	7823      	ldrb	r3, [r4, #0]
 1009274:	2b03      	cmp	r3, #3
 1009276:	b2da      	uxtb	r2, r3
 1009278:	f000 80a9 	beq.w	10093ce <nrf_802154_radio_irq_handler+0x26a>
 100927c:	2a05      	cmp	r2, #5
 100927e:	f000 80b0 	beq.w	10093e2 <nrf_802154_radio_irq_handler+0x27e>
    return p_reg->INTENSET & mask;
 1009282:	4c6d      	ldr	r4, [pc, #436]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 1009284:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CRCOK);

        irq_handler_crcok();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK) &&
 1009288:	011d      	lsls	r5, r3, #4
 100928a:	d510      	bpl.n	10092ae <nrf_802154_radio_irq_handler+0x14a>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100928c:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 1009290:	b16b      	cbz	r3, 10092ae <nrf_802154_radio_irq_handler+0x14a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009292:	2600      	movs	r6, #0
    switch (m_trx_state)
 1009294:	4d69      	ldr	r5, [pc, #420]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 1009296:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
 100929a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 100929e:	782b      	ldrb	r3, [r5, #0]
 10092a0:	2b06      	cmp	r3, #6
 10092a2:	b2da      	uxtb	r2, r3
 10092a4:	f000 80a4 	beq.w	10093f0 <nrf_802154_radio_irq_handler+0x28c>
 10092a8:	2a07      	cmp	r2, #7
 10092aa:	f000 80a8 	beq.w	10093fe <nrf_802154_radio_irq_handler+0x29a>
    return p_reg->INTENSET & mask;
 10092ae:	4b62      	ldr	r3, [pc, #392]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 10092b0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_PHYEND);

        irq_handler_phyend();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
 10092b4:	06d4      	lsls	r4, r2, #27
 10092b6:	d517      	bpl.n	10092e8 <nrf_802154_radio_irq_handler+0x184>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 10092b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 10092bc:	b1a2      	cbz	r2, 10092e8 <nrf_802154_radio_irq_handler+0x184>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10092be:	2200      	movs	r2, #0
    switch (m_trx_state)
 10092c0:	4c5e      	ldr	r4, [pc, #376]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 10092c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 10092c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 10092ca:	7822      	ldrb	r2, [r4, #0]
 10092cc:	2a02      	cmp	r2, #2
 10092ce:	d10b      	bne.n	10092e8 <nrf_802154_radio_irq_handler+0x184>
    p_reg->INTENCLR = mask;
 10092d0:	2210      	movs	r2, #16
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 10092d2:	2003      	movs	r0, #3
 10092d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10092d8:	f7fb f9a2 	bl	1004620 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
 10092dc:	f7fb f982 	bl	10045e4 <mpsl_fem_disable>
    m_trx_state = TRX_STATE_IDLE;
 10092e0:	2301      	movs	r3, #1
 10092e2:	7023      	strb	r3, [r4, #0]
    nrf_802154_trx_go_idle_finished();
 10092e4:	f005 fb4d 	bl	100e982 <nrf_802154_trx_go_idle_finished>
    return p_reg->INTENSET & mask;
 10092e8:	4b53      	ldr	r3, [pc, #332]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 10092ea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);

        irq_handler_disabled();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCAIDLE_MASK) &&
 10092ee:	0390      	lsls	r0, r2, #14
 10092f0:	d516      	bpl.n	1009320 <nrf_802154_radio_irq_handler+0x1bc>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 10092f2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 10092f6:	b19a      	cbz	r2, 1009320 <nrf_802154_radio_irq_handler+0x1bc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10092f8:	2200      	movs	r2, #0
    switch (m_trx_state)
 10092fa:	4c50      	ldr	r4, [pc, #320]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 10092fc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1009300:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 1009304:	7823      	ldrb	r3, [r4, #0]
 1009306:	2b06      	cmp	r3, #6
 1009308:	b2da      	uxtb	r2, r3
 100930a:	f000 808f 	beq.w	100942c <nrf_802154_radio_irq_handler+0x2c8>
 100930e:	2a08      	cmp	r2, #8
 1009310:	d106      	bne.n	1009320 <nrf_802154_radio_irq_handler+0x1bc>
            standalone_cca_finish();
 1009312:	f7ff f8ff 	bl	1008514 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
 1009316:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(true);
 1009318:	2001      	movs	r0, #1
            m_trx_state = TRX_STATE_FINISHED;
 100931a:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(true);
 100931c:	f005 fb44 	bl	100e9a8 <nrf_802154_trx_standalone_cca_finished>
    return p_reg->INTENSET & mask;
 1009320:	4b45      	ldr	r3, [pc, #276]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 1009322:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCAIDLE);

        irq_handler_ccaidle();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCABUSY_MASK) &&
 1009326:	0351      	lsls	r1, r2, #13
 1009328:	d510      	bpl.n	100934c <nrf_802154_radio_irq_handler+0x1e8>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100932a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 100932e:	b16a      	cbz	r2, 100934c <nrf_802154_radio_irq_handler+0x1e8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1009330:	2500      	movs	r5, #0
    switch (m_trx_state)
 1009332:	4c42      	ldr	r4, [pc, #264]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
 1009334:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
 1009338:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 100933c:	7823      	ldrb	r3, [r4, #0]
 100933e:	2b06      	cmp	r3, #6
 1009340:	b2da      	uxtb	r2, r3
 1009342:	f000 8083 	beq.w	100944c <nrf_802154_radio_irq_handler+0x2e8>
 1009346:	2a08      	cmp	r2, #8
 1009348:	f000 8087 	beq.w	100945a <nrf_802154_radio_irq_handler+0x2f6>
    return p_reg->INTENSET & mask;
 100934c:	4b3a      	ldr	r3, [pc, #232]	; (1009438 <nrf_802154_radio_irq_handler+0x2d4>)
 100934e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCABUSY);

        irq_handler_ccabusy();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_EDEND_MASK) &&
 1009352:	0412      	lsls	r2, r2, #16
 1009354:	d511      	bpl.n	100937a <nrf_802154_radio_irq_handler+0x216>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 1009356:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 100935a:	b172      	cbz	r2, 100937a <nrf_802154_radio_irq_handler+0x216>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100935c:	2200      	movs	r2, #0
 100935e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 1009362:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    return (uint8_t) p_reg->EDSAMPLE;
 1009366:	f8d3 4668 	ldr.w	r4, [r3, #1640]	; 0x668
    energy_detection_finish();
 100936a:	f7ff f8e9 	bl	1008540 <energy_detection_finish>
    m_trx_state = TRX_STATE_FINISHED;
 100936e:	220c      	movs	r2, #12
 1009370:	4b32      	ldr	r3, [pc, #200]	; (100943c <nrf_802154_radio_irq_handler+0x2d8>)
    nrf_802154_trx_energy_detection_finished(ed_sample);
 1009372:	b2e0      	uxtb	r0, r4
    m_trx_state = TRX_STATE_FINISHED;
 1009374:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_energy_detection_finished(ed_sample);
 1009376:	f7fe fc7b 	bl	1007c70 <nrf_802154_trx_energy_detection_finished>
    }

    nrf_802154_critical_section_exit();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 100937a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    nrf_802154_critical_section_exit();
 100937e:	f7fe bf29 	b.w	10081d4 <nrf_802154_critical_section_exit>
            m_flags.rssi_started = true;
 1009382:	2201      	movs	r2, #1
 1009384:	4b2e      	ldr	r3, [pc, #184]	; (1009440 <nrf_802154_radio_irq_handler+0x2dc>)
 1009386:	70da      	strb	r2, [r3, #3]
            nrf_802154_trx_receive_ack_started();
 1009388:	f005 faf9 	bl	100e97e <nrf_802154_trx_receive_ack_started>
            break;
 100938c:	e72e      	b.n	10091ec <nrf_802154_radio_irq_handler+0x88>
    p_reg->INTENCLR = mask;
 100938e:	2202      	movs	r2, #2
 1009390:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_flags.tx_started = true;
 1009394:	2201      	movs	r2, #1
 1009396:	4b2a      	ldr	r3, [pc, #168]	; (1009440 <nrf_802154_radio_irq_handler+0x2dc>)
 1009398:	709a      	strb	r2, [r3, #2]
            nrf_802154_trx_transmit_frame_started();
 100939a:	f7fe fb67 	bl	1007a6c <nrf_802154_trx_transmit_frame_started>
            break;
 100939e:	e725      	b.n	10091ec <nrf_802154_radio_irq_handler+0x88>
 10093a0:	2202      	movs	r2, #2
 10093a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            nrf_802154_trx_transmit_ack_started();
 10093a6:	f7fe fb71 	bl	1007a8c <nrf_802154_trx_transmit_ack_started>
            break;
 10093aa:	e71f      	b.n	10091ec <nrf_802154_radio_irq_handler+0x88>
            rxframe_finish();
 10093ac:	f7ff f91a 	bl	10085e4 <rxframe_finish>
 10093b0:	2201      	movs	r2, #1
 10093b2:	4b24      	ldr	r3, [pc, #144]	; (1009444 <nrf_802154_radio_irq_handler+0x2e0>)
 10093b4:	611a      	str	r2, [r3, #16]
            m_trx_state = TRX_STATE_FINISHED;
 10093b6:	230c      	movs	r3, #12
 10093b8:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_crcerror();
 10093ba:	f7fe fa89 	bl	10078d0 <nrf_802154_trx_receive_frame_crcerror>
            break;
 10093be:	e74a      	b.n	1009256 <nrf_802154_radio_irq_handler+0xf2>
            rxack_finish();
 10093c0:	f7ff f99a 	bl	10086f8 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
 10093c4:	230c      	movs	r3, #12
 10093c6:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_crcerror();
 10093c8:	f005 fae3 	bl	100e992 <nrf_802154_trx_receive_ack_crcerror>
            break;
 10093cc:	e743      	b.n	1009256 <nrf_802154_radio_irq_handler+0xf2>
            m_flags.rssi_started = true;
 10093ce:	2201      	movs	r2, #1
 10093d0:	4b1b      	ldr	r3, [pc, #108]	; (1009440 <nrf_802154_radio_irq_handler+0x2dc>)
 10093d2:	70da      	strb	r2, [r3, #3]
            rxframe_finish();
 10093d4:	f7ff f906 	bl	10085e4 <rxframe_finish>
            m_trx_state = TRX_STATE_RXFRAME_FINISHED;
 10093d8:	2304      	movs	r3, #4
 10093da:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_received();
 10093dc:	f7fe fa94 	bl	1007908 <nrf_802154_trx_receive_frame_received>
            break;
 10093e0:	e74f      	b.n	1009282 <nrf_802154_radio_irq_handler+0x11e>
            rxack_finish();
 10093e2:	f7ff f989 	bl	10086f8 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
 10093e6:	230c      	movs	r3, #12
 10093e8:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_received();
 10093ea:	f7fe fb9d 	bl	1007b28 <nrf_802154_trx_receive_ack_received>
            break;
 10093ee:	e748      	b.n	1009282 <nrf_802154_radio_irq_handler+0x11e>
            txframe_finish();
 10093f0:	f7ff f8dc 	bl	10085ac <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
 10093f4:	230c      	movs	r3, #12
 10093f6:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_frame_transmitted();
 10093f8:	f7fe fb66 	bl	1007ac8 <nrf_802154_trx_transmit_frame_transmitted>
            break;
 10093fc:	e757      	b.n	10092ae <nrf_802154_radio_irq_handler+0x14a>
    nrf_802154_trx_ppi_for_ack_tx_clear();
 10093fe:	f000 f8ff 	bl	1009600 <nrf_802154_trx_ppi_for_ack_tx_clear>
    p_reg->SHORTS = shorts_mask;
 1009402:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
 1009406:	f7fb f8ff 	bl	1004608 <mpsl_fem_pa_configuration_clear>
    p_reg->SHORTS &= ~(mask);
 100940a:	4b0e      	ldr	r3, [pc, #56]	; (1009444 <nrf_802154_radio_irq_handler+0x2e0>)
 100940c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 1009410:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 1009414:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1009418:	2201      	movs	r2, #1
 100941a:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
 100941c:	4b0a      	ldr	r3, [pc, #40]	; (1009448 <nrf_802154_radio_irq_handler+0x2e4>)
 100941e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            m_trx_state = TRX_STATE_FINISHED;
 1009422:	230c      	movs	r3, #12
 1009424:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_ack_transmitted();
 1009426:	f7fe fb3d 	bl	1007aa4 <nrf_802154_trx_transmit_ack_transmitted>
            break;
 100942a:	e740      	b.n	10092ae <nrf_802154_radio_irq_handler+0x14a>
            nrf_802154_trx_transmit_frame_ccaidle();
 100942c:	f7fe fbf8 	bl	1007c20 <nrf_802154_trx_transmit_frame_ccaidle>
            break;
 1009430:	e776      	b.n	1009320 <nrf_802154_radio_irq_handler+0x1bc>
 1009432:	bf00      	nop
 1009434:	41014000 	.word	0x41014000
 1009438:	41008000 	.word	0x41008000
 100943c:	210046bd 	.word	0x210046bd
 1009440:	210046b7 	.word	0x210046b7
 1009444:	41018000 	.word	0x41018000
 1009448:	08000002 	.word	0x08000002
            txframe_finish();
 100944c:	f7ff f8ae 	bl	10085ac <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
 1009450:	230c      	movs	r3, #12
 1009452:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_transmit_frame_ccabusy();
 1009454:	f7fe fbf6 	bl	1007c44 <nrf_802154_trx_transmit_frame_ccabusy>
            break;
 1009458:	e778      	b.n	100934c <nrf_802154_radio_irq_handler+0x1e8>
            standalone_cca_finish();
 100945a:	f7ff f85b 	bl	1008514 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100945e:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(false);
 1009460:	4628      	mov	r0, r5
            m_trx_state = TRX_STATE_FINISHED;
 1009462:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(false);
 1009464:	f005 faa0 	bl	100e9a8 <nrf_802154_trx_standalone_cca_finished>
            break;
 1009468:	e770      	b.n	100934c <nrf_802154_radio_irq_handler+0x1e8>
 100946a:	bf00      	nop

0100946c <nrf_802154_trx_swi_irq_handler>:

#endif // NRF_802154_INTERNAL_RADIO_IRQ_HANDLING

#if defined(RADIO_INTENSET_SYNC_Msk)
void nrf_802154_trx_swi_irq_handler(void)
{
 100946c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100946e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009472:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
 1009474:	4b09      	ldr	r3, [pc, #36]	; (100949c <nrf_802154_trx_swi_irq_handler+0x30>)
 1009476:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    // To prevent that from happening, the handler is executed with disabled interrupts.
    nrf_802154_mcu_critical_state_t mcu_crit_state;

    nrf_802154_mcu_critical_enter(mcu_crit_state);

    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
 100947a:	0712      	lsls	r2, r2, #28
 100947c:	d50a      	bpl.n	1009494 <nrf_802154_trx_swi_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100947e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 1009482:	b13a      	cbz	r2, 1009494 <nrf_802154_trx_swi_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 1009484:	2200      	movs	r2, #0
        // process sync event.
        // If we are in critical section, the RADIO_IRQ is disabled on NVIC.
        // Following will make it pending, and processing of RADIO_IRQ will start
        // when critical section is left.

        nrf_802154_irq_set_pending(RADIO_IRQn);
 1009486:	2008      	movs	r0, #8
 1009488:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 100948c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 1009490:	f7fd fc08 	bl	1006ca4 <nrf_802154_irq_set_pending>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1009494:	f384 8810 	msr	PRIMASK, r4
    }

    nrf_802154_mcu_critical_exit(mcu_crit_state);
}
 1009498:	bd10      	pop	{r4, pc}
 100949a:	bf00      	nop
 100949c:	41014000 	.word	0x41014000

010094a0 <nrf_802154_trx_ppi_for_enable>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 10094a0:	4b0c      	ldr	r3, [pc, #48]	; (10094d4 <nrf_802154_trx_ppi_for_enable+0x34>)
 10094a2:	4a0d      	ldr	r2, [pc, #52]	; (10094d8 <nrf_802154_trx_ppi_for_enable+0x38>)
 10094a4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 10094a8:	3a03      	subs	r2, #3
 10094aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10094ae:	3201      	adds	r2, #1
 10094b0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 10094b4:	3201      	adds	r2, #1
 10094b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 10094ba:	3206      	adds	r2, #6
 10094bc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 10094c0:	3a03      	subs	r2, #3
 10094c2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
 10094c6:	f241 22f0 	movw	r2, #4848	; 0x12f0
 10094ca:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 10094ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                             (1UL << NRF_802154_DPPI_RADIO_READY) |
                             (1UL << NRF_802154_DPPI_RADIO_ADDRESS) |
                             (1UL << NRF_802154_DPPI_RADIO_END) |
                             (1UL << NRF_802154_DPPI_RADIO_PHYEND) |
                             (1UL << NRF_802154_DPPI_RADIO_CCAIDLE));
}
 10094d2:	4770      	bx	lr
 10094d4:	41008000 	.word	0x41008000
 10094d8:	80000007 	.word	0x80000007

010094dc <nrf_802154_trx_ppi_for_disable>:
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
 10094dc:	f241 22f0 	movw	r2, #4848	; 0x12f0
 10094e0:	4b09      	ldr	r3, [pc, #36]	; (1009508 <nrf_802154_trx_ppi_for_disable+0x2c>)
 10094e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 10094e6:	2200      	movs	r2, #0
 10094e8:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 10094ec:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 10094f0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 10094f4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 10094f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 10094fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1009500:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_PHYEND);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_END);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_ADDRESS);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_READY);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);
}
 1009504:	4770      	bx	lr
 1009506:	bf00      	nop
 1009508:	4100f000 	.word	0x4100f000

0100950c <nrf_802154_trx_ppi_for_ramp_up_set>:
 100950c:	2300      	movs	r3, #0
 100950e:	4a10      	ldr	r2, [pc, #64]	; (1009550 <nrf_802154_trx_ppi_for_ramp_up_set+0x44>)

void nrf_802154_trx_ppi_for_ramp_up_set(nrf_radio_task_t ramp_up_task, bool start_timer)
{
 1009510:	b530      	push	{r4, r5, lr}
 1009512:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 1009516:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
NRF_STATIC_INLINE void nrf_dppi_channels_include_in_group(NRF_DPPIC_Type *         p_reg,
                                                          uint32_t                 channel_mask,
                                                          nrf_dppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] =
        p_reg->CHG[(uint32_t) channel_group] | (channel_mask);
 100951a:	4b0e      	ldr	r3, [pc, #56]	; (1009554 <nrf_802154_trx_ppi_for_ramp_up_set+0x48>)
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100951c:	4d0e      	ldr	r5, [pc, #56]	; (1009558 <nrf_802154_trx_ppi_for_ramp_up_set+0x4c>)
 100951e:	f8d3 4800 	ldr.w	r4, [r3, #2048]	; 0x800
 1009522:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    p_reg->CHG[(uint32_t) channel_group] =
 1009526:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800

NRF_STATIC_INLINE void nrf_egu_publish_set(NRF_EGU_Type *  p_reg,
                                           nrf_egu_event_t event,
                                           uint8_t         channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 100952a:	4c0c      	ldr	r4, [pc, #48]	; (100955c <nrf_802154_trx_ppi_for_ramp_up_set+0x50>)
 100952c:	f8c2 41bc 	str.w	r4, [r2, #444]	; 0x1bc
 1009530:	502c      	str	r4, [r5, r0]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 1009532:	480b      	ldr	r0, [pc, #44]	; (1009560 <nrf_802154_trx_ppi_for_ramp_up_set+0x54>)
 1009534:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    nrf_dppi_channels_include_in_group(NRF_DPPIC, 1UL << PPI_EGU_RAMP_UP, DPPI_CHGRP_RAMP_UP);
    nrf_egu_publish_set(NRF_802154_EGU_INSTANCE, EGU_EVENT, PPI_EGU_RAMP_UP);
    nrf_radio_subscribe_set(NRF_RADIO, ramp_up_task, PPI_EGU_RAMP_UP);
    nrf_dppi_subscribe_set(NRF_DPPIC, DPPI_CHGRP_RAMP_UP_DIS_TASK, PPI_EGU_RAMP_UP);

    if (start_timer)
 1009538:	b111      	cbz	r1, 1009540 <nrf_802154_trx_ppi_for_ramp_up_set+0x34>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100953a:	490a      	ldr	r1, [pc, #40]	; (1009564 <nrf_802154_trx_ppi_for_ramp_up_set+0x58>)
 100953c:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 1009540:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
    p_reg->CHENSET = mask;
 1009544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1009548:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    nrf_dppi_channels_enable(NRF_DPPIC,
                             (1UL << PPI_EGU_RAMP_UP));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100954c:	bd30      	pop	{r4, r5, pc}
 100954e:	bf00      	nop
 1009550:	41014000 	.word	0x41014000
 1009554:	4100f000 	.word	0x4100f000
 1009558:	41008080 	.word	0x41008080
 100955c:	8000000a 	.word	0x8000000a
 1009560:	80000007 	.word	0x80000007
 1009564:	41018000 	.word	0x41018000

01009568 <nrf_802154_trx_ppi_for_ramp_up_clear>:
    p_reg->CHENCLR = mask;
 1009568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 100956c:	4a0c      	ldr	r2, [pc, #48]	; (10095a0 <nrf_802154_trx_ppi_for_ramp_up_clear+0x38>)

void nrf_802154_trx_ppi_for_ramp_up_clear(nrf_radio_task_t ramp_up_task, bool start_timer)
{
 100956e:	b530      	push	{r4, r5, lr}
 1009570:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_egu_publish_clear(NRF_EGU_Type *  p_reg,
                                             nrf_egu_event_t event)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 1009574:	2300      	movs	r3, #0
 1009576:	4d0b      	ldr	r5, [pc, #44]	; (10095a4 <nrf_802154_trx_ppi_for_ramp_up_clear+0x3c>)
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 1009578:	4c0b      	ldr	r4, [pc, #44]	; (10095a8 <nrf_802154_trx_ppi_for_ramp_up_clear+0x40>)
 100957a:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
 100957e:	5023      	str	r3, [r4, r0]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 1009580:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
NRF_STATIC_INLINE void nrf_dppi_channels_remove_from_group(NRF_DPPIC_Type *         p_reg,
                                                           uint32_t                 channel_mask,
                                                           nrf_dppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] =
        p_reg->CHG[(uint32_t) channel_group] & ~(channel_mask);
 1009584:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 1009588:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    p_reg->CHG[(uint32_t) channel_group] =
 100958c:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
    nrf_egu_publish_clear(NRF_802154_EGU_INSTANCE, EGU_EVENT);
    nrf_radio_subscribe_clear(NRF_RADIO, ramp_up_task);
    nrf_dppi_subscribe_clear(NRF_DPPIC, DPPI_CHGRP_RAMP_UP_DIS_TASK);
    nrf_dppi_channels_remove_from_group(NRF_DPPIC, 1UL << PPI_EGU_RAMP_UP, DPPI_CHGRP_RAMP_UP);

    if (start_timer)
 1009590:	b119      	cbz	r1, 100959a <nrf_802154_trx_ppi_for_ramp_up_clear+0x32>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 1009592:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 1009596:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100959a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
    }

    nrf_egu_subscribe_clear(NRF_802154_EGU_INSTANCE, EGU_TASK);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100959e:	bd30      	pop	{r4, r5, pc}
 10095a0:	4100f000 	.word	0x4100f000
 10095a4:	41014000 	.word	0x41014000
 10095a8:	41008080 	.word	0x41008080

010095ac <nrf_802154_trx_ppi_for_ramp_up_was_triggered>:
    __ASM("nop");
    __ASM("nop");
}

bool nrf_802154_trx_ppi_for_ramp_up_was_triggered(void)
{
 10095ac:	b508      	push	{r3, lr}
    return (nrf_radio_state_t) p_reg->STATE;
 10095ae:	4b08      	ldr	r3, [pc, #32]	; (10095d0 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x24>)
 10095b0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    if (nrf_radio_state_get(NRF_RADIO) != NRF_RADIO_STATE_DISABLED)
 10095b4:	b2db      	uxtb	r3, r3
 10095b6:	b943      	cbnz	r3, 10095ca <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 10095b8:	4b06      	ldr	r3, [pc, #24]	; (10095d4 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x28>)
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return true;
    }

    // Wait for PPIs
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 10095ba:	f005 faa6 	bl	100eb0a <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
 10095be:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c

    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, EGU_EVENT))
 10095c2:	3800      	subs	r0, #0
 10095c4:	bf18      	it	ne
 10095c6:	2001      	movne	r0, #1
        return true;
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
    return false;
}
 10095c8:	bd08      	pop	{r3, pc}
        return true;
 10095ca:	2001      	movs	r0, #1
 10095cc:	e7fc      	b.n	10095c8 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1c>
 10095ce:	bf00      	nop
 10095d0:	41008000 	.word	0x41008000
 10095d4:	41014000 	.word	0x41014000

010095d8 <nrf_802154_trx_ppi_for_ack_tx_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 10095d8:	4b06      	ldr	r3, [pc, #24]	; (10095f4 <nrf_802154_trx_ppi_for_ack_tx_set+0x1c>)
 10095da:	4a07      	ldr	r2, [pc, #28]	; (10095f8 <nrf_802154_trx_ppi_for_ack_tx_set+0x20>)
 10095dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 10095e0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 10095e4:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
    p_reg->CHENSET = mask;
 10095e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 10095ec:	4b03      	ldr	r3, [pc, #12]	; (10095fc <nrf_802154_trx_ppi_for_ack_tx_set+0x24>)
 10095ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_timer_publish_set(NRF_802154_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1, PPI_TIMER_TX_ACK);

    nrf_dppi_channels_enable(NRF_DPPIC, (1UL << PPI_TIMER_TX_ACK));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 10095f2:	4770      	bx	lr
 10095f4:	8000000a 	.word	0x8000000a
 10095f8:	41008000 	.word	0x41008000
 10095fc:	4100f000 	.word	0x4100f000

01009600 <nrf_802154_trx_ppi_for_ack_tx_clear>:
    p_reg->CHENCLR = mask;
 1009600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1009604:	4b05      	ldr	r3, [pc, #20]	; (100961c <nrf_802154_trx_ppi_for_ack_tx_clear+0x1c>)
 1009606:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100960a:	2300      	movs	r3, #0
 100960c:	4a04      	ldr	r2, [pc, #16]	; (1009620 <nrf_802154_trx_ppi_for_ack_tx_clear+0x20>)
 100960e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 1009612:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 1009616:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    nrf_radio_subscribe_clear(NRF_RADIO, NRF_RADIO_TASK_TXEN);
    nrf_timer_publish_clear(NRF_802154_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100961a:	4770      	bx	lr
 100961c:	4100f000 	.word	0x4100f000
 1009620:	41008000 	.word	0x41008000

01009624 <nrf_802154_trx_ppi_for_fem_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 1009624:	4b02      	ldr	r3, [pc, #8]	; (1009630 <nrf_802154_trx_ppi_for_fem_set+0xc>)
 1009626:	4a03      	ldr	r2, [pc, #12]	; (1009634 <nrf_802154_trx_ppi_for_fem_set+0x10>)
 1009628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_timer_subscribe_set(NRF_802154_TIMER_INSTANCE, NRF_TIMER_TASK_START, PPI_DISABLED_EGU);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100962c:	4770      	bx	lr
 100962e:	bf00      	nop
 1009630:	41018000 	.word	0x41018000
 1009634:	80000007 	.word	0x80000007

01009638 <nrf_802154_trx_ppi_for_fem_clear>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 1009638:	2200      	movs	r2, #0
 100963a:	4b02      	ldr	r3, [pc, #8]	; (1009644 <nrf_802154_trx_ppi_for_fem_clear+0xc>)
 100963c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_timer_subscribe_clear(NRF_802154_TIMER_INSTANCE, NRF_TIMER_TASK_START);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 1009640:	4770      	bx	lr
 1009642:	bf00      	nop
 1009644:	41018000 	.word	0x41018000

01009648 <nrf_802154_trx_ppi_for_radio_sync_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 1009648:	4a07      	ldr	r2, [pc, #28]	; (1009668 <nrf_802154_trx_ppi_for_radio_sync_set+0x20>)
 100964a:	4b08      	ldr	r3, [pc, #32]	; (100966c <nrf_802154_trx_ppi_for_radio_sync_set+0x24>)
 100964c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 1009650:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 1009654:	3380      	adds	r3, #128	; 0x80
 1009656:	501a      	str	r2, [r3, r0]
    p_reg->CHENSET = mask;
 1009658:	f44f 7280 	mov.w	r2, #256	; 0x100
 100965c:	f5a3 43a1 	sub.w	r3, r3, #20608	; 0x5080
 1009660:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_radio_publish_set(NRF_RADIO, NRF_RADIO_EVENT_SYNC, PPI_RADIO_SYNC_EGU_SYNC);
    nrf_egu_subscribe_set(NRF_802154_EGU_INSTANCE, task, PPI_RADIO_SYNC_EGU_SYNC);
    nrf_dppi_channels_enable(NRF_DPPIC, (1UL << PPI_RADIO_SYNC_EGU_SYNC));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 1009664:	4770      	bx	lr
 1009666:	bf00      	nop
 1009668:	80000008 	.word	0x80000008
 100966c:	41008000 	.word	0x41008000

01009670 <nrf_802154_trx_ppi_for_radio_sync_clear>:
    p_reg->CHENCLR = mask;
 1009670:	f44f 7280 	mov.w	r2, #256	; 0x100
 1009674:	4b06      	ldr	r3, [pc, #24]	; (1009690 <nrf_802154_trx_ppi_for_radio_sync_clear+0x20>)
 1009676:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 100967a:	2200      	movs	r2, #0
 100967c:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 1009680:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 1009684:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 1009688:	3380      	adds	r3, #128	; 0x80
 100968a:	501a      	str	r2, [r3, r0]
    nrf_dppi_channels_disable(NRF_DPPIC, (1UL << PPI_RADIO_SYNC_EGU_SYNC));
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_SYNC);
    nrf_egu_subscribe_clear(NRF_802154_EGU_INSTANCE, task);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100968c:	4770      	bx	lr
 100968e:	bf00      	nop
 1009690:	4100f000 	.word	0x4100f000

01009694 <nrf_802154_tx_work_buffer_reset>:
static bool      m_is_secured;                              ///< Flag that indicates if work buffer has been successfully secured.
static bool      m_is_dynamic_data_updated;                 ///< Flag that indicates if work buffer has had dynamic data successfully updated.

void nrf_802154_tx_work_buffer_reset(const nrf_802154_transmitted_frame_props_t * p_frame_props)
{
    mp_original_frame   = NULL;
 1009694:	2300      	movs	r3, #0
 1009696:	4a07      	ldr	r2, [pc, #28]	; (10096b4 <nrf_802154_tx_work_buffer_reset+0x20>)
 1009698:	6013      	str	r3, [r2, #0]
    m_plain_text_offset = 0;
 100969a:	4a07      	ldr	r2, [pc, #28]	; (10096b8 <nrf_802154_tx_work_buffer_reset+0x24>)
 100969c:	7013      	strb	r3, [r2, #0]

    if (p_frame_props == NULL)
 100969e:	4a07      	ldr	r2, [pc, #28]	; (10096bc <nrf_802154_tx_work_buffer_reset+0x28>)
 10096a0:	4b07      	ldr	r3, [pc, #28]	; (10096c0 <nrf_802154_tx_work_buffer_reset+0x2c>)
 10096a2:	b910      	cbnz	r0, 10096aa <nrf_802154_tx_work_buffer_reset+0x16>
    {
        m_is_secured              = false;
 10096a4:	7010      	strb	r0, [r2, #0]
        m_is_dynamic_data_updated = false;
 10096a6:	7018      	strb	r0, [r3, #0]
 10096a8:	4770      	bx	lr
    }
    else
    {
        m_is_secured              = p_frame_props->is_secured;
 10096aa:	7801      	ldrb	r1, [r0, #0]
 10096ac:	7011      	strb	r1, [r2, #0]
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
 10096ae:	7842      	ldrb	r2, [r0, #1]
 10096b0:	701a      	strb	r2, [r3, #0]
    }
}
 10096b2:	4770      	bx	lr
 10096b4:	210034bc 	.word	0x210034bc
 10096b8:	210046c0 	.word	0x210046c0
 10096bc:	210046bf 	.word	0x210046bf
 10096c0:	210046be 	.word	0x210046be

010096c4 <nrf_802154_tx_work_buffer_get>:
    return m_work_buffer;
}

const uint8_t * nrf_802154_tx_work_buffer_get(const uint8_t * p_original_frame)
{
    return mp_original_frame ? m_work_buffer : p_original_frame;
 10096c4:	4b03      	ldr	r3, [pc, #12]	; (10096d4 <nrf_802154_tx_work_buffer_get+0x10>)
 10096c6:	681a      	ldr	r2, [r3, #0]
}
 10096c8:	4b03      	ldr	r3, [pc, #12]	; (10096d8 <nrf_802154_tx_work_buffer_get+0x14>)
 10096ca:	2a00      	cmp	r2, #0
 10096cc:	bf18      	it	ne
 10096ce:	4618      	movne	r0, r3
 10096d0:	4770      	bx	lr
 10096d2:	bf00      	nop
 10096d4:	210034bc 	.word	0x210034bc
 10096d8:	210046c1 	.word	0x210046c1

010096dc <nrf_802154_tx_work_buffer_original_frame_update>:
    nrf_802154_transmitted_frame_props_t * p_frame_props)
{
    assert(p_frame_props != NULL);

    p_frame_props->is_secured          = m_is_secured;
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 10096dc:	4a0e      	ldr	r2, [pc, #56]	; (1009718 <nrf_802154_tx_work_buffer_original_frame_update+0x3c>)
{
 10096de:	b410      	push	{r4}
    p_frame_props->is_secured          = m_is_secured;
 10096e0:	4b0e      	ldr	r3, [pc, #56]	; (100971c <nrf_802154_tx_work_buffer_original_frame_update+0x40>)
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 10096e2:	7814      	ldrb	r4, [r2, #0]

    if (mp_original_frame == NULL)
 10096e4:	4a0e      	ldr	r2, [pc, #56]	; (1009720 <nrf_802154_tx_work_buffer_original_frame_update+0x44>)
    p_frame_props->is_secured          = m_is_secured;
 10096e6:	781b      	ldrb	r3, [r3, #0]
    if (mp_original_frame == NULL)
 10096e8:	6812      	ldr	r2, [r2, #0]
    p_frame_props->is_secured          = m_is_secured;
 10096ea:	700b      	strb	r3, [r1, #0]
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 10096ec:	704c      	strb	r4, [r1, #1]
    if (mp_original_frame == NULL)
 10096ee:	b182      	cbz	r2, 1009712 <nrf_802154_tx_work_buffer_original_frame_update+0x36>
    {
        return;
    }

    uint8_t work_buffer_len = m_work_buffer[PHR_OFFSET] + PHR_SIZE;
 10096f0:	490c      	ldr	r1, [pc, #48]	; (1009724 <nrf_802154_tx_work_buffer_original_frame_update+0x48>)
 10096f2:	780a      	ldrb	r2, [r1, #0]
 10096f4:	3201      	adds	r2, #1
 10096f6:	b2d2      	uxtb	r2, r2

    if (m_is_dynamic_data_updated && m_is_secured)
 10096f8:	b134      	cbz	r4, 1009708 <nrf_802154_tx_work_buffer_original_frame_update+0x2c>
 10096fa:	b113      	cbz	r3, 1009702 <nrf_802154_tx_work_buffer_original_frame_update+0x26>
    }
    else
    {
        // Intentionally empty.
    }
}
 10096fc:	bc10      	pop	{r4}
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
 10096fe:	f004 bf4a 	b.w	100e596 <memcpy>
        memcpy(p_original_frame, m_work_buffer, m_plain_text_offset);
 1009702:	4b09      	ldr	r3, [pc, #36]	; (1009728 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
 1009704:	781a      	ldrb	r2, [r3, #0]
 1009706:	e7f9      	b.n	10096fc <nrf_802154_tx_work_buffer_original_frame_update+0x20>
    else if (m_is_secured)
 1009708:	b11b      	cbz	r3, 1009712 <nrf_802154_tx_work_buffer_original_frame_update+0x36>
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
 100970a:	4b07      	ldr	r3, [pc, #28]	; (1009728 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
 100970c:	781b      	ldrb	r3, [r3, #0]
 100970e:	1ad2      	subs	r2, r2, r3
 1009710:	e7f4      	b.n	10096fc <nrf_802154_tx_work_buffer_original_frame_update+0x20>
}
 1009712:	bc10      	pop	{r4}
 1009714:	4770      	bx	lr
 1009716:	bf00      	nop
 1009718:	210046be 	.word	0x210046be
 100971c:	210046bf 	.word	0x210046bf
 1009720:	210034bc 	.word	0x210034bc
 1009724:	210046c1 	.word	0x210046c1
 1009728:	210046c0 	.word	0x210046c0

0100972c <random_backoff_start>:

/**
 * @brief Delay CCA procedure for random (2^BE - 1) unit backoff periods.
 */
static void random_backoff_start(void)
{
 100972c:	b530      	push	{r4, r5, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    uint8_t backoff_periods = nrf_802154_random_get() % (1 << m_be);
 100972e:	2501      	movs	r5, #1
{
 1009730:	b087      	sub	sp, #28
    uint8_t backoff_periods = nrf_802154_random_get() % (1 << m_be);
 1009732:	f7fd fa57 	bl	1006be4 <nrf_802154_random_get>
 1009736:	4b1d      	ldr	r3, [pc, #116]	; (10097ac <random_backoff_start+0x80>)

    rsch_dly_ts_param_t backoff_ts_param =
 1009738:	2214      	movs	r2, #20
    uint8_t backoff_periods = nrf_802154_random_get() % (1 << m_be);
 100973a:	781c      	ldrb	r4, [r3, #0]
    rsch_dly_ts_param_t backoff_ts_param =
 100973c:	2100      	movs	r1, #0
    uint8_t backoff_periods = nrf_802154_random_get() % (1 << m_be);
 100973e:	fa05 f404 	lsl.w	r4, r5, r4
 1009742:	3c01      	subs	r4, #1
 1009744:	4004      	ands	r4, r0
    rsch_dly_ts_param_t backoff_ts_param =
 1009746:	a801      	add	r0, sp, #4
 1009748:	f004 ff30 	bl	100e5ac <memset>
    {
        .t0               = nrf_802154_timer_sched_time_get(),
 100974c:	f006 fc8b 	bl	1010066 <nrf_802154_timer_sched_time_get>
    rsch_dly_ts_param_t backoff_ts_param =
 1009750:	2302      	movs	r3, #2
 1009752:	9001      	str	r0, [sp, #4]
        .dt               = backoff_periods * UNIT_BACKOFF_PERIOD,
 1009754:	f44f 70a0 	mov.w	r0, #320	; 0x140
    rsch_dly_ts_param_t backoff_ts_param =
 1009758:	f88d 300d 	strb.w	r3, [sp, #13]
 100975c:	4b14      	ldr	r3, [pc, #80]	; (10097b0 <random_backoff_start+0x84>)
    uint8_t backoff_periods = nrf_802154_random_get() % (1 << m_be);
 100975e:	b2e4      	uxtb	r4, r4
    rsch_dly_ts_param_t backoff_ts_param =
 1009760:	9304      	str	r3, [sp, #16]
 1009762:	f06f 0302 	mvn.w	r3, #2
        .dt               = backoff_periods * UNIT_BACKOFF_PERIOD,
 1009766:	4344      	muls	r4, r0
    rsch_dly_ts_param_t backoff_ts_param =
 1009768:	9305      	str	r3, [sp, #20]
 100976a:	9402      	str	r4, [sp, #8]
        .type             = RSCH_DLY_TS_TYPE_RELAXED,
        .started_callback = frame_transmit,
        .id               = NRF_802154_RESERVED_CSMACA_ID,
    };

    switch (nrf_802154_pib_coex_tx_request_mode_get())
 100976c:	f7fe fe4c 	bl	1008408 <nrf_802154_pib_coex_tx_request_mode_get>
 1009770:	2802      	cmp	r0, #2
 1009772:	4b10      	ldr	r3, [pc, #64]	; (10097b4 <random_backoff_start+0x88>)
 1009774:	d011      	beq.n	100979a <random_backoff_start+0x6e>
 1009776:	2803      	cmp	r0, #3
 1009778:	d015      	beq.n	10097a6 <random_backoff_start+0x7a>
 100977a:	42a8      	cmp	r0, r5
 100977c:	d102      	bne.n	1009784 <random_backoff_start+0x58>
    {
        case NRF_802154_COEX_TX_REQUEST_MODE_FRAME_READY:
            // To request Coex precondition immediately, priority must be leveraged
            backoff_ts_param.prio = RSCH_PRIO_TX;
 100977e:	2204      	movs	r2, #4
            break;

        case NRF_802154_COEX_TX_REQUEST_MODE_CCA_START:
            // Coex should be requested for all backoff periods but the first one
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
 1009780:	f88d 200c 	strb.w	r2, [sp, #12]
        default:
            assert(false);
            break;
    }

    if (m_nb != 0)
 1009784:	781b      	ldrb	r3, [r3, #0]
 1009786:	b11b      	cbz	r3, 1009790 <random_backoff_start+0x64>
    {
        // Since CSMA/CA always requests delayed timeslot of type RSCH_DLY_TS_TYPE_RELAXED,
        // it must be cancelled explicitly, so that the slot is released and available
        // for the upcoming request.
        nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID);
 1009788:	f06f 0002 	mvn.w	r0, #2
 100978c:	f006 fc1e 	bl	100ffcc <nrf_802154_rsch_delayed_timeslot_cancel>
    }

    // Delayed timeslot with these parameters should always be scheduled
    if (!nrf_802154_rsch_delayed_timeslot_request(&backoff_ts_param))
 1009790:	a801      	add	r0, sp, #4
 1009792:	f003 ff45 	bl	100d620 <nrf_802154_rsch_delayed_timeslot_request>
    {
        assert(false);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 1009796:	b007      	add	sp, #28
 1009798:	bd30      	pop	{r4, r5, pc}
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
 100979a:	781a      	ldrb	r2, [r3, #0]
 100979c:	2a00      	cmp	r2, #0
 100979e:	bf0c      	ite	eq
 10097a0:	2201      	moveq	r2, #1
 10097a2:	2204      	movne	r2, #4
 10097a4:	e7ec      	b.n	1009780 <random_backoff_start+0x54>
            backoff_ts_param.prio = RSCH_PRIO_IDLE_LISTENING;
 10097a6:	f88d 500c 	strb.w	r5, [sp, #12]
            break;
 10097aa:	e7eb      	b.n	1009784 <random_backoff_start+0x58>
 10097ac:	21004741 	.word	0x21004741
 10097b0:	01009839 	.word	0x01009839
 10097b4:	21004745 	.word	0x21004745

010097b8 <procedure_stop>:
{
 10097b8:	b510      	push	{r4, lr}
    return m_is_running;
 10097ba:	4c05      	ldr	r4, [pc, #20]	; (10097d0 <procedure_stop+0x18>)
    if (procedure_is_running())
 10097bc:	7823      	ldrb	r3, [r4, #0]
 10097be:	b12b      	cbz	r3, 10097cc <procedure_stop+0x14>
        nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID);
 10097c0:	f06f 0002 	mvn.w	r0, #2
 10097c4:	f006 fc02 	bl	100ffcc <nrf_802154_rsch_delayed_timeslot_cancel>
        m_is_running = false;
 10097c8:	2300      	movs	r3, #0
 10097ca:	7023      	strb	r3, [r4, #0]
}
 10097cc:	bd10      	pop	{r4, pc}
 10097ce:	bf00      	nop
 10097d0:	21004744 	.word	0x21004744

010097d4 <notify_busy_channel>:
{
 10097d4:	b508      	push	{r3, lr}
    if (!result && (m_nb >= nrf_802154_pib_csmaca_max_backoffs_get()))
 10097d6:	b960      	cbnz	r0, 10097f2 <notify_busy_channel+0x1e>
 10097d8:	f7fe fe28 	bl	100842c <nrf_802154_pib_csmaca_max_backoffs_get>
 10097dc:	4b05      	ldr	r3, [pc, #20]	; (10097f4 <notify_busy_channel+0x20>)
 10097de:	781b      	ldrb	r3, [r3, #0]
 10097e0:	4283      	cmp	r3, r0
 10097e2:	d306      	bcc.n	10097f2 <notify_busy_channel+0x1e>
        nrf_802154_notify_transmit_failed(mp_data, NRF_802154_TX_ERROR_BUSY_CHANNEL);
 10097e4:	4b04      	ldr	r3, [pc, #16]	; (10097f8 <notify_busy_channel+0x24>)
 10097e6:	2101      	movs	r1, #1
 10097e8:	6818      	ldr	r0, [r3, #0]
}
 10097ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_notify_transmit_failed(mp_data, NRF_802154_TX_ERROR_BUSY_CHANNEL);
 10097ee:	f005 ba9a 	b.w	100ed26 <nrf_802154_notify_transmit_failed>
}
 10097f2:	bd08      	pop	{r3, pc}
 10097f4:	21004745 	.word	0x21004745
 10097f8:	210034c0 	.word	0x210034c0

010097fc <channel_busy.part.0>:

static bool channel_busy(void)
 10097fc:	b510      	push	{r4, lr}

    if (procedure_is_running())
    {
        nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

        m_nb++;
 10097fe:	4c0c      	ldr	r4, [pc, #48]	; (1009830 <channel_busy.part.0+0x34>)
 1009800:	7823      	ldrb	r3, [r4, #0]
 1009802:	3301      	adds	r3, #1
 1009804:	7023      	strb	r3, [r4, #0]

        if (m_be < nrf_802154_pib_csmaca_max_be_get())
 1009806:	f7fe fe0b 	bl	1008420 <nrf_802154_pib_csmaca_max_be_get>
 100980a:	4a0a      	ldr	r2, [pc, #40]	; (1009834 <channel_busy.part.0+0x38>)
 100980c:	7813      	ldrb	r3, [r2, #0]
 100980e:	4298      	cmp	r0, r3
        {
            m_be++;
 1009810:	bf84      	itt	hi
 1009812:	3301      	addhi	r3, #1
 1009814:	7013      	strbhi	r3, [r2, #0]
        }

        if (m_nb > nrf_802154_pib_csmaca_max_backoffs_get())
 1009816:	f7fe fe09 	bl	100842c <nrf_802154_pib_csmaca_max_backoffs_get>
 100981a:	7823      	ldrb	r3, [r4, #0]
 100981c:	4283      	cmp	r3, r0
 100981e:	d903      	bls.n	1009828 <channel_busy.part.0+0x2c>
        {
            procedure_stop();
 1009820:	f7ff ffca 	bl	10097b8 <procedure_stop>
    bool result = true;
 1009824:	2001      	movs	r0, #1

        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    }

    return result;
}
 1009826:	bd10      	pop	{r4, pc}
            random_backoff_start();
 1009828:	f7ff ff80 	bl	100972c <random_backoff_start>
            result = false;
 100982c:	2000      	movs	r0, #0
 100982e:	e7fa      	b.n	1009826 <channel_busy.part.0+0x2a>
 1009830:	21004745 	.word	0x21004745
 1009834:	21004741 	.word	0x21004741

01009838 <frame_transmit>:
{
 1009838:	b530      	push	{r4, r5, lr}
    return m_is_running;
 100983a:	4c14      	ldr	r4, [pc, #80]	; (100988c <frame_transmit+0x54>)
{
 100983c:	b085      	sub	sp, #20
    if (procedure_is_running())
 100983e:	7823      	ldrb	r3, [r4, #0]
 1009840:	b313      	cbz	r3, 1009888 <frame_transmit+0x50>
    bool first_transmit_attempt     = (0 == m_nb);
 1009842:	4b13      	ldr	r3, [pc, #76]	; (1009890 <frame_transmit+0x58>)
 1009844:	781d      	ldrb	r5, [r3, #0]
    bool coex_requires_boosted_prio = (nrf_802154_pib_coex_tx_request_mode_get() ==
 1009846:	f7fe fddf 	bl	1008408 <nrf_802154_pib_coex_tx_request_mode_get>
    if (first_transmit_attempt && coex_requires_boosted_prio)
 100984a:	b935      	cbnz	r5, 100985a <frame_transmit+0x22>
 100984c:	2802      	cmp	r0, #2
 100984e:	d104      	bne.n	100985a <frame_transmit+0x22>
        if (!nrf_802154_rsch_delayed_timeslot_priority_update(NRF_802154_RESERVED_CSMACA_ID,
 1009850:	2104      	movs	r1, #4
 1009852:	f06f 0002 	mvn.w	r0, #2
 1009856:	f006 fbdc 	bl	1010012 <nrf_802154_rsch_delayed_timeslot_priority_update>
        nrf_802154_transmit_params_t params =
 100985a:	4b0e      	ldr	r3, [pc, #56]	; (1009894 <frame_transmit+0x5c>)
 100985c:	2000      	movs	r0, #0
 100985e:	881b      	ldrh	r3, [r3, #0]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 1009860:	4a0d      	ldr	r2, [pc, #52]	; (1009898 <frame_transmit+0x60>)
        nrf_802154_transmit_params_t params =
 1009862:	f8ad 300c 	strh.w	r3, [sp, #12]
 1009866:	2301      	movs	r3, #1
 1009868:	f88d 300e 	strb.w	r3, [sp, #14]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100986c:	4b0b      	ldr	r3, [pc, #44]	; (100989c <frame_transmit+0x64>)
 100986e:	2103      	movs	r1, #3
 1009870:	9300      	str	r3, [sp, #0]
 1009872:	6812      	ldr	r2, [r2, #0]
 1009874:	ab03      	add	r3, sp, #12
        nrf_802154_transmit_params_t params =
 1009876:	f88d 000f 	strb.w	r0, [sp, #15]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100987a:	f005 fac5 	bl	100ee08 <nrf_802154_request_transmit>
 100987e:	b918      	cbnz	r0, 1009888 <frame_transmit+0x50>
    if (procedure_is_running())
 1009880:	7823      	ldrb	r3, [r4, #0]
 1009882:	b10b      	cbz	r3, 1009888 <frame_transmit+0x50>
 1009884:	f7ff ffba 	bl	10097fc <channel_busy.part.0>
}
 1009888:	b005      	add	sp, #20
 100988a:	bd30      	pop	{r4, r5, pc}
 100988c:	21004744 	.word	0x21004744
 1009890:	21004745 	.word	0x21004745
 1009894:	21004742 	.word	0x21004742
 1009898:	210034c0 	.word	0x210034c0
 100989c:	010097d5 	.word	0x010097d5

010098a0 <nrf_802154_csma_ca_start>:

void nrf_802154_csma_ca_start(uint8_t                                      * p_data,
                              const nrf_802154_transmit_csma_ca_metadata_t * p_metadata)
{
 10098a0:	b508      	push	{r3, lr}
    nrf_802154_stat_timestamp_write(last_csmaca_start_timestamp, ts);
#endif

    assert(!procedure_is_running());

    mp_data      = p_data;
 10098a2:	4b09      	ldr	r3, [pc, #36]	; (10098c8 <nrf_802154_csma_ca_start+0x28>)
    m_data_props = p_metadata->frame_props;
 10098a4:	880a      	ldrh	r2, [r1, #0]
    mp_data      = p_data;
 10098a6:	6018      	str	r0, [r3, #0]
    m_data_props = p_metadata->frame_props;
 10098a8:	4b08      	ldr	r3, [pc, #32]	; (10098cc <nrf_802154_csma_ca_start+0x2c>)
 10098aa:	801a      	strh	r2, [r3, #0]
    m_nb         = 0;
 10098ac:	2200      	movs	r2, #0
 10098ae:	4b08      	ldr	r3, [pc, #32]	; (10098d0 <nrf_802154_csma_ca_start+0x30>)
 10098b0:	701a      	strb	r2, [r3, #0]
    m_be         = nrf_802154_pib_csmaca_min_be_get();
 10098b2:	f7fe fdaf 	bl	1008414 <nrf_802154_pib_csmaca_min_be_get>
    m_is_running = true;
 10098b6:	2201      	movs	r2, #1
    m_be         = nrf_802154_pib_csmaca_min_be_get();
 10098b8:	4b06      	ldr	r3, [pc, #24]	; (10098d4 <nrf_802154_csma_ca_start+0x34>)
 10098ba:	7018      	strb	r0, [r3, #0]
    m_is_running = true;
 10098bc:	4b06      	ldr	r3, [pc, #24]	; (10098d8 <nrf_802154_csma_ca_start+0x38>)
 10098be:	701a      	strb	r2, [r3, #0]

    random_backoff_start();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 10098c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    random_backoff_start();
 10098c4:	f7ff bf32 	b.w	100972c <random_backoff_start>
 10098c8:	210034c0 	.word	0x210034c0
 10098cc:	21004742 	.word	0x21004742
 10098d0:	21004745 	.word	0x21004745
 10098d4:	21004741 	.word	0x21004741
 10098d8:	21004744 	.word	0x21004744

010098dc <nrf_802154_csma_ca_abort>:

bool nrf_802154_csma_ca_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    // Stop CSMA-CA only if request by the core or the higher layer.
    if ((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER))
 10098dc:	2901      	cmp	r1, #1
{
 10098de:	b508      	push	{r3, lr}
    if ((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER))
 10098e0:	d802      	bhi.n	10098e8 <nrf_802154_csma_ca_abort+0xc>

    bool result = true;

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (term_lvl >= NRF_802154_TERM_802154)
 10098e2:	b118      	cbz	r0, 10098ec <nrf_802154_csma_ca_abort+0x10>
    {
        // Stop CSMA-CA if termination level is high enough.
        procedure_stop();
 10098e4:	f7ff ff68 	bl	10097b8 <procedure_stop>
        return true;
 10098e8:	2001      	movs	r0, #1
 10098ea:	e003      	b.n	10098f4 <nrf_802154_csma_ca_abort+0x18>
    return m_is_running;
 10098ec:	4b02      	ldr	r3, [pc, #8]	; (10098f8 <nrf_802154_csma_ca_abort+0x1c>)
    }
    else
    {
        // Return success in case procedure is already stopped.
        result = !procedure_is_running();
 10098ee:	7818      	ldrb	r0, [r3, #0]
 10098f0:	f080 0001 	eor.w	r0, r0, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 10098f4:	bd08      	pop	{r3, pc}
 10098f6:	bf00      	nop
 10098f8:	21004744 	.word	0x21004744

010098fc <nrf_802154_csma_ca_tx_failed_hook>:
{
    bool result = true;

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    switch (error)
 10098fc:	3908      	subs	r1, #8
 10098fe:	2901      	cmp	r1, #1
{
 1009900:	b508      	push	{r3, lr}
    switch (error)
 1009902:	d803      	bhi.n	100990c <nrf_802154_csma_ca_tx_failed_hook+0x10>
         * shall be stopped.
         */
        case NRF_802154_TX_ERROR_KEY_ID_INVALID:
        /* Fallthrough. */
        case NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR:
            procedure_stop();
 1009904:	f7ff ff58 	bl	10097b8 <procedure_stop>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009908:	2001      	movs	r0, #1
 100990a:	bd08      	pop	{r3, pc}
            if (p_frame == mp_data)
 100990c:	4b05      	ldr	r3, [pc, #20]	; (1009924 <nrf_802154_csma_ca_tx_failed_hook+0x28>)
 100990e:	681b      	ldr	r3, [r3, #0]
 1009910:	4283      	cmp	r3, r0
 1009912:	d1f9      	bne.n	1009908 <nrf_802154_csma_ca_tx_failed_hook+0xc>
    return m_is_running;
 1009914:	4b04      	ldr	r3, [pc, #16]	; (1009928 <nrf_802154_csma_ca_tx_failed_hook+0x2c>)
    if (procedure_is_running())
 1009916:	781b      	ldrb	r3, [r3, #0]
 1009918:	2b00      	cmp	r3, #0
 100991a:	d0f5      	beq.n	1009908 <nrf_802154_csma_ca_tx_failed_hook+0xc>
}
 100991c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1009920:	f7ff bf6c 	b.w	10097fc <channel_busy.part.0>
 1009924:	210034c0 	.word	0x210034c0
 1009928:	21004744 	.word	0x21004744

0100992c <nrf_802154_csma_ca_tx_started_hook>:

bool nrf_802154_csma_ca_tx_started_hook(uint8_t * p_frame)
{
 100992c:	b508      	push	{r3, lr}
    if (p_frame == mp_data)
 100992e:	4b04      	ldr	r3, [pc, #16]	; (1009940 <nrf_802154_csma_ca_tx_started_hook+0x14>)
 1009930:	681b      	ldr	r3, [r3, #0]
 1009932:	4283      	cmp	r3, r0
 1009934:	d101      	bne.n	100993a <nrf_802154_csma_ca_tx_started_hook+0xe>
    {
        nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

        procedure_stop();
 1009936:	f7ff ff3f 	bl	10097b8 <procedure_stop>

        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    }

    return true;
}
 100993a:	2001      	movs	r0, #1
 100993c:	bd08      	pop	{r3, pc}
 100993e:	bf00      	nop
 1009940:	210034c0 	.word	0x210034c0

01009944 <nrf_802154_filter_frame_part>:
}

nrf_802154_rx_error_t nrf_802154_filter_frame_part(
    nrf_802154_frame_parser_data_t * p_frame_data,
    uint8_t                        * p_num_bytes)
{
 1009944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1009948:	460f      	mov	r7, r1
    nrf_802154_rx_error_t result        = NRF_802154_RX_ERROR_INVALID_FRAME;
    uint8_t               frame_type    = nrf_802154_frame_parser_frame_type_get(p_frame_data);
    uint8_t               frame_version = nrf_802154_frame_parser_frame_version_get(p_frame_data);
    uint8_t               psdu_length   = nrf_802154_frame_parser_frame_length_get(p_frame_data);

    switch (*p_num_bytes)
 100994a:	7809      	ldrb	r1, [r1, #0]
{
 100994c:	4605      	mov	r5, r0
    switch (*p_num_bytes)
 100994e:	2903      	cmp	r1, #3
 1009950:	d159      	bne.n	1009a06 <nrf_802154_filter_frame_part+0xc2>
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 1009952:	6803      	ldr	r3, [r0, #0]
    {
        case FCF_CHECK_OFFSET:
            if ((psdu_length < IMM_ACK_LENGTH) || (psdu_length > MAX_PACKET_SIZE))
 1009954:	781a      	ldrb	r2, [r3, #0]
 1009956:	3a05      	subs	r2, #5
 1009958:	2a7a      	cmp	r2, #122	; 0x7a
 100995a:	f200 80b7 	bhi.w	1009acc <nrf_802154_filter_frame_part+0x188>
            {
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
                break;
            }

            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
 100995e:	2201      	movs	r2, #1
 1009960:	785c      	ldrb	r4, [r3, #1]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1009962:	789e      	ldrb	r6, [r3, #2]
 1009964:	f005 f914 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
 1009968:	b920      	cbnz	r0, 1009974 <nrf_802154_filter_frame_part+0x30>
                break;
            }

            if (!frame_type_and_version_filter(frame_type, frame_version))
            {
                result = NRF_802154_RX_ERROR_INVALID_FRAME;
 100996a:	2401      	movs	r4, #1
            result = dst_addr_check(p_frame_data);
            break;
    }

    return result;
}
 100996c:	4620      	mov	r0, r4
 100996e:	b002      	add	sp, #8
 1009970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 1009974:	f004 0807 	and.w	r8, r4, #7
    switch (frame_type)
 1009978:	f1b8 0f05 	cmp.w	r8, #5
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 100997c:	f006 0630 	and.w	r6, r6, #48	; 0x30
 1009980:	d031      	beq.n	10099e6 <nrf_802154_filter_frame_part+0xa2>
 1009982:	f004 0204 	and.w	r2, r4, #4
 1009986:	d80e      	bhi.n	10099a6 <nrf_802154_filter_frame_part+0x62>
 1009988:	2a00      	cmp	r2, #0
 100998a:	d1ee      	bne.n	100996a <nrf_802154_filter_frame_part+0x26>
            result = (frame_version != FRAME_VERSION_3);
 100998c:	f1b6 0230 	subs.w	r2, r6, #48	; 0x30
 1009990:	bf18      	it	ne
 1009992:	2201      	movne	r2, #1
            if (!frame_type_and_version_filter(frame_type, frame_version))
 1009994:	2a00      	cmp	r2, #0
 1009996:	d0e8      	beq.n	100996a <nrf_802154_filter_frame_part+0x26>
    switch (frame_type)
 1009998:	0763      	lsls	r3, r4, #29
 100999a:	d506      	bpl.n	10099aa <nrf_802154_filter_frame_part+0x66>
 100999c:	f1b8 0f05 	cmp.w	r8, #5
 10099a0:	d003      	beq.n	10099aa <nrf_802154_filter_frame_part+0x66>
 10099a2:	2400      	movs	r4, #0
    return result;
 10099a4:	e7e2      	b.n	100996c <nrf_802154_filter_frame_part+0x28>
    switch (frame_type)
 10099a6:	2a00      	cmp	r2, #0
 10099a8:	d1fb      	bne.n	10099a2 <nrf_802154_filter_frame_part+0x5e>
    switch (frame_version)
 10099aa:	2e10      	cmp	r6, #16
 10099ac:	d003      	beq.n	10099b6 <nrf_802154_filter_frame_part+0x72>
 10099ae:	2e20      	cmp	r6, #32
 10099b0:	d022      	beq.n	10099f8 <nrf_802154_filter_frame_part+0xb4>
 10099b2:	2e00      	cmp	r6, #0
 10099b4:	d1d9      	bne.n	100996a <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
 10099b6:	682b      	ldr	r3, [r5, #0]
 10099b8:	789c      	ldrb	r4, [r3, #2]
 10099ba:	f004 040c 	and.w	r4, r4, #12
    switch (nrf_802154_frame_parser_dst_addr_type_get(p_frame_data))
 10099be:	2c08      	cmp	r4, #8
 10099c0:	d015      	beq.n	10099ee <nrf_802154_filter_frame_part+0xaa>
 10099c2:	2c0c      	cmp	r4, #12
 10099c4:	d015      	beq.n	10099f2 <nrf_802154_filter_frame_part+0xae>
 10099c6:	2c00      	cmp	r4, #0
 10099c8:	d1cf      	bne.n	100996a <nrf_802154_filter_frame_part+0x26>
            if (nrf_802154_pib_pan_coord_get() || (frame_type == FRAME_TYPE_BEACON))
 10099ca:	f7fe fc7b 	bl	10082c4 <nrf_802154_pib_pan_coord_get>
 10099ce:	b910      	cbnz	r0, 10099d6 <nrf_802154_filter_frame_part+0x92>
 10099d0:	f1b8 0f00 	cmp.w	r8, #0
 10099d4:	d14b      	bne.n	1009a6e <nrf_802154_filter_frame_part+0x12a>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 10099d6:	682b      	ldr	r3, [r5, #0]
 10099d8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 10099dc:	2b00      	cmp	r3, #0
 10099de:	dac4      	bge.n	100996a <nrf_802154_filter_frame_part+0x26>
                        *p_num_bytes = PANID_CHECK_OFFSET;
 10099e0:	2306      	movs	r3, #6
                *p_num_bytes = end_offset;
 10099e2:	703b      	strb	r3, [r7, #0]
                result       = NRF_802154_RX_ERROR_NONE;
 10099e4:	e7c2      	b.n	100996c <nrf_802154_filter_frame_part+0x28>
            result = (frame_version == FRAME_VERSION_0);
 10099e6:	fab6 f286 	clz	r2, r6
 10099ea:	0952      	lsrs	r2, r2, #5
            break;
 10099ec:	e7d2      	b.n	1009994 <nrf_802154_filter_frame_part+0x50>
            *p_num_bytes = SHORT_ADDR_CHECK_OFFSET;
 10099ee:	703c      	strb	r4, [r7, #0]
            break;
 10099f0:	e7d7      	b.n	10099a2 <nrf_802154_filter_frame_part+0x5e>
            *p_num_bytes = EXTENDED_ADDR_CHECK_OFFSET;
 10099f2:	230e      	movs	r3, #14
 10099f4:	703b      	strb	r3, [r7, #0]
            break;
 10099f6:	e7d4      	b.n	10099a2 <nrf_802154_filter_frame_part+0x5e>
    switch (frame_type)
 10099f8:	f014 0404 	ands.w	r4, r4, #4
 10099fc:	d1b5      	bne.n	100996a <nrf_802154_filter_frame_part+0x26>
 * @returns  End offset of the destination addressing section.
 */
static inline uint8_t nrf_802154_frame_parser_dst_addressing_end_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.dst_addressing_end_offset;
 10099fe:	7ceb      	ldrb	r3, [r5, #19]
            if (end_offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009a00:	2bff      	cmp	r3, #255	; 0xff
 1009a02:	d1ee      	bne.n	10099e2 <nrf_802154_filter_frame_part+0x9e>
 1009a04:	e7b1      	b.n	100996a <nrf_802154_filter_frame_part+0x26>
            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
 1009a06:	2202      	movs	r2, #2
 1009a08:	f005 f8c2 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
 1009a0c:	2800      	cmp	r0, #0
 1009a0e:	d0ac      	beq.n	100996a <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->mhr.dst.panid_offset;
 1009a10:	79ae      	ldrb	r6, [r5, #6]
    return &p_parser_data->p_frame[offset];
 1009a12:	682b      	ldr	r3, [r5, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009a14:	2eff      	cmp	r6, #255	; 0xff
        return NULL;
 1009a16:	bf08      	it	eq
 1009a18:	2600      	moveq	r6, #0
    return p_parser_data->mhr.dst.addr_offset;
 1009a1a:	79ec      	ldrb	r4, [r5, #7]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 1009a1c:	f893 8001 	ldrb.w	r8, [r3, #1]
    return &p_parser_data->p_frame[offset];
 1009a20:	bf18      	it	ne
 1009a22:	18f6      	addne	r6, r6, r3
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009a24:	2cff      	cmp	r4, #255	; 0xff
        return NULL;
 1009a26:	bf0c      	ite	eq
 1009a28:	2400      	moveq	r4, #0
    return &p_parser_data->p_frame[offset];
 1009a2a:	18e4      	addne	r4, r4, r3
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 1009a2c:	f008 0807 	and.w	r8, r8, #7
    if (p_dst_panid != NULL)
 1009a30:	b1fe      	cbz	r6, 1009a72 <nrf_802154_filter_frame_part+0x12e>
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
 1009a32:	f7fe fc9b 	bl	100836c <nrf_802154_pib_pan_id_get>
 1009a36:	2202      	movs	r2, #2
 1009a38:	4601      	mov	r1, r0
 1009a3a:	4630      	mov	r0, r6
 1009a3c:	f004 fd82 	bl	100e544 <memcmp>
 1009a40:	b1b8      	cbz	r0, 1009a72 <nrf_802154_filter_frame_part+0x12e>
        (0 == memcmp(p_panid, BROADCAST_ADDRESS, PAN_ID_SIZE)))
 1009a42:	4b23      	ldr	r3, [pc, #140]	; (1009ad0 <nrf_802154_filter_frame_part+0x18c>)
 1009a44:	2202      	movs	r2, #2
 1009a46:	881f      	ldrh	r7, [r3, #0]
 1009a48:	4630      	mov	r0, r6
 1009a4a:	a901      	add	r1, sp, #4
 1009a4c:	f8ad 7004 	strh.w	r7, [sp, #4]
 1009a50:	f004 fd78 	bl	100e544 <memcmp>
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
 1009a54:	b168      	cbz	r0, 1009a72 <nrf_802154_filter_frame_part+0x12e>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
 1009a56:	f1b8 0f00 	cmp.w	r8, #0
 1009a5a:	d108      	bne.n	1009a6e <nrf_802154_filter_frame_part+0x12a>
             (0 == memcmp(nrf_802154_pib_pan_id_get(), BROADCAST_ADDRESS, PAN_ID_SIZE)))
 1009a5c:	f7fe fc86 	bl	100836c <nrf_802154_pib_pan_id_get>
 1009a60:	2202      	movs	r2, #2
 1009a62:	4669      	mov	r1, sp
 1009a64:	f8ad 7000 	strh.w	r7, [sp]
 1009a68:	f004 fd6c 	bl	100e544 <memcmp>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
 1009a6c:	b108      	cbz	r0, 1009a72 <nrf_802154_filter_frame_part+0x12e>
            return dst_extended_addr_check(p_dst_addr) ? NRF_802154_RX_ERROR_NONE :
 1009a6e:	2403      	movs	r4, #3
 1009a70:	e77c      	b.n	100996c <nrf_802154_filter_frame_part+0x28>
    uint8_t dst_addr_size =
 1009a72:	b13c      	cbz	r4, 1009a84 <nrf_802154_filter_frame_part+0x140>
    return p_parser_data->helper.dst_addr_size;
 1009a74:	7c6d      	ldrb	r5, [r5, #17]
    switch (dst_addr_size)
 1009a76:	2d02      	cmp	r5, #2
 1009a78:	d00c      	beq.n	1009a94 <nrf_802154_filter_frame_part+0x150>
 1009a7a:	2d08      	cmp	r5, #8
 1009a7c:	d021      	beq.n	1009ac2 <nrf_802154_filter_frame_part+0x17e>
 1009a7e:	2d00      	cmp	r5, #0
 1009a80:	f47f af73 	bne.w	100996a <nrf_802154_filter_frame_part+0x26>
            return (nrf_802154_pib_pan_coord_get() ||
 1009a84:	f7fe fc1e 	bl	10082c4 <nrf_802154_pib_pan_coord_get>
                     FRAME_TYPE_BEACON)) ? NRF_802154_RX_ERROR_NONE :
 1009a88:	2800      	cmp	r0, #0
 1009a8a:	d18a      	bne.n	10099a2 <nrf_802154_filter_frame_part+0x5e>
            return (nrf_802154_pib_pan_coord_get() ||
 1009a8c:	f1b8 0f00 	cmp.w	r8, #0
 1009a90:	d087      	beq.n	10099a2 <nrf_802154_filter_frame_part+0x5e>
 1009a92:	e7ec      	b.n	1009a6e <nrf_802154_filter_frame_part+0x12a>
    if ((0 == memcmp(p_dst_addr, nrf_802154_pib_short_address_get(), SHORT_ADDRESS_SIZE)) ||
 1009a94:	f7fe fc82 	bl	100839c <nrf_802154_pib_short_address_get>
 1009a98:	462a      	mov	r2, r5
 1009a9a:	4601      	mov	r1, r0
 1009a9c:	4620      	mov	r0, r4
 1009a9e:	f004 fd51 	bl	100e544 <memcmp>
 1009aa2:	2800      	cmp	r0, #0
 1009aa4:	f43f af7d 	beq.w	10099a2 <nrf_802154_filter_frame_part+0x5e>
        (0 == memcmp(p_dst_addr, BROADCAST_ADDRESS, SHORT_ADDRESS_SIZE)))
 1009aa8:	462a      	mov	r2, r5
 1009aaa:	4b09      	ldr	r3, [pc, #36]	; (1009ad0 <nrf_802154_filter_frame_part+0x18c>)
 1009aac:	a901      	add	r1, sp, #4
 1009aae:	881b      	ldrh	r3, [r3, #0]
 1009ab0:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (0 == memcmp(p_dst_addr, nrf_802154_pib_extended_address_get(), EXTENDED_ADDRESS_SIZE))
 1009ab4:	4620      	mov	r0, r4
 1009ab6:	f004 fd45 	bl	100e544 <memcmp>
 1009aba:	2800      	cmp	r0, #0
 1009abc:	f43f af71 	beq.w	10099a2 <nrf_802154_filter_frame_part+0x5e>
 1009ac0:	e7d5      	b.n	1009a6e <nrf_802154_filter_frame_part+0x12a>
 1009ac2:	f7fe fc5f 	bl	1008384 <nrf_802154_pib_extended_address_get>
 1009ac6:	462a      	mov	r2, r5
 1009ac8:	4601      	mov	r1, r0
 1009aca:	e7f3      	b.n	1009ab4 <nrf_802154_filter_frame_part+0x170>
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
 1009acc:	2409      	movs	r4, #9
 1009ace:	e74d      	b.n	100996c <nrf_802154_filter_frame_part+0x28>
 1009ad0:	010102e8 	.word	0x010102e8

01009ad4 <parse_state_advance>:
    return requested_parse_level > p_parser_data->parse_level;
}

static bool parse_state_advance(nrf_802154_frame_parser_data_t * p_parser_data,
                                nrf_802154_frame_parser_level_t  requested_parse_level)
{
 1009ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009ad8:	4604      	mov	r4, r0
 1009ada:	460e      	mov	r6, r1
                return false;
        }

        if (result)
        {
            p_parser_data->parse_level = next_level;
 1009adc:	f04f 0a02 	mov.w	sl, #2
        switch (p_parser_data->parse_level)
 1009ae0:	f894 b004 	ldrb.w	fp, [r4, #4]
 1009ae4:	f1bb 0f06 	cmp.w	fp, #6
 1009ae8:	d808      	bhi.n	1009afc <parse_state_advance+0x28>
 1009aea:	e8df f01b 	tbh	[pc, fp, lsl #1]
 1009aee:	000a      	.short	0x000a
 1009af0:	007c0074 	.word	0x007c0074
 1009af4:	00cb0084 	.word	0x00cb0084
 1009af8:	011800d2 	.word	0x011800d2
 1009afc:	2000      	movs	r0, #0
        }
    }
    while (result);

    return p_parser_data->parse_level >= requested_parse_level;
}
 1009afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (level_is_elevated(p_parser_data, requested_parse_level))
 1009b02:	2e00      	cmp	r6, #0
 1009b04:	f000 8105 	beq.w	1009d12 <parse_state_advance+0x23e>
    if (offset > p_parser_data->valid_data_len)
 1009b08:	7963      	ldrb	r3, [r4, #5]
 1009b0a:	2b02      	cmp	r3, #2
 1009b0c:	f240 8102 	bls.w	1009d14 <parse_state_advance+0x240>
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 1009b10:	6820      	ldr	r0, [r4, #0]
 1009b12:	7881      	ldrb	r1, [r0, #2]
        offset += DSN_SIZE;
 1009b14:	f011 0f01 	tst.w	r1, #1
 1009b18:	bf14      	ite	ne
 1009b1a:	2303      	movne	r3, #3
 1009b1c:	2304      	moveq	r3, #4
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
 1009b1e:	068a      	lsls	r2, r1, #26
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
 1009b20:	f001 070c 	and.w	r7, r1, #12
 1009b24:	d404      	bmi.n	1009b30 <parse_state_advance+0x5c>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 1009b26:	b1b7      	cbz	r7, 1009b56 <parse_state_advance+0x82>
        p_parser_data->mhr.dst.panid_offset = offset;
 1009b28:	71a3      	strb	r3, [r4, #6]
        offset                             += PAN_ID_SIZE;
 1009b2a:	3302      	adds	r3, #2
 1009b2c:	b2db      	uxtb	r3, r3
 1009b2e:	e012      	b.n	1009b56 <parse_state_advance+0x82>
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 1009b30:	7845      	ldrb	r5, [r0, #1]
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
 1009b32:	2f0c      	cmp	r7, #12
 1009b34:	f3c5 1580 	ubfx	r5, r5, #6, #1
    return (p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK) ==
 1009b38:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 1009b3c:	d105      	bne.n	1009b4a <parse_state_advance+0x76>
 1009b3e:	29c0      	cmp	r1, #192	; 0xc0
 1009b40:	f040 80ef 	bne.w	1009d22 <parse_state_advance+0x24e>
                return panid_compression ? false : true;
 1009b44:	f085 0501 	eor.w	r5, r5, #1
 1009b48:	e003      	b.n	1009b52 <parse_state_advance+0x7e>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 1009b4a:	2900      	cmp	r1, #0
 1009b4c:	d1eb      	bne.n	1009b26 <parse_state_advance+0x52>
            if (dst_addr_is_present(p_parser_data))
 1009b4e:	2f00      	cmp	r7, #0
 1009b50:	d1f8      	bne.n	1009b44 <parse_state_advance+0x70>
    if (dst_panid_is_present(p_parser_data))
 1009b52:	2d00      	cmp	r5, #0
 1009b54:	d1e8      	bne.n	1009b28 <parse_state_advance+0x54>
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
 1009b56:	7881      	ldrb	r1, [r0, #2]
 1009b58:	4a74      	ldr	r2, [pc, #464]	; (1009d2c <parse_state_advance+0x258>)
    if (dst_addr_is_present(p_parser_data))
 1009b5a:	f011 0f0c 	tst.w	r1, #12
        p_parser_data->mhr.dst.addr_offset = offset;
 1009b5e:	bf18      	it	ne
 1009b60:	71e3      	strbne	r3, [r4, #7]
 1009b62:	7881      	ldrb	r1, [r0, #2]
 1009b64:	f001 010c 	and.w	r1, r1, #12
 1009b68:	5c51      	ldrb	r1, [r2, r1]
    if (addr_size == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009b6a:	29ff      	cmp	r1, #255	; 0xff
 1009b6c:	f000 80d2 	beq.w	1009d14 <parse_state_advance+0x240>
    offset                                         += addr_size;
 1009b70:	440b      	add	r3, r1
 1009b72:	b2db      	uxtb	r3, r3
    p_parser_data->helper.dst_addr_size             = addr_size;
 1009b74:	7461      	strb	r1, [r4, #17]
    p_parser_data->helper.dst_addressing_end_offset = offset;
 1009b76:	74e3      	strb	r3, [r4, #19]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1009b78:	7887      	ldrb	r7, [r0, #2]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 1009b7a:	7841      	ldrb	r1, [r0, #1]
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
 1009b7c:	f017 0f20 	tst.w	r7, #32
 1009b80:	f3c1 1180 	ubfx	r1, r1, #6, #1
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1009b84:	f027 053f 	bic.w	r5, r7, #63	; 0x3f
 1009b88:	d107      	bne.n	1009b9a <parse_state_advance+0xc6>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 1009b8a:	b16d      	cbz	r5, 1009ba8 <parse_state_advance+0xd4>
            return panid_compression ? false : true;
 1009b8c:	f081 0101 	eor.w	r1, r1, #1
    if (src_panid_is_present(p_parser_data))
 1009b90:	b151      	cbz	r1, 1009ba8 <parse_state_advance+0xd4>
        p_parser_data->mhr.src.panid_offset = offset;
 1009b92:	7223      	strb	r3, [r4, #8]
        offset                             += PAN_ID_SIZE;
 1009b94:	3302      	adds	r3, #2
 1009b96:	b2db      	uxtb	r3, r3
 1009b98:	e006      	b.n	1009ba8 <parse_state_advance+0xd4>
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
 1009b9a:	f007 070c 	and.w	r7, r7, #12
 1009b9e:	2f0c      	cmp	r7, #12
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 1009ba0:	b2ed      	uxtb	r5, r5
 1009ba2:	d1f2      	bne.n	1009b8a <parse_state_advance+0xb6>
 1009ba4:	2dc0      	cmp	r5, #192	; 0xc0
 1009ba6:	d1f0      	bne.n	1009b8a <parse_state_advance+0xb6>
 1009ba8:	7881      	ldrb	r1, [r0, #2]
    if (src_addr_is_present(p_parser_data))
 1009baa:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
 1009bae:	d00a      	beq.n	1009bc6 <parse_state_advance+0xf2>
        p_parser_data->mhr.src.addr_offset = offset;
 1009bb0:	7263      	strb	r3, [r4, #9]
 1009bb2:	7881      	ldrb	r1, [r0, #2]
 1009bb4:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    switch (addr_type)
 1009bb8:	29c0      	cmp	r1, #192	; 0xc0
 1009bba:	d00a      	beq.n	1009bd2 <parse_state_advance+0xfe>
 1009bbc:	b119      	cbz	r1, 1009bc6 <parse_state_advance+0xf2>
 1009bbe:	2980      	cmp	r1, #128	; 0x80
 1009bc0:	f040 80a8 	bne.w	1009d14 <parse_state_advance+0x240>
 1009bc4:	2102      	movs	r1, #2
    offset                             += addr_size;
 1009bc6:	440b      	add	r3, r1
    p_parser_data->helper.addressing_end_offset = offset;
 1009bc8:	7523      	strb	r3, [r4, #20]
                    next_level = PARSE_LEVEL_FCF_OFFSETS;
 1009bca:	2301      	movs	r3, #1
    p_parser_data->helper.src_addr_size = addr_size;
 1009bcc:	74a1      	strb	r1, [r4, #18]
            p_parser_data->parse_level = next_level;
 1009bce:	7123      	strb	r3, [r4, #4]
    while (result);
 1009bd0:	e786      	b.n	1009ae0 <parse_state_advance+0xc>
            return EXTENDED_ADDRESS_SIZE;
 1009bd2:	2108      	movs	r1, #8
 1009bd4:	e7f7      	b.n	1009bc6 <parse_state_advance+0xf2>
                if (p_parser_data->valid_data_len >=
 1009bd6:	7961      	ldrb	r1, [r4, #5]
 1009bd8:	7ce3      	ldrb	r3, [r4, #19]
 1009bda:	4299      	cmp	r1, r3
 1009bdc:	f0c0 809a 	bcc.w	1009d14 <parse_state_advance+0x240>
            p_parser_data->parse_level = next_level;
 1009be0:	f884 a004 	strb.w	sl, [r4, #4]
    while (result);
 1009be4:	e77c      	b.n	1009ae0 <parse_state_advance+0xc>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.addressing_end_offset)
 1009be6:	7961      	ldrb	r1, [r4, #5]
 1009be8:	7d23      	ldrb	r3, [r4, #20]
 1009bea:	4299      	cmp	r1, r3
 1009bec:	f0c0 8092 	bcc.w	1009d14 <parse_state_advance+0x240>
            p_parser_data->parse_level = next_level;
 1009bf0:	f04f 0303 	mov.w	r3, #3
 1009bf4:	e7eb      	b.n	1009bce <parse_state_advance+0xfa>
                if (level_is_elevated(p_parser_data, requested_parse_level))
 1009bf6:	2e03      	cmp	r6, #3
 1009bf8:	f240 808c 	bls.w	1009d14 <parse_state_advance+0x240>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 1009bfc:	6825      	ldr	r5, [r4, #0]
    uint8_t offset = p_parser_data->helper.addressing_end_offset;
 1009bfe:	7d21      	ldrb	r1, [r4, #20]
 1009c00:	786b      	ldrb	r3, [r5, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_parser_data) == false)
 1009c02:	071b      	lsls	r3, r3, #28
 1009c04:	d402      	bmi.n	1009c0c <parse_state_advance+0x138>
        p_parser_data->helper.aux_sec_hdr_end_offset = offset;
 1009c06:	7561      	strb	r1, [r4, #21]
                    next_level = PARSE_LEVEL_SEC_CTRL_OFFSETS;
 1009c08:	2304      	movs	r3, #4
 1009c0a:	e7e0      	b.n	1009bce <parse_state_advance+0xfa>
    if ((offset + SECURITY_CONTROL_SIZE) > p_parser_data->valid_data_len)
 1009c0c:	7960      	ldrb	r0, [r4, #5]
 1009c0e:	1c4b      	adds	r3, r1, #1
 1009c10:	4283      	cmp	r3, r0
 1009c12:	dc7f      	bgt.n	1009d14 <parse_state_advance+0x240>
    offset += SECURITY_CONTROL_SIZE;
 1009c14:	b24a      	sxtb	r2, r1
 1009c16:	1c53      	adds	r3, r2, #1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009c18:	29ff      	cmp	r1, #255	; 0xff
    p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset = offset;
 1009c1a:	72a1      	strb	r1, [r4, #10]
    offset += SECURITY_CONTROL_SIZE;
 1009c1c:	b2db      	uxtb	r3, r3
 1009c1e:	d002      	beq.n	1009c26 <parse_state_advance+0x152>
    if (nrf_802154_frame_parser_sec_ctrl_fc_suppress_bit_is_set(p_parser_data) == false)
 1009c20:	5c68      	ldrb	r0, [r5, r1]
 1009c22:	0687      	lsls	r7, r0, #26
 1009c24:	d405      	bmi.n	1009c32 <parse_state_advance+0x15e>
        p_parser_data->mhr.aux_sec_hdr.frame_counter_offset = offset;
 1009c26:	72e3      	strb	r3, [r4, #11]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009c28:	29ff      	cmp	r1, #255	; 0xff
        offset += FRAME_COUNTER_SIZE;
 1009c2a:	f102 0305 	add.w	r3, r2, #5
 1009c2e:	b2db      	uxtb	r3, r3
 1009c30:	d024      	beq.n	1009c7c <parse_state_advance+0x1a8>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 1009c32:	5c6a      	ldrb	r2, [r5, r1]
    if (key_id_mode != KEY_ID_MODE_0)
 1009c34:	f012 0f18 	tst.w	r2, #24
 1009c38:	f3c2 00c1 	ubfx	r0, r2, #3, #2
 1009c3c:	d00a      	beq.n	1009c54 <parse_state_advance+0x180>
    key_src_size = key_source_size_get(key_id_mode);
 1009c3e:	f004 ff7e 	bl	100eb3e <key_source_size_get>
        p_parser_data->mhr.aux_sec_hdr.key_id_offset = offset;
 1009c42:	7323      	strb	r3, [r4, #12]
        if (key_src_size > 0)
 1009c44:	b110      	cbz	r0, 1009c4c <parse_state_advance+0x178>
            p_parser_data->mhr.aux_sec_hdr.key_src_offset = offset;
 1009c46:	7363      	strb	r3, [r4, #13]
            offset += key_src_size;
 1009c48:	4403      	add	r3, r0
 1009c4a:	b2db      	uxtb	r3, r3
        p_parser_data->mhr.aux_sec_hdr.key_idx_offset = offset;
 1009c4c:	73a3      	strb	r3, [r4, #14]
        offset += KEY_IDX_SIZE;
 1009c4e:	3301      	adds	r3, #1
        p_parser_data->helper.key_src_size            = key_src_size;
 1009c50:	75a0      	strb	r0, [r4, #22]
        offset += KEY_IDX_SIZE;
 1009c52:	b2db      	uxtb	r3, r3
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009c54:	29ff      	cmp	r1, #255	; 0xff
 1009c56:	d011      	beq.n	1009c7c <parse_state_advance+0x1a8>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 1009c58:	5c6a      	ldrb	r2, [r5, r1]
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_parser_data))
 1009c5a:	f002 0207 	and.w	r2, r2, #7
 1009c5e:	3a01      	subs	r2, #1
 1009c60:	2a06      	cmp	r2, #6
 1009c62:	d80b      	bhi.n	1009c7c <parse_state_advance+0x1a8>
 1009c64:	e8df f002 	tbb	[pc, r2]
 1009c68:	0a08040c 	.word	0x0a08040c
 1009c6c:	040c      	.short	0x040c
 1009c6e:	08          	.byte	0x08
 1009c6f:	00          	.byte	0x00
 1009c70:	2208      	movs	r2, #8
    p_parser_data->helper.mic_size               = mic_size_get(p_parser_data);
 1009c72:	75e2      	strb	r2, [r4, #23]
    p_parser_data->helper.aux_sec_hdr_end_offset = offset;
 1009c74:	7563      	strb	r3, [r4, #21]
 1009c76:	e7c7      	b.n	1009c08 <parse_state_advance+0x134>
            return MIC_128_SIZE;
 1009c78:	2210      	movs	r2, #16
 1009c7a:	e7fa      	b.n	1009c72 <parse_state_advance+0x19e>
            return 0;
 1009c7c:	2200      	movs	r2, #0
 1009c7e:	e7f8      	b.n	1009c72 <parse_state_advance+0x19e>
            return MIC_32_SIZE;
 1009c80:	2204      	movs	r2, #4
 1009c82:	e7f6      	b.n	1009c72 <parse_state_advance+0x19e>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.aux_sec_hdr_end_offset)
 1009c84:	7961      	ldrb	r1, [r4, #5]
 1009c86:	7d63      	ldrb	r3, [r4, #21]
 1009c88:	4299      	cmp	r1, r3
 1009c8a:	d343      	bcc.n	1009d14 <parse_state_advance+0x240>
            p_parser_data->parse_level = next_level;
 1009c8c:	f04f 0305 	mov.w	r3, #5
 1009c90:	e79d      	b.n	1009bce <parse_state_advance+0xfa>
                if (level_is_elevated(p_parser_data, requested_parse_level))
 1009c92:	2e05      	cmp	r6, #5
 1009c94:	d93e      	bls.n	1009d14 <parse_state_advance+0x240>
    return p_parser_data->p_frame[PHR_OFFSET];
 1009c96:	f8d4 8000 	ldr.w	r8, [r4]
    if (((psdu_length + PHR_SIZE) != p_parser_data->valid_data_len) ||
 1009c9a:	7961      	ldrb	r1, [r4, #5]
 1009c9c:	f898 3000 	ldrb.w	r3, [r8]
 1009ca0:	1c58      	adds	r0, r3, #1
 1009ca2:	4288      	cmp	r0, r1
 1009ca4:	d136      	bne.n	1009d14 <parse_state_advance+0x240>
 1009ca6:	061a      	lsls	r2, r3, #24
 1009ca8:	d434      	bmi.n	1009d14 <parse_state_advance+0x240>
    return (p_parser_data->p_frame[IE_PRESENT_OFFSET] & IE_PRESENT_BIT) ? true : false;
 1009caa:	f898 3002 	ldrb.w	r3, [r8, #2]
    uint8_t         offset      = p_parser_data->helper.aux_sec_hdr_end_offset;
 1009cae:	7d65      	ldrb	r5, [r4, #21]
    if (nrf_802154_frame_parser_ie_present_bit_is_set(p_parser_data))
 1009cb0:	079b      	lsls	r3, r3, #30
 1009cb2:	d51b      	bpl.n	1009cec <parse_state_advance+0x218>
        p_parser_data->mhr.header_ie_offset = offset;
 1009cb4:	73e5      	strb	r5, [r4, #15]
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 1009cb6:	f898 7000 	ldrb.w	r7, [r8]
        p_ie_header = &p_parser_data->p_frame[offset];
 1009cba:	eb08 0905 	add.w	r9, r8, r5
 1009cbe:	3f01      	subs	r7, #1
 1009cc0:	b2ff      	uxtb	r7, r7
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009cc2:	2fff      	cmp	r7, #255	; 0xff
        return NULL;
 1009cc4:	bf0c      	ite	eq
 1009cc6:	2700      	moveq	r7, #0
    return &p_parser_data->p_frame[offset];
 1009cc8:	4447      	addne	r7, r8
        while (nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_mfr) == false)
 1009cca:	4639      	mov	r1, r7
 1009ccc:	4648      	mov	r0, r9
 1009cce:	f004 ff23 	bl	100eb18 <nrf_802154_frame_parser_ie_iterator_end>
 1009cd2:	b958      	cbnz	r0, 1009cec <parse_state_advance+0x218>
 * @returns  Length of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_length_get(const uint8_t * p_ie_iterator)
{
    return p_ie_iterator[IE_LENGTH_OFFSET] & IE_LENGTH_MASK;
 1009cd4:	f899 0000 	ldrb.w	r0, [r9]
 1009cd8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 */
static inline const uint8_t * nrf_802154_frame_parser_ie_iterator_next(
    const uint8_t * p_ie_iterator)
{
    return nrf_802154_frame_parser_ie_content_address_get(p_ie_iterator)
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
 1009cdc:	3002      	adds	r0, #2
 1009cde:	4481      	add	r9, r0
            if (p_iterator > p_mfr)
 1009ce0:	454f      	cmp	r7, r9
 1009ce2:	d317      	bcc.n	1009d14 <parse_state_advance+0x240>
            else if (p_iterator == p_mfr)
 1009ce4:	d10b      	bne.n	1009cfe <parse_state_advance+0x22a>
                offset = p_iterator - p_parser_data->p_frame;
 1009ce6:	eba7 0508 	sub.w	r5, r7, r8
                offset = nrf_802154_frame_parser_ie_content_address_get(p_iterator) -
 1009cea:	b2ed      	uxtb	r5, r5
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 1009cec:	f898 3000 	ldrb.w	r3, [r8]
 1009cf0:	3b01      	subs	r3, #1
    if (offset != nrf_802154_frame_parser_mfr_offset_get(p_parser_data))
 1009cf2:	b2db      	uxtb	r3, r3
 1009cf4:	42ab      	cmp	r3, r5
        p_parser_data->mac_payload.mac_payload_offset = offset;
 1009cf6:	bf18      	it	ne
 1009cf8:	7425      	strbne	r5, [r4, #16]
                    next_level = PARSE_LEVEL_FULL;
 1009cfa:	2306      	movs	r3, #6
 1009cfc:	e767      	b.n	1009bce <parse_state_advance+0xfa>
            else if (nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_mfr))
 1009cfe:	4648      	mov	r0, r9
 1009d00:	f004 ff0a 	bl	100eb18 <nrf_802154_frame_parser_ie_iterator_end>
 1009d04:	2800      	cmp	r0, #0
 1009d06:	d0e0      	beq.n	1009cca <parse_state_advance+0x1f6>
    return p_ie_iterator + IE_DATA_OFFSET;
 1009d08:	f109 0502 	add.w	r5, r9, #2
                offset = nrf_802154_frame_parser_ie_content_address_get(p_iterator) -
 1009d0c:	eba5 0508 	sub.w	r5, r5, r8
 1009d10:	e7eb      	b.n	1009cea <parse_state_advance+0x216>
 1009d12:	46b3      	mov	fp, r6
    return p_parser_data->parse_level >= requested_parse_level;
 1009d14:	455e      	cmp	r6, fp
 1009d16:	bf8c      	ite	hi
 1009d18:	2000      	movhi	r0, #0
 1009d1a:	2001      	movls	r0, #1
 1009d1c:	e6ef      	b.n	1009afe <parse_state_advance+0x2a>
                return true;
 1009d1e:	2001      	movs	r0, #1
 1009d20:	e6ed      	b.n	1009afe <parse_state_advance+0x2a>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 1009d22:	2900      	cmp	r1, #0
 1009d24:	f43f af0e 	beq.w	1009b44 <parse_state_advance+0x70>
 1009d28:	e6fe      	b.n	1009b28 <parse_state_advance+0x54>
 1009d2a:	bf00      	nop
 1009d2c:	010105e4 	.word	0x010105e4

01009d30 <nrf_802154_security_pib_init>:

nrf_802154_security_error_t nrf_802154_security_pib_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    {
        m_key_storage[i].taken = false;
 1009d30:	2000      	movs	r0, #0
 1009d32:	4b04      	ldr	r3, [pc, #16]	; (1009d44 <nrf_802154_security_pib_init+0x14>)
 1009d34:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 1009d38:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
 1009d3c:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
    }

    return NRF_802154_SECURITY_ERROR_NONE;
}
 1009d40:	4770      	bx	lr
 1009d42:	bf00      	nop
 1009d44:	210034c8 	.word	0x210034c8

01009d48 <nrf_802154_security_pib_frame_counter_get_next>:
}

nrf_802154_security_error_t nrf_802154_security_pib_frame_counter_get_next(
    uint32_t            * p_frame_counter,
    nrf_802154_key_id_t * p_id)
{
 1009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1009d4c:	4e18      	ldr	r6, [pc, #96]	; (1009db0 <nrf_802154_security_pib_frame_counter_get_next+0x68>)
 1009d4e:	4680      	mov	r8, r0
 1009d50:	4689      	mov	r9, r1
    assert(p_id != NULL);

    uint32_t * p_frame_counter_to_use = NULL;
    uint32_t   fc;

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 1009d52:	2500      	movs	r5, #0
 1009d54:	4634      	mov	r4, r6
 1009d56:	f04f 0a24 	mov.w	sl, #36	; 0x24
    {
        if (key_matches(&m_key_storage[i], p_id))
 1009d5a:	4649      	mov	r1, r9
 1009d5c:	4630      	mov	r0, r6
 1009d5e:	fb0a f705 	mul.w	r7, sl, r5
 1009d62:	f004 ff1d 	bl	100eba0 <key_matches>
 1009d66:	b170      	cbz	r0, 1009d86 <nrf_802154_security_pib_frame_counter_get_next+0x3e>
        {
            if (m_key_storage[i].use_global_frame_counter)
 1009d68:	19e3      	adds	r3, r4, r7
 1009d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 1009d6e:	b9e3      	cbnz	r3, 1009daa <nrf_802154_security_pib_frame_counter_get_next+0x62>
            {
                p_frame_counter_to_use = &m_global_frame_counter;
            }
            else
            {
                p_frame_counter_to_use = &m_key_storage[i].frame_counter;
 1009d70:	f107 031c 	add.w	r3, r7, #28
 1009d74:	4423      	add	r3, r4
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 1009d76:	e853 2f00 	ldrex	r2, [r3]

    do
    {
        fc = __LDREXW(p_frame_counter_to_use);

        if (fc == UINT32_MAX)
 1009d7a:	1c51      	adds	r1, r2, #1
 1009d7c:	d10b      	bne.n	1009d96 <nrf_802154_security_pib_frame_counter_get_next+0x4e>
  \brief   Remove the exclusive lock
  \details Removes the exclusive lock which is created by LDREX.
 */
__STATIC_FORCEINLINE void __CLREX(void)
{
  __ASM volatile ("clrex" ::: "memory");
 1009d7e:	f3bf 8f2f 	clrex
        {
            __CLREX();
            return NRF_802154_SECURITY_ERROR_FRAME_COUNTER_OVERFLOW;
 1009d82:	2006      	movs	r0, #6
 1009d84:	e005      	b.n	1009d92 <nrf_802154_security_pib_frame_counter_get_next+0x4a>
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 1009d86:	3501      	adds	r5, #1
 1009d88:	2d03      	cmp	r5, #3
 1009d8a:	f106 0624 	add.w	r6, r6, #36	; 0x24
 1009d8e:	d1e4      	bne.n	1009d5a <nrf_802154_security_pib_frame_counter_get_next+0x12>
        return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
 1009d90:	2002      	movs	r0, #2
    while (__STREXW(fc + 1, p_frame_counter_to_use));

    *p_frame_counter = *p_frame_counter_to_use - 1;

    return NRF_802154_SECURITY_ERROR_NONE;
}
 1009d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (__STREXW(fc + 1, p_frame_counter_to_use));
 1009d96:	3201      	adds	r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 1009d98:	e843 2000 	strex	r0, r2, [r3]
 1009d9c:	2800      	cmp	r0, #0
 1009d9e:	d1ea      	bne.n	1009d76 <nrf_802154_security_pib_frame_counter_get_next+0x2e>
    *p_frame_counter = *p_frame_counter_to_use - 1;
 1009da0:	681b      	ldr	r3, [r3, #0]
 1009da2:	3b01      	subs	r3, #1
 1009da4:	f8c8 3000 	str.w	r3, [r8]
    return NRF_802154_SECURITY_ERROR_NONE;
 1009da8:	e7f3      	b.n	1009d92 <nrf_802154_security_pib_frame_counter_get_next+0x4a>
                p_frame_counter_to_use = &m_global_frame_counter;
 1009daa:	4b02      	ldr	r3, [pc, #8]	; (1009db4 <nrf_802154_security_pib_frame_counter_get_next+0x6c>)
    if (p_frame_counter_to_use == NULL)
 1009dac:	e7e3      	b.n	1009d76 <nrf_802154_security_pib_frame_counter_get_next+0x2e>
 1009dae:	bf00      	nop
 1009db0:	210034c8 	.word	0x210034c8
 1009db4:	210034c4 	.word	0x210034c4

01009db8 <timeout_timer_stop>:
    nrf_802154_timer_sched_add(&m_timer, true);
}

static void timeout_timer_stop(void)
{
    m_procedure_is_active = false;
 1009db8:	2100      	movs	r1, #0
 1009dba:	4b03      	ldr	r3, [pc, #12]	; (1009dc8 <timeout_timer_stop+0x10>)
 1009dbc:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 1009dbe:	f3bf 8f5f 	dmb	sy

    // To make sure `timeout_timer_fired()` detects that procedure is being stopped if it preempts
    // this function.
    __DMB();

    nrf_802154_timer_sched_remove(&m_timer, NULL);
 1009dc2:	4802      	ldr	r0, [pc, #8]	; (1009dcc <timeout_timer_stop+0x14>)
 1009dc4:	f006 b95a 	b.w	101007c <nrf_802154_timer_sched_remove>
 1009dc8:	21004746 	.word	0x21004746
 1009dcc:	21003534 	.word	0x21003534

01009dd0 <timeout_timer_fired>:
{
 1009dd0:	b513      	push	{r0, r1, r4, lr}
    if (m_procedure_is_active)
 1009dd2:	4c0e      	ldr	r4, [pc, #56]	; (1009e0c <timeout_timer_fired+0x3c>)
 1009dd4:	7823      	ldrb	r3, [r4, #0]
 1009dd6:	b15b      	cbz	r3, 1009df0 <timeout_timer_fired+0x20>
        if (nrf_802154_request_receive(NRF_802154_TERM_802154,
 1009dd8:	f06f 0301 	mvn.w	r3, #1
 1009ddc:	2104      	movs	r1, #4
 1009dde:	9300      	str	r3, [sp, #0]
 1009de0:	2001      	movs	r0, #1
 1009de2:	2300      	movs	r3, #0
 1009de4:	4a0a      	ldr	r2, [pc, #40]	; (1009e10 <timeout_timer_fired+0x40>)
 1009de6:	f004 ffe2 	bl	100edae <nrf_802154_request_receive>
 1009dea:	b118      	cbz	r0, 1009df4 <timeout_timer_fired+0x24>
            m_procedure_is_active = false;
 1009dec:	2300      	movs	r3, #0
 1009dee:	7023      	strb	r3, [r4, #0]
}
 1009df0:	b002      	add	sp, #8
 1009df2:	bd10      	pop	{r4, pc}
    nrf_802154_timer_sched_add(&m_timer, true);
 1009df4:	2101      	movs	r1, #1
    m_timer.dt += RETRY_DELAY;
 1009df6:	4807      	ldr	r0, [pc, #28]	; (1009e14 <timeout_timer_fired+0x44>)
 1009df8:	6843      	ldr	r3, [r0, #4]
 1009dfa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 1009dfe:	6043      	str	r3, [r0, #4]
}
 1009e00:	b002      	add	sp, #8
 1009e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_timer_sched_add(&m_timer, true);
 1009e06:	f003 bdfd 	b.w	100da04 <nrf_802154_timer_sched_add>
 1009e0a:	bf00      	nop
 1009e0c:	21004746 	.word	0x21004746
 1009e10:	01009e19 	.word	0x01009e19
 1009e14:	21003534 	.word	0x21003534

01009e18 <notify_tx_error>:
    if (result)
 1009e18:	b120      	cbz	r0, 1009e24 <notify_tx_error+0xc>
        nrf_802154_notify_transmit_failed(mp_frame, NRF_802154_TX_ERROR_NO_ACK);
 1009e1a:	4b03      	ldr	r3, [pc, #12]	; (1009e28 <notify_tx_error+0x10>)
 1009e1c:	2105      	movs	r1, #5
 1009e1e:	6818      	ldr	r0, [r3, #0]
 1009e20:	f004 bf81 	b.w	100ed26 <nrf_802154_notify_transmit_failed>
}
 1009e24:	4770      	bx	lr
 1009e26:	bf00      	nop
 1009e28:	21003548 	.word	0x21003548

01009e2c <nrf_802154_ack_timeout_tx_started_hook>:
{
    m_timeout = time;
}

bool nrf_802154_ack_timeout_tx_started_hook(uint8_t * p_frame)
{
 1009e2c:	b538      	push	{r3, r4, r5, lr}
    m_timer.callback  = timeout_timer_fired;
 1009e2e:	4c0e      	ldr	r4, [pc, #56]	; (1009e68 <nrf_802154_ack_timeout_tx_started_hook+0x3c>)
 1009e30:	4b0e      	ldr	r3, [pc, #56]	; (1009e6c <nrf_802154_ack_timeout_tx_started_hook+0x40>)
    mp_frame = p_frame;
 1009e32:	4d0f      	ldr	r5, [pc, #60]	; (1009e70 <nrf_802154_ack_timeout_tx_started_hook+0x44>)
    m_timer.callback  = timeout_timer_fired;
 1009e34:	60a3      	str	r3, [r4, #8]
    m_timer.p_context = NULL;
 1009e36:	2300      	movs	r3, #0
    mp_frame = p_frame;
 1009e38:	6028      	str	r0, [r5, #0]
    m_timer.p_context = NULL;
 1009e3a:	60e3      	str	r3, [r4, #12]
    m_timer.t0        = nrf_802154_timer_sched_time_get();
 1009e3c:	f006 f913 	bl	1010066 <nrf_802154_timer_sched_time_get>
                        nrf_802154_frame_duration_get(mp_frame[0], false, true);
 1009e40:	682b      	ldr	r3, [r5, #0]
    m_procedure_is_active = true;
 1009e42:	2501      	movs	r5, #1
    m_timer.t0        = nrf_802154_timer_sched_time_get();
 1009e44:	6020      	str	r0, [r4, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
 1009e46:	781a      	ldrb	r2, [r3, #0]
                        IMM_ACK_DURATION +
 1009e48:	4b0a      	ldr	r3, [pc, #40]	; (1009e74 <nrf_802154_ack_timeout_tx_started_hook+0x48>)
    nrf_802154_timer_sched_add(&m_timer, true);
 1009e4a:	4620      	mov	r0, r4
                        IMM_ACK_DURATION +
 1009e4c:	681b      	ldr	r3, [r3, #0]
    nrf_802154_timer_sched_add(&m_timer, true);
 1009e4e:	4629      	mov	r1, r5
                        IMM_ACK_DURATION +
 1009e50:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 1009e54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    m_timer.dt        = m_timeout +
 1009e58:	6063      	str	r3, [r4, #4]
    m_procedure_is_active = true;
 1009e5a:	4b07      	ldr	r3, [pc, #28]	; (1009e78 <nrf_802154_ack_timeout_tx_started_hook+0x4c>)
 1009e5c:	701d      	strb	r5, [r3, #0]
    nrf_802154_timer_sched_add(&m_timer, true);
 1009e5e:	f003 fdd1 	bl	100da04 <nrf_802154_timer_sched_add>
    timeout_timer_start();

    return true;
}
 1009e62:	4628      	mov	r0, r5
 1009e64:	bd38      	pop	{r3, r4, r5, pc}
 1009e66:	bf00      	nop
 1009e68:	21003534 	.word	0x21003534
 1009e6c:	01009dd1 	.word	0x01009dd1
 1009e70:	21003548 	.word	0x21003548
 1009e74:	210000d4 	.word	0x210000d4
 1009e78:	21004746 	.word	0x21004746

01009e7c <nrf_802154_ack_timeout_abort>:

bool nrf_802154_ack_timeout_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    bool result;

    if (!m_procedure_is_active || req_orig == REQ_ORIG_ACK_TIMEOUT)
 1009e7c:	4a08      	ldr	r2, [pc, #32]	; (1009ea0 <nrf_802154_ack_timeout_abort+0x24>)
{
 1009e7e:	b510      	push	{r4, lr}
    if (!m_procedure_is_active || req_orig == REQ_ORIG_ACK_TIMEOUT)
 1009e80:	7812      	ldrb	r2, [r2, #0]
 1009e82:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 1009e86:	b132      	cbz	r2, 1009e96 <nrf_802154_ack_timeout_abort+0x1a>
 1009e88:	2904      	cmp	r1, #4
 1009e8a:	d002      	beq.n	1009e92 <nrf_802154_ack_timeout_abort+0x16>
    {
        // Ignore if procedure is not running or self-request.
        result = true;
    }
    else if (term_lvl >= NRF_802154_TERM_802154)
 1009e8c:	b128      	cbz	r0, 1009e9a <nrf_802154_ack_timeout_abort+0x1e>
    {
        // Stop procedure only if termination level is high enough.
        timeout_timer_stop();
 1009e8e:	f7ff ff93 	bl	1009db8 <timeout_timer_stop>
    {
        result = false;
    }

    return result;
}
 1009e92:	4620      	mov	r0, r4
 1009e94:	bd10      	pop	{r4, pc}
        result = true;
 1009e96:	2401      	movs	r4, #1
 1009e98:	e7fb      	b.n	1009e92 <nrf_802154_ack_timeout_abort+0x16>
        result = false;
 1009e9a:	4604      	mov	r4, r0
 1009e9c:	e7f9      	b.n	1009e92 <nrf_802154_ack_timeout_abort+0x16>
 1009e9e:	bf00      	nop
 1009ea0:	21004746 	.word	0x21004746

01009ea4 <addr_index_find>:
 */
static bool addr_index_find(const uint8_t       * p_addr,
                            uint32_t            * p_location,
                            nrf_802154_ack_data_t data_type,
                            bool                  extended)
{
 1009ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t * p_addr_array;
    bool      valid_data_type = true;

    switch (data_type)
 1009ea8:	b11a      	cbz	r2, 1009eb2 <addr_index_find+0xe>
 1009eaa:	2a01      	cmp	r2, #1
 1009eac:	d009      	beq.n	1009ec2 <addr_index_find+0x1e>
    return false;
 1009eae:	2000      	movs	r0, #0
 1009eb0:	e02c      	b.n	1009f0c <addr_index_find+0x68>
    {
        case NRF_802154_ACK_DATA_PENDING_BIT:
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 1009eb2:	4a28      	ldr	r2, [pc, #160]	; (1009f54 <addr_index_find+0xb0>)
 1009eb4:	bbbb      	cbnz	r3, 1009f26 <addr_index_find+0x82>
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
 1009eb6:	f8d2 60a4 	ldr.w	r6, [r2, #164]	; 0xa4
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
 1009eba:	f04f 0c02 	mov.w	ip, #2
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 1009ebe:	3201      	adds	r2, #1
 1009ec0:	e036      	b.n	1009f30 <addr_index_find+0x8c>
                           (uint8_t *)m_pending_bit.short_addr;
            break;

        case NRF_802154_ACK_DATA_IE:
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
 1009ec2:	4a25      	ldr	r2, [pc, #148]	; (1009f58 <addr_index_find+0xb4>)
 1009ec4:	2b00      	cmp	r3, #0
 1009ec6:	d13e      	bne.n	1009f46 <addr_index_find+0xa2>
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
 1009ec8:	f04f 0c0b 	mov.w	ip, #11
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
 1009ecc:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
 1009ed0:	e02e      	b.n	1009f30 <addr_index_find+0x8c>
        midpoint = (uint32_t)(low + (high - low) / 2);
 1009ed2:	ebae 0405 	sub.w	r4, lr, r5
 1009ed6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 1009eda:	eb05 0464 	add.w	r4, r5, r4, asr #1
        if (midpoint >= addr_array_len)
 1009ede:	42a6      	cmp	r6, r4
 1009ee0:	d92b      	bls.n	1009f3a <addr_index_find+0x96>
        switch (addr_compare(p_addr, p_addr_array + entry_size * midpoint, extended))
 1009ee2:	fb04 f80c 	mul.w	r8, r4, ip
 1009ee6:	eb02 0908 	add.w	r9, r2, r8
    if (extended)
 1009eea:	b18b      	cbz	r3, 1009f10 <addr_index_find+0x6c>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
 1009eec:	f852 7008 	ldr.w	r7, [r2, r8]
        if (first_addr < second_addr)
 1009ef0:	f8d0 8000 	ldr.w	r8, [r0]
 1009ef4:	45b8      	cmp	r8, r7
 1009ef6:	d311      	bcc.n	1009f1c <addr_index_find+0x78>
        else if (first_addr > second_addr)
 1009ef8:	d813      	bhi.n	1009f22 <addr_index_find+0x7e>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
 1009efa:	f8d9 7004 	ldr.w	r7, [r9, #4]
        if (first_addr < second_addr)
 1009efe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 1009f02:	45b8      	cmp	r8, r7
    if (first_addr < second_addr)
 1009f04:	d30a      	bcc.n	1009f1c <addr_index_find+0x78>
    else if (first_addr > second_addr)
 1009f06:	d80c      	bhi.n	1009f22 <addr_index_find+0x7e>
                return true;
 1009f08:	2001      	movs	r0, #1
                *p_location = midpoint;
 1009f0a:	600c      	str	r4, [r1, #0]
    {
        return false;
    }

    return addr_binary_search(p_addr, p_addr_array, p_location, data_type, extended);
}
 1009f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t first_addr  = *(uint16_t *)(p_first_addr);
 1009f10:	f8b0 9000 	ldrh.w	r9, [r0]
    uint16_t second_addr = *(uint16_t *)(p_second_addr);
 1009f14:	f832 7008 	ldrh.w	r7, [r2, r8]
    if (first_addr < second_addr)
 1009f18:	45b9      	cmp	r9, r7
 1009f1a:	e7f3      	b.n	1009f04 <addr_index_find+0x60>
                high = (int32_t)(midpoint - 1);
 1009f1c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
                break;
 1009f20:	e009      	b.n	1009f36 <addr_index_find+0x92>
                low = (int32_t)(midpoint + 1);
 1009f22:	1c65      	adds	r5, r4, #1
                break;
 1009f24:	e007      	b.n	1009f36 <addr_index_find+0x92>
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
 1009f26:	f04f 0c08 	mov.w	ip, #8
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
 1009f2a:	f8d2 60a8 	ldr.w	r6, [r2, #168]	; 0xa8
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 1009f2e:	3221      	adds	r2, #33	; 0x21
    uint32_t midpoint = 0;
 1009f30:	2400      	movs	r4, #0
    int32_t  high     = addr_array_len;
 1009f32:	46b6      	mov	lr, r6
    int32_t  low      = 0;
 1009f34:	4625      	mov	r5, r4
    while (high >= low)
 1009f36:	45ae      	cmp	lr, r5
 1009f38:	dacb      	bge.n	1009ed2 <addr_index_find+0x2e>
    if ((uint32_t)low == midpoint + 1)
 1009f3a:	1c63      	adds	r3, r4, #1
 1009f3c:	42ab      	cmp	r3, r5
 1009f3e:	bf08      	it	eq
 1009f40:	462c      	moveq	r4, r5
    *p_location = midpoint;
 1009f42:	600c      	str	r4, [r1, #0]
 1009f44:	e7b3      	b.n	1009eae <addr_index_find+0xa>
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
 1009f46:	f8d2 61c4 	ldr.w	r6, [r2, #452]	; 0x1c4
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
 1009f4a:	f04f 0c11 	mov.w	ip, #17
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
 1009f4e:	32b0      	adds	r2, #176	; 0xb0
 1009f50:	e7ee      	b.n	1009f30 <addr_index_find+0x8c>
 1009f52:	bf00      	nop
 1009f54:	21003714 	.word	0x21003714
 1009f58:	2100354c 	.word	0x2100354c

01009f5c <nrf_802154_ack_data_init>:
/***************************************************************************************************
 * @section Public API
 **************************************************************************************************/

void nrf_802154_ack_data_init(void)
{
 1009f5c:	b510      	push	{r4, lr}
    memset(&m_pending_bit, 0, sizeof(m_pending_bit));
 1009f5e:	4c09      	ldr	r4, [pc, #36]	; (1009f84 <nrf_802154_ack_data_init+0x28>)
 1009f60:	22ac      	movs	r2, #172	; 0xac
 1009f62:	2100      	movs	r1, #0
 1009f64:	4620      	mov	r0, r4
 1009f66:	f004 fb21 	bl	100e5ac <memset>
    memset(&m_ie, 0, sizeof(m_ie));
 1009f6a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 1009f6e:	2100      	movs	r1, #0
 1009f70:	4805      	ldr	r0, [pc, #20]	; (1009f88 <nrf_802154_ack_data_init+0x2c>)
 1009f72:	f004 fb1b 	bl	100e5ac <memset>

    m_pending_bit.enabled = true;
 1009f76:	2301      	movs	r3, #1
    m_src_matching_method = NRF_802154_SRC_ADDR_MATCH_THREAD;
 1009f78:	2200      	movs	r2, #0
    m_pending_bit.enabled = true;
 1009f7a:	7023      	strb	r3, [r4, #0]
    m_src_matching_method = NRF_802154_SRC_ADDR_MATCH_THREAD;
 1009f7c:	4b03      	ldr	r3, [pc, #12]	; (1009f8c <nrf_802154_ack_data_init+0x30>)
 1009f7e:	701a      	strb	r2, [r3, #0]
}
 1009f80:	bd10      	pop	{r4, pc}
 1009f82:	bf00      	nop
 1009f84:	21003714 	.word	0x21003714
 1009f88:	2100354c 	.word	0x2100354c
 1009f8c:	21004747 	.word	0x21004747

01009f90 <nrf_802154_ack_data_enable>:

void nrf_802154_ack_data_enable(bool enabled)
{
    m_pending_bit.enabled = enabled;
 1009f90:	4b01      	ldr	r3, [pc, #4]	; (1009f98 <nrf_802154_ack_data_enable+0x8>)
 1009f92:	7018      	strb	r0, [r3, #0]
}
 1009f94:	4770      	bx	lr
 1009f96:	bf00      	nop
 1009f98:	21003714 	.word	0x21003714

01009f9c <nrf_802154_ack_data_for_addr_set>:
bool nrf_802154_ack_data_for_addr_set(const uint8_t       * p_addr,
                                      bool                  extended,
                                      nrf_802154_ack_data_t data_type,
                                      const void          * p_data,
                                      uint8_t               data_len)
{
 1009f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1009fa0:	461f      	mov	r7, r3
    uint32_t location = 0;
 1009fa2:	2300      	movs	r3, #0
{
 1009fa4:	460d      	mov	r5, r1
    uint32_t location = 0;
 1009fa6:	9301      	str	r3, [sp, #4]

    if (addr_index_find(p_addr, &location, data_type, extended) ||
 1009fa8:	460b      	mov	r3, r1
 1009faa:	a901      	add	r1, sp, #4
{
 1009fac:	4681      	mov	r9, r0
 1009fae:	4690      	mov	r8, r2
 1009fb0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (addr_index_find(p_addr, &location, data_type, extended) ||
 1009fb4:	f7ff ff76 	bl	1009ea4 <addr_index_find>
 1009fb8:	bb90      	cbnz	r0, 100a020 <nrf_802154_ack_data_for_addr_set+0x84>
    switch (data_type)
 1009fba:	f1b8 0f00 	cmp.w	r8, #0
 1009fbe:	d005      	beq.n	1009fcc <nrf_802154_ack_data_for_addr_set+0x30>
 1009fc0:	f1b8 0f01 	cmp.w	r8, #1
 1009fc4:	d009      	beq.n	1009fda <nrf_802154_ack_data_for_addr_set+0x3e>
    }
    else
    {
        return false;
    }
}
 1009fc6:	b003      	add	sp, #12
 1009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (extended)
 1009fcc:	2d00      	cmp	r5, #0
 1009fce:	d14a      	bne.n	100a066 <nrf_802154_ack_data_for_addr_set+0xca>
                p_addr_array       = (uint8_t *)m_pending_bit.short_addr;
 1009fd0:	4c2a      	ldr	r4, [pc, #168]	; (100a07c <nrf_802154_ack_data_for_addr_set+0xe0>)
                entry_size         = SHORT_ADDRESS_SIZE;
 1009fd2:	2302      	movs	r3, #2
                p_addr_array_len   = &m_pending_bit.num_of_short_addr;
 1009fd4:	f104 0aa3 	add.w	sl, r4, #163	; 0xa3
 1009fd8:	e005      	b.n	1009fe6 <nrf_802154_ack_data_for_addr_set+0x4a>
            if (extended)
 1009fda:	2d00      	cmp	r5, #0
 1009fdc:	d148      	bne.n	100a070 <nrf_802154_ack_data_for_addr_set+0xd4>
                entry_size         = sizeof(ack_short_ie_data_t);
 1009fde:	230b      	movs	r3, #11
                p_addr_array       = (uint8_t *)m_ie.short_data;
 1009fe0:	4c27      	ldr	r4, [pc, #156]	; (100a080 <nrf_802154_ack_data_for_addr_set+0xe4>)
                p_addr_array_len   = &m_ie.num_of_short_data;
 1009fe2:	f504 7ae0 	add.w	sl, r4, #448	; 0x1c0
    if (!valid_data_type || (*p_addr_array_len == max_addr_array_len))
 1009fe6:	f8da 2000 	ldr.w	r2, [sl]
 1009fea:	2a10      	cmp	r2, #16
 1009fec:	d0eb      	beq.n	1009fc6 <nrf_802154_ack_data_for_addr_set+0x2a>
        addr_add(p_addr, location, data_type, extended))
 1009fee:	9901      	ldr	r1, [sp, #4]
    memmove(p_addr_array + entry_size * (location + 1),
 1009ff0:	fb01 3003 	mla	r0, r1, r3, r3
            p_addr_array + entry_size * (location),
 1009ff4:	eba0 0b03 	sub.w	fp, r0, r3
 1009ff8:	44a3      	add	fp, r4
            (*p_addr_array_len - location) * entry_size);
 1009ffa:	1a52      	subs	r2, r2, r1
    memmove(p_addr_array + entry_size * (location + 1),
 1009ffc:	435a      	muls	r2, r3
 1009ffe:	4659      	mov	r1, fp
 100a000:	4420      	add	r0, r4
 100a002:	f004 fab0 	bl	100e566 <memmove>
    memcpy(p_addr_array + entry_size * location,
 100a006:	2d00      	cmp	r5, #0
 100a008:	bf14      	ite	ne
 100a00a:	2208      	movne	r2, #8
 100a00c:	2202      	moveq	r2, #2
 100a00e:	4649      	mov	r1, r9
 100a010:	4658      	mov	r0, fp
 100a012:	f004 fac0 	bl	100e596 <memcpy>
    (*p_addr_array_len)++;
 100a016:	f8da 3000 	ldr.w	r3, [sl]
 100a01a:	3301      	adds	r3, #1
 100a01c:	f8ca 3000 	str.w	r3, [sl]
        if (data_type == NRF_802154_ACK_DATA_IE)
 100a020:	f1b8 0f01 	cmp.w	r8, #1
 100a024:	d11d      	bne.n	100a062 <nrf_802154_ack_data_for_addr_set+0xc6>
            ie_data_add(location, extended, p_data, data_len);
 100a026:	9801      	ldr	r0, [sp, #4]
    if (extended)
 100a028:	f8df 9054 	ldr.w	r9, [pc, #84]	; 100a080 <nrf_802154_ack_data_for_addr_set+0xe4>
 100a02c:	b175      	cbz	r5, 100a04c <nrf_802154_ack_data_for_addr_set+0xb0>
        memcpy(m_ie.ext_data[location].ie_data.p_data, p_data, data_len);
 100a02e:	eb00 1400 	add.w	r4, r0, r0, lsl #4
 100a032:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 100a036:	4632      	mov	r2, r6
 100a038:	4639      	mov	r1, r7
 100a03a:	4448      	add	r0, r9
 100a03c:	f004 faab 	bl	100e596 <memcpy>
        m_ie.ext_data[location].ie_data.len = data_len;
 100a040:	eb09 0004 	add.w	r0, r9, r4
 100a044:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
        return true;
 100a048:	4628      	mov	r0, r5
 100a04a:	e7bc      	b.n	1009fc6 <nrf_802154_ack_data_for_addr_set+0x2a>
        memcpy(m_ie.short_data[location].ie_data.p_data, p_data, data_len);
 100a04c:	240b      	movs	r4, #11
 100a04e:	4344      	muls	r4, r0
 100a050:	1ca0      	adds	r0, r4, #2
 100a052:	4632      	mov	r2, r6
 100a054:	4639      	mov	r1, r7
 100a056:	4448      	add	r0, r9
 100a058:	f004 fa9d 	bl	100e596 <memcpy>
        m_ie.short_data[location].ie_data.len = data_len;
 100a05c:	eb09 0004 	add.w	r0, r9, r4
 100a060:	7286      	strb	r6, [r0, #10]
        return true;
 100a062:	2001      	movs	r0, #1
 100a064:	e7af      	b.n	1009fc6 <nrf_802154_ack_data_for_addr_set+0x2a>
                p_addr_array       = (uint8_t *)m_pending_bit.extended_addr;
 100a066:	4c07      	ldr	r4, [pc, #28]	; (100a084 <nrf_802154_ack_data_for_addr_set+0xe8>)
                entry_size         = EXTENDED_ADDRESS_SIZE;
 100a068:	2308      	movs	r3, #8
                p_addr_array_len   = &m_pending_bit.num_of_ext_addr;
 100a06a:	f104 0a87 	add.w	sl, r4, #135	; 0x87
 100a06e:	e7ba      	b.n	1009fe6 <nrf_802154_ack_data_for_addr_set+0x4a>
                p_addr_array       = (uint8_t *)m_ie.ext_data;
 100a070:	4c05      	ldr	r4, [pc, #20]	; (100a088 <nrf_802154_ack_data_for_addr_set+0xec>)
                entry_size         = sizeof(ack_ext_ie_data_t);
 100a072:	2311      	movs	r3, #17
                p_addr_array_len   = &m_ie.num_of_ext_data;
 100a074:	f504 7a8a 	add.w	sl, r4, #276	; 0x114
 100a078:	e7b5      	b.n	1009fe6 <nrf_802154_ack_data_for_addr_set+0x4a>
 100a07a:	bf00      	nop
 100a07c:	21003715 	.word	0x21003715
 100a080:	2100354c 	.word	0x2100354c
 100a084:	21003735 	.word	0x21003735
 100a088:	210035fc 	.word	0x210035fc

0100a08c <nrf_802154_ack_data_for_addr_clear>:

bool nrf_802154_ack_data_for_addr_clear(const uint8_t       * p_addr,
                                        bool                  extended,
                                        nrf_802154_ack_data_t data_type)
{
 100a08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t location = 0;
 100a08e:	2700      	movs	r7, #0

    if (addr_index_find(p_addr, &location, data_type, extended))
 100a090:	460b      	mov	r3, r1
{
 100a092:	460d      	mov	r5, r1
    if (addr_index_find(p_addr, &location, data_type, extended))
 100a094:	a901      	add	r1, sp, #4
{
 100a096:	4616      	mov	r6, r2
    uint32_t location = 0;
 100a098:	9701      	str	r7, [sp, #4]
    if (addr_index_find(p_addr, &location, data_type, extended))
 100a09a:	f7ff ff03 	bl	1009ea4 <addr_index_find>
 100a09e:	4604      	mov	r4, r0
 100a0a0:	b118      	cbz	r0, 100a0aa <nrf_802154_ack_data_for_addr_clear+0x1e>
    switch (data_type)
 100a0a2:	b12e      	cbz	r6, 100a0b0 <nrf_802154_ack_data_for_addr_clear+0x24>
 100a0a4:	2e01      	cmp	r6, #1
 100a0a6:	d019      	beq.n	100a0dc <nrf_802154_ack_data_for_addr_clear+0x50>
 100a0a8:	463c      	mov	r4, r7
    }
    else
    {
        return false;
    }
}
 100a0aa:	4620      	mov	r0, r4
 100a0ac:	b003      	add	sp, #12
 100a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (extended)
 100a0b0:	b9e5      	cbnz	r5, 100a0ec <nrf_802154_ack_data_for_addr_clear+0x60>
                entry_size       = SHORT_ADDRESS_SIZE;
 100a0b2:	2502      	movs	r5, #2
                p_addr_array     = (uint8_t *)m_pending_bit.short_addr;
 100a0b4:	4b12      	ldr	r3, [pc, #72]	; (100a100 <nrf_802154_ack_data_for_addr_clear+0x74>)
                p_addr_array_len = &m_pending_bit.num_of_short_addr;
 100a0b6:	f103 06a3 	add.w	r6, r3, #163	; 0xa3
    if (!valid_data_type || (*p_addr_array_len == 0))
 100a0ba:	6831      	ldr	r1, [r6, #0]
 100a0bc:	b1a1      	cbz	r1, 100a0e8 <nrf_802154_ack_data_for_addr_clear+0x5c>
        return addr_remove(location, data_type, extended);
 100a0be:	9a01      	ldr	r2, [sp, #4]
    memmove(p_addr_array + entry_size * location,
 100a0c0:	fb05 f002 	mul.w	r0, r5, r2
            (*p_addr_array_len - location - 1) * entry_size);
 100a0c4:	43d2      	mvns	r2, r2
 100a0c6:	440a      	add	r2, r1
            p_addr_array + entry_size * (location + 1),
 100a0c8:	1829      	adds	r1, r5, r0
    memmove(p_addr_array + entry_size * location,
 100a0ca:	4419      	add	r1, r3
 100a0cc:	4418      	add	r0, r3
 100a0ce:	436a      	muls	r2, r5
 100a0d0:	f004 fa49 	bl	100e566 <memmove>
    (*p_addr_array_len)--;
 100a0d4:	6833      	ldr	r3, [r6, #0]
 100a0d6:	3b01      	subs	r3, #1
 100a0d8:	6033      	str	r3, [r6, #0]
    return true;
 100a0da:	e7e6      	b.n	100a0aa <nrf_802154_ack_data_for_addr_clear+0x1e>
            if (extended)
 100a0dc:	b95d      	cbnz	r5, 100a0f6 <nrf_802154_ack_data_for_addr_clear+0x6a>
                p_addr_array     = (uint8_t *)m_ie.short_data;
 100a0de:	4b09      	ldr	r3, [pc, #36]	; (100a104 <nrf_802154_ack_data_for_addr_clear+0x78>)
                entry_size       = sizeof(ack_short_ie_data_t);
 100a0e0:	250b      	movs	r5, #11
                p_addr_array_len = &m_ie.num_of_short_data;
 100a0e2:	f503 76e0 	add.w	r6, r3, #448	; 0x1c0
 100a0e6:	e7e8      	b.n	100a0ba <nrf_802154_ack_data_for_addr_clear+0x2e>
        return false;
 100a0e8:	460c      	mov	r4, r1
 100a0ea:	e7de      	b.n	100a0aa <nrf_802154_ack_data_for_addr_clear+0x1e>
                p_addr_array     = (uint8_t *)m_pending_bit.extended_addr;
 100a0ec:	4b06      	ldr	r3, [pc, #24]	; (100a108 <nrf_802154_ack_data_for_addr_clear+0x7c>)
                entry_size       = EXTENDED_ADDRESS_SIZE;
 100a0ee:	2508      	movs	r5, #8
                p_addr_array_len = &m_pending_bit.num_of_ext_addr;
 100a0f0:	f103 0687 	add.w	r6, r3, #135	; 0x87
 100a0f4:	e7e1      	b.n	100a0ba <nrf_802154_ack_data_for_addr_clear+0x2e>
                p_addr_array     = (uint8_t *)m_ie.ext_data;
 100a0f6:	4b05      	ldr	r3, [pc, #20]	; (100a10c <nrf_802154_ack_data_for_addr_clear+0x80>)
                entry_size       = sizeof(ack_ext_ie_data_t);
 100a0f8:	2511      	movs	r5, #17
                p_addr_array_len = &m_ie.num_of_ext_data;
 100a0fa:	f503 768a 	add.w	r6, r3, #276	; 0x114
 100a0fe:	e7dc      	b.n	100a0ba <nrf_802154_ack_data_for_addr_clear+0x2e>
 100a100:	21003715 	.word	0x21003715
 100a104:	2100354c 	.word	0x2100354c
 100a108:	21003735 	.word	0x21003735
 100a10c:	210035fc 	.word	0x210035fc

0100a110 <nrf_802154_ack_data_reset>:

void nrf_802154_ack_data_reset(bool extended, nrf_802154_ack_data_t data_type)
{
    switch (data_type)
 100a110:	b111      	cbz	r1, 100a118 <nrf_802154_ack_data_reset+0x8>
 100a112:	2901      	cmp	r1, #1
 100a114:	d008      	beq.n	100a128 <nrf_802154_ack_data_reset+0x18>
 100a116:	4770      	bx	lr
    {
        case NRF_802154_ACK_DATA_PENDING_BIT:
            if (extended)
 100a118:	4b08      	ldr	r3, [pc, #32]	; (100a13c <nrf_802154_ack_data_reset+0x2c>)
 100a11a:	b110      	cbz	r0, 100a122 <nrf_802154_ack_data_reset+0x12>
            {
                m_pending_bit.num_of_ext_addr = 0;
 100a11c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 100a120:	4770      	bx	lr
            }
            else
            {
                m_pending_bit.num_of_short_addr = 0;
 100a122:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
 100a126:	4770      	bx	lr
            }
            break;

        case NRF_802154_ACK_DATA_IE:
            if (extended)
 100a128:	4b05      	ldr	r3, [pc, #20]	; (100a140 <nrf_802154_ack_data_reset+0x30>)
 100a12a:	b118      	cbz	r0, 100a134 <nrf_802154_ack_data_reset+0x24>
            {
                m_ie.num_of_ext_data = 0;
 100a12c:	2200      	movs	r2, #0
 100a12e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 100a132:	4770      	bx	lr
            }
            else
            {
                m_ie.num_of_short_data = 0;
 100a134:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
            break;

        default:
            break;
    }
}
 100a138:	4770      	bx	lr
 100a13a:	bf00      	nop
 100a13c:	21003714 	.word	0x21003714
 100a140:	2100354c 	.word	0x2100354c

0100a144 <nrf_802154_ack_data_src_addr_matching_method_set>:

void nrf_802154_ack_data_src_addr_matching_method_set(nrf_802154_src_addr_match_t match_method)
{
    switch (match_method)
 100a144:	2802      	cmp	r0, #2
    {
        case NRF_802154_SRC_ADDR_MATCH_THREAD:
        case NRF_802154_SRC_ADDR_MATCH_ZIGBEE:
        case NRF_802154_SRC_ADDR_MATCH_ALWAYS_1:
            m_src_matching_method = match_method;
 100a146:	bf9c      	itt	ls
 100a148:	4b01      	ldrls	r3, [pc, #4]	; (100a150 <nrf_802154_ack_data_src_addr_matching_method_set+0xc>)
 100a14a:	7018      	strbls	r0, [r3, #0]

        default:
            assert(false);
    }

}
 100a14c:	4770      	bx	lr
 100a14e:	bf00      	nop
 100a150:	21004747 	.word	0x21004747

0100a154 <nrf_802154_ack_data_pending_bit_should_be_set>:

bool nrf_802154_ack_data_pending_bit_should_be_set(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100a154:	b513      	push	{r0, r1, r4, lr}
    bool ret;

    switch (m_src_matching_method)
 100a156:	4b26      	ldr	r3, [pc, #152]	; (100a1f0 <nrf_802154_ack_data_pending_bit_should_be_set+0x9c>)
{
 100a158:	4602      	mov	r2, r0
    switch (m_src_matching_method)
 100a15a:	7818      	ldrb	r0, [r3, #0]
 100a15c:	2801      	cmp	r0, #1
 100a15e:	d01b      	beq.n	100a198 <nrf_802154_ack_data_pending_bit_should_be_set+0x44>
 100a160:	2802      	cmp	r0, #2
 100a162:	d040      	beq.n	100a1e6 <nrf_802154_ack_data_pending_bit_should_be_set+0x92>
 100a164:	2800      	cmp	r0, #0
 100a166:	d140      	bne.n	100a1ea <nrf_802154_ack_data_pending_bit_should_be_set+0x96>
    return p_parser_data->mhr.src.addr_offset;
 100a168:	7a53      	ldrb	r3, [r2, #9]
 100a16a:	6811      	ldr	r1, [r2, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a16c:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a16e:	bf18      	it	ne
 100a170:	18c8      	addne	r0, r1, r3
    if (!m_pending_bit.enabled || (NULL == p_src_addr))
 100a172:	4b20      	ldr	r3, [pc, #128]	; (100a1f4 <nrf_802154_ack_data_pending_bit_should_be_set+0xa0>)
 100a174:	781b      	ldrb	r3, [r3, #0]
 100a176:	2b00      	cmp	r3, #0
 100a178:	d035      	beq.n	100a1e6 <nrf_802154_ack_data_pending_bit_should_be_set+0x92>
 100a17a:	2800      	cmp	r0, #0
 100a17c:	d030      	beq.n	100a1e0 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100a17e:	788b      	ldrb	r3, [r1, #2]
    return addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_PENDING_BIT, extended);
 100a180:	a901      	add	r1, sp, #4
 100a182:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 100a186:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 100a18a:	4253      	negs	r3, r2
 100a18c:	4153      	adcs	r3, r2
 100a18e:	2200      	movs	r2, #0
 100a190:	f7ff fe88 	bl	1009ea4 <addr_index_find>
        return true;
 100a194:	4603      	mov	r3, r0
 100a196:	e023      	b.n	100a1e0 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>
    if (!m_pending_bit.enabled)
 100a198:	4b16      	ldr	r3, [pc, #88]	; (100a1f4 <nrf_802154_ack_data_pending_bit_should_be_set+0xa0>)
 100a19a:	781b      	ldrb	r3, [r3, #0]
 100a19c:	2b00      	cmp	r3, #0
 100a19e:	d0f9      	beq.n	100a194 <nrf_802154_ack_data_pending_bit_should_be_set+0x40>
    return p_parser_data->mhr.src.addr_offset;
 100a1a0:	6811      	ldr	r1, [r2, #0]
 100a1a2:	7a50      	ldrb	r0, [r2, #9]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100a1a4:	784c      	ldrb	r4, [r1, #1]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a1a6:	28ff      	cmp	r0, #255	; 0xff
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
 100a1a8:	f004 0407 	and.w	r4, r4, #7
        return NULL;
 100a1ac:	bf0c      	ite	eq
 100a1ae:	2000      	moveq	r0, #0
    return &p_parser_data->p_frame[offset];
 100a1b0:	1840      	addne	r0, r0, r1
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
 100a1b2:	2c03      	cmp	r4, #3
 100a1b4:	d119      	bne.n	100a1ea <nrf_802154_ack_data_pending_bit_should_be_set+0x96>
    return p_parser_data->mac_payload.mac_payload_offset;
 100a1b6:	7c12      	ldrb	r2, [r2, #16]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a1b8:	2aff      	cmp	r2, #255	; 0xff
 100a1ba:	d016      	beq.n	100a1ea <nrf_802154_ack_data_pending_bit_should_be_set+0x96>
    if ((p_cmd != NULL) && (*p_cmd == MAC_CMD_DATA_REQ))
 100a1bc:	188c      	adds	r4, r1, r2
 100a1be:	d014      	beq.n	100a1ea <nrf_802154_ack_data_pending_bit_should_be_set+0x96>
 100a1c0:	5c8a      	ldrb	r2, [r1, r2]
 100a1c2:	2a04      	cmp	r2, #4
 100a1c4:	d111      	bne.n	100a1ea <nrf_802154_ack_data_pending_bit_should_be_set+0x96>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 100a1c6:	788a      	ldrb	r2, [r1, #2]
        if (src_addr_type == SRC_ADDR_TYPE_SHORT)
 100a1c8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 100a1cc:	2a80      	cmp	r2, #128	; 0x80
 100a1ce:	d107      	bne.n	100a1e0 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>
            ret = !addr_index_find(p_src_addr,
 100a1d0:	2300      	movs	r3, #0
 100a1d2:	a901      	add	r1, sp, #4
 100a1d4:	461a      	mov	r2, r3
 100a1d6:	f7ff fe65 	bl	1009ea4 <addr_index_find>
                                   false);
 100a1da:	f080 0001 	eor.w	r0, r0, #1
 100a1de:	b2c3      	uxtb	r3, r0
            ret = false;
            assert(false);
    }

    return ret;
}
 100a1e0:	4618      	mov	r0, r3
 100a1e2:	b002      	add	sp, #8
 100a1e4:	bd10      	pop	{r4, pc}
            ret = addr_match_standard_compliant(p_frame_data);
 100a1e6:	2301      	movs	r3, #1
 100a1e8:	e7fa      	b.n	100a1e0 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>
    switch (m_src_matching_method)
 100a1ea:	2300      	movs	r3, #0
 100a1ec:	e7f8      	b.n	100a1e0 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>
 100a1ee:	bf00      	nop
 100a1f0:	21004747 	.word	0x21004747
 100a1f4:	21003714 	.word	0x21003714

0100a1f8 <nrf_802154_ack_data_ie_get>:

const uint8_t * nrf_802154_ack_data_ie_get(const uint8_t * p_src_addr,
                                           bool            src_addr_extended,
                                           uint8_t       * p_ie_length)
{
 100a1f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100a1fa:	460e      	mov	r6, r1
 100a1fc:	4615      	mov	r5, r2
    uint32_t location;

    if (NULL == p_src_addr)
 100a1fe:	4604      	mov	r4, r0
 100a200:	b188      	cbz	r0, 100a226 <nrf_802154_ack_data_ie_get+0x2e>
    {
        return NULL;
    }

    if (addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_IE, src_addr_extended))
 100a202:	460b      	mov	r3, r1
 100a204:	2201      	movs	r2, #1
 100a206:	a901      	add	r1, sp, #4
 100a208:	f7ff fe4c 	bl	1009ea4 <addr_index_find>
 100a20c:	4604      	mov	r4, r0
 100a20e:	b1a0      	cbz	r0, 100a23a <nrf_802154_ack_data_ie_get+0x42>
    {
        if (src_addr_extended)
        {
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100a210:	9801      	ldr	r0, [sp, #4]
 100a212:	4c0b      	ldr	r4, [pc, #44]	; (100a240 <nrf_802154_ack_data_ie_get+0x48>)
        if (src_addr_extended)
 100a214:	b156      	cbz	r6, 100a22c <nrf_802154_ack_data_ie_get+0x34>
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100a216:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 100a21a:	1823      	adds	r3, r4, r0
 100a21c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
            return m_ie.ext_data[location].ie_data.p_data;
 100a220:	30b8      	adds	r0, #184	; 0xb8
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100a222:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            *p_ie_length = m_ie.short_data[location].ie_data.len;
            return m_ie.short_data[location].ie_data.p_data;
 100a224:	4404      	add	r4, r0
    else
    {
        *p_ie_length = 0;
        return NULL;
    }
}
 100a226:	4620      	mov	r0, r4
 100a228:	b002      	add	sp, #8
 100a22a:	bd70      	pop	{r4, r5, r6, pc}
            *p_ie_length = m_ie.short_data[location].ie_data.len;
 100a22c:	230b      	movs	r3, #11
 100a22e:	4358      	muls	r0, r3
 100a230:	1823      	adds	r3, r4, r0
 100a232:	7a9b      	ldrb	r3, [r3, #10]
            return m_ie.short_data[location].ie_data.p_data;
 100a234:	3002      	adds	r0, #2
            *p_ie_length = m_ie.short_data[location].ie_data.len;
 100a236:	702b      	strb	r3, [r5, #0]
            return m_ie.short_data[location].ie_data.p_data;
 100a238:	e7f4      	b.n	100a224 <nrf_802154_ack_data_ie_get+0x2c>
        *p_ie_length = 0;
 100a23a:	7028      	strb	r0, [r5, #0]
        return NULL;
 100a23c:	e7f3      	b.n	100a226 <nrf_802154_ack_data_ie_get+0x2e>
 100a23e:	bf00      	nop
 100a240:	2100354c 	.word	0x2100354c

0100a244 <fcf_frame_pending_set>:
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
    }
}

static void fcf_frame_pending_set(const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100a244:	b508      	push	{r3, lr}
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
 100a246:	f7ff ff85 	bl	100a154 <nrf_802154_ack_data_pending_bit_should_be_set>
 100a24a:	b120      	cbz	r0, 100a256 <fcf_frame_pending_set+0x12>
    {
        m_ack[FRAME_PENDING_OFFSET] |= FRAME_PENDING_BIT;
 100a24c:	4a02      	ldr	r2, [pc, #8]	; (100a258 <fcf_frame_pending_set+0x14>)
 100a24e:	7853      	ldrb	r3, [r2, #1]
 100a250:	f043 0310 	orr.w	r3, r3, #16
 100a254:	7053      	strb	r3, [r2, #1]
    }
}
 100a256:	bd08      	pop	{r3, pc}
 100a258:	21004748 	.word	0x21004748

0100a25c <nrf_802154_enh_ack_generator_reset>:
{
    // Intentionally empty.
}

void nrf_802154_enh_ack_generator_reset(void)
{
 100a25c:	b510      	push	{r4, lr}
    memset(m_ack, 0U, sizeof(m_ack));
 100a25e:	4c0a      	ldr	r4, [pc, #40]	; (100a288 <nrf_802154_enh_ack_generator_reset+0x2c>)
 100a260:	2280      	movs	r2, #128	; 0x80
 100a262:	2100      	movs	r1, #0
 100a264:	4620      	mov	r0, r4
 100a266:	f004 f9a1 	bl	100e5ac <memset>
    (void)nrf_802154_frame_parser_data_init(m_ack, 0U, PARSE_LEVEL_NONE, &m_ack_data);
 100a26a:	2200      	movs	r2, #0
 100a26c:	4b07      	ldr	r3, [pc, #28]	; (100a28c <nrf_802154_enh_ack_generator_reset+0x30>)
 100a26e:	4611      	mov	r1, r2
 100a270:	4620      	mov	r0, r4
 100a272:	f004 fc6d 	bl	100eb50 <nrf_802154_frame_parser_data_init>
    mp_ie_data    = 0U;
 100a276:	2300      	movs	r3, #0
 100a278:	4a05      	ldr	r2, [pc, #20]	; (100a290 <nrf_802154_enh_ack_generator_reset+0x34>)
 100a27a:	6013      	str	r3, [r2, #0]
    m_ie_data_len = 0U;
 100a27c:	4a05      	ldr	r2, [pc, #20]	; (100a294 <nrf_802154_enh_ack_generator_reset+0x38>)
 100a27e:	7013      	strb	r3, [r2, #0]
    m_ack_state   = ACK_STATE_RESET;
 100a280:	4a05      	ldr	r2, [pc, #20]	; (100a298 <nrf_802154_enh_ack_generator_reset+0x3c>)
 100a282:	7013      	strb	r3, [r2, #0]
}
 100a284:	bd10      	pop	{r4, pc}
 100a286:	bf00      	nop
 100a288:	21004748 	.word	0x21004748
 100a28c:	210037c0 	.word	0x210037c0
 100a290:	210037d8 	.word	0x210037d8
 100a294:	210047c9 	.word	0x210047c9
 100a298:	210047c8 	.word	0x210047c8

0100a29c <nrf_802154_enh_ack_generator_create>:

uint8_t * nrf_802154_enh_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_ack_state;
 100a2a0:	4f87      	ldr	r7, [pc, #540]	; (100a4c0 <nrf_802154_enh_ack_generator_create+0x224>)
{
 100a2a2:	4604      	mov	r4, r0
    return m_ack_state;
 100a2a4:	783b      	ldrb	r3, [r7, #0]
{
 100a2a6:	b087      	sub	sp, #28
    switch (ack_state_get())
 100a2a8:	2b02      	cmp	r3, #2
 100a2aa:	d005      	beq.n	100a2b8 <nrf_802154_enh_ack_generator_create+0x1c>
 100a2ac:	2b03      	cmp	r3, #3
 100a2ae:	f000 8202 	beq.w	100a6b6 <nrf_802154_enh_ack_generator_create+0x41a>
 100a2b2:	b91b      	cbnz	r3, 100a2bc <nrf_802154_enh_ack_generator_create+0x20>
    m_ack_state = state_to_set;
 100a2b4:	2302      	movs	r3, #2
 100a2b6:	703b      	strb	r3, [r7, #0]
    return p_parser_data->parse_level;
 100a2b8:	7926      	ldrb	r6, [r4, #4]
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
 100a2ba:	b90e      	cbnz	r6, 100a2c0 <nrf_802154_enh_ack_generator_create+0x24>

            return processing_done ? p_ack : NULL;
        }

        case ACK_STATE_INVALID:
            return NULL;
 100a2bc:	2000      	movs	r0, #0
 100a2be:	e06e      	b.n	100a39e <nrf_802154_enh_ack_generator_create+0x102>
 100a2c0:	4d80      	ldr	r5, [pc, #512]	; (100a4c4 <nrf_802154_enh_ack_generator_create+0x228>)
 100a2c2:	792b      	ldrb	r3, [r5, #4]
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
 100a2c4:	2b00      	cmp	r3, #0
 100a2c6:	d155      	bne.n	100a374 <nrf_802154_enh_ack_generator_create+0xd8>
    m_ack[FRAME_TYPE_OFFSET] |= FRAME_TYPE_ACK;
 100a2c8:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 100a4c8 <nrf_802154_enh_ack_generator_create+0x22c>
 100a2cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 100a2d0:	f043 0202 	orr.w	r2, r3, #2
 100a2d4:	f888 2001 	strb.w	r2, [r8, #1]
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100a2d8:	6822      	ldr	r2, [r4, #0]
 100a2da:	7852      	ldrb	r2, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_frame_data))
 100a2dc:	0711      	lsls	r1, r2, #28
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
 100a2de:	bf44      	itt	mi
 100a2e0:	f043 030a 	orrmi.w	r3, r3, #10
 100a2e4:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 100a2e8:	6823      	ldr	r3, [r4, #0]
 100a2ea:	785b      	ldrb	r3, [r3, #1]
    if (nrf_802154_frame_parser_panid_compression_is_set(p_frame_data))
 100a2ec:	065a      	lsls	r2, r3, #25
        m_ack[PAN_ID_COMPR_OFFSET] |= PAN_ID_COMPR_MASK;
 100a2ee:	bf42      	ittt	mi
 100a2f0:	f898 3001 	ldrbmi.w	r3, [r8, #1]
 100a2f4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 100a2f8:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100a2fc:	6823      	ldr	r3, [r4, #0]
 100a2fe:	789b      	ldrb	r3, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_frame_data))
 100a300:	07db      	lsls	r3, r3, #31
        m_ack[DSN_SUPPRESS_OFFSET] |= DSN_SUPPRESS_BIT;
 100a302:	bf42      	ittt	mi
 100a304:	f898 3002 	ldrbmi.w	r3, [r8, #2]
 100a308:	f043 0301 	orrmi.w	r3, r3, #1
 100a30c:	f888 3002 	strbmi.w	r3, [r8, #2]
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100a310:	6823      	ldr	r3, [r4, #0]
 100a312:	789a      	ldrb	r2, [r3, #2]
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
 100a314:	f898 3002 	ldrb.w	r3, [r8, #2]
 100a318:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (nrf_802154_frame_parser_src_addr_is_extended(p_frame_data))
 100a31c:	2ac0      	cmp	r2, #192	; 0xc0
 100a31e:	d124      	bne.n	100a36a <nrf_802154_enh_ack_generator_create+0xce>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
 100a320:	f043 030c 	orr.w	r3, r3, #12
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
 100a324:	f888 3002 	strb.w	r3, [r8, #2]
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
 100a328:	f898 3002 	ldrb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
 100a32c:	2e05      	cmp	r6, #5
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
 100a32e:	f043 0320 	orr.w	r3, r3, #32
 100a332:	f888 3002 	strb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
 100a336:	d902      	bls.n	100a33e <nrf_802154_enh_ack_generator_create+0xa2>
        fcf_frame_pending_set(p_frame_data);
 100a338:	4620      	mov	r0, r4
 100a33a:	f7ff ff83 	bl	100a244 <fcf_frame_pending_set>
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a33e:	f898 1000 	ldrb.w	r1, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a342:	2201      	movs	r2, #1
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a344:	1c8b      	adds	r3, r1, #2
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a346:	3103      	adds	r1, #3
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a348:	485e      	ldr	r0, [pc, #376]	; (100a4c4 <nrf_802154_enh_ack_generator_create+0x228>)
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a34a:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a34e:	b2c9      	uxtb	r1, r1
 100a350:	f004 fc1e 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
 100a354:	2e01      	cmp	r6, #1
 100a356:	d0b1      	beq.n	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
    *p_bytes_written   = sequence_number_set(p_frame_data);
 100a358:	6822      	ldr	r2, [r4, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100a35a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 100a4c8 <nrf_802154_enh_ack_generator_create+0x22c>
 100a35e:	7893      	ldrb	r3, [r2, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
 100a360:	f013 0f01 	tst.w	r3, #1
 100a364:	d01e      	beq.n	100a3a4 <nrf_802154_enh_ack_generator_create+0x108>
    return 0U;
 100a366:	2300      	movs	r3, #0
 100a368:	e022      	b.n	100a3b0 <nrf_802154_enh_ack_generator_create+0x114>
    else if (nrf_802154_frame_parser_src_addr_is_short(p_frame_data))
 100a36a:	2a80      	cmp	r2, #128	; 0x80
 100a36c:	d1dc      	bne.n	100a328 <nrf_802154_enh_ack_generator_create+0x8c>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
 100a36e:	f043 0308 	orr.w	r3, r3, #8
 100a372:	e7d7      	b.n	100a324 <nrf_802154_enh_ack_generator_create+0x88>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
 100a374:	2e01      	cmp	r6, #1
 100a376:	d0a1      	beq.n	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
 100a378:	2b01      	cmp	r3, #1
 100a37a:	d0ed      	beq.n	100a358 <nrf_802154_enh_ack_generator_create+0xbc>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
 100a37c:	2e02      	cmp	r6, #2
 100a37e:	d09d      	beq.n	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
 100a380:	2b02      	cmp	r3, #2
 100a382:	d06f      	beq.n	100a464 <nrf_802154_enh_ack_generator_create+0x1c8>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
 100a384:	2e04      	cmp	r6, #4
 100a386:	d999      	bls.n	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
 100a388:	2b04      	cmp	r3, #4
 100a38a:	f240 8092 	bls.w	100a4b2 <nrf_802154_enh_ack_generator_create+0x216>
    if (frame_parse_level == PARSE_LEVEL_FULL)
 100a38e:	2e06      	cmp	r6, #6
 100a390:	d194      	bne.n	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
        fcf_frame_pending_set(p_frame_data);
 100a392:	4620      	mov	r0, r4
 100a394:	f7ff ff56 	bl	100a244 <fcf_frame_pending_set>
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
 100a398:	2303      	movs	r3, #3
            return m_ack;
 100a39a:	484b      	ldr	r0, [pc, #300]	; (100a4c8 <nrf_802154_enh_ack_generator_create+0x22c>)
    m_ack_state = state_to_set;
 100a39c:	703b      	strb	r3, [r7, #0]

        default:
            assert(false);
            return NULL;
    }
}
 100a39e:	b007      	add	sp, #28
 100a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p_frame_dsn != NULL)
 100a3a4:	1cd3      	adds	r3, r2, #3
 100a3a6:	d003      	beq.n	100a3b0 <nrf_802154_enh_ack_generator_create+0x114>
        m_ack[DSN_OFFSET] = *p_frame_dsn;
 100a3a8:	78d3      	ldrb	r3, [r2, #3]
 100a3aa:	f889 3003 	strb.w	r3, [r9, #3]
        return DSN_SIZE;
 100a3ae:	2301      	movs	r3, #1
    return p_parser_data->mhr.dst.panid_offset;
 100a3b0:	f895 8006 	ldrb.w	r8, [r5, #6]
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a3b4:	f899 2000 	ldrb.w	r2, [r9]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a3b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
        return NULL;
 100a3bc:	bf08      	it	eq
 100a3be:	f04f 0800 	moveq.w	r8, #0
 100a3c2:	4413      	add	r3, r2
 100a3c4:	f889 3000 	strb.w	r3, [r9]
    return p_parser_data->mhr.dst.addr_offset;
 100a3c8:	f895 a007 	ldrb.w	sl, [r5, #7]
    return &p_parser_data->p_frame[offset];
 100a3cc:	bf18      	it	ne
 100a3ce:	682b      	ldrne	r3, [r5, #0]
    return p_parser_data->mhr.dst.panid_offset;
 100a3d0:	79a0      	ldrb	r0, [r4, #6]
    return &p_parser_data->p_frame[offset];
 100a3d2:	bf18      	it	ne
 100a3d4:	4498      	addne	r8, r3
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a3d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a3da:	bf16      	itet	ne
 100a3dc:	682b      	ldrne	r3, [r5, #0]
        return NULL;
 100a3de:	f04f 0a00 	moveq.w	sl, #0
    return &p_parser_data->p_frame[offset];
 100a3e2:	449a      	addne	sl, r3
    return p_parser_data->mhr.src.panid_offset;
 100a3e4:	7a23      	ldrb	r3, [r4, #8]
    return p_parser_data->helper.src_addr_size;
 100a3e6:	f894 b012 	ldrb.w	fp, [r4, #18]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a3ea:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a3ec:	bf16      	itet	ne
 100a3ee:	6822      	ldrne	r2, [r4, #0]
        return NULL;
 100a3f0:	2200      	moveq	r2, #0
    return &p_parser_data->p_frame[offset];
 100a3f2:	18d2      	addne	r2, r2, r3
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a3f4:	28ff      	cmp	r0, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a3f6:	bf16      	itet	ne
 100a3f8:	6821      	ldrne	r1, [r4, #0]
        return NULL;
 100a3fa:	2100      	moveq	r1, #0
    return &p_parser_data->p_frame[offset];
 100a3fc:	1809      	addne	r1, r1, r0
    return p_parser_data->mhr.src.addr_offset;
 100a3fe:	7a60      	ldrb	r0, [r4, #9]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a400:	28ff      	cmp	r0, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a402:	bf16      	itet	ne
 100a404:	6823      	ldrne	r3, [r4, #0]
        return NULL;
 100a406:	2300      	moveq	r3, #0
    return &p_parser_data->p_frame[offset];
 100a408:	181b      	addne	r3, r3, r0
    if (p_ack_dst_panid != NULL)
 100a40a:	f1b8 0f00 	cmp.w	r8, #0
 100a40e:	d00e      	beq.n	100a42e <nrf_802154_enh_ack_generator_create+0x192>
        if (p_frame_src_panid != NULL)
 100a410:	bb72      	cbnz	r2, 100a470 <nrf_802154_enh_ack_generator_create+0x1d4>
        else if (p_frame_dst_panid != NULL)
 100a412:	b921      	cbnz	r1, 100a41e <nrf_802154_enh_ack_generator_create+0x182>
 100a414:	9301      	str	r3, [sp, #4]
            p_dst_panid = nrf_802154_pib_pan_id_get();
 100a416:	f7fd ffa9 	bl	100836c <nrf_802154_pib_pan_id_get>
 100a41a:	4601      	mov	r1, r0
 100a41c:	9b01      	ldr	r3, [sp, #4]
        memcpy(p_ack_dst_panid, p_dst_panid, PAN_ID_SIZE);
 100a41e:	4640      	mov	r0, r8
        bytes_written += PAN_ID_SIZE;
 100a420:	f04f 0802 	mov.w	r8, #2
        memcpy(p_ack_dst_panid, p_dst_panid, PAN_ID_SIZE);
 100a424:	2202      	movs	r2, #2
 100a426:	9301      	str	r3, [sp, #4]
 100a428:	f004 f8b5 	bl	100e596 <memcpy>
        bytes_written += PAN_ID_SIZE;
 100a42c:	9b01      	ldr	r3, [sp, #4]
    if ((p_ack_dst_addr != NULL) && (p_frame_src_addr != NULL))
 100a42e:	f1ba 0f00 	cmp.w	sl, #0
 100a432:	d008      	beq.n	100a446 <nrf_802154_enh_ack_generator_create+0x1aa>
 100a434:	b13b      	cbz	r3, 100a446 <nrf_802154_enh_ack_generator_create+0x1aa>
        memcpy(p_ack_dst_addr, p_frame_src_addr, src_addr_size);
 100a436:	465a      	mov	r2, fp
 100a438:	4619      	mov	r1, r3
 100a43a:	4650      	mov	r0, sl
 100a43c:	f004 f8ab 	bl	100e596 <memcpy>
        bytes_written += src_addr_size;
 100a440:	44d8      	add	r8, fp
 100a442:	fa5f f888 	uxtb.w	r8, r8
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a446:	f899 1000 	ldrb.w	r1, [r9]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a44a:	2202      	movs	r2, #2
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a44c:	4441      	add	r1, r8
 100a44e:	b2c9      	uxtb	r1, r1
 100a450:	f889 1000 	strb.w	r1, [r9]
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a454:	3101      	adds	r1, #1
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a456:	481b      	ldr	r0, [pc, #108]	; (100a4c4 <nrf_802154_enh_ack_generator_create+0x228>)
 100a458:	b2c9      	uxtb	r1, r1
 100a45a:	f004 fb99 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
 100a45e:	2e02      	cmp	r6, #2
 100a460:	f67f af2c 	bls.w	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
    return p_parser_data->mhr.src.addr_offset;
 100a464:	7a60      	ldrb	r0, [r4, #9]
    return &p_parser_data->p_frame[offset];
 100a466:	6823      	ldr	r3, [r4, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a468:	28ff      	cmp	r0, #255	; 0xff
 100a46a:	d103      	bne.n	100a474 <nrf_802154_enh_ack_generator_create+0x1d8>
        return NULL;
 100a46c:	2000      	movs	r0, #0
 100a46e:	e002      	b.n	100a476 <nrf_802154_enh_ack_generator_create+0x1da>
 100a470:	4611      	mov	r1, r2
 100a472:	e7d4      	b.n	100a41e <nrf_802154_enh_ack_generator_create+0x182>
    return &p_parser_data->p_frame[offset];
 100a474:	4418      	add	r0, r3
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100a476:	7899      	ldrb	r1, [r3, #2]
    mp_ie_data = nrf_802154_ack_data_ie_get(
 100a478:	4a14      	ldr	r2, [pc, #80]	; (100a4cc <nrf_802154_enh_ack_generator_create+0x230>)
 100a47a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 100a47e:	f1a1 0cc0 	sub.w	ip, r1, #192	; 0xc0
 100a482:	f1dc 0100 	rsbs	r1, ip, #0
 100a486:	eb41 010c 	adc.w	r1, r1, ip
 100a48a:	f7ff feb5 	bl	100a1f8 <nrf_802154_ack_data_ie_get>
 100a48e:	4b10      	ldr	r3, [pc, #64]	; (100a4d0 <nrf_802154_enh_ack_generator_create+0x234>)
 100a490:	6018      	str	r0, [r3, #0]
    if (ie_present)
 100a492:	4b0d      	ldr	r3, [pc, #52]	; (100a4c8 <nrf_802154_enh_ack_generator_create+0x22c>)
 100a494:	b118      	cbz	r0, 100a49e <nrf_802154_enh_ack_generator_create+0x202>
        m_ack[IE_PRESENT_OFFSET] |= IE_PRESENT_BIT;
 100a496:	789a      	ldrb	r2, [r3, #2]
 100a498:	f042 0202 	orr.w	r2, r2, #2
 100a49c:	709a      	strb	r2, [r3, #2]
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a49e:	7819      	ldrb	r1, [r3, #0]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a4a0:	2203      	movs	r2, #3
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a4a2:	3101      	adds	r1, #1
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a4a4:	4807      	ldr	r0, [pc, #28]	; (100a4c4 <nrf_802154_enh_ack_generator_create+0x228>)
 100a4a6:	b2c9      	uxtb	r1, r1
 100a4a8:	f004 fb72 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
 100a4ac:	2e04      	cmp	r6, #4
 100a4ae:	f67f af05 	bls.w	100a2bc <nrf_802154_enh_ack_generator_create+0x20>
    return p_parser_data->helper.addressing_end_offset;
 100a4b2:	7d29      	ldrb	r1, [r5, #20]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a4b4:	29ff      	cmp	r1, #255	; 0xff
 100a4b6:	d10d      	bne.n	100a4d4 <nrf_802154_enh_ack_generator_create+0x238>
        return NULL;
 100a4b8:	f04f 0a00 	mov.w	sl, #0
 100a4bc:	e00d      	b.n	100a4da <nrf_802154_enh_ack_generator_create+0x23e>
 100a4be:	bf00      	nop
 100a4c0:	210047c8 	.word	0x210047c8
 100a4c4:	210037c0 	.word	0x210037c0
 100a4c8:	21004748 	.word	0x21004748
 100a4cc:	210047c9 	.word	0x210047c9
 100a4d0:	210037d8 	.word	0x210037d8
    return &p_parser_data->p_frame[offset];
 100a4d4:	682b      	ldr	r3, [r5, #0]
 100a4d6:	eb03 0a01 	add.w	sl, r3, r1
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100a4da:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a4dc:	2bff      	cmp	r3, #255	; 0xff
 100a4de:	f000 80e4 	beq.w	100a6aa <nrf_802154_enh_ack_generator_create+0x40e>
    return &p_parser_data->p_frame[offset];
 100a4e2:	6822      	ldr	r2, [r4, #0]
 100a4e4:	eb02 0803 	add.w	r8, r2, r3
    if ((ack_sec_ctrl == NULL) || (frame_sec_ctrl == NULL))
 100a4e8:	f1ba 0f00 	cmp.w	sl, #0
 100a4ec:	f000 80dd 	beq.w	100a6aa <nrf_802154_enh_ack_generator_create+0x40e>
 100a4f0:	f1b8 0f00 	cmp.w	r8, #0
 100a4f4:	f000 80db 	beq.w	100a6ae <nrf_802154_enh_ack_generator_create+0x412>
    *ack_sec_ctrl  = *frame_sec_ctrl;
 100a4f8:	5cd3      	ldrb	r3, [r2, r3]
                                                       ack_sec_ctrl_offset + PHR_SIZE,
 100a4fa:	3101      	adds	r1, #1
    *ack_sec_ctrl  = *frame_sec_ctrl;
 100a4fc:	f88a 3000 	strb.w	r3, [sl]
    result = nrf_802154_frame_parser_valid_data_extend(p_ack_data,
 100a500:	2204      	movs	r2, #4
 100a502:	486e      	ldr	r0, [pc, #440]	; (100a6bc <nrf_802154_enh_ack_generator_create+0x420>)
 100a504:	b2c9      	uxtb	r1, r1
 100a506:	f004 fb43 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100a50a:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a50c:	2bff      	cmp	r3, #255	; 0xff
 100a50e:	d003      	beq.n	100a518 <nrf_802154_enh_ack_generator_create+0x27c>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100a510:	6822      	ldr	r2, [r4, #0]
 100a512:	5cd1      	ldrb	r1, [r2, r3]
    if (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data) == SECURITY_LEVEL_NONE)
 100a514:	0749      	lsls	r1, r1, #29
 100a516:	d168      	bne.n	100a5ea <nrf_802154_enh_ack_generator_create+0x34e>
    return aux_sec_hdr_end - sec_ctrl_offset;
 100a518:	f894 9015 	ldrb.w	r9, [r4, #21]
        memcpy(ack_sec_ctrl + SECURITY_CONTROL_SIZE,
 100a51c:	f108 0101 	add.w	r1, r8, #1
    return aux_sec_hdr_end - sec_ctrl_offset;
 100a520:	eba9 0903 	sub.w	r9, r9, r3
 100a524:	fa5f f989 	uxtb.w	r9, r9
        uint8_t sec_hdr_size = security_header_size(p_frame_data) - SECURITY_CONTROL_SIZE;
 100a528:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
        memcpy(ack_sec_ctrl + SECURITY_CONTROL_SIZE,
 100a52c:	b2d2      	uxtb	r2, r2
 100a52e:	f10a 0001 	add.w	r0, sl, #1
 100a532:	f004 f830 	bl	100e596 <memcpy>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
 100a536:	7de9      	ldrb	r1, [r5, #23]
 100a538:	4449      	add	r1, r9
 100a53a:	b2c9      	uxtb	r1, r1
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a53c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 100a6c0 <nrf_802154_enh_ack_generator_create+0x424>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
 100a540:	f8df a180 	ldr.w	sl, [pc, #384]	; 100a6c4 <nrf_802154_enh_ack_generator_create+0x428>
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a544:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a548:	2205      	movs	r2, #5
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100a54a:	4419      	add	r1, r3
 100a54c:	b2c9      	uxtb	r1, r1
 100a54e:	f888 1000 	strb.w	r1, [r8]
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a552:	3101      	adds	r1, #1
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a554:	b2c9      	uxtb	r1, r1
 100a556:	4859      	ldr	r0, [pc, #356]	; (100a6bc <nrf_802154_enh_ack_generator_create+0x420>)
 100a558:	f004 fb1a 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
 100a55c:	f8da 1000 	ldr.w	r1, [sl]
    if (p_ie_data == NULL)
 100a560:	f8df 9164 	ldr.w	r9, [pc, #356]	; 100a6c8 <nrf_802154_enh_ack_generator_create+0x42c>
 100a564:	b131      	cbz	r1, 100a574 <nrf_802154_enh_ack_generator_create+0x2d8>
    p_ack_ie = (uint8_t *)p_ack_data->p_frame + ie_offset;
 100a566:	7d68      	ldrb	r0, [r5, #21]
 100a568:	682b      	ldr	r3, [r5, #0]
    memcpy(p_ack_ie, p_ie_data, ie_data_len);
 100a56a:	f899 2000 	ldrb.w	r2, [r9]
 100a56e:	4418      	add	r0, r3
 100a570:	f004 f811 	bl	100e596 <memcpy>
    m_ack[PHR_OFFSET] += m_ie_data_len;
 100a574:	f898 3000 	ldrb.w	r3, [r8]
 100a578:	f899 9000 	ldrb.w	r9, [r9]
    if (p_ie_data == NULL)
 100a57c:	f8da 1000 	ldr.w	r1, [sl]
    m_ack[PHR_OFFSET] += m_ie_data_len;
 100a580:	444b      	add	r3, r9
 100a582:	f888 3000 	strb.w	r3, [r8]
    if (p_ie_data == NULL)
 100a586:	b311      	cbz	r1, 100a5ce <nrf_802154_enh_ack_generator_create+0x332>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100a588:	f8d5 a000 	ldr.w	sl, [r5]
 100a58c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    if ((nrf_802154_frame_parser_security_enabled_bit_is_set(p_ack_data) == false) ||
 100a590:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 100a594:	071b      	lsls	r3, r3, #28
 100a596:	d51a      	bpl.n	100a5ce <nrf_802154_enh_ack_generator_create+0x332>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100a598:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a59a:	2bff      	cmp	r3, #255	; 0xff
 100a59c:	f000 8089 	beq.w	100a6b2 <nrf_802154_enh_ack_generator_create+0x416>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100a5a0:	f81a 1003 	ldrb.w	r1, [sl, r3]
 100a5a4:	f011 0107 	ands.w	r1, r1, #7
 100a5a8:	d011      	beq.n	100a5ce <nrf_802154_enh_ack_generator_create+0x332>
    uint8_t * p_ack_ie = (uint8_t *)p_ack_data->p_frame + p_ack_data->helper.aux_sec_hdr_end_offset;
 100a5aa:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 100a5ae:	7d6d      	ldrb	r5, [r5, #21]
 * @param[out] p_buffer  A little-endian byte array to be populated
 */
static inline void host_16_to_little(uint16_t value, uint8_t * p_buffer)
{
    assert(p_buffer != NULL);
    memcpy(p_buffer, &value, sizeof(uint16_t));
 100a5b0:	2202      	movs	r2, #2
 100a5b2:	a904      	add	r1, sp, #16
 100a5b4:	a803      	add	r0, sp, #12
 100a5b6:	f8ad 3010 	strh.w	r3, [sp, #16]
 100a5ba:	f003 ffec 	bl	100e596 <memcpy>
    memcpy(p_ack_ie + ie_data_len, ie_hdr_term, sizeof(ie_hdr_term));
 100a5be:	eb09 0005 	add.w	r0, r9, r5
 100a5c2:	a903      	add	r1, sp, #12
 100a5c4:	2202      	movs	r2, #2
 100a5c6:	4450      	add	r0, sl
 100a5c8:	f003 ffe5 	bl	100e596 <memcpy>
    return sizeof(ie_hdr_term);
 100a5cc:	2102      	movs	r1, #2
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100a5ce:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a5d2:	2206      	movs	r2, #6
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100a5d4:	4419      	add	r1, r3
 100a5d6:	b249      	sxtb	r1, r1
 100a5d8:	1c8b      	adds	r3, r1, #2
                                                            m_ack[PHR_OFFSET] + PHR_SIZE,
 100a5da:	3103      	adds	r1, #3
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100a5dc:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100a5e0:	b2c9      	uxtb	r1, r1
 100a5e2:	4836      	ldr	r0, [pc, #216]	; (100a6bc <nrf_802154_enh_ack_generator_create+0x420>)
 100a5e4:	f004 fad4 	bl	100eb90 <nrf_802154_frame_parser_valid_data_extend>
}
 100a5e8:	e6d1      	b.n	100a38e <nrf_802154_enh_ack_generator_create+0xf2>
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 100a5ea:	7b21      	ldrb	r1, [r4, #12]
 100a5ec:	7b28      	ldrb	r0, [r5, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a5ee:	29ff      	cmp	r1, #255	; 0xff
        return NULL;
 100a5f0:	bf0c      	ite	eq
 100a5f2:	2100      	moveq	r1, #0
    return &p_parser_data->p_frame[offset];
 100a5f4:	1889      	addne	r1, r1, r2
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a5f6:	28ff      	cmp	r0, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100a5f8:	bf16      	itet	ne
 100a5fa:	682b      	ldrne	r3, [r5, #0]
        return NULL;
 100a5fc:	2000      	moveq	r0, #0
    return &p_parser_data->p_frame[offset];
 100a5fe:	18c0      	addne	r0, r0, r3
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100a600:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a602:	2bff      	cmp	r3, #255	; 0xff
 100a604:	d047      	beq.n	100a696 <nrf_802154_enh_ack_generator_create+0x3fa>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100a606:	682a      	ldr	r2, [r5, #0]
 100a608:	f812 8003 	ldrb.w	r8, [r2, r3]
 100a60c:	f3c8 08c1 	ubfx	r8, r8, #3, #2
    switch (key_id_mode)
 100a610:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 100a614:	2b02      	cmp	r3, #2
 100a616:	d83e      	bhi.n	100a696 <nrf_802154_enh_ack_generator_create+0x3fa>
 100a618:	ea4f 0888 	mov.w	r8, r8, lsl #2
 100a61c:	f1a8 0803 	sub.w	r8, r8, #3
 100a620:	fa5f f888 	uxtb.w	r8, r8
    if ((p_ack_key_id != NULL) && (p_frame_key_id != NULL))
 100a624:	b118      	cbz	r0, 100a62e <nrf_802154_enh_ack_generator_create+0x392>
 100a626:	b111      	cbz	r1, 100a62e <nrf_802154_enh_ack_generator_create+0x392>
        memcpy(p_ack_key_id, p_frame_key_id, key_id_size);
 100a628:	4642      	mov	r2, r8
 100a62a:	f003 ffb4 	bl	100e596 <memcpy>
    return p_parser_data->mhr.aux_sec_hdr.frame_counter_offset;
 100a62e:	f895 900b 	ldrb.w	r9, [r5, #11]
        bytes_written           += security_key_id_set(p_frame_data, p_ack_data);
 100a632:	f108 0801 	add.w	r8, r8, #1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a636:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 100a63a:	fa5f f888 	uxtb.w	r8, r8
 100a63e:	d02d      	beq.n	100a69c <nrf_802154_enh_ack_generator_create+0x400>
    return &p_parser_data->p_frame[offset];
 100a640:	682b      	ldr	r3, [r5, #0]
    if (p_frame_counter == NULL)
 100a642:	eb13 0909 	adds.w	r9, r3, r9
 100a646:	d01d      	beq.n	100a684 <nrf_802154_enh_ack_generator_create+0x3e8>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100a648:	7aaa      	ldrb	r2, [r5, #10]
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
 100a64a:	a904      	add	r1, sp, #16
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a64c:	2aff      	cmp	r2, #255	; 0xff
        return 0;
 100a64e:	bf0c      	ite	eq
 100a650:	2200      	moveq	r2, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100a652:	5c9a      	ldrbne	r2, [r3, r2]
 100a654:	a802      	add	r0, sp, #8
 100a656:	bf18      	it	ne
 100a658:	f3c2 02c1 	ubfxne	r2, r2, #3, #2
    ack_key_id.mode     = nrf_802154_frame_parser_sec_ctrl_key_id_mode_get(p_ack_data);
 100a65c:	f88d 2010 	strb.w	r2, [sp, #16]
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 100a660:	7b2a      	ldrb	r2, [r5, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100a662:	2aff      	cmp	r2, #255	; 0xff
        return NULL;
 100a664:	bf0c      	ite	eq
 100a666:	2300      	moveq	r3, #0
    return &p_parser_data->p_frame[offset];
 100a668:	189b      	addne	r3, r3, r2
    ack_key_id.p_key_id = (uint8_t *)nrf_802154_frame_parser_key_id_get(p_ack_data);
 100a66a:	9305      	str	r3, [sp, #20]
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
 100a66c:	f7ff fb6c 	bl	1009d48 <nrf_802154_security_pib_frame_counter_get_next>
    if (NRF_802154_SECURITY_ERROR_NONE !=
 100a670:	b9b8      	cbnz	r0, 100a6a2 <nrf_802154_enh_ack_generator_create+0x406>
    host_32_to_little(new_fc_value, p_frame_counter);
 100a672:	9b02      	ldr	r3, [sp, #8]
    memcpy(p_buffer, &value, sizeof(uint32_t));
 100a674:	4648      	mov	r0, r9
 100a676:	2204      	movs	r2, #4
 100a678:	a903      	add	r1, sp, #12
 100a67a:	9303      	str	r3, [sp, #12]
    *p_bytes_written = FRAME_COUNTER_SIZE;
 100a67c:	f04f 0904 	mov.w	r9, #4
 100a680:	f003 ff89 	bl	100e596 <memcpy>
        return true;
 100a684:	2001      	movs	r0, #1
        bytes_written           += fc_bytes_written;
 100a686:	44c8      	add	r8, r9
 100a688:	fa5f f988 	uxtb.w	r9, r8
    if (security_header_set(p_frame_data, &m_ack_data, p_bytes_written) == false)
 100a68c:	2800      	cmp	r0, #0
 100a68e:	f47f af52 	bne.w	100a536 <nrf_802154_enh_ack_generator_create+0x29a>
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
 100a692:	2301      	movs	r3, #1
 100a694:	e682      	b.n	100a39c <nrf_802154_enh_ack_generator_create+0x100>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100a696:	f04f 0800 	mov.w	r8, #0
 100a69a:	e7c3      	b.n	100a624 <nrf_802154_enh_ack_generator_create+0x388>
        *p_bytes_written = 0;
 100a69c:	f04f 0900 	mov.w	r9, #0
 100a6a0:	e7f0      	b.n	100a684 <nrf_802154_enh_ack_generator_create+0x3e8>
        *p_bytes_written = 0;
 100a6a2:	f04f 0900 	mov.w	r9, #0
        return false;
 100a6a6:	4648      	mov	r0, r9
 100a6a8:	e7ed      	b.n	100a686 <nrf_802154_enh_ack_generator_create+0x3ea>
        *p_bytes_written = bytes_written;
 100a6aa:	2100      	movs	r1, #0
 100a6ac:	e746      	b.n	100a53c <nrf_802154_enh_ack_generator_create+0x2a0>
 100a6ae:	4641      	mov	r1, r8
 100a6b0:	e744      	b.n	100a53c <nrf_802154_enh_ack_generator_create+0x2a0>
        return 0U;
 100a6b2:	2100      	movs	r1, #0
 100a6b4:	e78b      	b.n	100a5ce <nrf_802154_enh_ack_generator_create+0x332>
    switch (ack_state_get())
 100a6b6:	4802      	ldr	r0, [pc, #8]	; (100a6c0 <nrf_802154_enh_ack_generator_create+0x424>)
 100a6b8:	e671      	b.n	100a39e <nrf_802154_enh_ack_generator_create+0x102>
 100a6ba:	bf00      	nop
 100a6bc:	210037c0 	.word	0x210037c0
 100a6c0:	21004748 	.word	0x21004748
 100a6c4:	210037d8 	.word	0x210037d8
 100a6c8:	210047c9 	.word	0x210047c9

0100a6cc <nrf_802154_imm_ack_generator_init>:
#define IMM_ACK_INITIALIZER {IMM_ACK_LENGTH, ACK_HEADER_WITH_PENDING, 0x00, 0x00, 0x00, 0x00}

static uint8_t m_ack_data[IMM_ACK_LENGTH + PHR_SIZE];

void nrf_802154_imm_ack_generator_init(void)
{
 100a6cc:	b507      	push	{r0, r1, r2, lr}
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100a6ce:	4b07      	ldr	r3, [pc, #28]	; (100a6ec <nrf_802154_imm_ack_generator_init+0x20>)

    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100a6d0:	2206      	movs	r2, #6
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100a6d2:	6818      	ldr	r0, [r3, #0]
 100a6d4:	889b      	ldrh	r3, [r3, #4]
 100a6d6:	9000      	str	r0, [sp, #0]
    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100a6d8:	4669      	mov	r1, sp
 100a6da:	4805      	ldr	r0, [pc, #20]	; (100a6f0 <nrf_802154_imm_ack_generator_init+0x24>)
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100a6dc:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100a6e0:	f003 ff59 	bl	100e596 <memcpy>
}
 100a6e4:	b003      	add	sp, #12
 100a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 100a6ea:	bf00      	nop
 100a6ec:	010102ea 	.word	0x010102ea
 100a6f0:	210047ca 	.word	0x210047ca

0100a6f4 <nrf_802154_imm_ack_generator_create>:
    // Intentionally empty
}

uint8_t * nrf_802154_imm_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100a6f4:	b510      	push	{r4, lr}
    if (nrf_802154_frame_parser_parse_level_get(p_frame_data) < PARSE_LEVEL_FULL)
 100a6f6:	7902      	ldrb	r2, [r0, #4]
 100a6f8:	2a05      	cmp	r2, #5
 100a6fa:	d911      	bls.n	100a720 <nrf_802154_imm_ack_generator_create+0x2c>
    {
        // The entire frame being acknowledged is necessary to correctly generate Ack
        return NULL;
    }

    const uint8_t * frame_dsn = nrf_802154_frame_parser_dsn_get(p_frame_data);
 100a6fc:	6803      	ldr	r3, [r0, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100a6fe:	789a      	ldrb	r2, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
 100a700:	07d2      	lsls	r2, r2, #31
 100a702:	d40d      	bmi.n	100a720 <nrf_802154_imm_ack_generator_create+0x2c>

    if (frame_dsn == NULL)
 100a704:	1cdc      	adds	r4, r3, #3
 100a706:	d007      	beq.n	100a718 <nrf_802154_imm_ack_generator_create+0x24>
    {
        return NULL;
    }

    // Set valid sequence number in ACK frame.
    m_ack_data[DSN_OFFSET] = *frame_dsn;
 100a708:	78db      	ldrb	r3, [r3, #3]
 100a70a:	4c06      	ldr	r4, [pc, #24]	; (100a724 <nrf_802154_imm_ack_generator_create+0x30>)
 100a70c:	70e3      	strb	r3, [r4, #3]

    // Set pending bit in ACK frame.
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
 100a70e:	f7ff fd21 	bl	100a154 <nrf_802154_ack_data_pending_bit_should_be_set>
 100a712:	b118      	cbz	r0, 100a71c <nrf_802154_imm_ack_generator_create+0x28>
    {
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITH_PENDING;
 100a714:	2312      	movs	r3, #18
    }
    else
    {
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITHOUT_PENDING;
 100a716:	7063      	strb	r3, [r4, #1]
    }

    return m_ack_data;
}
 100a718:	4620      	mov	r0, r4
 100a71a:	bd10      	pop	{r4, pc}
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITHOUT_PENDING;
 100a71c:	2302      	movs	r3, #2
 100a71e:	e7fa      	b.n	100a716 <nrf_802154_imm_ack_generator_create+0x22>
        return NULL;
 100a720:	2400      	movs	r4, #0
 100a722:	e7f9      	b.n	100a718 <nrf_802154_imm_ack_generator_create+0x24>
 100a724:	210047ca 	.word	0x210047ca

0100a728 <ntf_enter>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100a728:	f3ef 8210 	mrs	r2, PRIMASK
 *
 * @return Pointer to an empty slot in the notification queue.
 */
static nrf_802154_ntf_data_t * ntf_enter(void)
{
    nrf_802154_mcu_critical_enter(m_mcu_cs);
 100a72c:	4b02      	ldr	r3, [pc, #8]	; (100a738 <ntf_enter+0x10>)
 100a72e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 100a730:	b672      	cpsid	i

    assert(!nrf_802154_queue_is_full(&m_notifications_queue));

    return nrf_802154_queue_push_begin(&m_notifications_queue);
 100a732:	4802      	ldr	r0, [pc, #8]	; (100a73c <ntf_enter+0x14>)
 100a734:	f004 b991 	b.w	100ea5a <nrf_802154_queue_push_begin>
 100a738:	210037dc 	.word	0x210037dc
 100a73c:	210037e0 	.word	0x210037e0

0100a740 <ntf_exit>:
 *
 * This is a helper function used in all notification functions to end atomic slot update
 * and trigger SWI to process the notification from the slot.
 */
static void ntf_exit(void)
{
 100a740:	b508      	push	{r3, lr}
    nrf_802154_queue_push_commit(&m_notifications_queue);
 100a742:	4805      	ldr	r0, [pc, #20]	; (100a758 <ntf_exit+0x18>)
 100a744:	f004 f98f 	bl	100ea66 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
 100a748:	2201      	movs	r2, #1
 100a74a:	4b04      	ldr	r3, [pc, #16]	; (100a75c <ntf_exit+0x1c>)
 100a74c:	601a      	str	r2, [r3, #0]

    nrf_egu_task_trigger(NRF_802154_EGU_INSTANCE, NTF_TASK);

    nrf_802154_mcu_critical_exit(m_mcu_cs);
 100a74e:	4b04      	ldr	r3, [pc, #16]	; (100a760 <ntf_exit+0x20>)
 100a750:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100a752:	f383 8810 	msr	PRIMASK, r3
}
 100a756:	bd08      	pop	{r3, pc}
 100a758:	210037e0 	.word	0x210037e0
 100a75c:	41014000 	.word	0x41014000
 100a760:	210037dc 	.word	0x210037dc

0100a764 <nrf_802154_notification_init>:

    ntf_exit();
}

void nrf_802154_notification_init(void)
{
 100a764:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_notifications_queue,
 100a766:	f44f 720c 	mov.w	r2, #560	; 0x230
 100a76a:	231c      	movs	r3, #28
 100a76c:	4905      	ldr	r1, [pc, #20]	; (100a784 <nrf_802154_notification_init+0x20>)
 100a76e:	4806      	ldr	r0, [pc, #24]	; (100a788 <nrf_802154_notification_init+0x24>)
 100a770:	f004 f96a 	bl	100ea48 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
 100a774:	2201      	movs	r2, #1
 100a776:	4b05      	ldr	r3, [pc, #20]	; (100a78c <nrf_802154_notification_init+0x28>)
 100a778:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_notifications_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, NTF_INT);

    nrf_802154_swi_init();
}
 100a77c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 100a780:	f7fd bea2 	b.w	10084c8 <nrf_802154_swi_init>
 100a784:	210037e8 	.word	0x210037e8
 100a788:	210037e0 	.word	0x210037e0
 100a78c:	41014000 	.word	0x41014000

0100a790 <nrf_802154_notification_swi_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100a790:	4b23      	ldr	r3, [pc, #140]	; (100a820 <nrf_802154_notification_swi_irq_handler+0x90>)
        nrf_802154_queue_pop_commit(&m_notifications_queue);
    }
}

void nrf_802154_notification_swi_irq_handler(void)
{
 100a792:	b510      	push	{r4, lr}
 100a794:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, NTF_EVENT))
 100a798:	b14a      	cbz	r2, 100a7ae <nrf_802154_notification_swi_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100a79a:	2200      	movs	r2, #0
 100a79c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100a7a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 * @retval true             When the queue is empty
 * @retval false            When the queue is not empty.
 */
static inline bool nrf_802154_queue_is_empty(const nrf_802154_queue_t * p_queue)
{
    return (p_queue->wridx == p_queue->rdidx);
 100a7a4:	4c1f      	ldr	r4, [pc, #124]	; (100a824 <nrf_802154_notification_swi_irq_handler+0x94>)
 100a7a6:	79a2      	ldrb	r2, [r4, #6]
 100a7a8:	79e3      	ldrb	r3, [r4, #7]
    while (!nrf_802154_queue_is_empty(&m_notifications_queue))
 100a7aa:	429a      	cmp	r2, r3
 100a7ac:	d100      	bne.n	100a7b0 <nrf_802154_notification_swi_irq_handler+0x20>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, NTF_EVENT);

        irq_handler_ntf_event();
    }
}
 100a7ae:	bd10      	pop	{r4, pc}
            (nrf_802154_ntf_data_t *)nrf_802154_queue_pop_begin(&m_notifications_queue);
 100a7b0:	4620      	mov	r0, r4
 100a7b2:	f004 f961 	bl	100ea78 <nrf_802154_queue_pop_begin>
        switch (p_slot->type)
 100a7b6:	7803      	ldrb	r3, [r0, #0]
 100a7b8:	2b07      	cmp	r3, #7
 100a7ba:	d80b      	bhi.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
 100a7bc:	e8df f003 	tbb	[pc, r3]
 100a7c0:	19130e04 	.word	0x19130e04
 100a7c4:	2c282420 	.word	0x2c282420
                nrf_802154_received_raw(p_slot->data.received.p_data,
 100a7c8:	7a42      	ldrb	r2, [r0, #9]
 100a7ca:	f990 1008 	ldrsb.w	r1, [r0, #8]
 100a7ce:	6840      	ldr	r0, [r0, #4]
 100a7d0:	f7fc fc54 	bl	100707c <nrf_802154_received_raw>
        nrf_802154_queue_pop_commit(&m_notifications_queue);
 100a7d4:	4620      	mov	r0, r4
 100a7d6:	f004 f955 	bl	100ea84 <nrf_802154_queue_pop_commit>
 100a7da:	e7e4      	b.n	100a7a6 <nrf_802154_notification_swi_irq_handler+0x16>
                nrf_802154_receive_failed(p_slot->data.receive_failed.error,
 100a7dc:	6881      	ldr	r1, [r0, #8]
 100a7de:	7900      	ldrb	r0, [r0, #4]
 100a7e0:	f000 fe02 	bl	100b3e8 <nrf_802154_receive_failed>
                break;
 100a7e4:	e7f6      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_transmitted_raw(p_slot->data.transmitted.p_frame,
 100a7e6:	f100 0108 	add.w	r1, r0, #8
 100a7ea:	6840      	ldr	r0, [r0, #4]
 100a7ec:	f000 fe18 	bl	100b420 <nrf_802154_transmitted_raw>
            break;
 100a7f0:	e7f0      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_transmit_failed(p_slot->data.transmit_failed.p_frame,
 100a7f2:	7a01      	ldrb	r1, [r0, #8]
 100a7f4:	f100 020c 	add.w	r2, r0, #12
 100a7f8:	6840      	ldr	r0, [r0, #4]
 100a7fa:	f000 fe65 	bl	100b4c8 <nrf_802154_transmit_failed>
                break;
 100a7fe:	e7e9      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_energy_detected(p_slot->data.energy_detected.result);
 100a800:	7900      	ldrb	r0, [r0, #4]
 100a802:	f000 fd87 	bl	100b314 <nrf_802154_energy_detected>
                break;
 100a806:	e7e5      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_energy_detection_failed(
 100a808:	7900      	ldrb	r0, [r0, #4]
 100a80a:	f000 fd97 	bl	100b33c <nrf_802154_energy_detection_failed>
                break;
 100a80e:	e7e1      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_cca_done(p_slot->data.cca.result);
 100a810:	7900      	ldrb	r0, [r0, #4]
 100a812:	f000 fd57 	bl	100b2c4 <nrf_802154_cca_done>
                break;
 100a816:	e7dd      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
                nrf_802154_cca_failed(p_slot->data.cca_failed.error);
 100a818:	7900      	ldrb	r0, [r0, #4]
 100a81a:	f000 fd67 	bl	100b2ec <nrf_802154_cca_failed>
                break;
 100a81e:	e7d9      	b.n	100a7d4 <nrf_802154_notification_swi_irq_handler+0x44>
 100a820:	41014000 	.word	0x41014000
 100a824:	210037e0 	.word	0x210037e0

0100a828 <nrf_802154_rsch_prio_drop_init>:
    p_reg->INTENSET = mask;
 100a828:	2202      	movs	r2, #2
 100a82a:	4b02      	ldr	r3, [pc, #8]	; (100a834 <nrf_802154_rsch_prio_drop_init+0xc>)
 100a82c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

void nrf_802154_rsch_prio_drop_init(void)
{
    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, HFCLK_STOP_INT);

    nrf_802154_swi_init();
 100a830:	f7fd be4a 	b.w	10084c8 <nrf_802154_swi_init>
 100a834:	41014000 	.word	0x41014000

0100a838 <nrf_802154_rsch_prio_drop_hfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
 100a838:	2201      	movs	r2, #1
 100a83a:	4b01      	ldr	r3, [pc, #4]	; (100a840 <nrf_802154_rsch_prio_drop_hfclk_stop+0x8>)
 100a83c:	605a      	str	r2, [r3, #4]
}

void nrf_802154_rsch_prio_drop_hfclk_stop(void)
{
    swi_hfclk_stop();
}
 100a83e:	4770      	bx	lr
 100a840:	41014000 	.word	0x41014000

0100a844 <nrf_802154_rsch_prio_drop_hfclk_stop_terminate>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100a844:	2200      	movs	r2, #0
 100a846:	4b03      	ldr	r3, [pc, #12]	; (100a854 <nrf_802154_rsch_prio_drop_hfclk_stop_terminate+0x10>)
 100a848:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 100a84c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104

void nrf_802154_rsch_prio_drop_hfclk_stop_terminate(void)
{
    swi_hfclk_stop_terminate();
}
 100a850:	4770      	bx	lr
 100a852:	bf00      	nop
 100a854:	41014000 	.word	0x41014000

0100a858 <nrf_802154_rsch_prio_drop_swi_irq_handler>:

void nrf_802154_rsch_prio_drop_swi_irq_handler(void)
{
 100a858:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100a85a:	4c06      	ldr	r4, [pc, #24]	; (100a874 <nrf_802154_rsch_prio_drop_swi_irq_handler+0x1c>)
 100a85c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, HFCLK_STOP_EVENT))
 100a860:	b133      	cbz	r3, 100a870 <nrf_802154_rsch_prio_drop_swi_irq_handler+0x18>
    {
        nrf_802154_clock_hfclk_stop();
 100a862:	f7fc f9e1 	bl	1006c28 <nrf_802154_clock_hfclk_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100a866:	2300      	movs	r3, #0
 100a868:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 100a86c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104

        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, HFCLK_STOP_EVENT);
    }
}
 100a870:	bd10      	pop	{r4, pc}
 100a872:	bf00      	nop
 100a874:	41014000 	.word	0x41014000

0100a878 <req_enter>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100a878:	f3ef 8210 	mrs	r2, PRIMASK
 *
 * @return Pointer to an empty slot in the request queue.
 */
static nrf_802154_req_data_t * req_enter(void)
{
    nrf_802154_mcu_critical_enter(m_mcu_cs);
 100a87c:	4b02      	ldr	r3, [pc, #8]	; (100a888 <req_enter+0x10>)
 100a87e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 100a880:	b672      	cpsid	i

    assert(!nrf_802154_queue_is_full(&m_requests_queue));

    return (nrf_802154_req_data_t *)nrf_802154_queue_push_begin(&m_requests_queue);
 100a882:	4802      	ldr	r0, [pc, #8]	; (100a88c <req_enter+0x14>)
 100a884:	f004 b8e9 	b.w	100ea5a <nrf_802154_queue_push_begin>
 100a888:	21003a18 	.word	0x21003a18
 100a88c:	21003a1c 	.word	0x21003a1c

0100a890 <req_exit>:
 *
 * This is a helper function used in all request functions to end atomic slot update
 * and trigger SWI to process the request from the slot.
 */
static void req_exit(void)
{
 100a890:	b508      	push	{r3, lr}
    nrf_802154_queue_push_commit(&m_requests_queue);
 100a892:	4805      	ldr	r0, [pc, #20]	; (100a8a8 <req_exit+0x18>)
 100a894:	f004 f8e7 	bl	100ea66 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
 100a898:	2201      	movs	r2, #1
 100a89a:	4b04      	ldr	r3, [pc, #16]	; (100a8ac <req_exit+0x1c>)
 100a89c:	609a      	str	r2, [r3, #8]

    nrf_egu_task_trigger(NRF_802154_EGU_INSTANCE, REQ_TASK);

    nrf_802154_mcu_critical_exit(m_mcu_cs);
 100a89e:	4b04      	ldr	r3, [pc, #16]	; (100a8b0 <req_exit+0x20>)
 100a8a0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100a8a2:	f383 8810 	msr	PRIMASK, r3
}
 100a8a6:	bd08      	pop	{r3, pc}
 100a8a8:	21003a1c 	.word	0x21003a1c
 100a8ac:	41014000 	.word	0x41014000
 100a8b0:	21003a18 	.word	0x21003a18

0100a8b4 <nrf_802154_request_init>:

    req_exit();
}

void nrf_802154_request_init(void)
{
 100a8b4:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_requests_queue,
 100a8b6:	2230      	movs	r2, #48	; 0x30
 100a8b8:	2318      	movs	r3, #24
 100a8ba:	4906      	ldr	r1, [pc, #24]	; (100a8d4 <nrf_802154_request_init+0x20>)
 100a8bc:	4806      	ldr	r0, [pc, #24]	; (100a8d8 <nrf_802154_request_init+0x24>)
 100a8be:	f004 f8c3 	bl	100ea48 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
 100a8c2:	2204      	movs	r2, #4
 100a8c4:	4b05      	ldr	r3, [pc, #20]	; (100a8dc <nrf_802154_request_init+0x28>)
 100a8c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_requests_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, REQ_INT);

    nrf_802154_swi_init();
}
 100a8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 100a8ce:	f7fd bdfb 	b.w	10084c8 <nrf_802154_swi_init>
 100a8d2:	bf00      	nop
 100a8d4:	21003a24 	.word	0x21003a24
 100a8d8:	21003a1c 	.word	0x21003a1c
 100a8dc:	41014000 	.word	0x41014000

0100a8e0 <nrf_802154_request_swi_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100a8e0:	4b37      	ldr	r3, [pc, #220]	; (100a9c0 <nrf_802154_request_swi_irq_handler+0xe0>)
        nrf_802154_queue_pop_commit(&m_requests_queue);
    }
}

void nrf_802154_request_swi_irq_handler(void)
{
 100a8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100a8e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, REQ_EVENT))
 100a8e8:	b14a      	cbz	r2, 100a8fe <nrf_802154_request_swi_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100a8ea:	2200      	movs	r2, #0
 100a8ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 100a8f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 100a8f4:	4c33      	ldr	r4, [pc, #204]	; (100a9c4 <nrf_802154_request_swi_irq_handler+0xe4>)
 100a8f6:	79a2      	ldrb	r2, [r4, #6]
 100a8f8:	79e3      	ldrb	r3, [r4, #7]
    while (!nrf_802154_queue_is_empty(&m_requests_queue))
 100a8fa:	429a      	cmp	r2, r3
 100a8fc:	d101      	bne.n	100a902 <nrf_802154_request_swi_irq_handler+0x22>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, REQ_EVENT);

        irq_handler_req_event();
    }
}
 100a8fe:	b002      	add	sp, #8
 100a900:	bd70      	pop	{r4, r5, r6, pc}
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
 100a902:	4620      	mov	r0, r4
 100a904:	f004 f8b8 	bl	100ea78 <nrf_802154_queue_pop_begin>
        switch (p_slot->type)
 100a908:	7803      	ldrb	r3, [r0, #0]
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
 100a90a:	4602      	mov	r2, r0
        switch (p_slot->type)
 100a90c:	2b0c      	cmp	r3, #12
 100a90e:	d80d      	bhi.n	100a92c <nrf_802154_request_swi_irq_handler+0x4c>
 100a910:	e8df f003 	tbb	[pc, r3]
 100a914:	241a1007 	.word	0x241a1007
 100a918:	3a342f2a 	.word	0x3a342f2a
 100a91c:	4c48443f 	.word	0x4c48443f
 100a920:	51          	.byte	0x51
 100a921:	00          	.byte	0x00
                *(p_slot->data.sleep.p_result) =
 100a922:	6885      	ldr	r5, [r0, #8]
                    nrf_802154_core_sleep(p_slot->data.sleep.term_lvl);
 100a924:	7900      	ldrb	r0, [r0, #4]
 100a926:	f7fd f9f9 	bl	1007d1c <nrf_802154_core_sleep>
                *(p_slot->data.antenna_update.p_result) = nrf_802154_core_antenna_update();
 100a92a:	7028      	strb	r0, [r5, #0]
        nrf_802154_queue_pop_commit(&m_requests_queue);
 100a92c:	4620      	mov	r0, r4
 100a92e:	f004 f8a9 	bl	100ea84 <nrf_802154_queue_pop_commit>
 100a932:	e7e0      	b.n	100a8f6 <nrf_802154_request_swi_irq_handler+0x16>
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
 100a934:	68d6      	ldr	r6, [r2, #12]
                *(p_slot->data.receive.p_result) =
 100a936:	6905      	ldr	r5, [r0, #16]
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
 100a938:	7a83      	ldrb	r3, [r0, #10]
 100a93a:	7a41      	ldrb	r1, [r0, #9]
 100a93c:	7a00      	ldrb	r0, [r0, #8]
 100a93e:	9600      	str	r6, [sp, #0]
 100a940:	6852      	ldr	r2, [r2, #4]
 100a942:	f7fd fa19 	bl	1007d78 <nrf_802154_core_receive>
 100a946:	e7f0      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
 100a948:	6853      	ldr	r3, [r2, #4]
                *(p_slot->data.transmit.p_result) =
 100a94a:	6945      	ldr	r5, [r0, #20]
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
 100a94c:	7a41      	ldrb	r1, [r0, #9]
 100a94e:	7a00      	ldrb	r0, [r0, #8]
 100a950:	9300      	str	r3, [sp, #0]
 100a952:	e9d2 2303 	ldrd	r2, r3, [r2, #12]
 100a956:	f7fd fa4f 	bl	1007df8 <nrf_802154_core_transmit>
 100a95a:	e7e6      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                    nrf_802154_core_energy_detection(
 100a95c:	e9d0 5102 	ldrd	r5, r1, [r0, #8]
 100a960:	7900      	ldrb	r0, [r0, #4]
 100a962:	f7fd fab9 	bl	1007ed8 <nrf_802154_core_energy_detection>
 100a966:	e7e0      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.cca.p_result) = nrf_802154_core_cca(p_slot->data.cca.term_lvl);
 100a968:	6885      	ldr	r5, [r0, #8]
 100a96a:	7900      	ldrb	r0, [r0, #4]
 100a96c:	f004 f82d 	bl	100e9ca <nrf_802154_core_cca>
 100a970:	e7db      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.continuous_carrier.p_result) =
 100a972:	6885      	ldr	r5, [r0, #8]
                    nrf_802154_core_continuous_carrier(
 100a974:	7900      	ldrb	r0, [r0, #4]
 100a976:	f004 f83e 	bl	100e9f6 <nrf_802154_core_continuous_carrier>
 100a97a:	e7d6      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                    nrf_802154_core_modulated_carrier(p_slot->data.modulated_carrier.term_lvl,
 100a97c:	e9d0 1502 	ldrd	r1, r5, [r0, #8]
 100a980:	7900      	ldrb	r0, [r0, #4]
 100a982:	f7fd facd 	bl	1007f20 <nrf_802154_core_modulated_carrier>
 100a986:	e7d0      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                    nrf_802154_core_notify_buffer_free(p_slot->data.buffer_free.p_data);
 100a988:	e9d0 0501 	ldrd	r0, r5, [r0, #4]
 100a98c:	f7fd fae4 	bl	1007f58 <nrf_802154_core_notify_buffer_free>
 100a990:	e7cb      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.channel_update.p_result) =
 100a992:	6885      	ldr	r5, [r0, #8]
                    nrf_802154_core_channel_update(p_slot->data.channel_update.req_orig);
 100a994:	7900      	ldrb	r0, [r0, #4]
 100a996:	f7fd fafb 	bl	1007f90 <nrf_802154_core_channel_update>
 100a99a:	e7c6      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.cca_cfg_update.p_result) = nrf_802154_core_cca_cfg_update();
 100a99c:	6845      	ldr	r5, [r0, #4]
 100a99e:	f7fd fb29 	bl	1007ff4 <nrf_802154_core_cca_cfg_update>
 100a9a2:	e7c2      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.rssi_measure.p_result) = nrf_802154_core_rssi_measure();
 100a9a4:	6845      	ldr	r5, [r0, #4]
 100a9a6:	f7fd fb35 	bl	1008014 <nrf_802154_core_rssi_measure>
 100a9aa:	e7be      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                    nrf_802154_core_last_rssi_measurement_get(p_slot->data.rssi_get.p_rssi);
 100a9ac:	e9d0 0501 	ldrd	r0, r5, [r0, #4]
 100a9b0:	f7fd fb4c 	bl	100804c <nrf_802154_core_last_rssi_measurement_get>
 100a9b4:	e7b9      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
                *(p_slot->data.antenna_update.p_result) = nrf_802154_core_antenna_update();
 100a9b6:	6845      	ldr	r5, [r0, #4]
 100a9b8:	f7fd fb68 	bl	100808c <nrf_802154_core_antenna_update>
 100a9bc:	e7b5      	b.n	100a92a <nrf_802154_request_swi_irq_handler+0x4a>
 100a9be:	bf00      	nop
 100a9c0:	41014000 	.word	0x41014000
 100a9c4:	21003a1c 	.word	0x21003a1c

0100a9c8 <spinel_datatype_vunpack_>:
static spinel_ssize_t spinel_datatype_vunpack_(bool           in_place,
                                               const uint8_t *data_in,
                                               spinel_size_t  data_len,
                                               const char *   pack_format,
                                               va_list_obj *  args)
{
 100a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spinel_ssize_t ret = 0;

    // Buffer length sanity check
    require_action(data_len <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100a9cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 100a9d0:	b087      	sub	sp, #28
 100a9d2:	4681      	mov	r9, r0
 100a9d4:	460c      	mov	r4, r1
 100a9d6:	4615      	mov	r5, r2
 100a9d8:	4698      	mov	r8, r3
 100a9da:	9f10      	ldr	r7, [sp, #64]	; 0x40
    require_action(data_len <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100a9dc:	f0c0 822c 	bcc.w	100ae38 <spinel_datatype_vunpack_+0x470>

            // Verify that the string is zero terminated.
            require_action(len <= data_len, bail, (ret = -1, errno = EOVERFLOW));

            // Verify the string follows valid UTF8 encoding.
            require_action(spinel_validate_utf8(data_in), bail, (ret = -1, errno = EINVAL));
 100a9e0:	f004 facb 	bl	100ef7a <z_errno>
 100a9e4:	2316      	movs	r3, #22
 100a9e6:	e124      	b.n	100ac32 <spinel_datatype_vunpack_+0x26a>
        switch ((spinel_datatype_t)pack_format[0])
 100a9e8:	3b53      	subs	r3, #83	; 0x53
 100a9ea:	2b25      	cmp	r3, #37	; 0x25
 100a9ec:	d8f8      	bhi.n	100a9e0 <spinel_datatype_vunpack_+0x18>
 100a9ee:	a201      	add	r2, pc, #4	; (adr r2, 100a9f4 <spinel_datatype_vunpack_+0x2c>)
 100a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100a9f4:	0100ab57 	.word	0x0100ab57
 100a9f8:	0100adb5 	.word	0x0100adb5
 100a9fc:	0100ac4f 	.word	0x0100ac4f
 100aa00:	0100a9e1 	.word	0x0100a9e1
 100aa04:	0100a9e1 	.word	0x0100a9e1
 100aa08:	0100ab8f 	.word	0x0100ab8f
 100aa0c:	0100a9e1 	.word	0x0100a9e1
 100aa10:	0100a9e1 	.word	0x0100a9e1
 100aa14:	0100a9e1 	.word	0x0100a9e1
 100aa18:	0100a9e1 	.word	0x0100a9e1
 100aa1c:	0100a9e1 	.word	0x0100a9e1
 100aa20:	0100a9e1 	.word	0x0100a9e1
 100aa24:	0100a9e1 	.word	0x0100a9e1
 100aa28:	0100a9e1 	.word	0x0100a9e1
 100aa2c:	0100a9e1 	.word	0x0100a9e1
 100aa30:	0100aac1 	.word	0x0100aac1
 100aa34:	0100ab41 	.word	0x0100ab41
 100aa38:	0100acfb 	.word	0x0100acfb
 100aa3c:	0100abe3 	.word	0x0100abe3
 100aa40:	0100a9e1 	.word	0x0100a9e1
 100aa44:	0100a9e1 	.word	0x0100a9e1
 100aa48:	0100a9e1 	.word	0x0100a9e1
 100aa4c:	0100ac13 	.word	0x0100ac13
 100aa50:	0100a9e1 	.word	0x0100a9e1
 100aa54:	0100a9e1 	.word	0x0100a9e1
 100aa58:	0100ab73 	.word	0x0100ab73
 100aa5c:	0100a9e1 	.word	0x0100a9e1
 100aa60:	0100a9e1 	.word	0x0100a9e1
 100aa64:	0100a9e1 	.word	0x0100a9e1
 100aa68:	0100a9e1 	.word	0x0100a9e1
 100aa6c:	0100a9e1 	.word	0x0100a9e1
 100aa70:	0100a9e1 	.word	0x0100a9e1
 100aa74:	0100ab57 	.word	0x0100ab57
 100aa78:	0100adb5 	.word	0x0100adb5
 100aa7c:	0100a9e1 	.word	0x0100a9e1
 100aa80:	0100a9e1 	.word	0x0100a9e1
 100aa84:	0100a9e1 	.word	0x0100a9e1
 100aa88:	0100ab8f 	.word	0x0100ab8f
 100aa8c:	3b43      	subs	r3, #67	; 0x43
 100aa8e:	2b09      	cmp	r3, #9
 100aa90:	d8a6      	bhi.n	100a9e0 <spinel_datatype_vunpack_+0x18>
 100aa92:	a201      	add	r2, pc, #4	; (adr r2, 100aa98 <spinel_datatype_vunpack_+0xd0>)
 100aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100aa98:	0100ab41 	.word	0x0100ab41
 100aa9c:	0100acfb 	.word	0x0100acfb
 100aaa0:	0100abb9 	.word	0x0100abb9
 100aaa4:	0100a9e1 	.word	0x0100a9e1
 100aaa8:	0100a9e1 	.word	0x0100a9e1
 100aaac:	0100a9e1 	.word	0x0100a9e1
 100aab0:	0100a9e1 	.word	0x0100a9e1
 100aab4:	0100a9e1 	.word	0x0100a9e1
 100aab8:	0100a9e1 	.word	0x0100a9e1
 100aabc:	0100ab73 	.word	0x0100ab73
            bool *arg_ptr = va_arg(args->obj, bool *);
 100aac0:	683b      	ldr	r3, [r7, #0]
 100aac2:	1d1a      	adds	r2, r3, #4
 100aac4:	603a      	str	r2, [r7, #0]
 100aac6:	681a      	ldr	r2, [r3, #0]
            require_action(data_len >= sizeof(uint8_t), bail, (ret = -1, errno = EOVERFLOW));
 100aac8:	b91d      	cbnz	r5, 100aad2 <spinel_datatype_vunpack_+0x10a>

            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));

            actual_len = spinel_datatype_vunpack_(false, block_ptr, block_len, pack_format + 2, args);

            require_action(actual_len > -1, bail, (ret = -1, errno = EOVERFLOW));
 100aaca:	f004 fa56 	bl	100ef7a <z_errno>
 100aace:	238b      	movs	r3, #139	; 0x8b
 100aad0:	e0af      	b.n	100ac32 <spinel_datatype_vunpack_+0x26a>
            if (arg_ptr)
 100aad2:	b122      	cbz	r2, 100aade <spinel_datatype_vunpack_+0x116>
                *arg_ptr = data_in[0] != 0;
 100aad4:	7823      	ldrb	r3, [r4, #0]
 100aad6:	3b00      	subs	r3, #0
 100aad8:	bf18      	it	ne
 100aada:	2301      	movne	r3, #1
 100aadc:	7013      	strb	r3, [r2, #0]
            ret += sizeof(uint8_t);
 100aade:	3601      	adds	r6, #1
            data_in += sizeof(uint8_t);
 100aae0:	3401      	adds	r4, #1
            data_len -= sizeof(uint8_t);
 100aae2:	3d01      	subs	r5, #1
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100aae4:	4640      	mov	r0, r8
 100aae6:	f004 fa8c 	bl	100f002 <spinel_next_packed_datatype>
 100aaea:	4680      	mov	r8, r0
 100aaec:	f898 3000 	ldrb.w	r3, [r8]
 100aaf0:	2b00      	cmp	r3, #0
 100aaf2:	f000 812b 	beq.w	100ad4c <spinel_datatype_vunpack_+0x384>
        if (*pack_format == ')')
 100aaf6:	2b29      	cmp	r3, #41	; 0x29
 100aaf8:	f000 8128 	beq.w	100ad4c <spinel_datatype_vunpack_+0x384>
        switch ((spinel_datatype_t)pack_format[0])
 100aafc:	2b78      	cmp	r3, #120	; 0x78
 100aafe:	f63f af6f 	bhi.w	100a9e0 <spinel_datatype_vunpack_+0x18>
 100ab02:	2b52      	cmp	r3, #82	; 0x52
 100ab04:	f63f af70 	bhi.w	100a9e8 <spinel_datatype_vunpack_+0x20>
 100ab08:	2b4c      	cmp	r3, #76	; 0x4c
 100ab0a:	f63f af69 	bhi.w	100a9e0 <spinel_datatype_vunpack_+0x18>
 100ab0e:	2b42      	cmp	r3, #66	; 0x42
 100ab10:	d8bc      	bhi.n	100aa8c <spinel_datatype_vunpack_+0xc4>
 100ab12:	2b2e      	cmp	r3, #46	; 0x2e
 100ab14:	d0e6      	beq.n	100aae4 <spinel_datatype_vunpack_+0x11c>
 100ab16:	2b36      	cmp	r3, #54	; 0x36
 100ab18:	f47f af62 	bne.w	100a9e0 <spinel_datatype_vunpack_+0x18>
            require_action(data_len >= sizeof(spinel_ipv6addr_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab1c:	2d0f      	cmp	r5, #15
 100ab1e:	d9d4      	bls.n	100aaca <spinel_datatype_vunpack_+0x102>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100ab20:	683b      	ldr	r3, [r7, #0]
 100ab22:	1d1a      	adds	r2, r3, #4
                spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100ab24:	603a      	str	r2, [r7, #0]
            if (in_place)
 100ab26:	f1b9 0f00 	cmp.w	r9, #0
 100ab2a:	d040      	beq.n	100abae <spinel_datatype_vunpack_+0x1e6>
                spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100ab2c:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100ab2e:	b118      	cbz	r0, 100ab38 <spinel_datatype_vunpack_+0x170>
                    memcpy(arg, data_in, sizeof(spinel_ipv6addr_t));
 100ab30:	2210      	movs	r2, #16
 100ab32:	4621      	mov	r1, r4
 100ab34:	f003 fd2f 	bl	100e596 <memcpy>
            ret += sizeof(spinel_ipv6addr_t);
 100ab38:	3610      	adds	r6, #16
            data_in += sizeof(spinel_ipv6addr_t);
 100ab3a:	3410      	adds	r4, #16
            data_len -= sizeof(spinel_ipv6addr_t);
 100ab3c:	3d10      	subs	r5, #16
            break;
 100ab3e:	e7d1      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            uint8_t *arg_ptr = va_arg(args->obj, uint8_t *);
 100ab40:	683b      	ldr	r3, [r7, #0]
 100ab42:	1d1a      	adds	r2, r3, #4
 100ab44:	603a      	str	r2, [r7, #0]
 100ab46:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint8_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab48:	2d00      	cmp	r5, #0
 100ab4a:	d0be      	beq.n	100aaca <spinel_datatype_vunpack_+0x102>
            if (arg_ptr)
 100ab4c:	2b00      	cmp	r3, #0
 100ab4e:	d0c6      	beq.n	100aade <spinel_datatype_vunpack_+0x116>
                *arg_ptr = data_in[0];
 100ab50:	7822      	ldrb	r2, [r4, #0]
 100ab52:	701a      	strb	r2, [r3, #0]
 100ab54:	e7c3      	b.n	100aade <spinel_datatype_vunpack_+0x116>
            uint16_t *arg_ptr = va_arg(args->obj, uint16_t *);
 100ab56:	683b      	ldr	r3, [r7, #0]
            require_action(data_len >= sizeof(uint16_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab58:	2d01      	cmp	r5, #1
            uint16_t *arg_ptr = va_arg(args->obj, uint16_t *);
 100ab5a:	f103 0204 	add.w	r2, r3, #4
 100ab5e:	603a      	str	r2, [r7, #0]
 100ab60:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint16_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab62:	d9b2      	bls.n	100aaca <spinel_datatype_vunpack_+0x102>
            if (arg_ptr)
 100ab64:	b10b      	cbz	r3, 100ab6a <spinel_datatype_vunpack_+0x1a2>
                *arg_ptr = (uint16_t)((data_in[1] << 8) | data_in[0]);
 100ab66:	8822      	ldrh	r2, [r4, #0]
 100ab68:	801a      	strh	r2, [r3, #0]
            ret += sizeof(uint16_t);
 100ab6a:	3602      	adds	r6, #2
            data_in += sizeof(uint16_t);
 100ab6c:	3402      	adds	r4, #2
            data_len -= sizeof(uint16_t);
 100ab6e:	3d02      	subs	r5, #2
            break;
 100ab70:	e7b8      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            uint32_t *arg_ptr = va_arg(args->obj, uint32_t *);
 100ab72:	683b      	ldr	r3, [r7, #0]
            require_action(data_len >= sizeof(uint32_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab74:	2d03      	cmp	r5, #3
            uint32_t *arg_ptr = va_arg(args->obj, uint32_t *);
 100ab76:	f103 0204 	add.w	r2, r3, #4
 100ab7a:	603a      	str	r2, [r7, #0]
 100ab7c:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint32_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab7e:	d9a4      	bls.n	100aaca <spinel_datatype_vunpack_+0x102>
            if (arg_ptr)
 100ab80:	b10b      	cbz	r3, 100ab86 <spinel_datatype_vunpack_+0x1be>
                *arg_ptr = (uint32_t)((data_in[3] << 24) | (data_in[2] << 16) | (data_in[1] << 8) | data_in[0]);
 100ab82:	6822      	ldr	r2, [r4, #0]
 100ab84:	601a      	str	r2, [r3, #0]
            ret += sizeof(uint32_t);
 100ab86:	3604      	adds	r6, #4
            data_in += sizeof(uint32_t);
 100ab88:	3404      	adds	r4, #4
            data_len -= sizeof(uint32_t);
 100ab8a:	3d04      	subs	r5, #4
            break;
 100ab8c:	e7aa      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            uint64_t *arg_ptr = va_arg(args->obj, uint64_t *);
 100ab8e:	683b      	ldr	r3, [r7, #0]
            require_action(data_len >= sizeof(uint64_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab90:	2d07      	cmp	r5, #7
            uint64_t *arg_ptr = va_arg(args->obj, uint64_t *);
 100ab92:	f103 0204 	add.w	r2, r3, #4
 100ab96:	603a      	str	r2, [r7, #0]
 100ab98:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint64_t), bail, (ret = -1, errno = EOVERFLOW));
 100ab9a:	d996      	bls.n	100aaca <spinel_datatype_vunpack_+0x102>
            if (arg_ptr)
 100ab9c:	b11b      	cbz	r3, 100aba6 <spinel_datatype_vunpack_+0x1de>
                *arg_ptr = ((uint64_t)l32) | (((uint64_t)h32) << 32);
 100ab9e:	6821      	ldr	r1, [r4, #0]
 100aba0:	6862      	ldr	r2, [r4, #4]
 100aba2:	e9c3 1200 	strd	r1, r2, [r3]
            ret += sizeof(spinel_eui64_t);
 100aba6:	3608      	adds	r6, #8
            data_in += sizeof(spinel_eui64_t);
 100aba8:	3408      	adds	r4, #8
            data_len -= sizeof(spinel_eui64_t);
 100abaa:	3d08      	subs	r5, #8
            break;
 100abac:	e79a      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
                const spinel_ipv6addr_t **arg_ptr = va_arg(args->obj, const spinel_ipv6addr_t **);
 100abae:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100abb0:	2b00      	cmp	r3, #0
 100abb2:	d0c1      	beq.n	100ab38 <spinel_datatype_vunpack_+0x170>
                    *arg_ptr = (const spinel_ipv6addr_t *)data_in;
 100abb4:	601c      	str	r4, [r3, #0]
 100abb6:	e7bf      	b.n	100ab38 <spinel_datatype_vunpack_+0x170>
            require_action(data_len >= sizeof(spinel_eui64_t), bail, (ret = -1, errno = EOVERFLOW));
 100abb8:	2d07      	cmp	r5, #7
 100abba:	d986      	bls.n	100aaca <spinel_datatype_vunpack_+0x102>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100abbc:	683b      	ldr	r3, [r7, #0]
 100abbe:	1d1a      	adds	r2, r3, #4
                spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100abc0:	603a      	str	r2, [r7, #0]
            if (in_place)
 100abc2:	f1b9 0f00 	cmp.w	r9, #0
 100abc6:	d007      	beq.n	100abd8 <spinel_datatype_vunpack_+0x210>
                spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100abc8:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100abca:	2800      	cmp	r0, #0
 100abcc:	d0eb      	beq.n	100aba6 <spinel_datatype_vunpack_+0x1de>
                    memcpy(arg, data_in, sizeof(spinel_eui64_t));
 100abce:	2208      	movs	r2, #8
 100abd0:	4621      	mov	r1, r4
 100abd2:	f003 fce0 	bl	100e596 <memcpy>
 100abd6:	e7e6      	b.n	100aba6 <spinel_datatype_vunpack_+0x1de>
                const spinel_eui64_t **arg_ptr = va_arg(args->obj, const spinel_eui64_t **);
 100abd8:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100abda:	2b00      	cmp	r3, #0
 100abdc:	d0e3      	beq.n	100aba6 <spinel_datatype_vunpack_+0x1de>
                    *arg_ptr = (const spinel_eui64_t *)data_in;
 100abde:	601c      	str	r4, [r3, #0]
 100abe0:	e7e1      	b.n	100aba6 <spinel_datatype_vunpack_+0x1de>
            require_action(data_len >= sizeof(spinel_eui48_t), bail, (ret = -1, errno = EOVERFLOW));
 100abe2:	2d05      	cmp	r5, #5
 100abe4:	f67f af71 	bls.w	100aaca <spinel_datatype_vunpack_+0x102>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100abe8:	683b      	ldr	r3, [r7, #0]
 100abea:	1d1a      	adds	r2, r3, #4
                spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100abec:	603a      	str	r2, [r7, #0]
            if (in_place)
 100abee:	f1b9 0f00 	cmp.w	r9, #0
 100abf2:	d009      	beq.n	100ac08 <spinel_datatype_vunpack_+0x240>
                spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100abf4:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100abf6:	b118      	cbz	r0, 100ac00 <spinel_datatype_vunpack_+0x238>
                    memcpy(arg, data_in, sizeof(spinel_eui48_t));
 100abf8:	2206      	movs	r2, #6
 100abfa:	4621      	mov	r1, r4
 100abfc:	f003 fccb 	bl	100e596 <memcpy>
            ret += sizeof(spinel_eui48_t);
 100ac00:	3606      	adds	r6, #6
            data_in += sizeof(spinel_eui48_t);
 100ac02:	3406      	adds	r4, #6
            data_len -= sizeof(spinel_eui48_t);
 100ac04:	3d06      	subs	r5, #6
            break;
 100ac06:	e76d      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
                const spinel_eui48_t **arg_ptr = va_arg(args->obj, const spinel_eui48_t **);
 100ac08:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100ac0a:	2b00      	cmp	r3, #0
 100ac0c:	d0f8      	beq.n	100ac00 <spinel_datatype_vunpack_+0x238>
                    *arg_ptr = (const spinel_eui48_t *)data_in;
 100ac0e:	601c      	str	r4, [r3, #0]
 100ac10:	e7f6      	b.n	100ac00 <spinel_datatype_vunpack_+0x238>
            unsigned int * arg_ptr = va_arg(args->obj, unsigned int *);
 100ac12:	683b      	ldr	r3, [r7, #0]
            spinel_ssize_t pui_len = spinel_packed_uint_decode(data_in, data_len, arg_ptr);
 100ac14:	4629      	mov	r1, r5
            unsigned int * arg_ptr = va_arg(args->obj, unsigned int *);
 100ac16:	1d1a      	adds	r2, r3, #4
 100ac18:	603a      	str	r2, [r7, #0]
 100ac1a:	681a      	ldr	r2, [r3, #0]
            spinel_ssize_t pui_len = spinel_packed_uint_decode(data_in, data_len, arg_ptr);
 100ac1c:	4620      	mov	r0, r4
 100ac1e:	f004 f9ae 	bl	100ef7e <spinel_packed_uint_decode>
            require_action(NULL == arg_ptr || (*arg_ptr < SPINEL_MAX_UINT_PACKED), bail, (ret = -1, errno = ERANGE));
 100ac22:	b152      	cbz	r2, 100ac3a <spinel_datatype_vunpack_+0x272>
 100ac24:	6812      	ldr	r2, [r2, #0]
 100ac26:	4b85      	ldr	r3, [pc, #532]	; (100ae3c <spinel_datatype_vunpack_+0x474>)
 100ac28:	429a      	cmp	r2, r3
 100ac2a:	d906      	bls.n	100ac3a <spinel_datatype_vunpack_+0x272>
 100ac2c:	f004 f9a5 	bl	100ef7a <z_errno>
 100ac30:	2322      	movs	r3, #34	; 0x22
            require_action(spinel_validate_utf8(data_in), bail, (ret = -1, errno = EINVAL));
 100ac32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 100ac36:	6003      	str	r3, [r0, #0]
 100ac38:	e088      	b.n	100ad4c <spinel_datatype_vunpack_+0x384>
            require(pui_len > 0, bail);
 100ac3a:	2800      	cmp	r0, #0
 100ac3c:	f340 8086 	ble.w	100ad4c <spinel_datatype_vunpack_+0x384>
            require(pui_len <= (spinel_ssize_t)data_len, bail);
 100ac40:	42a8      	cmp	r0, r5
 100ac42:	f300 8083 	bgt.w	100ad4c <spinel_datatype_vunpack_+0x384>
            ret += pui_len;
 100ac46:	4406      	add	r6, r0
            data_in += pui_len;
 100ac48:	4404      	add	r4, r0
            data_len -= (spinel_size_t)pui_len;
 100ac4a:	1a2d      	subs	r5, r5, r0
            break;
 100ac4c:	e74a      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            require_action(data_len > 0, bail, (ret = -1, errno = EOVERFLOW));
 100ac4e:	2d00      	cmp	r5, #0
 100ac50:	f43f af3b 	beq.w	100aaca <spinel_datatype_vunpack_+0x102>
    for (ret = 0; (ret < maxlen) && (s[ret] != 0); ret++)
 100ac54:	2300      	movs	r3, #0
 100ac56:	5ce2      	ldrb	r2, [r4, r3]
 100ac58:	469a      	mov	sl, r3
 100ac5a:	3301      	adds	r3, #1
 100ac5c:	b932      	cbnz	r2, 100ac6c <spinel_datatype_vunpack_+0x2a4>
            len = spinel_strnlen((const char *)data_in, data_len) + 1;
 100ac5e:	f10a 0a01 	add.w	sl, sl, #1
            require_action(len <= data_len, bail, (ret = -1, errno = EOVERFLOW));
 100ac62:	4555      	cmp	r5, sl
 100ac64:	f4ff af31 	bcc.w	100aaca <spinel_datatype_vunpack_+0x102>
 100ac68:	4620      	mov	r0, r4
 100ac6a:	e01d      	b.n	100aca8 <spinel_datatype_vunpack_+0x2e0>
    for (ret = 0; (ret < maxlen) && (s[ret] != 0); ret++)
 100ac6c:	429d      	cmp	r5, r3
 100ac6e:	d1f2      	bne.n	100ac56 <spinel_datatype_vunpack_+0x28e>
 100ac70:	46aa      	mov	sl, r5
 100ac72:	e7f4      	b.n	100ac5e <spinel_datatype_vunpack_+0x296>
        if ((byte & 0x80) == 0)
 100ac74:	0618      	lsls	r0, r3, #24
 100ac76:	d518      	bpl.n	100acaa <spinel_datatype_vunpack_+0x2e2>
        if ((byte & 0x40) == 0) // 10xx-xxxx
 100ac78:	0659      	lsls	r1, r3, #25
 100ac7a:	f57f aeb1 	bpl.w	100a9e0 <spinel_datatype_vunpack_+0x18>
        else if ((byte & 0x20) == 0) // 110x-xxxx
 100ac7e:	0698      	lsls	r0, r3, #26
 100ac80:	d521      	bpl.n	100acc6 <spinel_datatype_vunpack_+0x2fe>
        else if ((byte & 0x10) == 0) // 1110-xxxx
 100ac82:	06d9      	lsls	r1, r3, #27
 100ac84:	d521      	bpl.n	100acca <spinel_datatype_vunpack_+0x302>
        else if ((byte & 0x08) == 0) // 1111-0xxx
 100ac86:	071b      	lsls	r3, r3, #28
 100ac88:	f53f aeaa 	bmi.w	100a9e0 <spinel_datatype_vunpack_+0x18>
            continuation_bytes = 3;
 100ac8c:	2303      	movs	r3, #3
 100ac8e:	e004      	b.n	100ac9a <spinel_datatype_vunpack_+0x2d2>
            if ((byte & 0xc0) != 0x80)
 100ac90:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 100ac94:	2980      	cmp	r1, #128	; 0x80
 100ac96:	f47f aea3 	bne.w	100a9e0 <spinel_datatype_vunpack_+0x18>
        while (continuation_bytes-- != 0)
 100ac9a:	3b01      	subs	r3, #1
 100ac9c:	b2db      	uxtb	r3, r3
 100ac9e:	2bff      	cmp	r3, #255	; 0xff
 100aca0:	4610      	mov	r0, r2
            byte = *string++;
 100aca2:	f812 1b01 	ldrb.w	r1, [r2], #1
        while (continuation_bytes-- != 0)
 100aca6:	d1f3      	bne.n	100ac90 <spinel_datatype_vunpack_+0x2c8>
 100aca8:	4602      	mov	r2, r0
    while ((byte = *string++) != 0)
 100acaa:	f812 3b01 	ldrb.w	r3, [r2], #1
 100acae:	2b00      	cmp	r3, #0
 100acb0:	d1e0      	bne.n	100ac74 <spinel_datatype_vunpack_+0x2ac>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100acb2:	683b      	ldr	r3, [r7, #0]
 100acb4:	1d1a      	adds	r2, r3, #4
            if (in_place)
 100acb6:	f1b9 0f00 	cmp.w	r9, #0
 100acba:	d108      	bne.n	100acce <spinel_datatype_vunpack_+0x306>
                const char **arg_ptr = va_arg(args->obj, const char **);
 100acbc:	603a      	str	r2, [r7, #0]
 100acbe:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100acc0:	b1b3      	cbz	r3, 100acf0 <spinel_datatype_vunpack_+0x328>
                    *arg_ptr = (const char *)data_in;
 100acc2:	601c      	str	r4, [r3, #0]
            ret += (spinel_size_t)len;
 100acc4:	e014      	b.n	100acf0 <spinel_datatype_vunpack_+0x328>
            continuation_bytes = 1;
 100acc6:	2301      	movs	r3, #1
 100acc8:	e7e7      	b.n	100ac9a <spinel_datatype_vunpack_+0x2d2>
            continuation_bytes = 2;
 100acca:	2302      	movs	r3, #2
 100accc:	e7e5      	b.n	100ac9a <spinel_datatype_vunpack_+0x2d2>
                char * arg     = va_arg(args->obj, char *);
 100acce:	603a      	str	r2, [r7, #0]
 100acd0:	461a      	mov	r2, r3
 100acd2:	f852 0b08 	ldr.w	r0, [r2], #8
                size_t len_arg = va_arg(args->obj, size_t);
 100acd6:	603a      	str	r2, [r7, #0]
                if (arg)
 100acd8:	b150      	cbz	r0, 100acf0 <spinel_datatype_vunpack_+0x328>
                    require_action(len_arg >= len, bail, (ret = -1, errno = ENOMEM));
 100acda:	685b      	ldr	r3, [r3, #4]
 100acdc:	459a      	cmp	sl, r3
 100acde:	d903      	bls.n	100ace8 <spinel_datatype_vunpack_+0x320>
 100ace0:	f004 f94b 	bl	100ef7a <z_errno>
 100ace4:	230c      	movs	r3, #12
 100ace6:	e7a4      	b.n	100ac32 <spinel_datatype_vunpack_+0x26a>
                    memcpy(arg, data_in, len);
 100ace8:	4652      	mov	r2, sl
 100acea:	4621      	mov	r1, r4
 100acec:	f003 fc53 	bl	100e596 <memcpy>
            else
            {
                block_len = (uint16_t)actual_len;
            }

            ret += block_len;
 100acf0:	4456      	add	r6, sl
            data_in += block_len;
 100acf2:	4454      	add	r4, sl
            data_len -= block_len;
 100acf4:	eba5 050a 	sub.w	r5, r5, sl
            break;
 100acf8:	e6f4      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            uint16_t       block_len     = 0;
 100acfa:	2300      	movs	r3, #0
 100acfc:	f8ad 3016 	strh.w	r3, [sp, #22]
            void *         arg_ptr       = va_arg(args->obj, void *);
 100ad00:	683b      	ldr	r3, [r7, #0]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100ad02:	4640      	mov	r0, r8
            void *         arg_ptr       = va_arg(args->obj, void *);
 100ad04:	1d1a      	adds	r2, r3, #4
 100ad06:	603a      	str	r2, [r7, #0]
 100ad08:	461a      	mov	r2, r3
 100ad0a:	f852 bb08 	ldr.w	fp, [r2], #8
            unsigned int * block_len_ptr = va_arg(args->obj, unsigned int *);
 100ad0e:	603a      	str	r2, [r7, #0]
 100ad10:	f8d3 a004 	ldr.w	sl, [r3, #4]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100ad14:	f004 f975 	bl	100f002 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100ad18:	f898 3000 	ldrb.w	r3, [r8]
 100ad1c:	2b64      	cmp	r3, #100	; 0x64
 100ad1e:	d003      	beq.n	100ad28 <spinel_datatype_vunpack_+0x360>
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100ad20:	7803      	ldrb	r3, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100ad22:	b1bb      	cbz	r3, 100ad54 <spinel_datatype_vunpack_+0x38c>
 100ad24:	2b29      	cmp	r3, #41	; 0x29
 100ad26:	d015      	beq.n	100ad54 <spinel_datatype_vunpack_+0x38c>
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100ad28:	4629      	mov	r1, r5
 100ad2a:	f10d 0316 	add.w	r3, sp, #22
 100ad2e:	4620      	mov	r0, r4
 100ad30:	4a43      	ldr	r2, [pc, #268]	; (100ae40 <spinel_datatype_vunpack_+0x478>)
 100ad32:	f004 f97a 	bl	100f02a <spinel_datatype_unpack>
                require(pui_len > 0, bail);
 100ad36:	2800      	cmp	r0, #0
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100ad38:	4603      	mov	r3, r0
                block_ptr += pui_len;
 100ad3a:	eb04 0100 	add.w	r1, r4, r0
                require(pui_len > 0, bail);
 100ad3e:	dd05      	ble.n	100ad4c <spinel_datatype_vunpack_+0x384>
                require(block_len < SPINEL_FRAME_MAX_SIZE, bail);
 100ad40:	f240 5213 	movw	r2, #1299	; 0x513
 100ad44:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 100ad48:	4290      	cmp	r0, r2
 100ad4a:	d907      	bls.n	100ad5c <spinel_datatype_vunpack_+0x394>

    return ret;

bail:
    return ret;
}
 100ad4c:	4630      	mov	r0, r6
 100ad4e:	b007      	add	sp, #28
 100ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                block_len = (uint16_t)data_len;
 100ad54:	4621      	mov	r1, r4
                pui_len   = 0;
 100ad56:	2300      	movs	r3, #0
                block_len = (uint16_t)data_len;
 100ad58:	f8ad 5016 	strh.w	r5, [sp, #22]
            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));
 100ad5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100ad60:	18d0      	adds	r0, r2, r3
 100ad62:	42a8      	cmp	r0, r5
 100ad64:	f73f aeb1 	bgt.w	100aaca <spinel_datatype_vunpack_+0x102>
            if (in_place)
 100ad68:	f1b9 0f00 	cmp.w	r9, #0
 100ad6c:	d012      	beq.n	100ad94 <spinel_datatype_vunpack_+0x3cc>
                require_action(NULL != block_len_ptr && *block_len_ptr >= block_len, bail, (ret = -1, errno = EINVAL));
 100ad6e:	f1ba 0f00 	cmp.w	sl, #0
 100ad72:	f43f ae35 	beq.w	100a9e0 <spinel_datatype_vunpack_+0x18>
 100ad76:	f8da 0000 	ldr.w	r0, [sl]
 100ad7a:	4290      	cmp	r0, r2
 100ad7c:	f4ff ae30 	bcc.w	100a9e0 <spinel_datatype_vunpack_+0x18>
                memcpy(arg_ptr, block_ptr, block_len);
 100ad80:	4658      	mov	r0, fp
 100ad82:	9303      	str	r3, [sp, #12]
 100ad84:	f003 fc07 	bl	100e596 <memcpy>
            if (NULL != block_len_ptr)
 100ad88:	9b03      	ldr	r3, [sp, #12]
                *block_len_ptr = block_len;
 100ad8a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100ad8e:	f8ca 2000 	str.w	r2, [sl]
 100ad92:	e007      	b.n	100ada4 <spinel_datatype_vunpack_+0x3dc>
                if (NULL != block_ptr_ptr)
 100ad94:	f1bb 0f00 	cmp.w	fp, #0
 100ad98:	d001      	beq.n	100ad9e <spinel_datatype_vunpack_+0x3d6>
                    *block_ptr_ptr = block_ptr;
 100ad9a:	f8cb 1000 	str.w	r1, [fp]
            if (NULL != block_len_ptr)
 100ad9e:	f1ba 0f00 	cmp.w	sl, #0
 100ada2:	d1f2      	bne.n	100ad8a <spinel_datatype_vunpack_+0x3c2>
            block_len += (uint16_t)pui_len;
 100ada4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 100ada8:	4403      	add	r3, r0
 100adaa:	b29b      	uxth	r3, r3
            ret += block_len;
 100adac:	441e      	add	r6, r3
            data_in += block_len;
 100adae:	441c      	add	r4, r3
            data_len -= block_len;
 100adb0:	1aed      	subs	r5, r5, r3
            break;
 100adb2:	e697      	b.n	100aae4 <spinel_datatype_vunpack_+0x11c>
            uint16_t       block_len  = 0;
 100adb4:	2300      	movs	r3, #0
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100adb6:	4640      	mov	r0, r8
            uint16_t       block_len  = 0;
 100adb8:	f8ad 3016 	strh.w	r3, [sp, #22]
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100adbc:	f004 f921 	bl	100f002 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100adc0:	f898 3000 	ldrb.w	r3, [r8]
 100adc4:	2b74      	cmp	r3, #116	; 0x74
 100adc6:	d003      	beq.n	100add0 <spinel_datatype_vunpack_+0x408>
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100adc8:	7803      	ldrb	r3, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100adca:	b363      	cbz	r3, 100ae26 <spinel_datatype_vunpack_+0x45e>
 100adcc:	2b29      	cmp	r3, #41	; 0x29
 100adce:	d02a      	beq.n	100ae26 <spinel_datatype_vunpack_+0x45e>
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100add0:	4629      	mov	r1, r5
 100add2:	4620      	mov	r0, r4
 100add4:	4a1a      	ldr	r2, [pc, #104]	; (100ae40 <spinel_datatype_vunpack_+0x478>)
 100add6:	f10d 0316 	add.w	r3, sp, #22
 100adda:	f004 f926 	bl	100f02a <spinel_datatype_unpack>
                require(pui_len > 0, bail);
 100adde:	2800      	cmp	r0, #0
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100ade0:	4682      	mov	sl, r0
                block_ptr += pui_len;
 100ade2:	eb04 0100 	add.w	r1, r4, r0
                require(pui_len > 0, bail);
 100ade6:	ddb1      	ble.n	100ad4c <spinel_datatype_vunpack_+0x384>
                require(block_len < SPINEL_FRAME_MAX_SIZE, bail);
 100ade8:	f240 5313 	movw	r3, #1299	; 0x513
 100adec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100adf0:	429a      	cmp	r2, r3
 100adf2:	d8ab      	bhi.n	100ad4c <spinel_datatype_vunpack_+0x384>
            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));
 100adf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100adf8:	eb02 030a 	add.w	r3, r2, sl
 100adfc:	42ab      	cmp	r3, r5
 100adfe:	f73f ae64 	bgt.w	100aaca <spinel_datatype_vunpack_+0x102>
            actual_len = spinel_datatype_vunpack_(false, block_ptr, block_len, pack_format + 2, args);
 100ae02:	2000      	movs	r0, #0
 100ae04:	9700      	str	r7, [sp, #0]
 100ae06:	f108 0302 	add.w	r3, r8, #2
 100ae0a:	f7ff fddd 	bl	100a9c8 <spinel_datatype_vunpack_>
            require_action(actual_len > -1, bail, (ret = -1, errno = EOVERFLOW));
 100ae0e:	2800      	cmp	r0, #0
 100ae10:	f6ff ae5b 	blt.w	100aaca <spinel_datatype_vunpack_+0x102>
            if (pui_len)
 100ae14:	f1ba 0f00 	cmp.w	sl, #0
 100ae18:	d00b      	beq.n	100ae32 <spinel_datatype_vunpack_+0x46a>
                block_len += (uint16_t)pui_len;
 100ae1a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 100ae1e:	4482      	add	sl, r0
 100ae20:	fa1f fa8a 	uxth.w	sl, sl
 100ae24:	e764      	b.n	100acf0 <spinel_datatype_vunpack_+0x328>
                block_len = (uint16_t)data_len;
 100ae26:	4621      	mov	r1, r4
                pui_len   = 0;
 100ae28:	f04f 0a00 	mov.w	sl, #0
                block_len = (uint16_t)data_len;
 100ae2c:	f8ad 5016 	strh.w	r5, [sp, #22]
                pui_len   = 0;
 100ae30:	e7e0      	b.n	100adf4 <spinel_datatype_vunpack_+0x42c>
                block_len = (uint16_t)actual_len;
 100ae32:	fa1f fa80 	uxth.w	sl, r0
 100ae36:	e75b      	b.n	100acf0 <spinel_datatype_vunpack_+0x328>
    spinel_ssize_t ret = 0;
 100ae38:	2600      	movs	r6, #0
 100ae3a:	e657      	b.n	100aaec <spinel_datatype_vunpack_+0x124>
 100ae3c:	001ffffe 	.word	0x001ffffe
 100ae40:	01010711 	.word	0x01010711

0100ae44 <spinel_datatype_vpack_>:

static spinel_ssize_t spinel_datatype_vpack_(uint8_t *     data_out,
                                             spinel_size_t data_len_max,
                                             const char *  pack_format,
                                             va_list_obj * args)
{
 100ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spinel_ssize_t ret = 0;

    // Buffer length sanity check
    require_action(data_len_max <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100ae48:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
{
 100ae4c:	4605      	mov	r5, r0
 100ae4e:	460c      	mov	r4, r1
 100ae50:	4691      	mov	r9, r2
 100ae52:	461f      	mov	r7, r3
 100ae54:	b085      	sub	sp, #20
    require_action(data_len_max <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100ae56:	d309      	bcc.n	100ae6c <spinel_datatype_vpack_+0x28>
            break;

        default:
            // Unsupported Type!
            ret   = -1;
            errno = EINVAL;
 100ae58:	f004 f88f 	bl	100ef7a <z_errno>
 100ae5c:	2316      	movs	r3, #22
            ret   = -1;
 100ae5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            errno = EINVAL;
 100ae62:	6003      	str	r3, [r0, #0]
        }
    }

bail:
    return ret;
}
 100ae64:	4630      	mov	r0, r6
 100ae66:	b005      	add	sp, #20
 100ae68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data_len_max = 0;
 100ae6c:	2800      	cmp	r0, #0
 100ae6e:	bf08      	it	eq
 100ae70:	2400      	moveq	r4, #0
                data_len_max = 0;
 100ae72:	2600      	movs	r6, #0
                size_len = spinel_datatype_pack(data_out, data_len_max, SPINEL_DATATYPE_UINT16_S, data_size_arg);
 100ae74:	f8df a304 	ldr.w	sl, [pc, #772]	; 100b17c <spinel_datatype_vpack_+0x338>
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100ae78:	f899 3000 	ldrb.w	r3, [r9]
 100ae7c:	2b00      	cmp	r3, #0
 100ae7e:	d0f1      	beq.n	100ae64 <spinel_datatype_vpack_+0x20>
        if (*pack_format == ')')
 100ae80:	2b29      	cmp	r3, #41	; 0x29
 100ae82:	d0ef      	beq.n	100ae64 <spinel_datatype_vpack_+0x20>
        switch ((spinel_datatype_t)*pack_format)
 100ae84:	2b78      	cmp	r3, #120	; 0x78
 100ae86:	d8e7      	bhi.n	100ae58 <spinel_datatype_vpack_+0x14>
 100ae88:	2b52      	cmp	r3, #82	; 0x52
 100ae8a:	d81e      	bhi.n	100aeca <spinel_datatype_vpack_+0x86>
 100ae8c:	2b4c      	cmp	r3, #76	; 0x4c
 100ae8e:	d8e3      	bhi.n	100ae58 <spinel_datatype_vpack_+0x14>
 100ae90:	2b42      	cmp	r3, #66	; 0x42
 100ae92:	d86d      	bhi.n	100af70 <spinel_datatype_vpack_+0x12c>
 100ae94:	2b2e      	cmp	r3, #46	; 0x2e
 100ae96:	f000 8093 	beq.w	100afc0 <spinel_datatype_vpack_+0x17c>
 100ae9a:	2b36      	cmp	r3, #54	; 0x36
 100ae9c:	d1dc      	bne.n	100ae58 <spinel_datatype_vpack_+0x14>
            spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100ae9e:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_ipv6addr_t))
 100aea0:	2c0f      	cmp	r4, #15
            spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100aea2:	f103 0204 	add.w	r2, r3, #4
 100aea6:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_ipv6addr_t);
 100aea8:	f106 0610 	add.w	r6, r6, #16
            if (data_len_max >= sizeof(spinel_ipv6addr_t))
 100aeac:	f240 81a7 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
                *(spinel_ipv6addr_t *)data_out = *arg;
 100aeb0:	462a      	mov	r2, r5
 100aeb2:	681b      	ldr	r3, [r3, #0]
 100aeb4:	f103 0110 	add.w	r1, r3, #16
 100aeb8:	f853 0b04 	ldr.w	r0, [r3], #4
 100aebc:	428b      	cmp	r3, r1
 100aebe:	f842 0b04 	str.w	r0, [r2], #4
 100aec2:	d1f9      	bne.n	100aeb8 <spinel_datatype_vpack_+0x74>
                data_out += sizeof(spinel_ipv6addr_t);
 100aec4:	3510      	adds	r5, #16
                data_len_max -= sizeof(spinel_ipv6addr_t);
 100aec6:	3c10      	subs	r4, #16
 100aec8:	e07a      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
        switch ((spinel_datatype_t)*pack_format)
 100aeca:	3b53      	subs	r3, #83	; 0x53
 100aecc:	2b25      	cmp	r3, #37	; 0x25
 100aece:	d8c3      	bhi.n	100ae58 <spinel_datatype_vpack_+0x14>
 100aed0:	a201      	add	r2, pc, #4	; (adr r2, 100aed8 <spinel_datatype_vpack_+0x94>)
 100aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100aed6:	bf00      	nop
 100aed8:	0100afdb 	.word	0x0100afdb
 100aedc:	0100b189 	.word	0x0100b189
 100aee0:	0100b0d5 	.word	0x0100b0d5
 100aee4:	0100ae59 	.word	0x0100ae59
 100aee8:	0100ae59 	.word	0x0100ae59
 100aeec:	0100b025 	.word	0x0100b025
 100aef0:	0100ae59 	.word	0x0100ae59
 100aef4:	0100ae59 	.word	0x0100ae59
 100aef8:	0100ae59 	.word	0x0100ae59
 100aefc:	0100ae59 	.word	0x0100ae59
 100af00:	0100ae59 	.word	0x0100ae59
 100af04:	0100ae59 	.word	0x0100ae59
 100af08:	0100ae59 	.word	0x0100ae59
 100af0c:	0100ae59 	.word	0x0100ae59
 100af10:	0100ae59 	.word	0x0100ae59
 100af14:	0100afa9 	.word	0x0100afa9
 100af18:	0100afcb 	.word	0x0100afcb
 100af1c:	0100b113 	.word	0x0100b113
 100af20:	0100b065 	.word	0x0100b065
 100af24:	0100ae59 	.word	0x0100ae59
 100af28:	0100ae59 	.word	0x0100ae59
 100af2c:	0100ae59 	.word	0x0100ae59
 100af30:	0100b0af 	.word	0x0100b0af
 100af34:	0100ae59 	.word	0x0100ae59
 100af38:	0100ae59 	.word	0x0100ae59
 100af3c:	0100affd 	.word	0x0100affd
 100af40:	0100ae59 	.word	0x0100ae59
 100af44:	0100ae59 	.word	0x0100ae59
 100af48:	0100ae59 	.word	0x0100ae59
 100af4c:	0100ae59 	.word	0x0100ae59
 100af50:	0100ae59 	.word	0x0100ae59
 100af54:	0100ae59 	.word	0x0100ae59
 100af58:	0100afdb 	.word	0x0100afdb
 100af5c:	0100b189 	.word	0x0100b189
 100af60:	0100ae59 	.word	0x0100ae59
 100af64:	0100ae59 	.word	0x0100ae59
 100af68:	0100ae59 	.word	0x0100ae59
 100af6c:	0100b025 	.word	0x0100b025
 100af70:	3b43      	subs	r3, #67	; 0x43
 100af72:	2b09      	cmp	r3, #9
 100af74:	f63f af70 	bhi.w	100ae58 <spinel_datatype_vpack_+0x14>
 100af78:	a201      	add	r2, pc, #4	; (adr r2, 100af80 <spinel_datatype_vpack_+0x13c>)
 100af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100af7e:	bf00      	nop
 100af80:	0100afcb 	.word	0x0100afcb
 100af84:	0100b113 	.word	0x0100b113
 100af88:	0100b08b 	.word	0x0100b08b
 100af8c:	0100ae59 	.word	0x0100ae59
 100af90:	0100ae59 	.word	0x0100ae59
 100af94:	0100ae59 	.word	0x0100ae59
 100af98:	0100ae59 	.word	0x0100ae59
 100af9c:	0100ae59 	.word	0x0100ae59
 100afa0:	0100ae59 	.word	0x0100ae59
 100afa4:	0100affd 	.word	0x0100affd
            bool arg = (bool)va_arg(args->obj, int);
 100afa8:	683b      	ldr	r3, [r7, #0]
            ret += sizeof(uint8_t);
 100afaa:	3601      	adds	r6, #1
            bool arg = (bool)va_arg(args->obj, int);
 100afac:	1d1a      	adds	r2, r3, #4
 100afae:	603a      	str	r2, [r7, #0]
            if (data_len_max >= sizeof(uint8_t))
 100afb0:	b134      	cbz	r4, 100afc0 <spinel_datatype_vpack_+0x17c>
            bool arg = (bool)va_arg(args->obj, int);
 100afb2:	681b      	ldr	r3, [r3, #0]
 100afb4:	3b00      	subs	r3, #0
 100afb6:	bf18      	it	ne
 100afb8:	2301      	movne	r3, #1
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100afba:	f805 3b01 	strb.w	r3, [r5], #1
                data_len_max -= sizeof(uint8_t);
 100afbe:	3c01      	subs	r4, #1
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100afc0:	4648      	mov	r0, r9
 100afc2:	f004 f81e 	bl	100f002 <spinel_next_packed_datatype>
 100afc6:	4681      	mov	r9, r0
 100afc8:	e756      	b.n	100ae78 <spinel_datatype_vpack_+0x34>
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100afca:	683b      	ldr	r3, [r7, #0]
            ret += sizeof(uint8_t);
 100afcc:	3601      	adds	r6, #1
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100afce:	1d1a      	adds	r2, r3, #4
 100afd0:	603a      	str	r2, [r7, #0]
            if (data_len_max >= sizeof(uint8_t))
 100afd2:	2c00      	cmp	r4, #0
 100afd4:	d0f4      	beq.n	100afc0 <spinel_datatype_vpack_+0x17c>
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100afd6:	681b      	ldr	r3, [r3, #0]
 100afd8:	e7ef      	b.n	100afba <spinel_datatype_vpack_+0x176>
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100afda:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint16_t))
 100afdc:	2c01      	cmp	r4, #1
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100afde:	f103 0204 	add.w	r2, r3, #4
 100afe2:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint16_t);
 100afe4:	f106 0602 	add.w	r6, r6, #2
            if (data_len_max >= sizeof(uint16_t))
 100afe8:	f240 8109 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100afec:	681b      	ldr	r3, [r3, #0]
                data_len_max -= sizeof(uint16_t);
 100afee:	3c02      	subs	r4, #2
                data_out[1] = (arg >> 8) & 0xff;
 100aff0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 100aff4:	706a      	strb	r2, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100aff6:	f805 3b02 	strb.w	r3, [r5], #2
                data_len_max -= sizeof(uint16_t);
 100affa:	e7e1      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100affc:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint32_t))
 100affe:	2c03      	cmp	r4, #3
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100b000:	f103 0204 	add.w	r2, r3, #4
 100b004:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint32_t);
 100b006:	f106 0604 	add.w	r6, r6, #4
            if (data_len_max >= sizeof(uint32_t))
 100b00a:	f240 80f8 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100b00e:	681b      	ldr	r3, [r3, #0]
                data_len_max -= sizeof(uint32_t);
 100b010:	3c04      	subs	r4, #4
                data_out[3] = (arg >> 24) & 0xff;
 100b012:	0e1a      	lsrs	r2, r3, #24
 100b014:	70ea      	strb	r2, [r5, #3]
                data_out[2] = (arg >> 16) & 0xff;
 100b016:	0c1a      	lsrs	r2, r3, #16
 100b018:	70aa      	strb	r2, [r5, #2]
                data_out[1] = (arg >> 8) & 0xff;
 100b01a:	0a1a      	lsrs	r2, r3, #8
 100b01c:	706a      	strb	r2, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100b01e:	f805 3b04 	strb.w	r3, [r5], #4
                data_len_max -= sizeof(uint32_t);
 100b022:	e7cd      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
            uint64_t arg = va_arg(args->obj, uint64_t);
 100b024:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint64_t))
 100b026:	2c07      	cmp	r4, #7
            uint64_t arg = va_arg(args->obj, uint64_t);
 100b028:	f103 0307 	add.w	r3, r3, #7
 100b02c:	f023 0307 	bic.w	r3, r3, #7
 100b030:	f103 0208 	add.w	r2, r3, #8
 100b034:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint64_t);
 100b036:	f106 0608 	add.w	r6, r6, #8
            if (data_len_max >= sizeof(uint64_t))
 100b03a:	f240 80e0 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
            uint64_t arg = va_arg(args->obj, uint64_t);
 100b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
                data_out[7] = (arg >> 56) & 0xff;
 100b042:	0e19      	lsrs	r1, r3, #24
 100b044:	71e9      	strb	r1, [r5, #7]
                data_out[6] = (arg >> 48) & 0xff;
 100b046:	0c19      	lsrs	r1, r3, #16
 100b048:	71a9      	strb	r1, [r5, #6]
                data_out[4] = (arg >> 32) & 0xff;
 100b04a:	712b      	strb	r3, [r5, #4]
                data_out[5] = (arg >> 40) & 0xff;
 100b04c:	0a19      	lsrs	r1, r3, #8
                data_out[3] = (arg >> 24) & 0xff;
 100b04e:	0e13      	lsrs	r3, r2, #24
 100b050:	70eb      	strb	r3, [r5, #3]
                data_out[2] = (arg >> 16) & 0xff;
 100b052:	0c13      	lsrs	r3, r2, #16
 100b054:	70ab      	strb	r3, [r5, #2]
                data_out[1] = (arg >> 8) & 0xff;
 100b056:	0a13      	lsrs	r3, r2, #8
                data_out[5] = (arg >> 40) & 0xff;
 100b058:	7169      	strb	r1, [r5, #5]
                data_out[1] = (arg >> 8) & 0xff;
 100b05a:	706b      	strb	r3, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100b05c:	f805 2b08 	strb.w	r2, [r5], #8
                data_len_max -= sizeof(spinel_eui64_t);
 100b060:	3c08      	subs	r4, #8
 100b062:	e7ad      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
            spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100b064:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_eui48_t))
 100b066:	2c05      	cmp	r4, #5
            spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100b068:	f103 0204 	add.w	r2, r3, #4
 100b06c:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_eui48_t);
 100b06e:	f106 0606 	add.w	r6, r6, #6
            if (data_len_max >= sizeof(spinel_eui48_t))
 100b072:	f240 80c4 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
                *(spinel_eui48_t *)data_out = *arg;
 100b076:	681b      	ldr	r3, [r3, #0]
                data_out += sizeof(spinel_eui48_t);
 100b078:	3506      	adds	r5, #6
                *(spinel_eui48_t *)data_out = *arg;
 100b07a:	681a      	ldr	r2, [r3, #0]
                data_len_max -= sizeof(spinel_eui48_t);
 100b07c:	3c06      	subs	r4, #6
                *(spinel_eui48_t *)data_out = *arg;
 100b07e:	f845 2c06 	str.w	r2, [r5, #-6]
 100b082:	889b      	ldrh	r3, [r3, #4]
 100b084:	f825 3c02 	strh.w	r3, [r5, #-2]
                data_len_max -= sizeof(spinel_eui48_t);
 100b088:	e79a      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
            spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100b08a:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_eui64_t))
 100b08c:	2c07      	cmp	r4, #7
            spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100b08e:	f103 0204 	add.w	r2, r3, #4
 100b092:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_eui64_t);
 100b094:	f106 0608 	add.w	r6, r6, #8
            if (data_len_max >= sizeof(spinel_eui64_t))
 100b098:	f240 80b1 	bls.w	100b1fe <spinel_datatype_vpack_+0x3ba>
                *(spinel_eui64_t *)data_out = *arg;
 100b09c:	681a      	ldr	r2, [r3, #0]
                data_out += sizeof(spinel_eui64_t);
 100b09e:	3508      	adds	r5, #8
                *(spinel_eui64_t *)data_out = *arg;
 100b0a0:	6813      	ldr	r3, [r2, #0]
 100b0a2:	f845 3c08 	str.w	r3, [r5, #-8]
 100b0a6:	6853      	ldr	r3, [r2, #4]
 100b0a8:	f845 3c04 	str.w	r3, [r5, #-4]
                data_out += sizeof(spinel_eui64_t);
 100b0ac:	e7d8      	b.n	100b060 <spinel_datatype_vpack_+0x21c>
            uint32_t       arg = va_arg(args->obj, uint32_t);
 100b0ae:	683b      	ldr	r3, [r7, #0]
 100b0b0:	1d1a      	adds	r2, r3, #4
 100b0b2:	603a      	str	r2, [r7, #0]
 100b0b4:	681a      	ldr	r2, [r3, #0]
            require_action(arg < SPINEL_MAX_UINT_PACKED, bail, {
 100b0b6:	4b32      	ldr	r3, [pc, #200]	; (100b180 <spinel_datatype_vpack_+0x33c>)
 100b0b8:	429a      	cmp	r2, r3
 100b0ba:	f63f aecd 	bhi.w	100ae58 <spinel_datatype_vpack_+0x14>
            encoded_size = spinel_packed_uint_encode(data_out, data_len_max, arg);
 100b0be:	4621      	mov	r1, r4
 100b0c0:	4628      	mov	r0, r5
 100b0c2:	f003 ff88 	bl	100efd6 <spinel_packed_uint_encode>
            if ((spinel_ssize_t)data_len_max >= encoded_size)
 100b0c6:	4284      	cmp	r4, r0
            ret += encoded_size;
 100b0c8:	4406      	add	r6, r0
            if ((spinel_ssize_t)data_len_max >= encoded_size)
 100b0ca:	f2c0 8098 	blt.w	100b1fe <spinel_datatype_vpack_+0x3ba>
                data_out += struct_len;
 100b0ce:	4405      	add	r5, r0
                data_len_max -= (spinel_size_t)struct_len;
 100b0d0:	1a24      	subs	r4, r4, r0
 100b0d2:	e775      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
            const char *string_arg     = va_arg(args->obj, const char *);
 100b0d4:	683b      	ldr	r3, [r7, #0]
 100b0d6:	1d1a      	adds	r2, r3, #4
 100b0d8:	603a      	str	r2, [r7, #0]
 100b0da:	f8d3 b000 	ldr.w	fp, [r3]
            if (string_arg)
 100b0de:	f1bb 0f00 	cmp.w	fp, #0
 100b0e2:	d011      	beq.n	100b108 <spinel_datatype_vpack_+0x2c4>
                string_arg_len = strlen(string_arg) + 1;
 100b0e4:	4658      	mov	r0, fp
 100b0e6:	f003 fa00 	bl	100e4ea <strlen>
 100b0ea:	f100 0801 	add.w	r8, r0, #1
            if (data_len_max >= string_arg_len)
 100b0ee:	4544      	cmp	r4, r8
            ret += (spinel_size_t)string_arg_len;
 100b0f0:	4446      	add	r6, r8
            if (data_len_max >= string_arg_len)
 100b0f2:	f0c0 8084 	bcc.w	100b1fe <spinel_datatype_vpack_+0x3ba>
                memcpy(data_out, string_arg, string_arg_len);
 100b0f6:	4628      	mov	r0, r5
 100b0f8:	4642      	mov	r2, r8
 100b0fa:	4659      	mov	r1, fp
 100b0fc:	f003 fa4b 	bl	100e596 <memcpy>
                data_out += string_arg_len;
 100b100:	4445      	add	r5, r8
                data_len_max -= data_size_arg;
 100b102:	eba4 0408 	sub.w	r4, r4, r8
 100b106:	e75b      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
                string_arg_len = 1;
 100b108:	f04f 0801 	mov.w	r8, #1
                string_arg     = "";
 100b10c:	f8df b074 	ldr.w	fp, [pc, #116]	; 100b184 <spinel_datatype_vpack_+0x340>
 100b110:	e7ed      	b.n	100b0ee <spinel_datatype_vpack_+0x2aa>
            const uint8_t *arg           = va_arg(args->obj, const uint8_t *);
 100b112:	683b      	ldr	r3, [r7, #0]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100b114:	4648      	mov	r0, r9
            const uint8_t *arg           = va_arg(args->obj, const uint8_t *);
 100b116:	1d1a      	adds	r2, r3, #4
 100b118:	603a      	str	r2, [r7, #0]
 100b11a:	461a      	mov	r2, r3
 100b11c:	f852 1b08 	ldr.w	r1, [r2], #8
            uint32_t       data_size_arg = va_arg(args->obj, uint32_t);
 100b120:	f8d3 b004 	ldr.w	fp, [r3, #4]
 100b124:	603a      	str	r2, [r7, #0]
            const uint8_t *arg           = va_arg(args->obj, const uint8_t *);
 100b126:	9101      	str	r1, [sp, #4]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100b128:	f003 ff6b 	bl	100f002 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100b12c:	f899 2000 	ldrb.w	r2, [r9]
 100b130:	2a64      	cmp	r2, #100	; 0x64
 100b132:	d003      	beq.n	100b13c <spinel_datatype_vpack_+0x2f8>
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100b134:	7800      	ldrb	r0, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100b136:	b1f0      	cbz	r0, 100b176 <spinel_datatype_vpack_+0x332>
 100b138:	2829      	cmp	r0, #41	; 0x29
 100b13a:	d01c      	beq.n	100b176 <spinel_datatype_vpack_+0x332>
                size_len = spinel_datatype_pack(data_out, data_len_max, SPINEL_DATATYPE_UINT16_S, data_size_arg);
 100b13c:	465b      	mov	r3, fp
 100b13e:	4652      	mov	r2, sl
 100b140:	4621      	mov	r1, r4
 100b142:	4628      	mov	r0, r5
 100b144:	f003 ff83 	bl	100f04e <spinel_datatype_pack>
                require_action(size_len > 0, bail, {
 100b148:	f1b0 0800 	subs.w	r8, r0, #0
 100b14c:	f77f ae84 	ble.w	100ae58 <spinel_datatype_vpack_+0x14>
            ret += (spinel_size_t)size_len + data_size_arg;
 100b150:	eb08 020b 	add.w	r2, r8, fp
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100b154:	42a2      	cmp	r2, r4
            ret += (spinel_size_t)size_len + data_size_arg;
 100b156:	4416      	add	r6, r2
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100b158:	d851      	bhi.n	100b1fe <spinel_datatype_vpack_+0x3ba>
                if (data_out && arg)
 100b15a:	eb15 0508 	adds.w	r5, r5, r8
 100b15e:	d006      	beq.n	100b16e <spinel_datatype_vpack_+0x32a>
 100b160:	9b01      	ldr	r3, [sp, #4]
 100b162:	b123      	cbz	r3, 100b16e <spinel_datatype_vpack_+0x32a>
                    memcpy(data_out, arg, data_size_arg);
 100b164:	465a      	mov	r2, fp
 100b166:	4619      	mov	r1, r3
 100b168:	4628      	mov	r0, r5
 100b16a:	f003 fa14 	bl	100e596 <memcpy>
                data_out += data_size_arg;
 100b16e:	445d      	add	r5, fp
                data_len_max -= data_size_arg;
 100b170:	eba4 040b 	sub.w	r4, r4, fp
 100b174:	e7c5      	b.n	100b102 <spinel_datatype_vpack_+0x2be>
            spinel_ssize_t size_len      = 0;
 100b176:	f04f 0800 	mov.w	r8, #0
 100b17a:	e7e9      	b.n	100b150 <spinel_datatype_vpack_+0x30c>
 100b17c:	01010711 	.word	0x01010711
 100b180:	001ffffe 	.word	0x001ffffe
 100b184:	01010583 	.word	0x01010583
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100b188:	4648      	mov	r0, r9
 100b18a:	f003 ff3a 	bl	100f002 <spinel_next_packed_datatype>
            require_action(pack_format[1] == '(', bail, {
 100b18e:	f899 3001 	ldrb.w	r3, [r9, #1]
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100b192:	f890 8000 	ldrb.w	r8, [r0]
            require_action(pack_format[1] == '(', bail, {
 100b196:	2b28      	cmp	r3, #40	; 0x28
 100b198:	f47f ae5e 	bne.w	100ae58 <spinel_datatype_vpack_+0x14>
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100b19c:	2100      	movs	r1, #0
                va_copy(subargs.obj, args->obj);
 100b19e:	683b      	ldr	r3, [r7, #0]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100b1a0:	f109 0b02 	add.w	fp, r9, #2
 100b1a4:	465a      	mov	r2, fp
                va_copy(subargs.obj, args->obj);
 100b1a6:	9303      	str	r3, [sp, #12]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100b1a8:	4608      	mov	r0, r1
 100b1aa:	ab03      	add	r3, sp, #12
 100b1ac:	f7ff fe4a 	bl	100ae44 <spinel_datatype_vpack_>
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100b1b0:	f899 2000 	ldrb.w	r2, [r9]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100b1b4:	4603      	mov	r3, r0
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100b1b6:	2a74      	cmp	r2, #116	; 0x74
 100b1b8:	d005      	beq.n	100b1c6 <spinel_datatype_vpack_+0x382>
 100b1ba:	f1b8 0f00 	cmp.w	r8, #0
 100b1be:	d00d      	beq.n	100b1dc <spinel_datatype_vpack_+0x398>
 100b1c0:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
 100b1c4:	d018      	beq.n	100b1f8 <spinel_datatype_vpack_+0x3b4>
                size_len = spinel_datatype_pack(data_out, data_len_max, SPINEL_DATATYPE_UINT16_S, struct_len);
 100b1c6:	4652      	mov	r2, sl
 100b1c8:	4621      	mov	r1, r4
 100b1ca:	4628      	mov	r0, r5
 100b1cc:	9301      	str	r3, [sp, #4]
 100b1ce:	f003 ff3e 	bl	100f04e <spinel_datatype_pack>
                require_action(size_len > 0, bail, {
 100b1d2:	f1b0 0800 	subs.w	r8, r0, #0
 100b1d6:	9b01      	ldr	r3, [sp, #4]
 100b1d8:	f77f ae3e 	ble.w	100ae58 <spinel_datatype_vpack_+0x14>
            ret += size_len + struct_len;
 100b1dc:	4443      	add	r3, r8
            if (struct_len + size_len <= (spinel_ssize_t)data_len_max)
 100b1de:	42a3      	cmp	r3, r4
            ret += size_len + struct_len;
 100b1e0:	441e      	add	r6, r3
            if (struct_len + size_len <= (spinel_ssize_t)data_len_max)
 100b1e2:	dc0c      	bgt.n	100b1fe <spinel_datatype_vpack_+0x3ba>
                data_out += size_len;
 100b1e4:	4445      	add	r5, r8
                data_len_max -= (spinel_size_t)size_len;
 100b1e6:	eba4 0408 	sub.w	r4, r4, r8
                struct_len = spinel_datatype_vpack_(data_out, data_len_max, pack_format + 2, args);
 100b1ea:	463b      	mov	r3, r7
 100b1ec:	465a      	mov	r2, fp
 100b1ee:	4621      	mov	r1, r4
 100b1f0:	4628      	mov	r0, r5
 100b1f2:	f7ff fe27 	bl	100ae44 <spinel_datatype_vpack_>
 100b1f6:	e76a      	b.n	100b0ce <spinel_datatype_vpack_+0x28a>
            spinel_ssize_t size_len   = 0;
 100b1f8:	f04f 0800 	mov.w	r8, #0
 100b1fc:	e7ee      	b.n	100b1dc <spinel_datatype_vpack_+0x398>
                data_len_max = 0;
 100b1fe:	2400      	movs	r4, #0
 100b200:	e6de      	b.n	100afc0 <spinel_datatype_vpack_+0x17c>
 100b202:	bf00      	nop

0100b204 <nrf_802154_spinel_dst_buffer_mgr_get>:
}

nrf_802154_buffer_mgr_dst_t * nrf_802154_spinel_dst_buffer_mgr_get(void)
{
    return &m_dst_mgr;
}
 100b204:	4800      	ldr	r0, [pc, #0]	; (100b208 <nrf_802154_spinel_dst_buffer_mgr_get+0x4>)
 100b206:	4770      	bx	lr
 100b208:	21003a54 	.word	0x21003a54

0100b20c <nrf_802154_spinel_src_buffer_mgr_get>:

nrf_802154_buffer_mgr_src_t * nrf_802154_spinel_src_buffer_mgr_get(void)
{
    return &m_src_mgr;
}
 100b20c:	4800      	ldr	r0, [pc, #0]	; (100b210 <nrf_802154_spinel_src_buffer_mgr_get+0x4>)
 100b20e:	4770      	bx	lr
 100b210:	21003c94 	.word	0x21003c94

0100b214 <nrf_802154_serialization_init>:

void nrf_802154_serialization_init(void)
{
 100b214:	b507      	push	{r0, r1, r2, lr}
    NRF_802154_BUFFER_MGR_SRC_INIT(m_src_mgr);
 100b216:	2210      	movs	r2, #16
 100b218:	490b      	ldr	r1, [pc, #44]	; (100b248 <nrf_802154_serialization_init+0x34>)
 100b21a:	480c      	ldr	r0, [pc, #48]	; (100b24c <nrf_802154_serialization_init+0x38>)
 100b21c:	f003 ffc6 	bl	100f1ac <nrf_802154_buffer_mgr_src_init>
    NRF_802154_BUFFER_MGR_DST_INIT(m_dst_mgr);
 100b220:	2304      	movs	r3, #4
 100b222:	4a0b      	ldr	r2, [pc, #44]	; (100b250 <nrf_802154_serialization_init+0x3c>)
 100b224:	490b      	ldr	r1, [pc, #44]	; (100b254 <nrf_802154_serialization_init+0x40>)
 100b226:	480c      	ldr	r0, [pc, #48]	; (100b258 <nrf_802154_serialization_init+0x44>)
 100b228:	f003 ff7b 	bl	100f122 <nrf_802154_buffer_mgr_dst_init>
    SERIALIZATION_ERROR_INIT(error);

    buffer_mgr_init();
    nrf_802154_spinel_response_notifier_init();
 100b22c:	f7fb feba 	bl	1006fa4 <nrf_802154_spinel_response_notifier_init>

    nrf_802154_ser_err_t ret = nrf_802154_backend_init();
 100b230:	f003 faed 	bl	100e80e <nrf_802154_backend_init>

    SERIALIZATION_ERROR_CHECK(ret, error, bail);
 100b234:	2800      	cmp	r0, #0
 100b236:	da03      	bge.n	100b240 <nrf_802154_serialization_init+0x2c>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b238:	9001      	str	r0, [sp, #4]
 100b23a:	a801      	add	r0, sp, #4
 100b23c:	f002 fca9 	bl	100db92 <nrf_802154_serialization_error>

    return;
}
 100b240:	b003      	add	sp, #12
 100b242:	f85d fb04 	ldr.w	pc, [sp], #4
 100b246:	bf00      	nop
 100b248:	21003ca8 	.word	0x21003ca8
 100b24c:	21003c94 	.word	0x21003c94
 100b250:	21003a70 	.word	0x21003a70
 100b254:	21003c74 	.word	0x21003c74
 100b258:	21003a54 	.word	0x21003a54

0100b25c <nrf_802154_spinel_decode_cmd>:
#include "nrf_802154_spinel_dec.h"
#include "nrf_802154_serialization_error.h"

nrf_802154_ser_err_t nrf_802154_spinel_decode_cmd(const void * p_packet_data,
                                                  size_t       packet_data_len)
{
 100b25c:	b500      	push	{lr}
 100b25e:	b089      	sub	sp, #36	; 0x24
    uint8_t          header;
    spinel_command_t cmd;
    const void     * p_cmd_data;
    size_t           cmd_data_len;

    spinel_ssize_t siz = spinel_datatype_unpack(p_packet_data,
 100b260:	ab07      	add	r3, sp, #28
 100b262:	9302      	str	r3, [sp, #8]
 100b264:	ab06      	add	r3, sp, #24
 100b266:	9301      	str	r3, [sp, #4]
 100b268:	ab05      	add	r3, sp, #20
 100b26a:	9300      	str	r3, [sp, #0]
 100b26c:	4a08      	ldr	r2, [pc, #32]	; (100b290 <nrf_802154_spinel_decode_cmd+0x34>)
 100b26e:	f10d 0313 	add.w	r3, sp, #19
 100b272:	f003 feda 	bl	100f02a <spinel_datatype_unpack>
                                                &header,
                                                &cmd,
                                                &p_cmd_data,
                                                &cmd_data_len);

    if (siz < 0)
 100b276:	2800      	cmp	r0, #0
 100b278:	db07      	blt.n	100b28a <nrf_802154_spinel_decode_cmd+0x2e>
    {
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }

    return nrf_802154_spinel_dispatch_cmd(cmd, p_cmd_data, cmd_data_len);
 100b27a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 100b27e:	9805      	ldr	r0, [sp, #20]
 100b280:	f004 f899 	bl	100f3b6 <nrf_802154_spinel_dispatch_cmd>
}
 100b284:	b009      	add	sp, #36	; 0x24
 100b286:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100b28a:	f06f 0002 	mvn.w	r0, #2
 100b28e:	e7f9      	b.n	100b284 <nrf_802154_spinel_decode_cmd+0x28>
 100b290:	010105f1 	.word	0x010105f1

0100b294 <last_tx_ack_started_send>:
}

static nrf_802154_ser_err_t last_tx_ack_started_send(void)
{
    nrf_802154_ser_err_t res           = NRF_802154_SERIALIZATION_ERROR_OK;
    const uint8_t      * p_last_tx_ack = mp_last_tx_ack;
 100b294:	4b09      	ldr	r3, [pc, #36]	; (100b2bc <last_tx_ack_started_send+0x28>)
{
 100b296:	b507      	push	{r0, r1, r2, lr}
    const uint8_t      * p_last_tx_ack = mp_last_tx_ack;
 100b298:	6818      	ldr	r0, [r3, #0]

    NRF_802154_SPINEL_LOG_BANNER_CALLING();

    if (p_last_tx_ack != NULL)
 100b29a:	b158      	cbz	r0, 100b2b4 <last_tx_ack_started_send+0x20>
    {
        mp_last_tx_ack = NULL;
 100b29c:	2200      	movs	r2, #0
 100b29e:	601a      	str	r2, [r3, #0]

        res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b2a0:	7803      	ldrb	r3, [r0, #0]
 100b2a2:	2206      	movs	r2, #6
 100b2a4:	e9cd 0300 	strd	r0, r3, [sp]
 100b2a8:	2180      	movs	r1, #128	; 0x80
 100b2aa:	f643 4319 	movw	r3, #15385	; 0x3c19
 100b2ae:	4804      	ldr	r0, [pc, #16]	; (100b2c0 <last_tx_ack_started_send+0x2c>)
 100b2b0:	f004 f84c 	bl	100f34c <nrf_802154_spinel_send>
            p_last_tx_ack,
            (size_t)(p_last_tx_ack[0]));
    }

    return res;
}
 100b2b4:	b003      	add	sp, #12
 100b2b6:	f85d fb04 	ldr.w	pc, [sp], #4
 100b2ba:	bf00      	nop
 100b2bc:	21003ce8 	.word	0x21003ce8
 100b2c0:	010105f5 	.word	0x010105f5

0100b2c4 <nrf_802154_cca_done>:
{
 100b2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b2c6:	f643 4312 	movw	r3, #15378	; 0x3c12
 100b2ca:	9000      	str	r0, [sp, #0]
 100b2cc:	2206      	movs	r2, #6
 100b2ce:	2180      	movs	r1, #128	; 0x80
 100b2d0:	4805      	ldr	r0, [pc, #20]	; (100b2e8 <nrf_802154_cca_done+0x24>)
 100b2d2:	f004 f83b 	bl	100f34c <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b2d6:	2800      	cmp	r0, #0
 100b2d8:	da03      	bge.n	100b2e2 <nrf_802154_cca_done+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b2da:	9003      	str	r0, [sp, #12]
 100b2dc:	a803      	add	r0, sp, #12
 100b2de:	f002 fc58 	bl	100db92 <nrf_802154_serialization_error>
}
 100b2e2:	b005      	add	sp, #20
 100b2e4:	f85d fb04 	ldr.w	pc, [sp], #4
 100b2e8:	010105fa 	.word	0x010105fa

0100b2ec <nrf_802154_cca_failed>:
{
 100b2ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b2ee:	f643 4313 	movw	r3, #15379	; 0x3c13
 100b2f2:	9000      	str	r0, [sp, #0]
 100b2f4:	2206      	movs	r2, #6
 100b2f6:	2180      	movs	r1, #128	; 0x80
 100b2f8:	4805      	ldr	r0, [pc, #20]	; (100b310 <nrf_802154_cca_failed+0x24>)
 100b2fa:	f004 f827 	bl	100f34c <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b2fe:	2800      	cmp	r0, #0
 100b300:	da03      	bge.n	100b30a <nrf_802154_cca_failed+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b302:	9003      	str	r0, [sp, #12]
 100b304:	a803      	add	r0, sp, #12
 100b306:	f002 fc44 	bl	100db92 <nrf_802154_serialization_error>
}
 100b30a:	b005      	add	sp, #20
 100b30c:	f85d fb04 	ldr.w	pc, [sp], #4
 100b310:	010105ff 	.word	0x010105ff

0100b314 <nrf_802154_energy_detected>:
{
 100b314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b316:	f643 4315 	movw	r3, #15381	; 0x3c15
 100b31a:	9000      	str	r0, [sp, #0]
 100b31c:	2206      	movs	r2, #6
 100b31e:	2180      	movs	r1, #128	; 0x80
 100b320:	4805      	ldr	r0, [pc, #20]	; (100b338 <nrf_802154_energy_detected+0x24>)
 100b322:	f004 f813 	bl	100f34c <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b326:	2800      	cmp	r0, #0
 100b328:	da03      	bge.n	100b332 <nrf_802154_energy_detected+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b32a:	9003      	str	r0, [sp, #12]
 100b32c:	a803      	add	r0, sp, #12
 100b32e:	f002 fc30 	bl	100db92 <nrf_802154_serialization_error>
}
 100b332:	b005      	add	sp, #20
 100b334:	f85d fb04 	ldr.w	pc, [sp], #4
 100b338:	010105ff 	.word	0x010105ff

0100b33c <nrf_802154_energy_detection_failed>:
{
 100b33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b33e:	f643 4316 	movw	r3, #15382	; 0x3c16
 100b342:	9000      	str	r0, [sp, #0]
 100b344:	2206      	movs	r2, #6
 100b346:	2180      	movs	r1, #128	; 0x80
 100b348:	4805      	ldr	r0, [pc, #20]	; (100b360 <nrf_802154_energy_detection_failed+0x24>)
 100b34a:	f003 ffff 	bl	100f34c <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b34e:	2800      	cmp	r0, #0
 100b350:	da03      	bge.n	100b35a <nrf_802154_energy_detection_failed+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b352:	9003      	str	r0, [sp, #12]
 100b354:	a803      	add	r0, sp, #12
 100b356:	f002 fc1c 	bl	100db92 <nrf_802154_serialization_error>
}
 100b35a:	b005      	add	sp, #20
 100b35c:	f85d fb04 	ldr.w	pc, [sp], #4
 100b360:	010105ff 	.word	0x010105ff

0100b364 <nrf_802154_tx_ack_started>:
    mp_last_tx_ack = p_data;
 100b364:	4b01      	ldr	r3, [pc, #4]	; (100b36c <nrf_802154_tx_ack_started+0x8>)
 100b366:	6018      	str	r0, [r3, #0]
}
 100b368:	4770      	bx	lr
 100b36a:	bf00      	nop
 100b36c:	21003ce8 	.word	0x21003ce8

0100b370 <nrf_802154_received_timestamp_raw>:

void nrf_802154_received_timestamp_raw(uint8_t * p_data,
                                       int8_t    power,
                                       uint8_t   lqi,
                                       uint32_t  time)
{
 100b370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100b374:	b088      	sub	sp, #32
 100b376:	4605      	mov	r5, r0
 100b378:	460e      	mov	r6, r1
 100b37a:	4617      	mov	r7, r2
 100b37c:	4698      	mov	r8, r3
    nrf_802154_ser_err_t res;
    uint32_t             local_data_handle;

    SERIALIZATION_ERROR_INIT(error);

    res = last_tx_ack_started_send();
 100b37e:	f7ff ff89 	bl	100b294 <last_tx_ack_started_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b382:	1e04      	subs	r4, r0, #0
 100b384:	db0b      	blt.n	100b39e <nrf_802154_received_timestamp_raw+0x2e>

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_BUFF(p_data, p_data[0]);

    // Create a handle to the original frame buffer
    bool handle_added = nrf_802154_buffer_mgr_src_add(nrf_802154_spinel_src_buffer_mgr_get(),
 100b386:	f7ff ff41 	bl	100b20c <nrf_802154_spinel_src_buffer_mgr_get>
 100b38a:	4629      	mov	r1, r5
 100b38c:	aa06      	add	r2, sp, #24
 100b38e:	f003 ff17 	bl	100f1c0 <nrf_802154_buffer_mgr_src_add>
                                                      (void *)p_data,
                                                      &local_data_handle);

    if (!handle_added)
 100b392:	b958      	cbnz	r0, 100b3ac <nrf_802154_received_timestamp_raw+0x3c>
    {
        // Handle could not be created. Drop the frame and throw an error
        nrf_802154_buffer_free_raw(p_data);
 100b394:	4628      	mov	r0, r5
 100b396:	f003 fa7b 	bl	100e890 <nrf_802154_buffer_free_raw>
        SERIALIZATION_ERROR(NRF_802154_SERIALIZATION_ERROR_NO_MEMORY, error, bail);
 100b39a:	f06f 0408 	mvn.w	r4, #8

        SERIALIZATION_ERROR(res, error, bail);
    }

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b39e:	a807      	add	r0, sp, #28
 100b3a0:	9407      	str	r4, [sp, #28]
 100b3a2:	f002 fbf6 	bl	100db92 <nrf_802154_serialization_error>

    return;
}
 100b3a6:	b008      	add	sp, #32
 100b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b3ac:	782b      	ldrb	r3, [r5, #0]
 100b3ae:	2206      	movs	r2, #6
 100b3b0:	3304      	adds	r3, #4
 100b3b2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 100b3b6:	9b06      	ldr	r3, [sp, #24]
 100b3b8:	2180      	movs	r1, #128	; 0x80
 100b3ba:	9300      	str	r3, [sp, #0]
 100b3bc:	e9cd 7804 	strd	r7, r8, [sp, #16]
 100b3c0:	f643 4317 	movw	r3, #15383	; 0x3c17
 100b3c4:	4807      	ldr	r0, [pc, #28]	; (100b3e4 <nrf_802154_received_timestamp_raw+0x74>)
 100b3c6:	9603      	str	r6, [sp, #12]
 100b3c8:	f003 ffc0 	bl	100f34c <nrf_802154_spinel_send>
    if (res < 0)
 100b3cc:	1e04      	subs	r4, r0, #0
 100b3ce:	daea      	bge.n	100b3a6 <nrf_802154_received_timestamp_raw+0x36>
        nrf_802154_buffer_mgr_src_remove_by_buffer_handle(nrf_802154_spinel_src_buffer_mgr_get(),
 100b3d0:	f7ff ff1c 	bl	100b20c <nrf_802154_spinel_src_buffer_mgr_get>
 100b3d4:	9906      	ldr	r1, [sp, #24]
 100b3d6:	f003 ff0b 	bl	100f1f0 <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>
        nrf_802154_buffer_free_raw(p_data);
 100b3da:	4628      	mov	r0, r5
 100b3dc:	f003 fa58 	bl	100e890 <nrf_802154_buffer_free_raw>
        SERIALIZATION_ERROR(res, error, bail);
 100b3e0:	e7dd      	b.n	100b39e <nrf_802154_received_timestamp_raw+0x2e>
 100b3e2:	bf00      	nop
 100b3e4:	01010604 	.word	0x01010604

0100b3e8 <nrf_802154_receive_failed>:

void nrf_802154_receive_failed(nrf_802154_rx_error_t error, uint32_t id)
{
 100b3e8:	b530      	push	{r4, r5, lr}
 100b3ea:	b085      	sub	sp, #20
 100b3ec:	4604      	mov	r4, r0
 100b3ee:	460d      	mov	r5, r1
    nrf_802154_ser_err_t res;

    SERIALIZATION_ERROR_INIT(ser_error);

    res = last_tx_ack_started_send();
 100b3f0:	f7ff ff50 	bl	100b294 <last_tx_ack_started_send>
    SERIALIZATION_ERROR_CHECK(res, ser_error, bail);
 100b3f4:	2800      	cmp	r0, #0
 100b3f6:	db0a      	blt.n	100b40e <nrf_802154_receive_failed+0x26>

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_VAR("%u", error);

    // Serialize the call
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b3f8:	f643 4318 	movw	r3, #15384	; 0x3c18
 100b3fc:	2206      	movs	r2, #6
 100b3fe:	2180      	movs	r1, #128	; 0x80
 100b400:	e9cd 4500 	strd	r4, r5, [sp]
 100b404:	4805      	ldr	r0, [pc, #20]	; (100b41c <nrf_802154_receive_failed+0x34>)
 100b406:	f003 ffa1 	bl	100f34c <nrf_802154_spinel_send>
        SPINEL_PROP_VENDOR_NORDIC_NRF_802154_RECEIVE_FAILED,
        SPINEL_DATATYPE_NRF_802154_RECEIVE_FAILED,
        error,
        id);

    SERIALIZATION_ERROR_CHECK(res, ser_error, bail);
 100b40a:	2800      	cmp	r0, #0
 100b40c:	da03      	bge.n	100b416 <nrf_802154_receive_failed+0x2e>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(ser_error);
 100b40e:	9003      	str	r0, [sp, #12]
 100b410:	a803      	add	r0, sp, #12
 100b412:	f002 fbbe 	bl	100db92 <nrf_802154_serialization_error>
}
 100b416:	b005      	add	sp, #20
 100b418:	bd30      	pop	{r4, r5, pc}
 100b41a:	bf00      	nop
 100b41c:	01010610 	.word	0x01010610

0100b420 <nrf_802154_transmitted_raw>:

void nrf_802154_transmitted_raw(uint8_t                                   * p_frame,
                                const nrf_802154_transmit_done_metadata_t * p_metadata)
{
    uint32_t  remote_frame_handle;
    uint32_t  ack_handle = 0;
 100b420:	2300      	movs	r3, #0
{
 100b422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100b426:	4605      	mov	r5, r0
 100b428:	b08f      	sub	sp, #60	; 0x3c
    uint8_t * p_ack      = p_metadata->data.transmitted.p_ack;

    /* Forcefully overwrite frame's properties due to KRKNWK-10114 not being implemented.
     * This overwrite makes state of the frame consistent with its properties.
     */
    ((nrf_802154_transmit_done_metadata_t *)p_metadata)->frame_props =
 100b42a:	800b      	strh	r3, [r1, #0]
{
 100b42c:	460c      	mov	r4, r1
    uint8_t * p_ack      = p_metadata->data.transmitted.p_ack;
 100b42e:	684e      	ldr	r6, [r1, #4]
    uint32_t  ack_handle = 0;
 100b430:	930c      	str	r3, [sp, #48]	; 0x30

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_BUFF(p_frame, p_frame[0]);

    // Search for the handle to the original frame buffer based on the local pointer
    bool frame_found = nrf_802154_buffer_mgr_dst_search_by_local_pointer(
 100b432:	f7ff fee7 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b436:	4629      	mov	r1, r5
 100b438:	aa0b      	add	r2, sp, #44	; 0x2c
 100b43a:	f003 fe9f 	bl	100f17c <nrf_802154_buffer_mgr_dst_search_by_local_pointer>
        nrf_802154_spinel_dst_buffer_mgr_get(),
        (void *)p_frame,
        &remote_frame_handle);

    // The handle is expected to be found, throw an error if it was not found
    SERIALIZATION_ERROR_IF(!frame_found,
 100b43e:	2800      	cmp	r0, #0
 100b440:	d03d      	beq.n	100b4be <nrf_802154_transmitted_raw+0x9e>
                           NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER,
                           error,
                           bail);

    if (p_ack != NULL)
 100b442:	b186      	cbz	r6, 100b466 <nrf_802154_transmitted_raw+0x46>
    {
        // Create a handle to the original Ack buffer
        bool ack_handle_added = nrf_802154_buffer_mgr_src_add(
 100b444:	f7ff fee2 	bl	100b20c <nrf_802154_spinel_src_buffer_mgr_get>
 100b448:	4631      	mov	r1, r6
 100b44a:	aa0c      	add	r2, sp, #48	; 0x30
 100b44c:	f003 feb8 	bl	100f1c0 <nrf_802154_buffer_mgr_src_add>
            nrf_802154_spinel_src_buffer_mgr_get(),
            (void *)p_ack,
            &ack_handle);

        if (!ack_handle_added)
 100b450:	b948      	cbnz	r0, 100b466 <nrf_802154_transmitted_raw+0x46>
        {
            // Drop the transmitted frame and throw an error if Ack could not be stored
            local_transmitted_frame_ptr_free((void *)p_frame);
 100b452:	4628      	mov	r0, r5
 100b454:	f003 ff9f 	bl	100f396 <local_transmitted_frame_ptr_free>
            SERIALIZATION_ERROR(NRF_802154_SERIALIZATION_ERROR_NO_MEMORY, error, bail);
 100b458:	f06f 0408 	mvn.w	r4, #8

    // Throw an error if serialization failed
    SERIALIZATION_ERROR_CHECK(res, error, bail);

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b45c:	a80d      	add	r0, sp, #52	; 0x34
 100b45e:	940d      	str	r4, [sp, #52]	; 0x34
 100b460:	f002 fb97 	bl	100db92 <nrf_802154_serialization_error>

    return;
 100b464:	e026      	b.n	100b4b4 <nrf_802154_transmitted_raw+0x94>
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b466:	6862      	ldr	r2, [r4, #4]
 100b468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100b46a:	7820      	ldrb	r0, [r4, #0]
 100b46c:	7866      	ldrb	r6, [r4, #1]
 100b46e:	7a27      	ldrb	r7, [r4, #8]
 100b470:	f994 c009 	ldrsb.w	ip, [r4, #9]
 100b474:	f894 e00a 	ldrb.w	lr, [r4, #10]
 100b478:	f8d4 800c 	ldr.w	r8, [r4, #12]
 100b47c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 100b480:	b1da      	cbz	r2, 100b4ba <nrf_802154_transmitted_raw+0x9a>
 100b482:	7813      	ldrb	r3, [r2, #0]
 100b484:	3305      	adds	r3, #5
 100b486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 100b48a:	e9cd 1000 	strd	r1, r0, [sp]
 100b48e:	f643 431d 	movw	r3, #15389	; 0x3c1d
 100b492:	2206      	movs	r2, #6
 100b494:	2180      	movs	r1, #128	; 0x80
 100b496:	e9cd ce04 	strd	ip, lr, [sp, #16]
 100b49a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 100b49e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 100b4a2:	4808      	ldr	r0, [pc, #32]	; (100b4c4 <nrf_802154_transmitted_raw+0xa4>)
 100b4a4:	f003 ff52 	bl	100f34c <nrf_802154_spinel_send>
 100b4a8:	4604      	mov	r4, r0
    local_transmitted_frame_ptr_free((void *)p_frame);
 100b4aa:	4628      	mov	r0, r5
 100b4ac:	f003 ff73 	bl	100f396 <local_transmitted_frame_ptr_free>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b4b0:	2c00      	cmp	r4, #0
 100b4b2:	dbd3      	blt.n	100b45c <nrf_802154_transmitted_raw+0x3c>
}
 100b4b4:	b00f      	add	sp, #60	; 0x3c
 100b4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b4ba:	2304      	movs	r3, #4
 100b4bc:	e7e3      	b.n	100b486 <nrf_802154_transmitted_raw+0x66>
    SERIALIZATION_ERROR_IF(!frame_found,
 100b4be:	f06f 0407 	mvn.w	r4, #7
 100b4c2:	e7cb      	b.n	100b45c <nrf_802154_transmitted_raw+0x3c>
 100b4c4:	01010616 	.word	0x01010616

0100b4c8 <nrf_802154_transmit_failed>:
    NRF_802154_SPINEL_LOG_BUFF(p_frame, p_frame[0]);

    /* Forcefully overwrite frame's properties due to KRKNWK-10114 not being implemented.
     * This overwrite makes state of the frame consistent with its properties.
     */
    ((nrf_802154_transmit_done_metadata_t *)p_metadata)->frame_props =
 100b4c8:	2300      	movs	r3, #0
{
 100b4ca:	b570      	push	{r4, r5, r6, lr}
 100b4cc:	4605      	mov	r5, r0
 100b4ce:	b086      	sub	sp, #24
    ((nrf_802154_transmit_done_metadata_t *)p_metadata)->frame_props =
 100b4d0:	8013      	strh	r3, [r2, #0]
{
 100b4d2:	460e      	mov	r6, r1
 100b4d4:	4614      	mov	r4, r2
        NRF_802154_TRANSMITTED_FRAME_PROPS_DEFAULT_INIT;

    // Search for the handle to the original frame buffer based on the local pointer
    bool frame_found = nrf_802154_buffer_mgr_dst_search_by_local_pointer(
 100b4d6:	f7ff fe95 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b4da:	4629      	mov	r1, r5
 100b4dc:	aa04      	add	r2, sp, #16
 100b4de:	f003 fe4d 	bl	100f17c <nrf_802154_buffer_mgr_dst_search_by_local_pointer>
        nrf_802154_spinel_dst_buffer_mgr_get(),
        (void *)p_frame,
        &remote_frame_handle);

    // The handle is expected to be found, throw an error if it was not found
    SERIALIZATION_ERROR_IF(!frame_found,
 100b4e2:	b1c8      	cbz	r0, 100b518 <nrf_802154_transmit_failed+0x50>
                           NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER,
                           error,
                           bail);

    // Serialize the call
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100b4e4:	7863      	ldrb	r3, [r4, #1]
 100b4e6:	2206      	movs	r2, #6
 100b4e8:	9303      	str	r3, [sp, #12]
 100b4ea:	7823      	ldrb	r3, [r4, #0]
 100b4ec:	2180      	movs	r1, #128	; 0x80
 100b4ee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 100b4f2:	9b04      	ldr	r3, [sp, #16]
 100b4f4:	480a      	ldr	r0, [pc, #40]	; (100b520 <nrf_802154_transmit_failed+0x58>)
 100b4f6:	9300      	str	r3, [sp, #0]
 100b4f8:	f643 431e 	movw	r3, #15390	; 0x3c1e
 100b4fc:	f003 ff26 	bl	100f34c <nrf_802154_spinel_send>
 100b500:	4604      	mov	r4, r0
        remote_frame_handle,
        tx_error,
        NRF_802154_TRANSMITTED_FRAME_PROPS_ENCODE(p_metadata->frame_props));

    // Free the local frame pointer no matter the result of serialization
    local_transmitted_frame_ptr_free((void *)p_frame);
 100b502:	4628      	mov	r0, r5
 100b504:	f003 ff47 	bl	100f396 <local_transmitted_frame_ptr_free>

    // Throw an error if serialization failed
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100b508:	2c00      	cmp	r4, #0
 100b50a:	da03      	bge.n	100b514 <nrf_802154_transmit_failed+0x4c>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100b50c:	a805      	add	r0, sp, #20
 100b50e:	9405      	str	r4, [sp, #20]
 100b510:	f002 fb3f 	bl	100db92 <nrf_802154_serialization_error>

    return;
}
 100b514:	b006      	add	sp, #24
 100b516:	bd70      	pop	{r4, r5, r6, pc}
    SERIALIZATION_ERROR_IF(!frame_found,
 100b518:	f06f 0407 	mvn.w	r4, #7
 100b51c:	e7f6      	b.n	100b50c <nrf_802154_transmit_failed+0x44>
 100b51e:	bf00      	nop
 100b520:	01010626 	.word	0x01010626

0100b524 <nrf_802154_spinel_decode_cmd_prop_value_set>:
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
}

nrf_802154_ser_err_t nrf_802154_spinel_decode_cmd_prop_value_set(const void * p_cmd_data,
                                                                 size_t       cmd_data_len)
{
 100b524:	b510      	push	{r4, lr}
 100b526:	b08e      	sub	sp, #56	; 0x38
    spinel_prop_key_t property;
    const void      * p_property_data;
    size_t            property_data_len;
    spinel_ssize_t    siz;

    siz = spinel_datatype_unpack(p_cmd_data,
 100b528:	ab09      	add	r3, sp, #36	; 0x24
 100b52a:	9301      	str	r3, [sp, #4]
 100b52c:	ab08      	add	r3, sp, #32
 100b52e:	9300      	str	r3, [sp, #0]
 100b530:	4aa4      	ldr	r2, [pc, #656]	; (100b7c4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a0>)
 100b532:	ab07      	add	r3, sp, #28
 100b534:	f003 fd79 	bl	100f02a <spinel_datatype_unpack>
                                 SPINEL_DATATYPE_UINT_PACKED_S SPINEL_DATATYPE_DATA_S,
                                 &property,
                                 &p_property_data,
                                 &property_data_len);

    if (siz < 0)
 100b538:	2800      	cmp	r0, #0
 100b53a:	f2c0 8256 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    {
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }

    switch (property)
 100b53e:	9b07      	ldr	r3, [sp, #28]
 100b540:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
 100b544:	3b01      	subs	r3, #1
 100b546:	2b23      	cmp	r3, #35	; 0x23
 100b548:	f200 824f 	bhi.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
 100b54c:	e8df f013 	tbh	[pc, r3, lsl #1]
 100b550:	00300024 	.word	0x00300024
 100b554:	003f0036 	.word	0x003f0036
 100b558:	01230131 	.word	0x01230131
 100b55c:	005d004f 	.word	0x005d004f
 100b560:	00930078 	.word	0x00930078
 100b564:	00b800a1 	.word	0x00b800a1
 100b568:	00de00cb 	.word	0x00de00cb
 100b56c:	00ff00f1 	.word	0x00ff00f1
 100b570:	024d010d 	.word	0x024d010d
 100b574:	0113024d 	.word	0x0113024d
 100b578:	024d024d 	.word	0x024d024d
 100b57c:	024d024d 	.word	0x024d024d
 100b580:	01ad024d 	.word	0x01ad024d
 100b584:	014e017b 	.word	0x014e017b
 100b588:	024d024d 	.word	0x024d024d
 100b58c:	020801cd 	.word	0x020801cd
 100b590:	01d6022d 	.word	0x01d6022d
 100b594:	01f301dc 	.word	0x01f301dc
    sleep_response = nrf_802154_sleep();
 100b598:	f003 f963 	bl	100e862 <nrf_802154_sleep>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_SLEEP,
 100b59c:	f643 4301 	movw	r3, #15361	; 0x3c01
 100b5a0:	9000      	str	r0, [sp, #0]
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_RECEIVE,
 100b5a2:	2206      	movs	r2, #6
 100b5a4:	2180      	movs	r1, #128	; 0x80
 100b5a6:	4888      	ldr	r0, [pc, #544]	; (100b7c8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a4>)
 100b5a8:	f003 fed0 	bl	100f34c <nrf_802154_spinel_send>
                                      spinel_prop_key_to_cstr(property),
                                      property);
            return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;

    }
}
 100b5ac:	b00e      	add	sp, #56	; 0x38
 100b5ae:	bd10      	pop	{r4, pc}
    receive_response = nrf_802154_receive();
 100b5b0:	f003 f95a 	bl	100e868 <nrf_802154_receive>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_RECEIVE,
 100b5b4:	f643 4302 	movw	r3, #15362	; 0x3c02
 100b5b8:	9000      	str	r0, [sp, #0]
 100b5ba:	e7f2      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b5bc:	f003 f940 	bl	100e840 <nrf_802154_channel_get>
 100b5c0:	f643 4303 	movw	r3, #15363	; 0x3c03
 100b5c4:	9000      	str	r0, [sp, #0]
 100b5c6:	2206      	movs	r2, #6
 100b5c8:	2180      	movs	r1, #128	; 0x80
 100b5ca:	4880      	ldr	r0, [pc, #512]	; (100b7cc <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a8>)
 100b5cc:	e7ec      	b.n	100b5a8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84>
    siz = spinel_datatype_unpack(p_property_data,
 100b5ce:	4a80      	ldr	r2, [pc, #512]	; (100b7d0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2ac>)
 100b5d0:	ab0d      	add	r3, sp, #52	; 0x34
 100b5d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b5d6:	f003 fd28 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b5da:	2800      	cmp	r0, #0
 100b5dc:	f2c0 8205 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_channel_set(channel);
 100b5e0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b5e4:	f003 f91c 	bl	100e820 <nrf_802154_channel_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b5e8:	2300      	movs	r3, #0
 100b5ea:	9300      	str	r3, [sp, #0]
 100b5ec:	e061      	b.n	100b6b2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x18e>
    siz = spinel_datatype_unpack(p_property_data,
 100b5ee:	4a79      	ldr	r2, [pc, #484]	; (100b7d4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100b5f0:	ab0d      	add	r3, sp, #52	; 0x34
 100b5f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b5f6:	f003 fd18 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b5fa:	2800      	cmp	r0, #0
 100b5fc:	f2c0 81f5 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_auto_pending_bit_set(enabled);
 100b600:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b604:	f003 f958 	bl	100e8b8 <nrf_802154_auto_pending_bit_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b608:	e7ee      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b60a:	ab0d      	add	r3, sp, #52	; 0x34
 100b60c:	9300      	str	r3, [sp, #0]
 100b60e:	4a72      	ldr	r2, [pc, #456]	; (100b7d8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100b610:	ab0c      	add	r3, sp, #48	; 0x30
 100b612:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b616:	f003 fd08 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b61a:	2800      	cmp	r0, #0
 100b61c:	f2c0 81e5 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100b620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b622:	2b08      	cmp	r3, #8
 100b624:	d00a      	beq.n	100b63c <nrf_802154_spinel_decode_cmd_prop_value_set+0x118>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100b626:	2b02      	cmp	r3, #2
 100b628:	f040 81dc 	bne.w	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
        extended = false;
 100b62c:	2100      	movs	r1, #0
    result = nrf_802154_pending_bit_for_addr_set(p_addr, extended);
 100b62e:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b630:	f003 f944 	bl	100e8bc <nrf_802154_pending_bit_for_addr_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b634:	f643 4308 	movw	r3, #15368	; 0x3c08
 100b638:	9000      	str	r0, [sp, #0]
 100b63a:	e7b2      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
        extended = true;
 100b63c:	2101      	movs	r1, #1
 100b63e:	e7f6      	b.n	100b62e <nrf_802154_spinel_decode_cmd_prop_value_set+0x10a>
    siz = spinel_datatype_unpack(p_property_data,
 100b640:	ab0d      	add	r3, sp, #52	; 0x34
 100b642:	9300      	str	r3, [sp, #0]
 100b644:	4a64      	ldr	r2, [pc, #400]	; (100b7d8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100b646:	ab0c      	add	r3, sp, #48	; 0x30
 100b648:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b64c:	f003 fced 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b650:	2800      	cmp	r0, #0
 100b652:	f2c0 81ca 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100b656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b658:	2b08      	cmp	r3, #8
 100b65a:	d00a      	beq.n	100b672 <nrf_802154_spinel_decode_cmd_prop_value_set+0x14e>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100b65c:	2b02      	cmp	r3, #2
 100b65e:	f040 81c1 	bne.w	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
        extended = false;
 100b662:	2100      	movs	r1, #0
    result = nrf_802154_pending_bit_for_addr_clear(p_addr, extended);
 100b664:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b666:	f003 f932 	bl	100e8ce <nrf_802154_pending_bit_for_addr_clear>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b66a:	f643 4309 	movw	r3, #15369	; 0x3c09
 100b66e:	9000      	str	r0, [sp, #0]
 100b670:	e797      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
        extended = true;
 100b672:	2101      	movs	r1, #1
 100b674:	e7f6      	b.n	100b664 <nrf_802154_spinel_decode_cmd_prop_value_set+0x140>
    siz = spinel_datatype_unpack(p_property_data,
 100b676:	4a57      	ldr	r2, [pc, #348]	; (100b7d4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100b678:	ab0d      	add	r3, sp, #52	; 0x34
 100b67a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b67e:	f003 fcd4 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b682:	2800      	cmp	r0, #0
 100b684:	f2c0 81b1 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_pending_bit_for_addr_reset(extended);
 100b688:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b68c:	f003 f922 	bl	100e8d4 <nrf_802154_pending_bit_for_addr_reset>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b690:	e7aa      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b692:	4a4f      	ldr	r2, [pc, #316]	; (100b7d0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2ac>)
 100b694:	ab0d      	add	r3, sp, #52	; 0x34
 100b696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b69a:	f003 fcc6 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b69e:	2800      	cmp	r0, #0
 100b6a0:	f2c0 81a3 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    switch (match_method)
 100b6a4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b6a8:	2802      	cmp	r0, #2
 100b6aa:	d906      	bls.n	100b6ba <nrf_802154_spinel_decode_cmd_prop_value_set+0x196>
            return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_INVALID_ARGUMENT);
 100b6ac:	2303      	movs	r3, #3
 100b6ae:	9300      	str	r3, [sp, #0]
 100b6b0:	2300      	movs	r3, #0
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b6b2:	2206      	movs	r2, #6
 100b6b4:	2180      	movs	r1, #128	; 0x80
 100b6b6:	4849      	ldr	r0, [pc, #292]	; (100b7dc <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b8>)
 100b6b8:	e776      	b.n	100b5a8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84>
    nrf_802154_src_addr_matching_method_set(match_method);
 100b6ba:	f003 f8ef 	bl	100e89c <nrf_802154_src_addr_matching_method_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b6be:	e793      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b6c0:	ab0d      	add	r3, sp, #52	; 0x34
 100b6c2:	9300      	str	r3, [sp, #0]
 100b6c4:	4a44      	ldr	r2, [pc, #272]	; (100b7d8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100b6c6:	ab0c      	add	r3, sp, #48	; 0x30
 100b6c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b6cc:	f003 fcad 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b6d0:	2800      	cmp	r0, #0
 100b6d2:	f2c0 818a 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (pan_id_len != PAN_ID_SIZE)
 100b6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b6d8:	2b02      	cmp	r3, #2
 100b6da:	f040 8183 	bne.w	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
    nrf_802154_pan_id_set((uint8_t *)p_pan_id);
 100b6de:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b6e0:	f003 f8b9 	bl	100e856 <nrf_802154_pan_id_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b6e4:	e780      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b6e6:	ab0d      	add	r3, sp, #52	; 0x34
 100b6e8:	9300      	str	r3, [sp, #0]
 100b6ea:	4a3b      	ldr	r2, [pc, #236]	; (100b7d8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100b6ec:	ab0c      	add	r3, sp, #48	; 0x30
 100b6ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b6f2:	f003 fc9a 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b6f6:	2800      	cmp	r0, #0
 100b6f8:	f2c0 8177 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (short_address_len != SHORT_ADDRESS_SIZE)
 100b6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b6fe:	2b02      	cmp	r3, #2
 100b700:	f040 8170 	bne.w	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
    nrf_802154_short_address_set((uint8_t *)p_short_address);
 100b704:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b706:	f003 f8aa 	bl	100e85e <nrf_802154_short_address_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b70a:	e76d      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b70c:	ab0d      	add	r3, sp, #52	; 0x34
 100b70e:	9300      	str	r3, [sp, #0]
 100b710:	4a31      	ldr	r2, [pc, #196]	; (100b7d8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100b712:	ab0c      	add	r3, sp, #48	; 0x30
 100b714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b718:	f003 fc87 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b71c:	2800      	cmp	r0, #0
 100b71e:	f2c0 8164 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (extended_address_len != EXTENDED_ADDRESS_SIZE)
 100b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b724:	2b08      	cmp	r3, #8
 100b726:	f040 815d 	bne.w	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
    nrf_802154_extended_address_set((uint8_t *)p_extended_address);
 100b72a:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b72c:	f003 f895 	bl	100e85a <nrf_802154_extended_address_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b730:	e75a      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b732:	4a28      	ldr	r2, [pc, #160]	; (100b7d4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100b734:	ab0d      	add	r3, sp, #52	; 0x34
 100b736:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b73a:	f003 fc76 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b73e:	2800      	cmp	r0, #0
 100b740:	f2c0 8153 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_pan_coord_set(enabled);
 100b744:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b748:	f003 f8a6 	bl	100e898 <nrf_802154_pan_coord_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b74c:	e74c      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b74e:	4a21      	ldr	r2, [pc, #132]	; (100b7d4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100b750:	ab0d      	add	r3, sp, #52	; 0x34
 100b752:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b756:	f003 fc68 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b75a:	2800      	cmp	r0, #0
 100b75c:	f2c0 8145 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_promiscuous_set(enabled);
 100b760:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 100b764:	f003 f896 	bl	100e894 <nrf_802154_promiscuous_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b768:	e73e      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    bool result = nrf_802154_cca();
 100b76a:	f003 f88e 	bl	100e88a <nrf_802154_cca>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_CCA,
 100b76e:	f643 4311 	movw	r3, #15377	; 0x3c11
 100b772:	9000      	str	r0, [sp, #0]
 100b774:	e715      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
    siz = spinel_datatype_unpack(p_property_data,
 100b776:	4a1a      	ldr	r2, [pc, #104]	; (100b7e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2bc>)
 100b778:	ab0d      	add	r3, sp, #52	; 0x34
 100b77a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b77e:	f003 fc54 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b782:	2800      	cmp	r0, #0
 100b784:	f2c0 8131 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    bool result = nrf_802154_energy_detection(time_us);
 100b788:	980d      	ldr	r0, [sp, #52]	; 0x34
 100b78a:	f003 f87a 	bl	100e882 <nrf_802154_energy_detection>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b78e:	f643 4314 	movw	r3, #15380	; 0x3c14
 100b792:	9000      	str	r0, [sp, #0]
 100b794:	e705      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
    siz = spinel_datatype_unpack(p_property_data,
 100b796:	4a13      	ldr	r2, [pc, #76]	; (100b7e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2c0>)
 100b798:	ab0d      	add	r3, sp, #52	; 0x34
 100b79a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b79e:	f003 fc44 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b7a2:	2800      	cmp	r0, #0
 100b7a4:	f2c0 8121 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_tx_power_set(power);
 100b7a8:	f99d 0034 	ldrsb.w	r0, [sp, #52]	; 0x34
 100b7ac:	f003 f84a 	bl	100e844 <nrf_802154_tx_power_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100b7b0:	e71a      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    power = nrf_802154_tx_power_get();
 100b7b2:	f003 f849 	bl	100e848 <nrf_802154_tx_power_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b7b6:	f643 4305 	movw	r3, #15365	; 0x3c05
 100b7ba:	9000      	str	r0, [sp, #0]
 100b7bc:	2206      	movs	r2, #6
 100b7be:	2180      	movs	r1, #128	; 0x80
 100b7c0:	4809      	ldr	r0, [pc, #36]	; (100b7e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2c4>)
 100b7c2:	e6f1      	b.n	100b5a8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84>
 100b7c4:	010105f2 	.word	0x010105f2
 100b7c8:	010105fa 	.word	0x010105fa
 100b7cc:	010105ff 	.word	0x010105ff
 100b7d0:	0101064c 	.word	0x0101064c
 100b7d4:	0101062c 	.word	0x0101062c
 100b7d8:	010105f3 	.word	0x010105f3
 100b7dc:	0101062e 	.word	0x0101062e
 100b7e0:	0101060e 	.word	0x0101060e
 100b7e4:	01010636 	.word	0x01010636
 100b7e8:	01010633 	.word	0x01010633
    spinel_ssize_t siz = spinel_datatype_unpack(
 100b7ec:	ab0c      	add	r3, sp, #48	; 0x30
 100b7ee:	9303      	str	r3, [sp, #12]
 100b7f0:	ab0b      	add	r3, sp, #44	; 0x2c
 100b7f2:	9302      	str	r3, [sp, #8]
 100b7f4:	ab0a      	add	r3, sp, #40	; 0x28
 100b7f6:	9301      	str	r3, [sp, #4]
 100b7f8:	f10d 0319 	add.w	r3, sp, #25
 100b7fc:	9300      	str	r3, [sp, #0]
 100b7fe:	4a7c      	ldr	r2, [pc, #496]	; (100b9f0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4cc>)
 100b800:	ab06      	add	r3, sp, #24
 100b802:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b806:	f003 fc10 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b80a:	2800      	cmp	r0, #0
 100b80c:	f2c0 80ed 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    bool frame_added = nrf_802154_buffer_mgr_dst_add(
 100b810:	f7ff fcf8 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b814:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 100b818:	ab0d      	add	r3, sp, #52	; 0x34
 100b81a:	9300      	str	r3, [sp, #0]
 100b81c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100b81e:	3b04      	subs	r3, #4
 100b820:	f003 fc92 	bl	100f148 <nrf_802154_buffer_mgr_dst_add>
    if (!frame_added)
 100b824:	2800      	cmp	r0, #0
 100b826:	d03d      	beq.n	100b8a4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x380>
    bool result = nrf_802154_transmit_csma_ca_raw(p_local_frame_ptr, &tx_metadata);
 100b828:	980d      	ldr	r0, [sp, #52]	; 0x34
 100b82a:	a906      	add	r1, sp, #24
 100b82c:	f7fb fc16 	bl	100705c <nrf_802154_transmit_csma_ca_raw>
    if (!result)
 100b830:	4604      	mov	r4, r0
 100b832:	b920      	cbnz	r0, 100b83e <nrf_802154_spinel_decode_cmd_prop_value_set+0x31a>
        nrf_802154_buffer_mgr_dst_remove_by_local_pointer(nrf_802154_spinel_dst_buffer_mgr_get(),
 100b834:	f7ff fce6 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b838:	990d      	ldr	r1, [sp, #52]	; 0x34
 100b83a:	f003 fca7 	bl	100f18c <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b83e:	f643 431c 	movw	r3, #15388	; 0x3c1c
 100b842:	9400      	str	r4, [sp, #0]
 100b844:	e6ad      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
    spinel_ssize_t siz = spinel_datatype_unpack(
 100b846:	ab0c      	add	r3, sp, #48	; 0x30
 100b848:	9304      	str	r3, [sp, #16]
 100b84a:	ab0b      	add	r3, sp, #44	; 0x2c
 100b84c:	9303      	str	r3, [sp, #12]
 100b84e:	ab0a      	add	r3, sp, #40	; 0x28
 100b850:	9302      	str	r3, [sp, #8]
 100b852:	f10d 031a 	add.w	r3, sp, #26
 100b856:	9301      	str	r3, [sp, #4]
 100b858:	f10d 0319 	add.w	r3, sp, #25
 100b85c:	9300      	str	r3, [sp, #0]
 100b85e:	4a65      	ldr	r2, [pc, #404]	; (100b9f4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4d0>)
 100b860:	ab06      	add	r3, sp, #24
 100b862:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b866:	f003 fbe0 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b86a:	2800      	cmp	r0, #0
 100b86c:	f2c0 80bd 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    bool frame_added = nrf_802154_buffer_mgr_dst_add(
 100b870:	f7ff fcc8 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b874:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 100b878:	ab0d      	add	r3, sp, #52	; 0x34
 100b87a:	9300      	str	r3, [sp, #0]
 100b87c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100b87e:	3b04      	subs	r3, #4
 100b880:	f003 fc62 	bl	100f148 <nrf_802154_buffer_mgr_dst_add>
    if (!frame_added)
 100b884:	b170      	cbz	r0, 100b8a4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x380>
    bool result = nrf_802154_transmit_raw(p_local_frame_ptr, &tx_metadata);
 100b886:	980d      	ldr	r0, [sp, #52]	; 0x34
 100b888:	a906      	add	r1, sp, #24
 100b88a:	f7fb fbc7 	bl	100701c <nrf_802154_transmit_raw>
    if (!result)
 100b88e:	4604      	mov	r4, r0
 100b890:	b920      	cbnz	r0, 100b89c <nrf_802154_spinel_decode_cmd_prop_value_set+0x378>
        nrf_802154_buffer_mgr_dst_remove_by_local_pointer(nrf_802154_spinel_dst_buffer_mgr_get(),
 100b892:	f7ff fcb7 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100b896:	990d      	ldr	r1, [sp, #52]	; 0x34
 100b898:	f003 fc78 	bl	100f18c <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b89c:	f643 431b 	movw	r3, #15387	; 0x3c1b
 100b8a0:	9400      	str	r4, [sp, #0]
 100b8a2:	e67e      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
        return NRF_802154_SERIALIZATION_ERROR_NO_MEMORY;
 100b8a4:	f06f 0008 	mvn.w	r0, #8
            return spinel_decode_prop_nrf_802154_transmit_raw(p_property_data, property_data_len);
 100b8a8:	e680      	b.n	100b5ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x88>
    spinel_ssize_t siz = spinel_datatype_unpack(p_property_data,
 100b8aa:	4a53      	ldr	r2, [pc, #332]	; (100b9f8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4d4>)
 100b8ac:	ab0c      	add	r3, sp, #48	; 0x30
 100b8ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b8b2:	f003 fbba 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b8b6:	2800      	cmp	r0, #0
 100b8b8:	f2c0 8097 	blt.w	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    bool ptr_found = nrf_802154_buffer_mgr_src_search_by_buffer_handle(
 100b8bc:	f7ff fca6 	bl	100b20c <nrf_802154_spinel_src_buffer_mgr_get>
 100b8c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 100b8c2:	aa0d      	add	r2, sp, #52	; 0x34
 100b8c4:	f003 fc88 	bl	100f1d8 <nrf_802154_buffer_mgr_src_search_by_buffer_handle>
    if (ptr_found)
 100b8c8:	2800      	cmp	r0, #0
 100b8ca:	f43f ae8d 	beq.w	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
        nrf_802154_buffer_free_raw(p_local_ptr);
 100b8ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 100b8d0:	f002 ffde 	bl	100e890 <nrf_802154_buffer_free_raw>
        bool ptr_removed = nrf_802154_buffer_mgr_src_remove_by_buffer_handle(
 100b8d4:	f7ff fc9a 	bl	100b20c <nrf_802154_spinel_src_buffer_mgr_get>
 100b8d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 100b8da:	f003 fc89 	bl	100f1f0 <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>
        if (!ptr_removed)
 100b8de:	2800      	cmp	r0, #0
 100b8e0:	f47f ae82 	bne.w	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
            return NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER;
 100b8e4:	f06f 0007 	mvn.w	r0, #7
 100b8e8:	e660      	b.n	100b5ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x88>
    caps = nrf_802154_capabilities_get();
 100b8ea:	f002 ffff 	bl	100e8ec <nrf_802154_capabilities_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b8ee:	f643 431f 	movw	r3, #15391	; 0x3c1f
 100b8f2:	9000      	str	r0, [sp, #0]
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b8f4:	2206      	movs	r2, #6
 100b8f6:	2180      	movs	r1, #128	; 0x80
 100b8f8:	4840      	ldr	r0, [pc, #256]	; (100b9fc <nrf_802154_spinel_decode_cmd_prop_value_set+0x4d8>)
 100b8fa:	e655      	b.n	100b5a8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84>
    time = nrf_802154_time_get();
 100b8fc:	f003 f802 	bl	100e904 <nrf_802154_time_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b900:	f643 4322 	movw	r3, #15394	; 0x3c22
 100b904:	9000      	str	r0, [sp, #0]
 100b906:	e7f5      	b.n	100b8f4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x3d0>
    nrf_802154_cca_cfg_get(&cfg);
 100b908:	a80d      	add	r0, sp, #52	; 0x34
 100b90a:	f002 ffed 	bl	100e8e8 <nrf_802154_cca_cfg_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b90e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 100b912:	2206      	movs	r2, #6
 100b914:	9303      	str	r3, [sp, #12]
 100b916:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 100b91a:	2180      	movs	r1, #128	; 0x80
 100b91c:	9302      	str	r3, [sp, #8]
 100b91e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 100b922:	4837      	ldr	r0, [pc, #220]	; (100ba00 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4dc>)
 100b924:	9301      	str	r3, [sp, #4]
 100b926:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 100b92a:	9300      	str	r3, [sp, #0]
 100b92c:	f643 4323 	movw	r3, #15395	; 0x3c23
 100b930:	f003 fd0c 	bl	100f34c <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802514_cca_cfg_get(p_property_data, property_data_len);
 100b934:	e63a      	b.n	100b5ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x88>
    siz = spinel_datatype_unpack(p_property_data,
 100b936:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 100b93a:	9302      	str	r3, [sp, #8]
 100b93c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 100b940:	9301      	str	r3, [sp, #4]
 100b942:	f10d 0335 	add.w	r3, sp, #53	; 0x35
 100b946:	9300      	str	r3, [sp, #0]
 100b948:	4a2e      	ldr	r2, [pc, #184]	; (100ba04 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4e0>)
 100b94a:	ab0d      	add	r3, sp, #52	; 0x34
 100b94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b950:	f003 fb6b 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b954:	2800      	cmp	r0, #0
 100b956:	db48      	blt.n	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    nrf_802154_cca_cfg_set(&cfg);
 100b958:	a80d      	add	r0, sp, #52	; 0x34
 100b95a:	f002 ffbe 	bl	100e8da <nrf_802154_cca_cfg_set>
 100b95e:	e643      	b.n	100b5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc4>
    siz = spinel_datatype_unpack(p_property_data,
 100b960:	ab06      	add	r3, sp, #24
 100b962:	9303      	str	r3, [sp, #12]
 100b964:	ab0d      	add	r3, sp, #52	; 0x34
 100b966:	9302      	str	r3, [sp, #8]
 100b968:	ab0c      	add	r3, sp, #48	; 0x30
 100b96a:	9301      	str	r3, [sp, #4]
 100b96c:	ab0b      	add	r3, sp, #44	; 0x2c
 100b96e:	9300      	str	r3, [sp, #0]
 100b970:	4a25      	ldr	r2, [pc, #148]	; (100ba08 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4e4>)
 100b972:	ab0a      	add	r3, sp, #40	; 0x28
 100b974:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b978:	f003 fb57 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b97c:	2800      	cmp	r0, #0
 100b97e:	db34      	blt.n	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100b980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100b982:	2b08      	cmp	r3, #8
 100b984:	d00f      	beq.n	100b9a6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x482>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100b986:	2b02      	cmp	r3, #2
 100b988:	d12c      	bne.n	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
        extended = false;
 100b98a:	2100      	movs	r1, #0
    bool ack_data_set_res = nrf_802154_ack_data_set(
 100b98c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 100b990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100b992:	9300      	str	r3, [sp, #0]
 100b994:	980a      	ldr	r0, [sp, #40]	; 0x28
 100b996:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 100b99a:	f002 ff81 	bl	100e8a0 <nrf_802154_ack_data_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b99e:	f643 4320 	movw	r3, #15392	; 0x3c20
 100b9a2:	9000      	str	r0, [sp, #0]
 100b9a4:	e5fd      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
        extended = true;
 100b9a6:	2101      	movs	r1, #1
 100b9a8:	e7f0      	b.n	100b98c <nrf_802154_spinel_decode_cmd_prop_value_set+0x468>
    siz = spinel_datatype_unpack(p_property_data,
 100b9aa:	ab0b      	add	r3, sp, #44	; 0x2c
 100b9ac:	9301      	str	r3, [sp, #4]
 100b9ae:	ab0d      	add	r3, sp, #52	; 0x34
 100b9b0:	9300      	str	r3, [sp, #0]
 100b9b2:	4a16      	ldr	r2, [pc, #88]	; (100ba0c <nrf_802154_spinel_decode_cmd_prop_value_set+0x4e8>)
 100b9b4:	ab0c      	add	r3, sp, #48	; 0x30
 100b9b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100b9ba:	f003 fb36 	bl	100f02a <spinel_datatype_unpack>
    if (siz < 0)
 100b9be:	2800      	cmp	r0, #0
 100b9c0:	db13      	blt.n	100b9ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c6>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100b9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100b9c4:	2b08      	cmp	r3, #8
 100b9c6:	d00b      	beq.n	100b9e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4bc>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100b9c8:	2b02      	cmp	r3, #2
 100b9ca:	d10b      	bne.n	100b9e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4c0>
        extended = false;
 100b9cc:	2100      	movs	r1, #0
    bool ack_data_clear_res = nrf_802154_ack_data_clear(p_addr, extended, data_type);
 100b9ce:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 100b9d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 100b9d4:	f002 ff6e 	bl	100e8b4 <nrf_802154_ack_data_clear>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100b9d8:	f643 4321 	movw	r3, #15393	; 0x3c21
 100b9dc:	9000      	str	r0, [sp, #0]
 100b9de:	e5e0      	b.n	100b5a2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x7e>
        extended = true;
 100b9e0:	2101      	movs	r1, #1
 100b9e2:	e7f4      	b.n	100b9ce <nrf_802154_spinel_decode_cmd_prop_value_set+0x4aa>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100b9e4:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_ack_data_clear(p_property_data,
 100b9e8:	e5e0      	b.n	100b5ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x88>
    switch (property)
 100b9ea:	f06f 0002 	mvn.w	r0, #2
 100b9ee:	e5dd      	b.n	100b5ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x88>
 100b9f0:	01010639 	.word	0x01010639
 100b9f4:	01010638 	.word	0x01010638
 100b9f8:	0101060e 	.word	0x0101060e
 100b9fc:	01010641 	.word	0x01010641
 100ba00:	01010646 	.word	0x01010646
 100ba04:	01010649 	.word	0x01010649
 100ba08:	0101064e 	.word	0x0101064e
 100ba0c:	0101064f 	.word	0x0101064f

0100ba10 <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100ba10:	2200      	movs	r2, #0
 100ba12:	00d3      	lsls	r3, r2, #3
 100ba14:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 100ba18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 100ba1c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 100ba20:	3101      	adds	r1, #1
 100ba22:	d007      	beq.n	100ba34 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100ba24:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100ba28:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100ba2a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100ba2e:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100ba30:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100ba32:	d1ee      	bne.n	100ba12 <SystemInit+0x2>
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
 100ba34:	4b14      	ldr	r3, [pc, #80]	; (100ba88 <SystemInit+0x78>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 100ba36:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 100ba3a:	2a07      	cmp	r2, #7
 100ba3c:	d11a      	bne.n	100ba74 <SystemInit+0x64>
                {
                    switch(var2)
 100ba3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 100ba42:	3b02      	subs	r3, #2
 100ba44:	2b03      	cmp	r3, #3
 100ba46:	d80c      	bhi.n	100ba62 <SystemInit+0x52>
        #endif
    }

    /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_49())
 100ba48:	4a10      	ldr	r2, [pc, #64]	; (100ba8c <SystemInit+0x7c>)
 100ba4a:	5cd3      	ldrb	r3, [r2, r3]
 100ba4c:	b14b      	cbz	r3, 100ba62 <SystemInit+0x52>
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 100ba4e:	4b10      	ldr	r3, [pc, #64]	; (100ba90 <SystemInit+0x80>)
 100ba50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 100ba54:	07d1      	lsls	r1, r2, #31
        {
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 100ba56:	bf42      	ittt	mi
 100ba58:	2200      	movmi	r2, #0
 100ba5a:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 100ba5e:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 100ba62:	4b0b      	ldr	r3, [pc, #44]	; (100ba90 <SystemInit+0x80>)
 100ba64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 100ba68:	07d2      	lsls	r2, r2, #31
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 100ba6a:	bf44      	itt	mi
 100ba6c:	f06f 0201 	mvnmi.w	r2, #1
 100ba70:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 100ba74:	4b07      	ldr	r3, [pc, #28]	; (100ba94 <SystemInit+0x84>)
 100ba76:	681a      	ldr	r2, [r3, #0]
 100ba78:	4b07      	ldr	r3, [pc, #28]	; (100ba98 <SystemInit+0x88>)
 100ba7a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    SystemCoreClock = __SYSTEM_CLOCK;
 100ba7e:	4b07      	ldr	r3, [pc, #28]	; (100ba9c <SystemInit+0x8c>)
 100ba80:	4a07      	ldr	r2, [pc, #28]	; (100baa0 <SystemInit+0x90>)
 100ba82:	601a      	str	r2, [r3, #0]

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();

    SystemCoreClockUpdate();
}
 100ba84:	4770      	bx	lr
 100ba86:	bf00      	nop
 100ba88:	01ff0000 	.word	0x01ff0000
 100ba8c:	01010652 	.word	0x01010652
 100ba90:	41005000 	.word	0x41005000
 100ba94:	01ff8000 	.word	0x01ff8000
 100ba98:	41006000 	.word	0x41006000
 100ba9c:	210000d8 	.word	0x210000d8
 100baa0:	03d09000 	.word	0x03d09000

0100baa4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
 100baa4:	2301      	movs	r3, #1
 100baa6:	fa03 f000 	lsl.w	r0, r3, r0
 100baaa:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
 100baac:	b193      	cbz	r3, 100bad4 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
 100baae:	f04f 0340 	mov.w	r3, #64	; 0x40
 100bab2:	f3ef 8111 	mrs	r1, BASEPRI
 100bab6:	f383 8811 	msr	BASEPRI, r3
 100baba:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
 100babe:	4a06      	ldr	r2, [pc, #24]	; (100bad8 <nrfx_gpiote_channel_free+0x34>)
 100bac0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 100bac2:	ea23 0000 	bic.w	r0, r3, r0
 100bac6:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
 100bac8:	f381 8811 	msr	BASEPRI, r1
 100bacc:	f3bf 8f6f 	isb	sy
 100bad0:	4802      	ldr	r0, [pc, #8]	; (100badc <nrfx_gpiote_channel_free+0x38>)
 100bad2:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
 100bad4:	4802      	ldr	r0, [pc, #8]	; (100bae0 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 100bad6:	4770      	bx	lr
 100bad8:	21003cec 	.word	0x21003cec
 100badc:	0bad0000 	.word	0x0bad0000
 100bae0:	0bad0004 	.word	0x0bad0004

0100bae4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
 100bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
 100bae8:	22ff      	movs	r2, #255	; 0xff
{
 100baea:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
 100baec:	2601      	movs	r6, #1
{
 100baee:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
 100baf0:	f8df e054 	ldr.w	lr, [pc, #84]	; 100bb48 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
 100baf4:	4815      	ldr	r0, [pc, #84]	; (100bb4c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
 100baf6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 100bb50 <nrfx_gpiote_channel_alloc+0x6c>
 100bafa:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
 100bafc:	f04f 0140 	mov.w	r1, #64	; 0x40
 100bb00:	f3ef 8c11 	mrs	ip, BASEPRI
 100bb04:	f381 8811 	msr	BASEPRI, r1
 100bb08:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
 100bb0c:	fa22 f103 	lsr.w	r1, r2, r3
 100bb10:	07c9      	lsls	r1, r1, #31
 100bb12:	d50a      	bpl.n	100bb2a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
 100bb14:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
 100bb18:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
 100bb1c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
 100bb1e:	bf01      	itttt	eq
 100bb20:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
 100bb22:	4339      	orreq	r1, r7
 100bb24:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
 100bb28:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
 100bb2a:	f38c 8811 	msr	BASEPRI, ip
 100bb2e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
 100bb32:	4540      	cmp	r0, r8
 100bb34:	d005      	beq.n	100bb42 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
 100bb36:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
 100bb3a:	439a      	bics	r2, r3
 100bb3c:	f104 0401 	add.w	r4, r4, #1
 100bb40:	d1db      	bne.n	100bafa <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 100bb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100bb46:	bf00      	nop
 100bb48:	21003cec 	.word	0x21003cec
 100bb4c:	0bad0002 	.word	0x0bad0002
 100bb50:	0bad0000 	.word	0x0bad0000

0100bb54 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
 100bb54:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100bb56:	4c08      	ldr	r4, [pc, #32]	; (100bb78 <nrfx_ipc_init+0x24>)
{
 100bb58:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100bb5a:	7923      	ldrb	r3, [r4, #4]
{
 100bb5c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100bb5e:	b943      	cbnz	r3, 100bb72 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
 100bb60:	2012      	movs	r0, #18
 100bb62:	f7f9 ff91 	bl	1005a88 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100bb66:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
 100bb68:	4804      	ldr	r0, [pc, #16]	; (100bb7c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100bb6a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
 100bb6c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
 100bb6e:	60a5      	str	r5, [r4, #8]
}
 100bb70:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
 100bb72:	4803      	ldr	r0, [pc, #12]	; (100bb80 <nrfx_ipc_init+0x2c>)
 100bb74:	e7fc      	b.n	100bb70 <nrfx_ipc_init+0x1c>
 100bb76:	bf00      	nop
 100bb78:	21003d4c 	.word	0x21003d4c
 100bb7c:	0bad0000 	.word	0x0bad0000
 100bb80:	0bad000c 	.word	0x0bad000c

0100bb84 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100bb84:	2300      	movs	r3, #0
{
 100bb86:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
 100bb88:	4a0d      	ldr	r2, [pc, #52]	; (100bbc0 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
 100bb8a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 100bb8e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100bb92:	3301      	adds	r3, #1
 100bb94:	2b10      	cmp	r3, #16
 100bb96:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 100bb9a:	d1f6      	bne.n	100bb8a <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
 100bb9c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
 100bb9e:	4a08      	ldr	r2, [pc, #32]	; (100bbc0 <nrfx_ipc_config_load+0x3c>)
 100bba0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 100bba4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
 100bba8:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100bbac:	3301      	adds	r3, #1
 100bbae:	2b10      	cmp	r3, #16
 100bbb0:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 100bbb4:	d1f6      	bne.n	100bba4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
 100bbb6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
 100bbba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 100bbbe:	bd30      	pop	{r4, r5, pc}
 100bbc0:	41012000 	.word	0x41012000

0100bbc4 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
 100bbc4:	2301      	movs	r3, #1
 100bbc6:	4a02      	ldr	r2, [pc, #8]	; (100bbd0 <nrfx_ipc_receive_event_enable+0xc>)
 100bbc8:	4083      	lsls	r3, r0
 100bbca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 100bbce:	4770      	bx	lr
 100bbd0:	41012000 	.word	0x41012000

0100bbd4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
 100bbd4:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
 100bbd6:	4a02      	ldr	r2, [pc, #8]	; (100bbe0 <nrfx_ipc_receive_event_disable+0xc>)
 100bbd8:	4083      	lsls	r3, r0
 100bbda:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
 100bbde:	4770      	bx	lr
 100bbe0:	41012000 	.word	0x41012000

0100bbe4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
 100bbe4:	4b0c      	ldr	r3, [pc, #48]	; (100bc18 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
 100bbe6:	b430      	push	{r4, r5}
 100bbe8:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
 100bbec:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
 100bbee:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100bbf0:	2500      	movs	r5, #0
    while (bitmask)
 100bbf2:	b922      	cbnz	r2, 100bbfe <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
 100bbf4:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
 100bbf6:	4b09      	ldr	r3, [pc, #36]	; (100bc1c <nrfx_ipc_irq_handler+0x38>)
 100bbf8:	681a      	ldr	r2, [r3, #0]
 100bbfa:	6899      	ldr	r1, [r3, #8]
 100bbfc:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 100bbfe:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
 100bc02:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
 100bc06:	fa04 f103 	lsl.w	r1, r4, r3
 100bc0a:	ea22 0201 	bic.w	r2, r2, r1
 100bc0e:	4904      	ldr	r1, [pc, #16]	; (100bc20 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
 100bc10:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100bc12:	50cd      	str	r5, [r1, r3]
}
 100bc14:	e7ed      	b.n	100bbf2 <nrfx_ipc_irq_handler+0xe>
 100bc16:	bf00      	nop
 100bc18:	41012000 	.word	0x41012000
 100bc1c:	21003d4c 	.word	0x21003d4c
 100bc20:	41012100 	.word	0x41012100

0100bc24 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 100bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100bc28:	460e      	mov	r6, r1
 100bc2a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 100bc2c:	4d0c      	ldr	r5, [pc, #48]	; (100bc60 <metal_generic_dev_open+0x3c>)
 100bc2e:	f855 4f18 	ldr.w	r4, [r5, #24]!
 100bc32:	42ac      	cmp	r4, r5
 100bc34:	d103      	bne.n	100bc3e <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
 100bc36:	f06f 0012 	mvn.w	r0, #18
 100bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
 100bc3e:	4631      	mov	r1, r6
 100bc40:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
 100bc44:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
 100bc48:	f002 fc5f 	bl	100e50a <strcmp>
 100bc4c:	b930      	cbnz	r0, 100bc5c <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
 100bc4e:	4640      	mov	r0, r8
			*device = dev;
 100bc50:	f8c7 8000 	str.w	r8, [r7]
}
 100bc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
 100bc58:	f003 bc56 	b.w	100f508 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 100bc5c:	6824      	ldr	r4, [r4, #0]
 100bc5e:	e7e8      	b.n	100bc32 <metal_generic_dev_open+0xe>
 100bc60:	21003d58 	.word	0x21003d58

0100bc64 <metal_bus_find>:
{
 100bc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100bc68:	4607      	mov	r7, r0
 100bc6a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
 100bc6c:	4e0b      	ldr	r6, [pc, #44]	; (100bc9c <metal_bus_find+0x38>)
 100bc6e:	f856 4f08 	ldr.w	r4, [r6, #8]!
 100bc72:	42b4      	cmp	r4, r6
 100bc74:	d102      	bne.n	100bc7c <metal_bus_find+0x18>
	return -ENOENT;
 100bc76:	f06f 0001 	mvn.w	r0, #1
 100bc7a:	e00a      	b.n	100bc92 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
 100bc7c:	4639      	mov	r1, r7
 100bc7e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
 100bc82:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
 100bc86:	f002 fc40 	bl	100e50a <strcmp>
 100bc8a:	b920      	cbnz	r0, 100bc96 <metal_bus_find+0x32>
 100bc8c:	b11d      	cbz	r5, 100bc96 <metal_bus_find+0x32>
			*result = bus;
 100bc8e:	f8c5 8000 	str.w	r8, [r5]
}
 100bc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
 100bc96:	6824      	ldr	r4, [r4, #0]
 100bc98:	e7eb      	b.n	100bc72 <metal_bus_find+0xe>
 100bc9a:	bf00      	nop
 100bc9c:	21003d58 	.word	0x21003d58

0100bca0 <metal_bus_register>:
{
 100bca0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
 100bca2:	4604      	mov	r4, r0
 100bca4:	b910      	cbnz	r0, 100bcac <metal_bus_register+0xc>
		return -EINVAL;
 100bca6:	f06f 0015 	mvn.w	r0, #21
}
 100bcaa:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
 100bcac:	6800      	ldr	r0, [r0, #0]
 100bcae:	2800      	cmp	r0, #0
 100bcb0:	d0f9      	beq.n	100bca6 <metal_bus_register+0x6>
 100bcb2:	f002 fc1a 	bl	100e4ea <strlen>
 100bcb6:	2800      	cmp	r0, #0
 100bcb8:	d0f5      	beq.n	100bca6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
 100bcba:	2100      	movs	r1, #0
 100bcbc:	6820      	ldr	r0, [r4, #0]
 100bcbe:	f7ff ffd1 	bl	100bc64 <metal_bus_find>
 100bcc2:	b1c0      	cbz	r0, 100bcf6 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
 100bcc4:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
 100bcc8:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
 100bccc:	4b0c      	ldr	r3, [pc, #48]	; (100bd00 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 100bcce:	f104 0224 	add.w	r2, r4, #36	; 0x24
 100bcd2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
 100bcd4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
 100bcd8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
 100bcda:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
 100bcdc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
 100bcde:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 100bce0:	781a      	ldrb	r2, [r3, #0]
 100bce2:	2a06      	cmp	r2, #6
 100bce4:	d905      	bls.n	100bcf2 <metal_bus_register+0x52>
 100bce6:	685b      	ldr	r3, [r3, #4]
 100bce8:	b143      	cbz	r3, 100bcfc <metal_bus_register+0x5c>
 100bcea:	2007      	movs	r0, #7
 100bcec:	6822      	ldr	r2, [r4, #0]
 100bcee:	4905      	ldr	r1, [pc, #20]	; (100bd04 <metal_bus_register+0x64>)
 100bcf0:	4798      	blx	r3
	return 0;
 100bcf2:	2000      	movs	r0, #0
 100bcf4:	e7d9      	b.n	100bcaa <metal_bus_register+0xa>
		return -EEXIST;
 100bcf6:	f06f 0010 	mvn.w	r0, #16
 100bcfa:	e7d6      	b.n	100bcaa <metal_bus_register+0xa>
	return 0;
 100bcfc:	4618      	mov	r0, r3
 100bcfe:	e7d4      	b.n	100bcaa <metal_bus_register+0xa>
 100bd00:	21003d58 	.word	0x21003d58
 100bd04:	01010656 	.word	0x01010656

0100bd08 <metal_register_generic_device>:
{
 100bd08:	b510      	push	{r4, lr}
 100bd0a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
 100bd0c:	6800      	ldr	r0, [r0, #0]
 100bd0e:	b910      	cbnz	r0, 100bd16 <metal_register_generic_device+0xe>
		return -EINVAL;
 100bd10:	f06f 0015 	mvn.w	r0, #21
}
 100bd14:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
 100bd16:	f002 fbe8 	bl	100e4ea <strlen>
 100bd1a:	2800      	cmp	r0, #0
 100bd1c:	d0f8      	beq.n	100bd10 <metal_register_generic_device+0x8>
 100bd1e:	68a3      	ldr	r3, [r4, #8]
 100bd20:	2b01      	cmp	r3, #1
 100bd22:	d8f5      	bhi.n	100bd10 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
 100bd24:	4b06      	ldr	r3, [pc, #24]	; (100bd40 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
 100bd26:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
 100bd2a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
 100bd2c:	4b05      	ldr	r3, [pc, #20]	; (100bd44 <metal_register_generic_device+0x3c>)
 100bd2e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
 100bd30:	f103 0018 	add.w	r0, r3, #24
 100bd34:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
 100bd36:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
 100bd38:	61d9      	str	r1, [r3, #28]
	return 0;
 100bd3a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
 100bd3c:	6011      	str	r1, [r2, #0]
}
 100bd3e:	e7e9      	b.n	100bd14 <metal_register_generic_device+0xc>
 100bd40:	210000dc 	.word	0x210000dc
 100bd44:	21003d58 	.word	0x21003d58

0100bd48 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 100bd48:	b538      	push	{r3, r4, r5, lr}
 100bd4a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
 100bd4c:	4c0d      	ldr	r4, [pc, #52]	; (100bd84 <metal_init+0x3c>)
 100bd4e:	2220      	movs	r2, #32
 100bd50:	4620      	mov	r0, r4
 100bd52:	2100      	movs	r1, #0
 100bd54:	f002 fc2a 	bl	100e5ac <memset>

	_metal.common.log_handler   = params->log_handler;
 100bd58:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
 100bd5a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
 100bd5c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
 100bd5e:	4623      	mov	r3, r4
 100bd60:	792a      	ldrb	r2, [r5, #4]
 100bd62:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
 100bd66:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
 100bd6a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
 100bd6e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
 100bd72:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
 100bd76:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
 100bd7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
 100bd7e:	f000 b803 	b.w	100bd88 <metal_sys_init>
 100bd82:	bf00      	nop
 100bd84:	21003d58 	.word	0x21003d58

0100bd88 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 100bd88:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
 100bd8a:	4802      	ldr	r0, [pc, #8]	; (100bd94 <metal_sys_init+0xc>)
 100bd8c:	f7ff ff88 	bl	100bca0 <metal_bus_register>
	return 0;
}
 100bd90:	2000      	movs	r0, #0
 100bd92:	bd08      	pop	{r3, pc}
 100bd94:	210000dc 	.word	0x210000dc

0100bd98 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
 100bd98:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
 100bd9a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
 100bd9c:	2b06      	cmp	r3, #6
{
 100bd9e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
 100bda0:	bf88      	it	hi
 100bda2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
 100bda4:	4b09      	ldr	r3, [pc, #36]	; (100bdcc <metal_zephyr_log_handler+0x34>)
{
 100bda6:	ac05      	add	r4, sp, #20
 100bda8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
 100bdac:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 100bdb0:	4807      	ldr	r0, [pc, #28]	; (100bdd0 <metal_zephyr_log_handler+0x38>)
 100bdb2:	f001 ff0f 	bl	100dbd4 <printk>

	va_start(args, format);
	vprintk(format, args);
 100bdb6:	4621      	mov	r1, r4
 100bdb8:	4628      	mov	r0, r5
	va_start(args, format);
 100bdba:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
 100bdbc:	f7f8 fcfa 	bl	10047b4 <vprintk>
	va_end(args);
}
 100bdc0:	b002      	add	sp, #8
 100bdc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 100bdc6:	b003      	add	sp, #12
 100bdc8:	4770      	bx	lr
 100bdca:	bf00      	nop
 100bdcc:	010104f4 	.word	0x010104f4
 100bdd0:	01010669 	.word	0x01010669

0100bdd4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
 100bdd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100bdd8:	461f      	mov	r7, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
 100bdda:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 100bddc:	b085      	sub	sp, #20
	if (nvqs > num_vrings)
 100bdde:	4293      	cmp	r3, r2
{
 100bde0:	4605      	mov	r5, r0
 100bde2:	4616      	mov	r6, r2
 100bde4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	if (nvqs > num_vrings)
 100bde8:	d31f      	bcc.n	100be2a <virtio_create_virtqueues+0x56>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 100bdea:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
 100bdec:	f04f 0918 	mov.w	r9, #24
	for (i = 0; i < nvqs; i++) {
 100bdf0:	42b4      	cmp	r4, r6
 100bdf2:	d103      	bne.n	100bdfc <virtio_create_virtqueues+0x28>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
 100bdf4:	2000      	movs	r0, #0
}
 100bdf6:	b005      	add	sp, #20
 100bdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		vring_info = &vdev->vrings_info[i];
 100bdfc:	fb09 f204 	mul.w	r2, r9, r4
 100be00:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 100be02:	4628      	mov	r0, r5
		vring_info = &vdev->vrings_info[i];
 100be04:	188b      	adds	r3, r1, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 100be06:	588a      	ldr	r2, [r1, r2]
 100be08:	3304      	adds	r3, #4
 100be0a:	9202      	str	r2, [sp, #8]
 100be0c:	6a2a      	ldr	r2, [r5, #32]
 100be0e:	b2a1      	uxth	r1, r4
 100be10:	6a12      	ldr	r2, [r2, #32]
 100be12:	9201      	str	r2, [sp, #4]
 100be14:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 100be18:	9200      	str	r2, [sp, #0]
 100be1a:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 100be1e:	f003 fb90 	bl	100f542 <virtqueue_create>
		if (ret)
 100be22:	2800      	cmp	r0, #0
 100be24:	d1e7      	bne.n	100bdf6 <virtio_create_virtqueues+0x22>
	for (i = 0; i < nvqs; i++) {
 100be26:	3401      	adds	r4, #1
 100be28:	e7e2      	b.n	100bdf0 <virtio_create_virtqueues+0x1c>
		return ERROR_VQUEUE_INVLD_PARAM;
 100be2a:	4801      	ldr	r0, [pc, #4]	; (100be30 <virtio_create_virtqueues+0x5c>)
 100be2c:	e7e3      	b.n	100bdf6 <virtio_create_virtqueues+0x22>
 100be2e:	bf00      	nop
 100be30:	fffff440 	.word	0xfffff440

0100be34 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 100be34:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 100be36:	8944      	ldrh	r4, [r0, #10]
 100be38:	428c      	cmp	r4, r1
 100be3a:	d312      	bcc.n	100be62 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 100be3c:	6a03      	ldr	r3, [r0, #32]
 100be3e:	3c01      	subs	r4, #1
 100be40:	885d      	ldrh	r5, [r3, #2]
 100be42:	402c      	ands	r4, r5
 100be44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
 100be48:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
 100be4a:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 100be4c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 100be50:	6a02      	ldr	r2, [r0, #32]
 100be52:	8853      	ldrh	r3, [r2, #2]
 100be54:	3301      	adds	r3, #1
 100be56:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 100be58:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 100be5a:	3301      	adds	r3, #1
 100be5c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 100be5e:	2000      	movs	r0, #0
}
 100be60:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
 100be62:	4801      	ldr	r0, [pc, #4]	; (100be68 <virtqueue_add_consumed_buffer+0x34>)
 100be64:	e7fc      	b.n	100be60 <virtqueue_add_consumed_buffer+0x2c>
 100be66:	bf00      	nop
 100be68:	fffff441 	.word	0xfffff441

0100be6c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
 100be6c:	b4f0      	push	{r4, r5, r6, r7}
 100be6e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 100be70:	b148      	cbz	r0, 100be86 <rpmsg_send_offchannel_raw+0x1a>
 100be72:	6a00      	ldr	r0, [r0, #32]
 100be74:	b138      	cbz	r0, 100be86 <rpmsg_send_offchannel_raw+0x1a>
 100be76:	b133      	cbz	r3, 100be86 <rpmsg_send_offchannel_raw+0x1a>
 100be78:	3401      	adds	r4, #1
 100be7a:	d004      	beq.n	100be86 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
 100be7c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 100be7e:	b114      	cbz	r4, 100be86 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 100be80:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
 100be82:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 100be84:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
 100be86:	4801      	ldr	r0, [pc, #4]	; (100be8c <rpmsg_send_offchannel_raw+0x20>)
}
 100be88:	bcf0      	pop	{r4, r5, r6, r7}
 100be8a:	4770      	bx	lr
 100be8c:	fffff82d 	.word	0xfffff82d

0100be90 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 100be90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100be94:	460e      	mov	r6, r1
 100be96:	4690      	mov	r8, r2
 100be98:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
 100be9a:	4605      	mov	r5, r0
 100be9c:	2800      	cmp	r0, #0
 100be9e:	d06a      	beq.n	100bf76 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
 100bea0:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
 100bea4:	4638      	mov	r0, r7
 100bea6:	f003 fc09 	bl	100f6bc <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
 100beaa:	1c63      	adds	r3, r4, #1
 100beac:	d11a      	bne.n	100bee4 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
 100beae:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 100beb0:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100beb4:	095a      	lsrs	r2, r3, #5
 100beb6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 100beba:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100bebe:	f003 011f 	and.w	r1, r3, #31
 100bec2:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100bec6:	07e4      	lsls	r4, r4, #31
 100bec8:	d407      	bmi.n	100beda <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
 100beca:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100bece:	2301      	movs	r3, #1
 100bed0:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100bed2:	4313      	orrs	r3, r2
 100bed4:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
 100bed8:	e01d      	b.n	100bf16 <rpmsg_create_ept+0x86>
	     bit++)
 100beda:	3301      	adds	r3, #1
	for (bit = start;
 100bedc:	2b80      	cmp	r3, #128	; 0x80
 100bede:	d1e9      	bne.n	100beb4 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
 100bee0:	4c27      	ldr	r4, [pc, #156]	; (100bf80 <rpmsg_create_ept+0xf0>)
 100bee2:	e044      	b.n	100bf6e <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
 100bee4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 100bee8:	d315      	bcc.n	100bf16 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
 100beea:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
 100beee:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
 100bef0:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
 100bef4:	d83a      	bhi.n	100bf6c <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100bef6:	0958      	lsrs	r0, r3, #5
 100bef8:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100befc:	f003 031f 	and.w	r3, r3, #31
 100bf00:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 100bf04:	07d2      	lsls	r2, r2, #31
 100bf06:	d4eb      	bmi.n	100bee0 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100bf08:	2201      	movs	r2, #1
 100bf0a:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100bf0e:	ea43 030c 	orr.w	r3, r3, ip
 100bf12:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 100bf16:	491b      	ldr	r1, [pc, #108]	; (100bf84 <rpmsg_create_ept+0xf4>)
 100bf18:	2220      	movs	r2, #32
 100bf1a:	f1b8 0f00 	cmp.w	r8, #0
 100bf1e:	bf18      	it	ne
 100bf20:	4641      	movne	r1, r8
 100bf22:	4628      	mov	r0, r5
 100bf24:	f002 facf 	bl	100e4c6 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
 100bf28:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
 100bf2a:	4629      	mov	r1, r5
 100bf2c:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
 100bf2e:	9b07      	ldr	r3, [sp, #28]
 100bf30:	4630      	mov	r0, r6
 100bf32:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 100bf34:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
 100bf36:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
 100bf38:	632b      	str	r3, [r5, #48]	; 0x30
 100bf3a:	f003 fc39 	bl	100f7b0 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
 100bf3e:	4638      	mov	r0, r7
 100bf40:	f000 fb54 	bl	100c5ec <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
 100bf44:	782c      	ldrb	r4, [r5, #0]
 100bf46:	b174      	cbz	r4, 100bf66 <rpmsg_create_ept+0xd6>
 100bf48:	f896 4080 	ldrb.w	r4, [r6, #128]	; 0x80
 100bf4c:	b15c      	cbz	r4, 100bf66 <rpmsg_create_ept+0xd6>
 100bf4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 100bf50:	3301      	adds	r3, #1
 100bf52:	d112      	bne.n	100bf7a <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 100bf54:	2100      	movs	r1, #0
 100bf56:	4628      	mov	r0, r5
 100bf58:	f003 fbe1 	bl	100f71e <rpmsg_send_ns_message>

	if (status)
 100bf5c:	4604      	mov	r4, r0
 100bf5e:	b110      	cbz	r0, 100bf66 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
 100bf60:	4628      	mov	r0, r5
 100bf62:	f003 fbb1 	bl	100f6c8 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
 100bf66:	4620      	mov	r0, r4
 100bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100bf6c:	4c06      	ldr	r4, [pc, #24]	; (100bf88 <rpmsg_create_ept+0xf8>)
 100bf6e:	4638      	mov	r0, r7
 100bf70:	f000 fb3c 	bl	100c5ec <z_impl_k_sem_give>
}
 100bf74:	e7f7      	b.n	100bf66 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
 100bf76:	4c04      	ldr	r4, [pc, #16]	; (100bf88 <rpmsg_create_ept+0xf8>)
 100bf78:	e7f5      	b.n	100bf66 <rpmsg_create_ept+0xd6>
 100bf7a:	2400      	movs	r4, #0
 100bf7c:	e7f3      	b.n	100bf66 <rpmsg_create_ept+0xd6>
 100bf7e:	bf00      	nop
 100bf80:	fffff829 	.word	0xfffff829
 100bf84:	01010583 	.word	0x01010583
 100bf88:	fffff82d 	.word	0xfffff82d

0100bf8c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
 100bf8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100bf90:	b085      	sub	sp, #20
 100bf92:	460f      	mov	r7, r1
 100bf94:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
 100bf96:	a903      	add	r1, sp, #12
 100bf98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
 100bf9a:	4605      	mov	r5, r0
 100bf9c:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
 100bf9e:	f003 fd40 	bl	100fa22 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
 100bfa2:	4604      	mov	r4, r0
 100bfa4:	b1e0      	cbz	r0, 100bfe0 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
 100bfa6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100bfa8:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
 100bfaa:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 100bfae:	429e      	cmp	r6, r3
 100bfb0:	bfa8      	it	ge
 100bfb2:	461e      	movge	r6, r3
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100bfb4:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 100bfb6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 100bfba:	1a61      	subs	r1, r4, r1
 100bfbc:	4633      	mov	r3, r6
 100bfbe:	464a      	mov	r2, r9
 100bfc0:	4561      	cmp	r1, ip
 100bfc2:	bf28      	it	cs
 100bfc4:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 100bfc8:	f003 fa63 	bl	100f492 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
 100bfcc:	4623      	mov	r3, r4
 100bfce:	4642      	mov	r2, r8
 100bfd0:	4639      	mov	r1, r7
 100bfd2:	4628      	mov	r0, r5
 100bfd4:	9600      	str	r6, [sp, #0]
 100bfd6:	f003 fc64 	bl	100f8a2 <rpmsg_virtio_send_offchannel_nocopy>
}
 100bfda:	b005      	add	sp, #20
 100bfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
 100bfe0:	4800      	ldr	r0, [pc, #0]	; (100bfe4 <rpmsg_virtio_send_offchannel_raw+0x58>)
 100bfe2:	e7fa      	b.n	100bfda <rpmsg_virtio_send_offchannel_raw+0x4e>
 100bfe4:	fffff82e 	.word	0xfffff82e

0100bfe8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 100bfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 100bfea:	460d      	mov	r5, r1
 100bfec:	4616      	mov	r6, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
 100bfee:	2100      	movs	r1, #0
 100bff0:	2284      	movs	r2, #132	; 0x84
{
 100bff2:	b087      	sub	sp, #28
 100bff4:	4604      	mov	r4, r0
 100bff6:	461f      	mov	r7, r3
	memset(rdev, 0, sizeof(*rdev));
 100bff8:	f002 fad8 	bl	100e5ac <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
 100bffc:	2201      	movs	r2, #1
 100bffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 100c002:	4611      	mov	r1, r2
 100c004:	f003 fd94 	bl	100fb30 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 100c008:	4b36      	ldr	r3, [pc, #216]	; (100c0e4 <rpmsg_init_vdev+0xfc>)
	rdev->ns_bind_cb = ns_bind_cb;
 100c00a:	66a6      	str	r6, [r4, #104]	; 0x68
	rvdev->vdev = vdev;
 100c00c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	vdev->priv = rvdev;
 100c010:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 100c012:	66e3      	str	r3, [r4, #108]	; 0x6c
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
 100c014:	4b34      	ldr	r3, [pc, #208]	; (100c0e8 <rpmsg_init_vdev+0x100>)
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
 100c016:	69ae      	ldr	r6, [r5, #24]
 100c018:	6723      	str	r3, [r4, #112]	; 0x70
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
 100c01a:	4b34      	ldr	r3, [pc, #208]	; (100c0ec <rpmsg_init_vdev+0x104>)
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 100c01c:	2e01      	cmp	r6, #1
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
 100c01e:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
 100c020:	4b33      	ldr	r3, [pc, #204]	; (100c0f0 <rpmsg_init_vdev+0x108>)
 100c022:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
 100c024:	4b33      	ldr	r3, [pc, #204]	; (100c0f4 <rpmsg_init_vdev+0x10c>)
 100c026:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (role == RPMSG_REMOTE) {
 100c028:	d04d      	beq.n	100c0c6 <rpmsg_init_vdev+0xde>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
 100c02a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
 100c02e:	6a03      	ldr	r3, [r0, #32]
 100c030:	689b      	ldr	r3, [r3, #8]
 100c032:	4798      	blx	r3
 100c034:	2300      	movs	r3, #0
 100c036:	6128      	str	r0, [r5, #16]
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 100c038:	2e01      	cmp	r6, #1
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 100c03a:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
 100c03e:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 100c040:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
	if (role == RPMSG_REMOTE) {
 100c044:	d10e      	bne.n	100c064 <rpmsg_init_vdev+0x7c>
		vq_names[0] = "tx_vq";
 100c046:	4b2c      	ldr	r3, [pc, #176]	; (100c0f8 <rpmsg_init_vdev+0x110>)
 100c048:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
 100c04a:	4b2c      	ldr	r3, [pc, #176]	; (100c0fc <rpmsg_init_vdev+0x114>)
 100c04c:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
 100c04e:	4b2c      	ldr	r3, [pc, #176]	; (100c100 <rpmsg_init_vdev+0x118>)
 100c050:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 100c052:	4b2c      	ldr	r3, [pc, #176]	; (100c104 <rpmsg_init_vdev+0x11c>)
 100c054:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 100c056:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100c058:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
 100c05a:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 100c05c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
		rvdev->svq  = vdev->vrings_info[0].vq;
 100c060:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 100c064:	ab04      	add	r3, sp, #16
 100c066:	9300      	str	r3, [sp, #0]
 100c068:	2202      	movs	r2, #2
 100c06a:	2100      	movs	r1, #0
 100c06c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 100c070:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 100c074:	ab02      	add	r3, sp, #8
 100c076:	f7ff fead 	bl	100bdd4 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 100c07a:	4606      	mov	r6, r0
 100c07c:	b9f0      	cbnz	r0, 100c0bc <rpmsg_init_vdev+0xd4>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
 100c07e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 100c082:	f003 fad4 	bl	100f62e <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 100c086:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
 100c088:	681a      	ldr	r2, [r3, #0]
 100c08a:	699b      	ldr	r3, [r3, #24]
 100c08c:	6297      	str	r7, [r2, #40]	; 0x28
 100c08e:	629f      	str	r7, [r3, #40]	; 0x28

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
 100c090:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 100c094:	e9c4 4400 	strd	r4, r4, [r4]
 100c098:	b183      	cbz	r3, 100c0bc <rpmsg_init_vdev+0xd4>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
 100c09a:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 100c09e:	491a      	ldr	r1, [pc, #104]	; (100c108 <rpmsg_init_vdev+0x120>)
 100c0a0:	2220      	movs	r2, #32
 100c0a2:	4628      	mov	r0, r5
 100c0a4:	f002 fa0f 	bl	100e4c6 <strncpy>
	ept->addr = src;
 100c0a8:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
 100c0aa:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
 100c0ae:	4b17      	ldr	r3, [pc, #92]	; (100c10c <rpmsg_init_vdev+0x124>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 100c0b0:	4629      	mov	r1, r5
 100c0b2:	4620      	mov	r0, r4
	ept->ns_unbind_cb = ns_unbind_cb;
 100c0b4:	e9c4 360d 	strd	r3, r6, [r4, #52]	; 0x34
 100c0b8:	f003 fb7a 	bl	100f7b0 <rpmsg_register_endpoint>
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
 100c0bc:	4630      	mov	r0, r6
 100c0be:	b007      	add	sp, #28
 100c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 100c0c2:	0743      	lsls	r3, r0, #29
 100c0c4:	d4b1      	bmi.n	100c02a <rpmsg_init_vdev+0x42>
		status = rpmsg_virtio_get_status(rvdev);
 100c0c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
	return rvdev->vdev->func->get_status(rvdev->vdev);
 100c0ca:	6a03      	ldr	r3, [r0, #32]
 100c0cc:	681b      	ldr	r3, [r3, #0]
 100c0ce:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 100c0d0:	0642      	lsls	r2, r0, #25
 100c0d2:	d5f6      	bpl.n	100c0c2 <rpmsg_init_vdev+0xda>
			rpmsg_virtio_set_status(rvdev, 0);
 100c0d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 100c0d8:	2100      	movs	r1, #0
 100c0da:	6a03      	ldr	r3, [r0, #32]
 100c0dc:	685b      	ldr	r3, [r3, #4]
 100c0de:	4798      	blx	r3
}
 100c0e0:	e7f1      	b.n	100c0c6 <rpmsg_init_vdev+0xde>
 100c0e2:	bf00      	nop
 100c0e4:	0100bf8d 	.word	0x0100bf8d
 100c0e8:	0100f7f3 	.word	0x0100f7f3
 100c0ec:	0100f9e5 	.word	0x0100f9e5
 100c0f0:	0100fa23 	.word	0x0100fa23
 100c0f4:	0100f8a3 	.word	0x0100f8a3
 100c0f8:	01010704 	.word	0x01010704
 100c0fc:	0101070a 	.word	0x0101070a
 100c100:	0100f801 	.word	0x0100f801
 100c104:	0100f91b 	.word	0x0100f91b
 100c108:	01010710 	.word	0x01010710
 100c10c:	0100f813 	.word	0x0100f813

0100c110 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 100c110:	4b0e      	ldr	r3, [pc, #56]	; (100c14c <z_sys_init_run_level+0x3c>)
{
 100c112:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 100c114:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 100c118:	3001      	adds	r0, #1
 100c11a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 100c11e:	42a6      	cmp	r6, r4
 100c120:	d800      	bhi.n	100c124 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 100c122:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 100c124:	e9d4 3500 	ldrd	r3, r5, [r4]
 100c128:	4628      	mov	r0, r5
 100c12a:	4798      	blx	r3
		if (dev != NULL) {
 100c12c:	b165      	cbz	r5, 100c148 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 100c12e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 100c130:	b130      	cbz	r0, 100c140 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 100c132:	2800      	cmp	r0, #0
 100c134:	bfb8      	it	lt
 100c136:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 100c138:	28ff      	cmp	r0, #255	; 0xff
 100c13a:	bfa8      	it	ge
 100c13c:	20ff      	movge	r0, #255	; 0xff
 100c13e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 100c140:	785a      	ldrb	r2, [r3, #1]
 100c142:	f042 0201 	orr.w	r2, r2, #1
 100c146:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 100c148:	3408      	adds	r4, #8
 100c14a:	e7e8      	b.n	100c11e <z_sys_init_run_level+0xe>
 100c14c:	01010514 	.word	0x01010514

0100c150 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 100c150:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 100c152:	4605      	mov	r5, r0
 100c154:	b910      	cbnz	r0, 100c15c <z_impl_device_get_binding+0xc>
		return NULL;
 100c156:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 100c158:	4620      	mov	r0, r4
 100c15a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 100c15c:	7803      	ldrb	r3, [r0, #0]
 100c15e:	2b00      	cmp	r3, #0
 100c160:	d0f9      	beq.n	100c156 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 100c162:	4c0e      	ldr	r4, [pc, #56]	; (100c19c <z_impl_device_get_binding+0x4c>)
 100c164:	4e0e      	ldr	r6, [pc, #56]	; (100c1a0 <z_impl_device_get_binding+0x50>)
 100c166:	42b4      	cmp	r4, r6
 100c168:	d108      	bne.n	100c17c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 100c16a:	4c0c      	ldr	r4, [pc, #48]	; (100c19c <z_impl_device_get_binding+0x4c>)
 100c16c:	42b4      	cmp	r4, r6
 100c16e:	d0f2      	beq.n	100c156 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 100c170:	4620      	mov	r0, r4
 100c172:	f003 fc90 	bl	100fa96 <z_device_ready>
 100c176:	b950      	cbnz	r0, 100c18e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 100c178:	3418      	adds	r4, #24
 100c17a:	e7f7      	b.n	100c16c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 100c17c:	4620      	mov	r0, r4
 100c17e:	f003 fc8a 	bl	100fa96 <z_device_ready>
 100c182:	b110      	cbz	r0, 100c18a <z_impl_device_get_binding+0x3a>
 100c184:	6823      	ldr	r3, [r4, #0]
 100c186:	42ab      	cmp	r3, r5
 100c188:	d0e6      	beq.n	100c158 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 100c18a:	3418      	adds	r4, #24
 100c18c:	e7eb      	b.n	100c166 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 100c18e:	4628      	mov	r0, r5
 100c190:	6821      	ldr	r1, [r4, #0]
 100c192:	f002 f9ba 	bl	100e50a <strcmp>
 100c196:	2800      	cmp	r0, #0
 100c198:	d1ee      	bne.n	100c178 <z_impl_device_get_binding+0x28>
 100c19a:	e7dd      	b.n	100c158 <z_impl_device_get_binding+0x8>
 100c19c:	01010138 	.word	0x01010138
 100c1a0:	010101f8 	.word	0x010101f8

0100c1a4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 100c1a4:	4b01      	ldr	r3, [pc, #4]	; (100c1ac <z_impl_z_errno+0x8>)
 100c1a6:	6898      	ldr	r0, [r3, #8]
}
 100c1a8:	3060      	adds	r0, #96	; 0x60
 100c1aa:	4770      	bx	lr
 100c1ac:	21003d78 	.word	0x21003d78

0100c1b0 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 100c1b0:	4802      	ldr	r0, [pc, #8]	; (100c1bc <z_bss_zero+0xc>)
 100c1b2:	4a03      	ldr	r2, [pc, #12]	; (100c1c0 <z_bss_zero+0x10>)
 100c1b4:	2100      	movs	r1, #0
 100c1b6:	1a12      	subs	r2, r2, r0
 100c1b8:	f002 b9f8 	b.w	100e5ac <memset>
 100c1bc:	21000278 	.word	0x21000278
 100c1c0:	210047e4 	.word	0x210047e4

0100c1c4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 100c1c4:	2201      	movs	r2, #1
{
 100c1c6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 100c1c8:	4b09      	ldr	r3, [pc, #36]	; (100c1f0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 100c1ca:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 100c1cc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 100c1ce:	f7ff ff9f 	bl	100c110 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 100c1d2:	f003 fe63 	bl	100fe9c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 100c1d6:	2003      	movs	r0, #3
 100c1d8:	f7ff ff9a 	bl	100c110 <z_sys_init_run_level>

	z_init_static_threads();
 100c1dc:	f000 f8f0 	bl	100c3c0 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
 100c1e0:	f003 fc7e 	bl	100fae0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 100c1e4:	4a03      	ldr	r2, [pc, #12]	; (100c1f4 <bg_thread_main+0x30>)
 100c1e6:	7b13      	ldrb	r3, [r2, #12]
 100c1e8:	f023 0301 	bic.w	r3, r3, #1
 100c1ec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 100c1ee:	bd08      	pop	{r3, pc}
 100c1f0:	210047d0 	.word	0x210047d0
 100c1f4:	21000a08 	.word	0x21000a08

0100c1f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 100c1f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 100c1fc:	4b38      	ldr	r3, [pc, #224]	; (100c2e0 <z_cstart+0xe8>)
 100c1fe:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
 100c200:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 100c204:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 100c208:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 100c20c:	23e0      	movs	r3, #224	; 0xe0
 100c20e:	4d35      	ldr	r5, [pc, #212]	; (100c2e4 <z_cstart+0xec>)
 100c210:	2400      	movs	r4, #0
 100c212:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 100c216:	2320      	movs	r3, #32
 100c218:	77eb      	strb	r3, [r5, #31]
 100c21a:	762c      	strb	r4, [r5, #24]
 100c21c:	766c      	strb	r4, [r5, #25]
 100c21e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 100c220:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 100c222:	f04f 0b01 	mov.w	fp, #1
 100c226:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 100c22a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 100c22c:	f7f9 fdfc 	bl	1005e28 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 100c230:	f7f9 fca6 	bl	1005b80 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 100c234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100c238:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 100c23a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 100c23c:	f7fa f812 	bl	1006264 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 100c240:	f7f9 feb0 	bl	1005fa4 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 100c244:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 100c248:	4d27      	ldr	r5, [pc, #156]	; (100c2e8 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 100c24a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 100c24e:	ab06      	add	r3, sp, #24
 100c250:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 100c252:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 100c256:	f003 fc1d 	bl	100fa94 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 100c25a:	4620      	mov	r0, r4
 100c25c:	f7ff ff58 	bl	100c110 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 100c260:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 100c262:	4e22      	ldr	r6, [pc, #136]	; (100c2ec <z_cstart+0xf4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 100c264:	f7ff ff54 	bl	100c110 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 100c268:	f8df a084 	ldr.w	sl, [pc, #132]	; 100c2f0 <z_cstart+0xf8>
	z_sched_init();
 100c26c:	f000 fdca 	bl	100ce04 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 100c270:	4b20      	ldr	r3, [pc, #128]	; (100c2f4 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
 100c272:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 100c274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 100c278:	491f      	ldr	r1, [pc, #124]	; (100c2f8 <z_cstart+0x100>)
 100c27a:	9305      	str	r3, [sp, #20]
 100c27c:	4630      	mov	r0, r6
 100c27e:	4653      	mov	r3, sl
 100c280:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 100c284:	e9cd 4401 	strd	r4, r4, [sp, #4]
 100c288:	9400      	str	r4, [sp, #0]
 100c28a:	f000 f83d 	bl	100c308 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 100c28e:	7b73      	ldrb	r3, [r6, #13]
 100c290:	4680      	mov	r8, r0
 100c292:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 100c296:	4630      	mov	r0, r6
 100c298:	7373      	strb	r3, [r6, #13]
 100c29a:	f003 fd1e 	bl	100fcda <z_ready_thread>
	z_setup_new_thread(thread, stack,
 100c29e:	230f      	movs	r3, #15
 100c2a0:	4f16      	ldr	r7, [pc, #88]	; (100c2fc <z_cstart+0x104>)
 100c2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 100c2a6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 100c2aa:	4915      	ldr	r1, [pc, #84]	; (100c300 <z_cstart+0x108>)
 100c2ac:	4b15      	ldr	r3, [pc, #84]	; (100c304 <z_cstart+0x10c>)
 100c2ae:	4638      	mov	r0, r7
 100c2b0:	e9cd b404 	strd	fp, r4, [sp, #16]
 100c2b4:	e9cd 5400 	strd	r5, r4, [sp]
 100c2b8:	f000 f826 	bl	100c308 <z_setup_new_thread>
 100c2bc:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 100c2be:	4652      	mov	r2, sl
 100c2c0:	f023 0304 	bic.w	r3, r3, #4
 100c2c4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 100c2c6:	f105 0318 	add.w	r3, r5, #24
 100c2ca:	4641      	mov	r1, r8
 100c2cc:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
 100c2ce:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 100c2d2:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
 100c2d4:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 100c2d6:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 100c2da:	f7f9 fc3d 	bl	1005b58 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 100c2de:	bf00      	nop
 100c2e0:	21005ce8 	.word	0x21005ce8
 100c2e4:	e000ed00 	.word	0xe000ed00
 100c2e8:	21003d78 	.word	0x21003d78
 100c2ec:	21000a08 	.word	0x21000a08
 100c2f0:	0100c1c5 	.word	0x0100c1c5
 100c2f4:	01010713 	.word	0x01010713
 100c2f8:	210057e8 	.word	0x210057e8
 100c2fc:	21000988 	.word	0x21000988
 100c300:	21005be8 	.word	0x21005be8
 100c304:	0100fafb 	.word	0x0100fafb

0100c308 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 100c308:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 100c30c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 100c30e:	f100 0558 	add.w	r5, r0, #88	; 0x58
 100c312:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 100c314:	2604      	movs	r6, #4
 100c316:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 100c31a:	2500      	movs	r5, #0
{
 100c31c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 100c31e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 100c320:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 100c322:	e9c0 5506 	strd	r5, r5, [r0, #24]
 100c326:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 100c328:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 100c32a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 100c32c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
 100c330:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 100c334:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 100c336:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 100c338:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 100c33a:	9202      	str	r2, [sp, #8]
 100c33c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
 100c33e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 100c342:	9201      	str	r2, [sp, #4]
 100c344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 100c346:	9200      	str	r2, [sp, #0]
 100c348:	4642      	mov	r2, r8
 100c34a:	f7f9 fbe9 	bl	1005b20 <arch_new_thread>
	if (!_current) {
 100c34e:	4b05      	ldr	r3, [pc, #20]	; (100c364 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 100c350:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 100c352:	689b      	ldr	r3, [r3, #8]
 100c354:	b103      	cbz	r3, 100c358 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
 100c356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 100c358:	4640      	mov	r0, r8
 100c35a:	6723      	str	r3, [r4, #112]	; 0x70
 100c35c:	b004      	add	sp, #16
 100c35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100c362:	bf00      	nop
 100c364:	21003d78 	.word	0x21003d78

0100c368 <z_impl_k_thread_create>:
{
 100c368:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100c36a:	2700      	movs	r7, #0
{
 100c36c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100c36e:	9705      	str	r7, [sp, #20]
 100c370:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 100c372:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100c376:	9704      	str	r7, [sp, #16]
 100c378:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
 100c37a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100c37c:	9703      	str	r7, [sp, #12]
 100c37e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 100c380:	9702      	str	r7, [sp, #8]
 100c382:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 100c384:	9701      	str	r7, [sp, #4]
 100c386:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 100c388:	9700      	str	r7, [sp, #0]
 100c38a:	f7ff ffbd 	bl	100c308 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 100c38e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 100c392:	bf08      	it	eq
 100c394:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 100c398:	d005      	beq.n	100c3a6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100c39a:	ea55 0306 	orrs.w	r3, r5, r6
 100c39e:	d105      	bne.n	100c3ac <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 100c3a0:	4620      	mov	r0, r4
 100c3a2:	f000 fcc9 	bl	100cd38 <z_sched_start>
}
 100c3a6:	4620      	mov	r0, r4
 100c3a8:	b007      	add	sp, #28
 100c3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 100c3ac:	4632      	mov	r2, r6
 100c3ae:	462b      	mov	r3, r5
 100c3b0:	4902      	ldr	r1, [pc, #8]	; (100c3bc <z_impl_k_thread_create+0x54>)
 100c3b2:	f104 0018 	add.w	r0, r4, #24
 100c3b6:	f000 feb3 	bl	100d120 <z_add_timeout>
 100c3ba:	e7f4      	b.n	100c3a6 <z_impl_k_thread_create+0x3e>
 100c3bc:	0100fcfb 	.word	0x0100fcfb

0100c3c0 <z_init_static_threads>:
{
 100c3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100c3c4:	4c29      	ldr	r4, [pc, #164]	; (100c46c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
 100c3c6:	4d2a      	ldr	r5, [pc, #168]	; (100c470 <z_init_static_threads+0xb0>)
{
 100c3c8:	b087      	sub	sp, #28
 100c3ca:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 100c3cc:	42ae      	cmp	r6, r5
 100c3ce:	f104 0430 	add.w	r4, r4, #48	; 0x30
 100c3d2:	d30f      	bcc.n	100c3f4 <z_init_static_threads+0x34>
	k_sched_lock();
 100c3d4:	f000 fb2c 	bl	100ca30 <k_sched_lock>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
 100c3d8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 100c3dc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
 100c3e0:	4c22      	ldr	r4, [pc, #136]	; (100c46c <z_init_static_threads+0xac>)
 100c3e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 100c474 <z_init_static_threads+0xb4>
 100c3e6:	42ac      	cmp	r4, r5
 100c3e8:	d320      	bcc.n	100c42c <z_init_static_threads+0x6c>
}
 100c3ea:	b007      	add	sp, #28
 100c3ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
 100c3f0:	f000 bbd6 	b.w	100cba0 <k_sched_unlock>
		z_setup_new_thread(
 100c3f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 100c3f8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 100c3fc:	9305      	str	r3, [sp, #20]
 100c3fe:	f854 3c10 	ldr.w	r3, [r4, #-16]
 100c402:	9304      	str	r3, [sp, #16]
 100c404:	f854 3c14 	ldr.w	r3, [r4, #-20]
 100c408:	9303      	str	r3, [sp, #12]
 100c40a:	f854 3c18 	ldr.w	r3, [r4, #-24]
 100c40e:	9302      	str	r3, [sp, #8]
 100c410:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 100c414:	9301      	str	r3, [sp, #4]
 100c416:	f854 3c20 	ldr.w	r3, [r4, #-32]
 100c41a:	9300      	str	r3, [sp, #0]
 100c41c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 100c420:	f7ff ff72 	bl	100c308 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 100c424:	f854 3c30 	ldr.w	r3, [r4, #-48]
 100c428:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 100c42a:	e7ce      	b.n	100c3ca <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 100c42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 100c42e:	1c5a      	adds	r2, r3, #1
 100c430:	d00d      	beq.n	100c44e <z_init_static_threads+0x8e>
 100c432:	2100      	movs	r1, #0
 100c434:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
 100c436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100c43a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100c43e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
 100c442:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100c446:	d104      	bne.n	100c452 <z_init_static_threads+0x92>
	z_sched_start(thread);
 100c448:	4640      	mov	r0, r8
 100c44a:	f000 fc75 	bl	100cd38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 100c44e:	3430      	adds	r4, #48	; 0x30
 100c450:	e7c9      	b.n	100c3e6 <z_init_static_threads+0x26>
 100c452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 100c456:	2300      	movs	r3, #0
 100c458:	f7f3 fe2e 	bl	10000b8 <__aeabi_uldivmod>
 100c45c:	4602      	mov	r2, r0
 100c45e:	460b      	mov	r3, r1
 100c460:	f108 0018 	add.w	r0, r8, #24
 100c464:	4649      	mov	r1, r9
 100c466:	f000 fe5b 	bl	100d120 <z_add_timeout>
 100c46a:	e7f0      	b.n	100c44e <z_init_static_threads+0x8e>
 100c46c:	21000200 	.word	0x21000200
 100c470:	21000230 	.word	0x21000230
 100c474:	0100fcfb 	.word	0x0100fcfb

0100c478 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 100c478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 100c47c:	4604      	mov	r4, r0
 100c47e:	4617      	mov	r7, r2
 100c480:	461e      	mov	r6, r3
	__asm__ volatile(
 100c482:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c486:	f3ef 8811 	mrs	r8, BASEPRI
 100c48a:	f383 8811 	msr	BASEPRI, r3
 100c48e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 100c492:	68c3      	ldr	r3, [r0, #12]
 100c494:	4a32      	ldr	r2, [pc, #200]	; (100c560 <z_impl_k_mutex_lock+0xe8>)
 100c496:	b16b      	cbz	r3, 100c4b4 <z_impl_k_mutex_lock+0x3c>
 100c498:	6880      	ldr	r0, [r0, #8]
 100c49a:	6891      	ldr	r1, [r2, #8]
 100c49c:	4288      	cmp	r0, r1
 100c49e:	d019      	beq.n	100c4d4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 100c4a0:	ea57 0306 	orrs.w	r3, r7, r6
 100c4a4:	d118      	bne.n	100c4d8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 100c4a6:	f388 8811 	msr	BASEPRI, r8
 100c4aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 100c4ae:	f06f 000f 	mvn.w	r0, #15
 100c4b2:	e00c      	b.n	100c4ce <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 100c4b4:	6891      	ldr	r1, [r2, #8]
 100c4b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 100c4ba:	3301      	adds	r3, #1
 100c4bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 100c4be:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 100c4c0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 100c4c2:	60a3      	str	r3, [r4, #8]
 100c4c4:	f388 8811 	msr	BASEPRI, r8
 100c4c8:	f3bf 8f6f 	isb	sy
		return 0;
 100c4cc:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 100c4ce:	b002      	add	sp, #8
 100c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 100c4d4:	6921      	ldr	r1, [r4, #16]
 100c4d6:	e7f0      	b.n	100c4ba <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 100c4d8:	f991 100e 	ldrsb.w	r1, [r1, #14]
 100c4dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 100c4e0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 100c4e4:	4299      	cmp	r1, r3
 100c4e6:	bfa8      	it	ge
 100c4e8:	4619      	movge	r1, r3
 100c4ea:	4291      	cmp	r1, r2
 100c4ec:	bfb8      	it	lt
 100c4ee:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 100c4f0:	428b      	cmp	r3, r1
 100c4f2:	dd2e      	ble.n	100c552 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 100c4f4:	f003 fb0d 	bl	100fb12 <adjust_owner_prio.isra.0>
 100c4f8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 100c4fa:	4622      	mov	r2, r4
 100c4fc:	4641      	mov	r1, r8
 100c4fe:	e9cd 7600 	strd	r7, r6, [sp]
 100c502:	4818      	ldr	r0, [pc, #96]	; (100c564 <z_impl_k_mutex_lock+0xec>)
 100c504:	f000 fb06 	bl	100cb14 <z_pend_curr>
	if (got_mutex == 0) {
 100c508:	2800      	cmp	r0, #0
 100c50a:	d0e0      	beq.n	100c4ce <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 100c50c:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c510:	f3ef 8611 	mrs	r6, BASEPRI
 100c514:	f383 8811 	msr	BASEPRI, r3
 100c518:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 100c51c:	6823      	ldr	r3, [r4, #0]
 100c51e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100c520:	429c      	cmp	r4, r3
 100c522:	d00a      	beq.n	100c53a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 100c524:	b14b      	cbz	r3, 100c53a <z_impl_k_mutex_lock+0xc2>
 100c526:	f993 300e 	ldrsb.w	r3, [r3, #14]
 100c52a:	4299      	cmp	r1, r3
 100c52c:	bfa8      	it	ge
 100c52e:	4619      	movge	r1, r3
 100c530:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 100c534:	4299      	cmp	r1, r3
 100c536:	bfb8      	it	lt
 100c538:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 100c53a:	68a0      	ldr	r0, [r4, #8]
 100c53c:	f003 fae9 	bl	100fb12 <adjust_owner_prio.isra.0>
 100c540:	b900      	cbnz	r0, 100c544 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 100c542:	b145      	cbz	r5, 100c556 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 100c544:	4631      	mov	r1, r6
 100c546:	4807      	ldr	r0, [pc, #28]	; (100c564 <z_impl_k_mutex_lock+0xec>)
 100c548:	f000 fa60 	bl	100ca0c <z_reschedule>
	return -EAGAIN;
 100c54c:	f06f 000a 	mvn.w	r0, #10
 100c550:	e7bd      	b.n	100c4ce <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 100c552:	2500      	movs	r5, #0
 100c554:	e7d1      	b.n	100c4fa <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 100c556:	f386 8811 	msr	BASEPRI, r6
 100c55a:	f3bf 8f6f 	isb	sy
 100c55e:	e7f5      	b.n	100c54c <z_impl_k_mutex_lock+0xd4>
 100c560:	21003d78 	.word	0x21003d78
 100c564:	210047d1 	.word	0x210047d1

0100c568 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 100c568:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 100c56a:	6883      	ldr	r3, [r0, #8]
{
 100c56c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 100c56e:	2b00      	cmp	r3, #0
 100c570:	d032      	beq.n	100c5d8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 100c572:	4a1c      	ldr	r2, [pc, #112]	; (100c5e4 <z_impl_k_mutex_unlock+0x7c>)
 100c574:	6892      	ldr	r2, [r2, #8]
 100c576:	4293      	cmp	r3, r2
 100c578:	d131      	bne.n	100c5de <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 100c57a:	7bda      	ldrb	r2, [r3, #15]
 100c57c:	3a01      	subs	r2, #1
 100c57e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 100c580:	68c3      	ldr	r3, [r0, #12]
 100c582:	2b01      	cmp	r3, #1
 100c584:	d905      	bls.n	100c592 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 100c586:	3b01      	subs	r3, #1
 100c588:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 100c58a:	f000 fb09 	bl	100cba0 <k_sched_unlock>

	return 0;
 100c58e:	2000      	movs	r0, #0
}
 100c590:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 100c592:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c596:	f3ef 8511 	mrs	r5, BASEPRI
 100c59a:	f383 8811 	msr	BASEPRI, r3
 100c59e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 100c5a2:	6901      	ldr	r1, [r0, #16]
 100c5a4:	6880      	ldr	r0, [r0, #8]
 100c5a6:	f003 fab4 	bl	100fb12 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 100c5aa:	4620      	mov	r0, r4
 100c5ac:	f003 fbc7 	bl	100fd3e <z_unpend_first_thread>
	mutex->owner = new_owner;
 100c5b0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 100c5b2:	b158      	cbz	r0, 100c5cc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 100c5b4:	f990 200e 	ldrsb.w	r2, [r0, #14]
 100c5b8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 100c5ba:	2200      	movs	r2, #0
 100c5bc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 100c5be:	f003 fb8c 	bl	100fcda <z_ready_thread>
		z_reschedule(&lock, key);
 100c5c2:	4629      	mov	r1, r5
 100c5c4:	4808      	ldr	r0, [pc, #32]	; (100c5e8 <z_impl_k_mutex_unlock+0x80>)
 100c5c6:	f000 fa21 	bl	100ca0c <z_reschedule>
 100c5ca:	e7de      	b.n	100c58a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 100c5cc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 100c5ce:	f385 8811 	msr	BASEPRI, r5
 100c5d2:	f3bf 8f6f 	isb	sy
 100c5d6:	e7d8      	b.n	100c58a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 100c5d8:	f06f 0015 	mvn.w	r0, #21
 100c5dc:	e7d8      	b.n	100c590 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 100c5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100c5e2:	e7d5      	b.n	100c590 <z_impl_k_mutex_unlock+0x28>
 100c5e4:	21003d78 	.word	0x21003d78
 100c5e8:	210047d1 	.word	0x210047d1

0100c5ec <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 100c5ec:	b538      	push	{r3, r4, r5, lr}
 100c5ee:	4604      	mov	r4, r0
	__asm__ volatile(
 100c5f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c5f4:	f3ef 8511 	mrs	r5, BASEPRI
 100c5f8:	f383 8811 	msr	BASEPRI, r3
 100c5fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 100c600:	f003 fb9d 	bl	100fd3e <z_unpend_first_thread>

	if (thread != NULL) {
 100c604:	b148      	cbz	r0, 100c61a <z_impl_k_sem_give+0x2e>
 100c606:	2200      	movs	r2, #0
 100c608:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 100c60a:	f003 fb66 	bl	100fcda <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 100c60e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 100c610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 100c614:	4804      	ldr	r0, [pc, #16]	; (100c628 <z_impl_k_sem_give+0x3c>)
 100c616:	f000 b9f9 	b.w	100ca0c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 100c61a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 100c61e:	429a      	cmp	r2, r3
 100c620:	bf18      	it	ne
 100c622:	3301      	addne	r3, #1
 100c624:	60a3      	str	r3, [r4, #8]
}
 100c626:	e7f2      	b.n	100c60e <z_impl_k_sem_give+0x22>
 100c628:	210047d1 	.word	0x210047d1

0100c62c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 100c62c:	b513      	push	{r0, r1, r4, lr}
 100c62e:	f04f 0440 	mov.w	r4, #64	; 0x40
 100c632:	f3ef 8111 	mrs	r1, BASEPRI
 100c636:	f384 8811 	msr	BASEPRI, r4
 100c63a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 100c63e:	6884      	ldr	r4, [r0, #8]
 100c640:	b144      	cbz	r4, 100c654 <z_impl_k_sem_take+0x28>
		sem->count--;
 100c642:	3c01      	subs	r4, #1
 100c644:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 100c646:	f381 8811 	msr	BASEPRI, r1
 100c64a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 100c64e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 100c650:	b002      	add	sp, #8
 100c652:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 100c654:	ea52 0403 	orrs.w	r4, r2, r3
 100c658:	d106      	bne.n	100c668 <z_impl_k_sem_take+0x3c>
 100c65a:	f381 8811 	msr	BASEPRI, r1
 100c65e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 100c662:	f06f 000f 	mvn.w	r0, #15
 100c666:	e7f3      	b.n	100c650 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 100c668:	e9cd 2300 	strd	r2, r3, [sp]
 100c66c:	4602      	mov	r2, r0
 100c66e:	4802      	ldr	r0, [pc, #8]	; (100c678 <z_impl_k_sem_take+0x4c>)
 100c670:	f000 fa50 	bl	100cb14 <z_pend_curr>
	return ret;
 100c674:	e7ec      	b.n	100c650 <z_impl_k_sem_take+0x24>
 100c676:	bf00      	nop
 100c678:	210047d1 	.word	0x210047d1

0100c67c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 100c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100c680:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 100c682:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 100c686:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
 100c68a:	4e45      	ldr	r6, [pc, #276]	; (100c7a0 <work_queue_main+0x124>)
{
 100c68c:	b085      	sub	sp, #20
	__asm__ volatile(
 100c68e:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c692:	f3ef 8711 	mrs	r7, BASEPRI
 100c696:	f383 8811 	msr	BASEPRI, r3
 100c69a:	f3bf 8f6f 	isb	sy
 100c69e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 100c6a2:	b98d      	cbnz	r5, 100c6c8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 100c6a4:	2102      	movs	r1, #2
 100c6a6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 100c6aa:	f003 fa4d 	bl	100fb48 <flag_test_and_clear>
 100c6ae:	2800      	cmp	r0, #0
 100c6b0:	d135      	bne.n	100c71e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 100c6b2:	2300      	movs	r3, #0
 100c6b4:	4639      	mov	r1, r7
 100c6b6:	e9cd 8900 	strd	r8, r9, [sp]
 100c6ba:	9302      	str	r3, [sp, #8]
 100c6bc:	f104 0288 	add.w	r2, r4, #136	; 0x88
 100c6c0:	4838      	ldr	r0, [pc, #224]	; (100c7a4 <work_queue_main+0x128>)
 100c6c2:	f000 fcb5 	bl	100d030 <z_sched_wait>
			continue;
 100c6c6:	e7e2      	b.n	100c68e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 100c6c8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 100c6cc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 100c6ce:	4295      	cmp	r5, r2
	list->head = node;
 100c6d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 100c6d4:	d101      	bne.n	100c6da <work_queue_main+0x5e>
	list->tail = node;
 100c6d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 100c6da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 100c6de:	f043 0302 	orr.w	r3, r3, #2
 100c6e2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 100c6e6:	68eb      	ldr	r3, [r5, #12]
 100c6e8:	f023 0304 	bic.w	r3, r3, #4
 100c6ec:	f043 0301 	orr.w	r3, r3, #1
 100c6f0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 100c6f2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 100c6f4:	f387 8811 	msr	BASEPRI, r7
 100c6f8:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 100c6fc:	4628      	mov	r0, r5
 100c6fe:	4798      	blx	r3
	__asm__ volatile(
 100c700:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c704:	f3ef 8b11 	mrs	fp, BASEPRI
 100c708:	f383 8811 	msr	BASEPRI, r3
 100c70c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 100c710:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 100c712:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 100c714:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 100c718:	d40b      	bmi.n	100c732 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 100c71a:	60ea      	str	r2, [r5, #12]
 100c71c:	e00e      	b.n	100c73c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 100c71e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 100c722:	2200      	movs	r2, #0
 100c724:	2101      	movs	r1, #1
 100c726:	4628      	mov	r0, r5
 100c728:	f003 fb21 	bl	100fd6e <z_sched_wake>
 100c72c:	2800      	cmp	r0, #0
 100c72e:	d1f8      	bne.n	100c722 <work_queue_main+0xa6>
 100c730:	e7bf      	b.n	100c6b2 <work_queue_main+0x36>
	return list->head;
 100c732:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 100c734:	f023 0303 	bic.w	r3, r3, #3
 100c738:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 100c73a:	b970      	cbnz	r0, 100c75a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 100c73c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 100c740:	f023 0302 	bic.w	r3, r3, #2
 100c744:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 100c748:	f38b 8811 	msr	BASEPRI, fp
 100c74c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 100c750:	05d8      	lsls	r0, r3, #23
 100c752:	d49c      	bmi.n	100c68e <work_queue_main+0x12>
	z_impl_k_yield();
 100c754:	f000 fb62 	bl	100ce1c <z_impl_k_yield>
}
 100c758:	e799      	b.n	100c68e <work_queue_main+0x12>
	return node->next;
 100c75a:	2700      	movs	r7, #0
	parent->next = child;
 100c75c:	463b      	mov	r3, r7
	return node->next;
 100c75e:	f8d0 a000 	ldr.w	sl, [r0]
		if (wc->work == work) {
 100c762:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 100c764:	4601      	mov	r1, r0
		if (wc->work == work) {
 100c766:	4295      	cmp	r5, r2
 100c768:	d10c      	bne.n	100c784 <work_queue_main+0x108>
 100c76a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 100c76c:	b997      	cbnz	r7, 100c794 <work_queue_main+0x118>
 100c76e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 100c770:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 100c772:	4282      	cmp	r2, r0
 100c774:	d100      	bne.n	100c778 <work_queue_main+0xfc>
	list->tail = node;
 100c776:	6071      	str	r1, [r6, #4]
	parent->next = child;
 100c778:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 100c77c:	f7ff ff36 	bl	100c5ec <z_impl_k_sem_give>
}
 100c780:	4639      	mov	r1, r7
 100c782:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 100c784:	f1ba 0f00 	cmp.w	sl, #0
 100c788:	d0d8      	beq.n	100c73c <work_queue_main+0xc0>
	return node->next;
 100c78a:	4650      	mov	r0, sl
 100c78c:	460f      	mov	r7, r1
 100c78e:	f8da a000 	ldr.w	sl, [sl]
 100c792:	e7e6      	b.n	100c762 <work_queue_main+0xe6>
	return list->tail;
 100c794:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 100c796:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 100c798:	4290      	cmp	r0, r2
	list->tail = node;
 100c79a:	bf08      	it	eq
 100c79c:	6077      	streq	r7, [r6, #4]
}
 100c79e:	e7eb      	b.n	100c778 <work_queue_main+0xfc>
 100c7a0:	21003da4 	.word	0x21003da4
 100c7a4:	210047d1 	.word	0x210047d1

0100c7a8 <submit_to_queue_locked>:
{
 100c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 100c7aa:	68c3      	ldr	r3, [r0, #12]
{
 100c7ac:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 100c7ae:	079a      	lsls	r2, r3, #30
{
 100c7b0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 100c7b2:	f3c3 0540 	ubfx	r5, r3, #1, #1
 100c7b6:	d41f      	bmi.n	100c7f8 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 100c7b8:	075f      	lsls	r7, r3, #29
 100c7ba:	d41f      	bmi.n	100c7fc <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 100c7bc:	680a      	ldr	r2, [r1, #0]
 100c7be:	b90a      	cbnz	r2, 100c7c4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 100c7c0:	6882      	ldr	r2, [r0, #8]
 100c7c2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 100c7c4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 100c7c6:	bf42      	ittt	mi
 100c7c8:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
 100c7ca:	2502      	movmi	r5, #2
			*queuep = work->queue;
 100c7cc:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 100c7ce:	6837      	ldr	r7, [r6, #0]
		ret = 1;
 100c7d0:	bf58      	it	pl
 100c7d2:	2501      	movpl	r5, #1
	if (queue == NULL) {
 100c7d4:	b37f      	cbz	r7, 100c836 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 100c7d6:	4b1b      	ldr	r3, [pc, #108]	; (100c844 <submit_to_queue_locked+0x9c>)
 100c7d8:	689b      	ldr	r3, [r3, #8]
 100c7da:	42bb      	cmp	r3, r7
 100c7dc:	d111      	bne.n	100c802 <submit_to_queue_locked+0x5a>
 100c7de:	f003 f981 	bl	100fae4 <k_is_in_isr>
 100c7e2:	f080 0001 	eor.w	r0, r0, #1
 100c7e6:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 100c7e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 100c7ec:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 100c7ee:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 100c7f2:	d523      	bpl.n	100c83c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 100c7f4:	b13a      	cbz	r2, 100c806 <submit_to_queue_locked+0x5e>
 100c7f6:	b940      	cbnz	r0, 100c80a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 100c7f8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 100c7fc:	2300      	movs	r3, #0
 100c7fe:	6033      	str	r3, [r6, #0]
	return ret;
 100c800:	e013      	b.n	100c82a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 100c802:	2000      	movs	r0, #0
 100c804:	e7f0      	b.n	100c7e8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 100c806:	071b      	lsls	r3, r3, #28
 100c808:	d4f6      	bmi.n	100c7f8 <submit_to_queue_locked+0x50>
	parent->next = child;
 100c80a:	2300      	movs	r3, #0
 100c80c:	6023      	str	r3, [r4, #0]
	return list->tail;
 100c80e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 100c812:	b963      	cbnz	r3, 100c82e <submit_to_queue_locked+0x86>
	list->head = node;
 100c814:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 100c818:	4638      	mov	r0, r7
 100c81a:	f003 f9ae 	bl	100fb7a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 100c81e:	68e3      	ldr	r3, [r4, #12]
 100c820:	f043 0304 	orr.w	r3, r3, #4
 100c824:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 100c826:	6833      	ldr	r3, [r6, #0]
 100c828:	60a3      	str	r3, [r4, #8]
}
 100c82a:	4628      	mov	r0, r5
 100c82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 100c82e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 100c830:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 100c834:	e7f0      	b.n	100c818 <submit_to_queue_locked+0x70>
		return -EINVAL;
 100c836:	f06f 0515 	mvn.w	r5, #21
 100c83a:	e7df      	b.n	100c7fc <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 100c83c:	f06f 0512 	mvn.w	r5, #18
 100c840:	e7dc      	b.n	100c7fc <submit_to_queue_locked+0x54>
 100c842:	bf00      	nop
 100c844:	21003d78 	.word	0x21003d78

0100c848 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 100c848:	b5f0      	push	{r4, r5, r6, r7, lr}
 100c84a:	4604      	mov	r4, r0
	list->head = NULL;
 100c84c:	2000      	movs	r0, #0
 100c84e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
 100c850:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 100c854:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100c856:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 100c85a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 100c85e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 100c862:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 100c866:	b31d      	cbz	r5, 100c8b0 <k_work_queue_start+0x68>
 100c868:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 100c86a:	2800      	cmp	r0, #0
 100c86c:	f240 1001 	movw	r0, #257	; 0x101
 100c870:	bf08      	it	eq
 100c872:	2001      	moveq	r0, #1
	*flagp = flags;
 100c874:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 100c878:	2000      	movs	r0, #0
 100c87a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 100c87e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 100c882:	e9cd 3003 	strd	r3, r0, [sp, #12]
 100c886:	e9cd 0001 	strd	r0, r0, [sp, #4]
 100c88a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 100c88e:	4620      	mov	r0, r4
 100c890:	4b08      	ldr	r3, [pc, #32]	; (100c8b4 <k_work_queue_start+0x6c>)
 100c892:	9400      	str	r4, [sp, #0]
 100c894:	f7ff fd68 	bl	100c368 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 100c898:	b125      	cbz	r5, 100c8a4 <k_work_queue_start+0x5c>
 100c89a:	6829      	ldr	r1, [r5, #0]
 100c89c:	b111      	cbz	r1, 100c8a4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 100c89e:	4620      	mov	r0, r4
 100c8a0:	f003 f926 	bl	100faf0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 100c8a4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 100c8a6:	b009      	add	sp, #36	; 0x24
 100c8a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 100c8ac:	f003 b923 	b.w	100faf6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 100c8b0:	2001      	movs	r0, #1
 100c8b2:	e7df      	b.n	100c874 <k_work_queue_start+0x2c>
 100c8b4:	0100c67d 	.word	0x0100c67d

0100c8b8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
 100c8b8:	b513      	push	{r0, r1, r4, lr}
 100c8ba:	9001      	str	r0, [sp, #4]
 100c8bc:	4608      	mov	r0, r1
	__asm__ volatile(
 100c8be:	f04f 0140 	mov.w	r1, #64	; 0x40
 100c8c2:	f3ef 8411 	mrs	r4, BASEPRI
 100c8c6:	f381 8811 	msr	BASEPRI, r1
 100c8ca:	f3bf 8f6f 	isb	sy
	return *flagp;
 100c8ce:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 100c8d0:	f011 0f0e 	tst.w	r1, #14
 100c8d4:	d116      	bne.n	100c904 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100c8d6:	ea53 0c02 	orrs.w	ip, r3, r2
 100c8da:	d108      	bne.n	100c8ee <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
 100c8dc:	a901      	add	r1, sp, #4
 100c8de:	f7ff ff63 	bl	100c7a8 <submit_to_queue_locked>
	__asm__ volatile(
 100c8e2:	f384 8811 	msr	BASEPRI, r4
 100c8e6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 100c8ea:	b002      	add	sp, #8
 100c8ec:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
 100c8ee:	f041 0108 	orr.w	r1, r1, #8
 100c8f2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
 100c8f4:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 100c8f6:	3010      	adds	r0, #16
	dwork->queue = *queuep;
 100c8f8:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 100c8fa:	4903      	ldr	r1, [pc, #12]	; (100c908 <k_work_schedule_for_queue+0x50>)
 100c8fc:	f000 fc10 	bl	100d120 <z_add_timeout>
	return ret;
 100c900:	2001      	movs	r0, #1
 100c902:	e7ee      	b.n	100c8e2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
 100c904:	2000      	movs	r0, #0
 100c906:	e7ec      	b.n	100c8e2 <k_work_schedule_for_queue+0x2a>
 100c908:	0100fb89 	.word	0x0100fb89

0100c90c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 100c90c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
 100c90e:	4801      	ldr	r0, [pc, #4]	; (100c914 <k_work_schedule+0x8>)
 100c910:	f7ff bfd2 	b.w	100c8b8 <k_work_schedule_for_queue>
 100c914:	21001a90 	.word	0x21001a90

0100c918 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
 100c918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100c91a:	460c      	mov	r4, r1
 100c91c:	4616      	mov	r6, r2
 100c91e:	461d      	mov	r5, r3
 100c920:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 100c922:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c926:	f3ef 8711 	mrs	r7, BASEPRI
 100c92a:	f383 8811 	msr	BASEPRI, r3
 100c92e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
 100c932:	4608      	mov	r0, r1
 100c934:	f003 f913 	bl	100fb5e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100c938:	ea55 0306 	orrs.w	r3, r5, r6
 100c93c:	d109      	bne.n	100c952 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
 100c93e:	4620      	mov	r0, r4
 100c940:	a901      	add	r1, sp, #4
 100c942:	f7ff ff31 	bl	100c7a8 <submit_to_queue_locked>
	__asm__ volatile(
 100c946:	f387 8811 	msr	BASEPRI, r7
 100c94a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 100c94e:	b003      	add	sp, #12
 100c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 100c952:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 100c954:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
 100c958:	f043 0308 	orr.w	r3, r3, #8
 100c95c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 100c95e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 100c960:	4632      	mov	r2, r6
	dwork->queue = *queuep;
 100c962:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 100c964:	4902      	ldr	r1, [pc, #8]	; (100c970 <k_work_reschedule_for_queue+0x58>)
 100c966:	462b      	mov	r3, r5
 100c968:	f000 fbda 	bl	100d120 <z_add_timeout>
	return ret;
 100c96c:	2001      	movs	r0, #1
 100c96e:	e7ea      	b.n	100c946 <k_work_reschedule_for_queue+0x2e>
 100c970:	0100fb89 	.word	0x0100fb89

0100c974 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 100c974:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 100c976:	4801      	ldr	r0, [pc, #4]	; (100c97c <k_work_reschedule+0x8>)
 100c978:	f7ff bfce 	b.w	100c918 <k_work_reschedule_for_queue>
 100c97c:	21001a90 	.word	0x21001a90

0100c980 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 100c980:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 100c982:	4c08      	ldr	r4, [pc, #32]	; (100c9a4 <z_reset_time_slice+0x24>)
 100c984:	6823      	ldr	r3, [r4, #0]
 100c986:	b15b      	cbz	r3, 100c9a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 100c988:	f7f9 f810 	bl	10059ac <sys_clock_elapsed>
 100c98c:	4603      	mov	r3, r0
 100c98e:	6820      	ldr	r0, [r4, #0]
 100c990:	4a05      	ldr	r2, [pc, #20]	; (100c9a8 <z_reset_time_slice+0x28>)
 100c992:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
 100c994:	2100      	movs	r1, #0
	}
}
 100c996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 100c99a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 100c99c:	f003 ba1a 	b.w	100fdd4 <z_set_timeout_expiry>
}
 100c9a0:	bd10      	pop	{r4, pc}
 100c9a2:	bf00      	nop
 100c9a4:	21003db4 	.word	0x21003db4
 100c9a8:	21003d78 	.word	0x21003d78

0100c9ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 100c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100c9ae:	4604      	mov	r4, r0
 100c9b0:	460d      	mov	r5, r1
	__asm__ volatile(
 100c9b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 100c9b6:	f3ef 8611 	mrs	r6, BASEPRI
 100c9ba:	f383 8811 	msr	BASEPRI, r3
 100c9be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 100c9c2:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
 100c9c4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 100c9c8:	f240 30e7 	movw	r0, #999	; 0x3e7
 100c9cc:	4b0c      	ldr	r3, [pc, #48]	; (100ca00 <k_sched_time_slice_set+0x54>)
 100c9ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 100c9d2:	6119      	str	r1, [r3, #16]
 100c9d4:	2300      	movs	r3, #0
 100c9d6:	fbe4 0107 	umlal	r0, r1, r4, r7
 100c9da:	f7f3 fb6d 	bl	10000b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 100c9de:	2c00      	cmp	r4, #0
 100c9e0:	4b08      	ldr	r3, [pc, #32]	; (100ca04 <k_sched_time_slice_set+0x58>)
 100c9e2:	dc09      	bgt.n	100c9f8 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 100c9e4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
 100c9e6:	4b08      	ldr	r3, [pc, #32]	; (100ca08 <k_sched_time_slice_set+0x5c>)
 100c9e8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 100c9ea:	f7ff ffc9 	bl	100c980 <z_reset_time_slice>
	__asm__ volatile(
 100c9ee:	f386 8811 	msr	BASEPRI, r6
 100c9f2:	f3bf 8f6f 	isb	sy
	}
}
 100c9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
 100c9f8:	2802      	cmp	r0, #2
 100c9fa:	bfb8      	it	lt
 100c9fc:	2002      	movlt	r0, #2
 100c9fe:	e7f1      	b.n	100c9e4 <k_sched_time_slice_set+0x38>
 100ca00:	21003d78 	.word	0x21003d78
 100ca04:	21003db4 	.word	0x21003db4
 100ca08:	21003db0 	.word	0x21003db0

0100ca0c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 100ca0c:	b949      	cbnz	r1, 100ca22 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100ca0e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 100ca12:	b930      	cbnz	r0, 100ca22 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 100ca14:	4b05      	ldr	r3, [pc, #20]	; (100ca2c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 100ca16:	6a1a      	ldr	r2, [r3, #32]
 100ca18:	689b      	ldr	r3, [r3, #8]
 100ca1a:	429a      	cmp	r2, r3
 100ca1c:	d001      	beq.n	100ca22 <z_reschedule+0x16>
	ret = arch_swap(key);
 100ca1e:	f7f8 bfdd 	b.w	10059dc <arch_swap>
 100ca22:	f381 8811 	msr	BASEPRI, r1
 100ca26:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 100ca2a:	4770      	bx	lr
 100ca2c:	21003d78 	.word	0x21003d78

0100ca30 <k_sched_lock>:
	__asm__ volatile(
 100ca30:	f04f 0340 	mov.w	r3, #64	; 0x40
 100ca34:	f3ef 8111 	mrs	r1, BASEPRI
 100ca38:	f383 8811 	msr	BASEPRI, r3
 100ca3c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 100ca40:	4b04      	ldr	r3, [pc, #16]	; (100ca54 <k_sched_lock+0x24>)
 100ca42:	689a      	ldr	r2, [r3, #8]
 100ca44:	7bd3      	ldrb	r3, [r2, #15]
 100ca46:	3b01      	subs	r3, #1
 100ca48:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 100ca4a:	f381 8811 	msr	BASEPRI, r1
 100ca4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 100ca52:	4770      	bx	lr
 100ca54:	21003d78 	.word	0x21003d78

0100ca58 <update_cache>:
{
 100ca58:	b538      	push	{r3, r4, r5, lr}
 100ca5a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 100ca5c:	480c      	ldr	r0, [pc, #48]	; (100ca90 <update_cache+0x38>)
 100ca5e:	f003 f90c 	bl	100fc7a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 100ca62:	4d0c      	ldr	r5, [pc, #48]	; (100ca94 <update_cache+0x3c>)
 100ca64:	4604      	mov	r4, r0
 100ca66:	b900      	cbnz	r0, 100ca6a <update_cache+0x12>
 100ca68:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 100ca6a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 100ca6c:	b94a      	cbnz	r2, 100ca82 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 100ca6e:	7b5a      	ldrb	r2, [r3, #13]
 100ca70:	06d2      	lsls	r2, r2, #27
 100ca72:	d106      	bne.n	100ca82 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 100ca74:	69a2      	ldr	r2, [r4, #24]
 100ca76:	b922      	cbnz	r2, 100ca82 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 100ca78:	89da      	ldrh	r2, [r3, #14]
 100ca7a:	2a7f      	cmp	r2, #127	; 0x7f
 100ca7c:	d901      	bls.n	100ca82 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 100ca7e:	622b      	str	r3, [r5, #32]
}
 100ca80:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 100ca82:	429c      	cmp	r4, r3
 100ca84:	d001      	beq.n	100ca8a <update_cache+0x32>
			z_reset_time_slice();
 100ca86:	f7ff ff7b 	bl	100c980 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 100ca8a:	622c      	str	r4, [r5, #32]
}
 100ca8c:	e7f8      	b.n	100ca80 <update_cache+0x28>
 100ca8e:	bf00      	nop
 100ca90:	21003d9c 	.word	0x21003d9c
 100ca94:	21003d78 	.word	0x21003d78

0100ca98 <unready_thread>:
{
 100ca98:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 100ca9a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 100ca9e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 100caa0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 100caa2:	7b43      	ldrb	r3, [r0, #13]
 100caa4:	da04      	bge.n	100cab0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100caa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100caaa:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 100caac:	f003 f8bd 	bl	100fc2a <sys_dlist_remove>
	update_cache(thread == _current);
 100cab0:	4b04      	ldr	r3, [pc, #16]	; (100cac4 <unready_thread+0x2c>)
 100cab2:	6898      	ldr	r0, [r3, #8]
 100cab4:	1a43      	subs	r3, r0, r1
 100cab6:	4258      	negs	r0, r3
 100cab8:	4158      	adcs	r0, r3
}
 100caba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 100cabe:	f7ff bfcb 	b.w	100ca58 <update_cache>
 100cac2:	bf00      	nop
 100cac4:	21003d78 	.word	0x21003d78

0100cac8 <pend>:
{
 100cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100cacc:	4606      	mov	r6, r0
 100cace:	4615      	mov	r5, r2
 100cad0:	461c      	mov	r4, r3
	__asm__ volatile(
 100cad2:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cad6:	f3ef 8711 	mrs	r7, BASEPRI
 100cada:	f383 8811 	msr	BASEPRI, r3
 100cade:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 100cae2:	f003 f8d0 	bl	100fc86 <add_to_waitq_locked>
	__asm__ volatile(
 100cae6:	f387 8811 	msr	BASEPRI, r7
 100caea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100caee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 100caf2:	bf08      	it	eq
 100caf4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 100caf8:	d008      	beq.n	100cb0c <pend+0x44>
 100cafa:	462a      	mov	r2, r5
 100cafc:	4623      	mov	r3, r4
 100cafe:	f106 0018 	add.w	r0, r6, #24
 100cb02:	4903      	ldr	r1, [pc, #12]	; (100cb10 <pend+0x48>)
}
 100cb04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100cb08:	f000 bb0a 	b.w	100d120 <z_add_timeout>
 100cb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100cb10:	0100fcfb 	.word	0x0100fcfb

0100cb14 <z_pend_curr>:
{
 100cb14:	b510      	push	{r4, lr}
 100cb16:	460c      	mov	r4, r1
	pending_current = _current;
 100cb18:	4b06      	ldr	r3, [pc, #24]	; (100cb34 <z_pend_curr+0x20>)
{
 100cb1a:	4611      	mov	r1, r2
	pending_current = _current;
 100cb1c:	6898      	ldr	r0, [r3, #8]
 100cb1e:	4b06      	ldr	r3, [pc, #24]	; (100cb38 <z_pend_curr+0x24>)
 100cb20:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 100cb22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100cb26:	f7ff ffcf 	bl	100cac8 <pend>
 100cb2a:	4620      	mov	r0, r4
}
 100cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100cb30:	f7f8 bf54 	b.w	10059dc <arch_swap>
 100cb34:	21003d78 	.word	0x21003d78
 100cb38:	21003dac 	.word	0x21003dac

0100cb3c <z_impl_k_thread_suspend>:
{
 100cb3c:	b570      	push	{r4, r5, r6, lr}
 100cb3e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 100cb40:	3018      	adds	r0, #24
 100cb42:	f003 f931 	bl	100fda8 <z_abort_timeout>
	__asm__ volatile(
 100cb46:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cb4a:	f3ef 8611 	mrs	r6, BASEPRI
 100cb4e:	f383 8811 	msr	BASEPRI, r3
 100cb52:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 100cb56:	f994 200d 	ldrsb.w	r2, [r4, #13]
 100cb5a:	7b63      	ldrb	r3, [r4, #13]
 100cb5c:	2a00      	cmp	r2, #0
 100cb5e:	da05      	bge.n	100cb6c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100cb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 100cb64:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100cb66:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 100cb68:	f003 f85f 	bl	100fc2a <sys_dlist_remove>
		update_cache(thread == _current);
 100cb6c:	4d0b      	ldr	r5, [pc, #44]	; (100cb9c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 100cb6e:	7b63      	ldrb	r3, [r4, #13]
 100cb70:	68a8      	ldr	r0, [r5, #8]
 100cb72:	f043 0310 	orr.w	r3, r3, #16
 100cb76:	7363      	strb	r3, [r4, #13]
 100cb78:	1b03      	subs	r3, r0, r4
 100cb7a:	4258      	negs	r0, r3
 100cb7c:	4158      	adcs	r0, r3
 100cb7e:	f7ff ff6b 	bl	100ca58 <update_cache>
	__asm__ volatile(
 100cb82:	f386 8811 	msr	BASEPRI, r6
 100cb86:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 100cb8a:	68ab      	ldr	r3, [r5, #8]
 100cb8c:	42a3      	cmp	r3, r4
 100cb8e:	d103      	bne.n	100cb98 <z_impl_k_thread_suspend+0x5c>
}
 100cb90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 100cb94:	f003 b867 	b.w	100fc66 <z_reschedule_unlocked>
}
 100cb98:	bd70      	pop	{r4, r5, r6, pc}
 100cb9a:	bf00      	nop
 100cb9c:	21003d78 	.word	0x21003d78

0100cba0 <k_sched_unlock>:
{
 100cba0:	b510      	push	{r4, lr}
	__asm__ volatile(
 100cba2:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cba6:	f3ef 8411 	mrs	r4, BASEPRI
 100cbaa:	f383 8811 	msr	BASEPRI, r3
 100cbae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 100cbb2:	4b08      	ldr	r3, [pc, #32]	; (100cbd4 <k_sched_unlock+0x34>)
		update_cache(0);
 100cbb4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 100cbb6:	689a      	ldr	r2, [r3, #8]
 100cbb8:	7bd3      	ldrb	r3, [r2, #15]
 100cbba:	3301      	adds	r3, #1
 100cbbc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 100cbbe:	f7ff ff4b 	bl	100ca58 <update_cache>
	__asm__ volatile(
 100cbc2:	f384 8811 	msr	BASEPRI, r4
 100cbc6:	f3bf 8f6f 	isb	sy
}
 100cbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 100cbce:	f003 b84a 	b.w	100fc66 <z_reschedule_unlocked>
 100cbd2:	bf00      	nop
 100cbd4:	21003d78 	.word	0x21003d78

0100cbd8 <move_thread_to_end_of_prio_q>:
{
 100cbd8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 100cbda:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 100cbde:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 100cbe0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 100cbe2:	7b43      	ldrb	r3, [r0, #13]
 100cbe4:	da04      	bge.n	100cbf0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100cbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100cbea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 100cbec:	f003 f81d 	bl	100fc2a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 100cbf0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 100cbf2:	4a15      	ldr	r2, [pc, #84]	; (100cc48 <move_thread_to_end_of_prio_q+0x70>)
 100cbf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100cbf8:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100cbfa:	f102 0524 	add.w	r5, r2, #36	; 0x24
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 100cbfe:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100cc02:	42ab      	cmp	r3, r5
 100cc04:	d01b      	beq.n	100cc3e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100cc06:	b1d3      	cbz	r3, 100cc3e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 100cc08:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 100cc0c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 100cc10:	4286      	cmp	r6, r0
 100cc12:	d00f      	beq.n	100cc34 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 100cc14:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 100cc16:	2800      	cmp	r0, #0
 100cc18:	dd0c      	ble.n	100cc34 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 100cc1a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 100cc1c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 100cc20:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 100cc22:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 100cc24:	6890      	ldr	r0, [r2, #8]
}
 100cc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 100cc2a:	1a43      	subs	r3, r0, r1
 100cc2c:	4258      	negs	r0, r3
 100cc2e:	4158      	adcs	r0, r3
 100cc30:	f7ff bf12 	b.w	100ca58 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 100cc34:	42a3      	cmp	r3, r4
 100cc36:	d002      	beq.n	100cc3e <move_thread_to_end_of_prio_q+0x66>
 100cc38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100cc3a:	2b00      	cmp	r3, #0
 100cc3c:	d1e6      	bne.n	100cc0c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 100cc3e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 100cc42:	6021      	str	r1, [r4, #0]
	list->tail = node;
 100cc44:	6291      	str	r1, [r2, #40]	; 0x28
}
 100cc46:	e7ed      	b.n	100cc24 <move_thread_to_end_of_prio_q+0x4c>
 100cc48:	21003d78 	.word	0x21003d78

0100cc4c <z_time_slice>:
{
 100cc4c:	4601      	mov	r1, r0
 100cc4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100cc50:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cc54:	f3ef 8411 	mrs	r4, BASEPRI
 100cc58:	f383 8811 	msr	BASEPRI, r3
 100cc5c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 100cc60:	4b15      	ldr	r3, [pc, #84]	; (100ccb8 <z_time_slice+0x6c>)
 100cc62:	4a16      	ldr	r2, [pc, #88]	; (100ccbc <z_time_slice+0x70>)
 100cc64:	6898      	ldr	r0, [r3, #8]
 100cc66:	6815      	ldr	r5, [r2, #0]
 100cc68:	42a8      	cmp	r0, r5
 100cc6a:	d106      	bne.n	100cc7a <z_time_slice+0x2e>
			z_reset_time_slice();
 100cc6c:	f7ff fe88 	bl	100c980 <z_reset_time_slice>
	__asm__ volatile(
 100cc70:	f384 8811 	msr	BASEPRI, r4
 100cc74:	f3bf 8f6f 	isb	sy
}
 100cc78:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 100cc7a:	2500      	movs	r5, #0
 100cc7c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 100cc7e:	4a10      	ldr	r2, [pc, #64]	; (100ccc0 <z_time_slice+0x74>)
 100cc80:	6812      	ldr	r2, [r2, #0]
 100cc82:	b1ba      	cbz	r2, 100ccb4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 100cc84:	89c2      	ldrh	r2, [r0, #14]
 100cc86:	2a7f      	cmp	r2, #127	; 0x7f
 100cc88:	d814      	bhi.n	100ccb4 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 100cc8a:	7b42      	ldrb	r2, [r0, #13]
 100cc8c:	06d2      	lsls	r2, r2, #27
 100cc8e:	d111      	bne.n	100ccb4 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 100cc90:	4a0c      	ldr	r2, [pc, #48]	; (100ccc4 <z_time_slice+0x78>)
 100cc92:	f990 500e 	ldrsb.w	r5, [r0, #14]
 100cc96:	6812      	ldr	r2, [r2, #0]
 100cc98:	4295      	cmp	r5, r2
 100cc9a:	db0b      	blt.n	100ccb4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 100cc9c:	4a0a      	ldr	r2, [pc, #40]	; (100ccc8 <z_time_slice+0x7c>)
 100cc9e:	4290      	cmp	r0, r2
 100cca0:	d008      	beq.n	100ccb4 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 100cca2:	691a      	ldr	r2, [r3, #16]
 100cca4:	428a      	cmp	r2, r1
 100cca6:	dc02      	bgt.n	100ccae <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 100cca8:	f7ff ff96 	bl	100cbd8 <move_thread_to_end_of_prio_q>
 100ccac:	e7de      	b.n	100cc6c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 100ccae:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 100ccb0:	611a      	str	r2, [r3, #16]
 100ccb2:	e7dd      	b.n	100cc70 <z_time_slice+0x24>
 100ccb4:	2200      	movs	r2, #0
 100ccb6:	e7fb      	b.n	100ccb0 <z_time_slice+0x64>
 100ccb8:	21003d78 	.word	0x21003d78
 100ccbc:	21003dac 	.word	0x21003dac
 100ccc0:	21003db4 	.word	0x21003db4
 100ccc4:	21003db0 	.word	0x21003db0
 100ccc8:	21000988 	.word	0x21000988

0100cccc <ready_thread>:
{
 100cccc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 100ccce:	f990 200d 	ldrsb.w	r2, [r0, #13]
 100ccd2:	7b43      	ldrb	r3, [r0, #13]
 100ccd4:	2a00      	cmp	r2, #0
 100ccd6:	db2a      	blt.n	100cd2e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 100ccd8:	06da      	lsls	r2, r3, #27
 100ccda:	d128      	bne.n	100cd2e <ready_thread+0x62>
 100ccdc:	6982      	ldr	r2, [r0, #24]
 100ccde:	bb32      	cbnz	r2, 100cd2e <ready_thread+0x62>
	return list->head == list;
 100cce0:	4a14      	ldr	r2, [pc, #80]	; (100cd34 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 100cce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100cce6:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100cce8:	f102 0524 	add.w	r5, r2, #36	; 0x24
	return (node == list->tail) ? NULL : node->next;
 100ccec:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100ccf0:	42ab      	cmp	r3, r5
 100ccf2:	d017      	beq.n	100cd24 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100ccf4:	b1b3      	cbz	r3, 100cd24 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 100ccf6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 100ccfa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 100ccfe:	428e      	cmp	r6, r1
 100cd00:	d00b      	beq.n	100cd1a <ready_thread+0x4e>
		return b2 - b1;
 100cd02:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 100cd04:	2900      	cmp	r1, #0
 100cd06:	dd08      	ble.n	100cd1a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 100cd08:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 100cd0a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 100cd0e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 100cd10:	6058      	str	r0, [r3, #4]
		update_cache(0);
 100cd12:	2000      	movs	r0, #0
}
 100cd14:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 100cd16:	f7ff be9f 	b.w	100ca58 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 100cd1a:	42a3      	cmp	r3, r4
 100cd1c:	d002      	beq.n	100cd24 <ready_thread+0x58>
 100cd1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100cd20:	2b00      	cmp	r3, #0
 100cd22:	d1ea      	bne.n	100ccfa <ready_thread+0x2e>
	node->prev = tail;
 100cd24:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 100cd28:	6020      	str	r0, [r4, #0]
	list->tail = node;
 100cd2a:	6290      	str	r0, [r2, #40]	; 0x28
}
 100cd2c:	e7f1      	b.n	100cd12 <ready_thread+0x46>
}
 100cd2e:	bc70      	pop	{r4, r5, r6}
 100cd30:	4770      	bx	lr
 100cd32:	bf00      	nop
 100cd34:	21003d78 	.word	0x21003d78

0100cd38 <z_sched_start>:
{
 100cd38:	b510      	push	{r4, lr}
	__asm__ volatile(
 100cd3a:	f04f 0240 	mov.w	r2, #64	; 0x40
 100cd3e:	f3ef 8411 	mrs	r4, BASEPRI
 100cd42:	f382 8811 	msr	BASEPRI, r2
 100cd46:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 100cd4a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 100cd4c:	0751      	lsls	r1, r2, #29
 100cd4e:	d404      	bmi.n	100cd5a <z_sched_start+0x22>
	__asm__ volatile(
 100cd50:	f384 8811 	msr	BASEPRI, r4
 100cd54:	f3bf 8f6f 	isb	sy
}
 100cd58:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 100cd5a:	f022 0204 	bic.w	r2, r2, #4
 100cd5e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 100cd60:	f7ff ffb4 	bl	100cccc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 100cd64:	4621      	mov	r1, r4
}
 100cd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 100cd6a:	4801      	ldr	r0, [pc, #4]	; (100cd70 <z_sched_start+0x38>)
 100cd6c:	f7ff be4e 	b.w	100ca0c <z_reschedule>
 100cd70:	210047d1 	.word	0x210047d1

0100cd74 <z_set_prio>:
{
 100cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100cd76:	4604      	mov	r4, r0
	__asm__ volatile(
 100cd78:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cd7c:	f3ef 8611 	mrs	r6, BASEPRI
 100cd80:	f383 8811 	msr	BASEPRI, r3
 100cd84:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 100cd88:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 100cd8a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 100cd8c:	06da      	lsls	r2, r3, #27
 100cd8e:	d133      	bne.n	100cdf8 <z_set_prio+0x84>
		if (need_sched) {
 100cd90:	6982      	ldr	r2, [r0, #24]
 100cd92:	bb8a      	cbnz	r2, 100cdf8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100cd94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100cd98:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 100cd9a:	f002 ff46 	bl	100fc2a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 100cd9e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 100cda0:	4a17      	ldr	r2, [pc, #92]	; (100ce00 <z_set_prio+0x8c>)
 100cda2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100cda6:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
 100cda8:	7381      	strb	r1, [r0, #14]
 100cdaa:	4610      	mov	r0, r2
 100cdac:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100cdb0:	4283      	cmp	r3, r0
 100cdb2:	d01b      	beq.n	100cdec <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100cdb4:	b1d3      	cbz	r3, 100cdec <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 100cdb6:	6a97      	ldr	r7, [r2, #40]	; 0x28
	int32_t b2 = thread_2->base.prio;
 100cdb8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 100cdbc:	42a9      	cmp	r1, r5
 100cdbe:	d010      	beq.n	100cde2 <z_set_prio+0x6e>
		return b2 - b1;
 100cdc0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 100cdc2:	2d00      	cmp	r5, #0
 100cdc4:	dd0d      	ble.n	100cde2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 100cdc6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 100cdc8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 100cdcc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 100cdce:	605c      	str	r4, [r3, #4]
			update_cache(1);
 100cdd0:	2001      	movs	r0, #1
 100cdd2:	f7ff fe41 	bl	100ca58 <update_cache>
 100cdd6:	2001      	movs	r0, #1
	__asm__ volatile(
 100cdd8:	f386 8811 	msr	BASEPRI, r6
 100cddc:	f3bf 8f6f 	isb	sy
}
 100cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 100cde2:	42bb      	cmp	r3, r7
 100cde4:	d002      	beq.n	100cdec <z_set_prio+0x78>
 100cde6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100cde8:	2b00      	cmp	r3, #0
 100cdea:	d1e5      	bne.n	100cdb8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 100cdec:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->prev = tail;
 100cdee:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 100cdf2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 100cdf4:	6294      	str	r4, [r2, #40]	; 0x28
}
 100cdf6:	e7eb      	b.n	100cdd0 <z_set_prio+0x5c>
			thread->base.prio = prio;
 100cdf8:	2000      	movs	r0, #0
 100cdfa:	73a1      	strb	r1, [r4, #14]
 100cdfc:	e7ec      	b.n	100cdd8 <z_set_prio+0x64>
 100cdfe:	bf00      	nop
 100ce00:	21003d78 	.word	0x21003d78

0100ce04 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 100ce04:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 100ce06:	4b04      	ldr	r3, [pc, #16]	; (100ce18 <z_sched_init+0x14>)
 100ce08:	4608      	mov	r0, r1
 100ce0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 100ce0e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 100ce12:	f7ff bdcb 	b.w	100c9ac <k_sched_time_slice_set>
 100ce16:	bf00      	nop
 100ce18:	21003d78 	.word	0x21003d78

0100ce1c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 100ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 100ce1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 100ce22:	f3ef 8511 	mrs	r5, BASEPRI
 100ce26:	f383 8811 	msr	BASEPRI, r3
 100ce2a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
 100ce2e:	491a      	ldr	r1, [pc, #104]	; (100ce98 <z_impl_k_yield+0x7c>)
 100ce30:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100ce32:	7b43      	ldrb	r3, [r0, #13]
 100ce34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100ce38:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 100ce3a:	f002 fef6 	bl	100fc2a <sys_dlist_remove>
	return list->head == list;
 100ce3e:	4608      	mov	r0, r1
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
 100ce40:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 100ce42:	7b5a      	ldrb	r2, [r3, #13]
 100ce44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 100ce48:	735a      	strb	r2, [r3, #13]
 100ce4a:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100ce4e:	4282      	cmp	r2, r0
 100ce50:	d01c      	beq.n	100ce8c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100ce52:	b1da      	cbz	r2, 100ce8c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 100ce54:	6a8f      	ldr	r7, [r1, #40]	; 0x28
	int32_t b1 = thread_1->base.prio;
 100ce56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 100ce5a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 100ce5e:	42a6      	cmp	r6, r4
 100ce60:	d00f      	beq.n	100ce82 <z_impl_k_yield+0x66>
		return b2 - b1;
 100ce62:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 100ce64:	2c00      	cmp	r4, #0
 100ce66:	dd0c      	ble.n	100ce82 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 100ce68:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 100ce6a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 100ce6e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 100ce70:	6053      	str	r3, [r2, #4]
	update_cache(1);
 100ce72:	2001      	movs	r0, #1
 100ce74:	f7ff fdf0 	bl	100ca58 <update_cache>
 100ce78:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 100ce7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100ce7e:	f7f8 bdad 	b.w	10059dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 100ce82:	42ba      	cmp	r2, r7
 100ce84:	d002      	beq.n	100ce8c <z_impl_k_yield+0x70>
 100ce86:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100ce88:	2a00      	cmp	r2, #0
 100ce8a:	d1e6      	bne.n	100ce5a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 100ce8c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
	node->prev = tail;
 100ce8e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 100ce92:	6013      	str	r3, [r2, #0]
	list->tail = node;
 100ce94:	628b      	str	r3, [r1, #40]	; 0x28
}
 100ce96:	e7ec      	b.n	100ce72 <z_impl_k_yield+0x56>
 100ce98:	21003d78 	.word	0x21003d78

0100ce9c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 100ce9c:	ea50 0301 	orrs.w	r3, r0, r1
{
 100cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100cea4:	4605      	mov	r5, r0
 100cea6:	460e      	mov	r6, r1
	if (ticks == 0) {
 100cea8:	d103      	bne.n	100ceb2 <z_tick_sleep+0x16>
	z_impl_k_yield();
 100ceaa:	f7ff ffb7 	bl	100ce1c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 100ceae:	2000      	movs	r0, #0
 100ceb0:	e033      	b.n	100cf1a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 100ceb2:	f06f 0401 	mvn.w	r4, #1
 100ceb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100ceba:	1a24      	subs	r4, r4, r0
 100cebc:	eb63 0301 	sbc.w	r3, r3, r1
 100cec0:	2c01      	cmp	r4, #1
 100cec2:	f173 0300 	sbcs.w	r3, r3, #0
 100cec6:	da02      	bge.n	100cece <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 100cec8:	f002 ff9e 	bl	100fe08 <sys_clock_tick_get_32>
 100cecc:	1944      	adds	r4, r0, r5
 100cece:	f04f 0340 	mov.w	r3, #64	; 0x40
 100ced2:	f3ef 8811 	mrs	r8, BASEPRI
 100ced6:	f383 8811 	msr	BASEPRI, r3
 100ceda:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 100cede:	4f10      	ldr	r7, [pc, #64]	; (100cf20 <z_tick_sleep+0x84>)
 100cee0:	4b10      	ldr	r3, [pc, #64]	; (100cf24 <z_tick_sleep+0x88>)
 100cee2:	68b8      	ldr	r0, [r7, #8]
 100cee4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 100cee6:	f7ff fdd7 	bl	100ca98 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 100ceea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 100ceec:	490e      	ldr	r1, [pc, #56]	; (100cf28 <z_tick_sleep+0x8c>)
 100ceee:	462a      	mov	r2, r5
 100cef0:	4633      	mov	r3, r6
 100cef2:	3018      	adds	r0, #24
 100cef4:	f000 f914 	bl	100d120 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 100cef8:	68ba      	ldr	r2, [r7, #8]
 100cefa:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 100cefc:	7b53      	ldrb	r3, [r2, #13]
 100cefe:	f043 0310 	orr.w	r3, r3, #16
 100cf02:	7353      	strb	r3, [r2, #13]
 100cf04:	f7f8 fd6a 	bl	10059dc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 100cf08:	f002 ff7e 	bl	100fe08 <sys_clock_tick_get_32>
 100cf0c:	1a20      	subs	r0, r4, r0
 100cf0e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 100cf12:	2801      	cmp	r0, #1
 100cf14:	f173 0300 	sbcs.w	r3, r3, #0
 100cf18:	dbc9      	blt.n	100ceae <z_tick_sleep+0x12>
}
 100cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100cf1e:	bf00      	nop
 100cf20:	21003d78 	.word	0x21003d78
 100cf24:	21003dac 	.word	0x21003dac
 100cf28:	0100fcfb 	.word	0x0100fcfb

0100cf2c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100cf2c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 100cf30:	bf08      	it	eq
 100cf32:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 100cf36:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100cf38:	d106      	bne.n	100cf48 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 100cf3a:	4b08      	ldr	r3, [pc, #32]	; (100cf5c <z_impl_k_sleep+0x30>)
 100cf3c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 100cf3e:	f7ff fdfd 	bl	100cb3c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 100cf42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 100cf46:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 100cf48:	f7ff ffa8 	bl	100ce9c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
 100cf4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 100cf50:	fb80 0303 	smull	r0, r3, r0, r3
 100cf54:	0bc0      	lsrs	r0, r0, #15
 100cf56:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
 100cf5a:	e7f4      	b.n	100cf46 <z_impl_k_sleep+0x1a>
 100cf5c:	21003d78 	.word	0x21003d78

0100cf60 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 100cf60:	4b01      	ldr	r3, [pc, #4]	; (100cf68 <z_impl_k_current_get+0x8>)
 100cf62:	6898      	ldr	r0, [r3, #8]
 100cf64:	4770      	bx	lr
 100cf66:	bf00      	nop
 100cf68:	21003d78 	.word	0x21003d78

0100cf6c <z_impl_k_is_preempt_thread>:
 100cf6c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 100cf70:	b93b      	cbnz	r3, 100cf82 <z_impl_k_is_preempt_thread+0x16>
 100cf72:	4b05      	ldr	r3, [pc, #20]	; (100cf88 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 100cf74:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 100cf76:	89d8      	ldrh	r0, [r3, #14]
 100cf78:	287f      	cmp	r0, #127	; 0x7f
 100cf7a:	bf8c      	ite	hi
 100cf7c:	2000      	movhi	r0, #0
 100cf7e:	2001      	movls	r0, #1
 100cf80:	4770      	bx	lr
 100cf82:	2000      	movs	r0, #0
}
 100cf84:	4770      	bx	lr
 100cf86:	bf00      	nop
 100cf88:	21003d78 	.word	0x21003d78

0100cf8c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 100cf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100cf90:	4604      	mov	r4, r0
 100cf92:	f04f 0340 	mov.w	r3, #64	; 0x40
 100cf96:	f3ef 8611 	mrs	r6, BASEPRI
 100cf9a:	f383 8811 	msr	BASEPRI, r3
 100cf9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 100cfa2:	7b43      	ldrb	r3, [r0, #13]
 100cfa4:	071a      	lsls	r2, r3, #28
 100cfa6:	d505      	bpl.n	100cfb4 <z_thread_abort+0x28>
	__asm__ volatile(
 100cfa8:	f386 8811 	msr	BASEPRI, r6
 100cfac:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 100cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 100cfb4:	f023 0220 	bic.w	r2, r3, #32
 100cfb8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 100cfbc:	09d2      	lsrs	r2, r2, #7
 100cfbe:	d120      	bne.n	100d002 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 100cfc0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 100cfc2:	68a3      	ldr	r3, [r4, #8]
 100cfc4:	b113      	cbz	r3, 100cfcc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 100cfc6:	4620      	mov	r0, r4
 100cfc8:	f002 fe37 	bl	100fc3a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 100cfcc:	f104 0018 	add.w	r0, r4, #24
 100cfd0:	f002 feea 	bl	100fda8 <z_abort_timeout>
 100cfd4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 100cfd8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 100cfdc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100cfde:	42bd      	cmp	r5, r7
 100cfe0:	d000      	beq.n	100cfe4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 100cfe2:	b9b5      	cbnz	r5, 100d012 <z_thread_abort+0x86>
		update_cache(1);
 100cfe4:	2001      	movs	r0, #1
 100cfe6:	f7ff fd37 	bl	100ca58 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 100cfea:	4b10      	ldr	r3, [pc, #64]	; (100d02c <z_thread_abort+0xa0>)
 100cfec:	689b      	ldr	r3, [r3, #8]
 100cfee:	42a3      	cmp	r3, r4
 100cff0:	d1da      	bne.n	100cfa8 <z_thread_abort+0x1c>
 100cff2:	f3ef 8305 	mrs	r3, IPSR
 100cff6:	2b00      	cmp	r3, #0
 100cff8:	d1d6      	bne.n	100cfa8 <z_thread_abort+0x1c>
 100cffa:	4630      	mov	r0, r6
 100cffc:	f7f8 fcee 	bl	10059dc <arch_swap>
	return ret;
 100d000:	e7d2      	b.n	100cfa8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100d002:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 100d006:	f043 0308 	orr.w	r3, r3, #8
 100d00a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 100d00c:	f002 fe0d 	bl	100fc2a <sys_dlist_remove>
}
 100d010:	e7d7      	b.n	100cfc2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 100d012:	4628      	mov	r0, r5
 100d014:	f002 fe11 	bl	100fc3a <unpend_thread_no_timeout>
 100d018:	f105 0018 	add.w	r0, r5, #24
 100d01c:	f002 fec4 	bl	100fda8 <z_abort_timeout>
		ready_thread(thread);
 100d020:	4628      	mov	r0, r5
 100d022:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 100d026:	f7ff fe51 	bl	100cccc <ready_thread>
 100d02a:	e7d7      	b.n	100cfdc <z_thread_abort+0x50>
 100d02c:	21003d78 	.word	0x21003d78

0100d030 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 100d030:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 100d032:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 100d036:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 100d038:	e9cd 6700 	strd	r6, r7, [sp]
 100d03c:	f7ff fd6a 	bl	100cb14 <z_pend_curr>

	if (data != NULL) {
 100d040:	b11c      	cbz	r4, 100d04a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 100d042:	4b03      	ldr	r3, [pc, #12]	; (100d050 <z_sched_wait+0x20>)
 100d044:	689b      	ldr	r3, [r3, #8]
 100d046:	695b      	ldr	r3, [r3, #20]
 100d048:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 100d04a:	b002      	add	sp, #8
 100d04c:	bdd0      	pop	{r4, r6, r7, pc}
 100d04e:	bf00      	nop
 100d050:	21003d78 	.word	0x21003d78

0100d054 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 100d054:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 100d056:	4806      	ldr	r0, [pc, #24]	; (100d070 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 100d058:	4a06      	ldr	r2, [pc, #24]	; (100d074 <z_data_copy+0x20>)
 100d05a:	4907      	ldr	r1, [pc, #28]	; (100d078 <z_data_copy+0x24>)
 100d05c:	1a12      	subs	r2, r2, r0
 100d05e:	f001 fa9a 	bl	100e596 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 100d062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 100d066:	4a05      	ldr	r2, [pc, #20]	; (100d07c <z_data_copy+0x28>)
 100d068:	4905      	ldr	r1, [pc, #20]	; (100d080 <z_data_copy+0x2c>)
 100d06a:	4806      	ldr	r0, [pc, #24]	; (100d084 <z_data_copy+0x30>)
 100d06c:	f001 ba93 	b.w	100e596 <memcpy>
 100d070:	21000000 	.word	0x21000000
 100d074:	21000278 	.word	0x21000278
 100d078:	01010724 	.word	0x01010724
 100d07c:	00000000 	.word	0x00000000
 100d080:	01010724 	.word	0x01010724
 100d084:	21000000 	.word	0x21000000

0100d088 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 100d088:	4b03      	ldr	r3, [pc, #12]	; (100d098 <elapsed+0x10>)
 100d08a:	681b      	ldr	r3, [r3, #0]
 100d08c:	b90b      	cbnz	r3, 100d092 <elapsed+0xa>
 100d08e:	f7f8 bc8d 	b.w	10059ac <sys_clock_elapsed>
}
 100d092:	2000      	movs	r0, #0
 100d094:	4770      	bx	lr
 100d096:	bf00      	nop
 100d098:	21003db8 	.word	0x21003db8

0100d09c <next_timeout>:
	return list->head == list;
 100d09c:	4b11      	ldr	r3, [pc, #68]	; (100d0e4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 100d09e:	b510      	push	{r4, lr}
 100d0a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100d0a2:	429c      	cmp	r4, r3
 100d0a4:	bf08      	it	eq
 100d0a6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 100d0a8:	f7ff ffee 	bl	100d088 <elapsed>
 100d0ac:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 100d0ae:	b16c      	cbz	r4, 100d0cc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 100d0b0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 100d0b4:	1ac0      	subs	r0, r0, r3
 100d0b6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 100d0ba:	2801      	cmp	r0, #1
 100d0bc:	f173 0200 	sbcs.w	r2, r3, #0
 100d0c0:	db0d      	blt.n	100d0de <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 100d0c2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 100d0c6:	f173 0300 	sbcs.w	r3, r3, #0
 100d0ca:	db01      	blt.n	100d0d0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 100d0cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 100d0d0:	4b05      	ldr	r3, [pc, #20]	; (100d0e8 <next_timeout+0x4c>)
 100d0d2:	691b      	ldr	r3, [r3, #16]
 100d0d4:	b113      	cbz	r3, 100d0dc <next_timeout+0x40>
 100d0d6:	4298      	cmp	r0, r3
 100d0d8:	bfa8      	it	ge
 100d0da:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 100d0dc:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 100d0de:	2000      	movs	r0, #0
 100d0e0:	e7f6      	b.n	100d0d0 <next_timeout+0x34>
 100d0e2:	bf00      	nop
 100d0e4:	21000108 	.word	0x21000108
 100d0e8:	21003d78 	.word	0x21003d78

0100d0ec <remove_timeout>:
{
 100d0ec:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 100d0ee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 100d0f0:	b168      	cbz	r0, 100d10e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 100d0f2:	4a0a      	ldr	r2, [pc, #40]	; (100d11c <remove_timeout+0x30>)
 100d0f4:	6852      	ldr	r2, [r2, #4]
 100d0f6:	4290      	cmp	r0, r2
 100d0f8:	d009      	beq.n	100d10e <remove_timeout+0x22>
	if (next(t) != NULL) {
 100d0fa:	b143      	cbz	r3, 100d10e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 100d0fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 100d100:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 100d104:	1912      	adds	r2, r2, r4
 100d106:	eb41 0105 	adc.w	r1, r1, r5
 100d10a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 100d10e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 100d110:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 100d112:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 100d114:	2300      	movs	r3, #0
	node->prev = NULL;
 100d116:	e9c0 3300 	strd	r3, r3, [r0]
}
 100d11a:	bd30      	pop	{r4, r5, pc}
 100d11c:	21000108 	.word	0x21000108

0100d120 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100d120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 100d124:	bf08      	it	eq
 100d126:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 100d12a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100d12c:	4604      	mov	r4, r0
 100d12e:	461f      	mov	r7, r3
 100d130:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100d132:	d067      	beq.n	100d204 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 100d134:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 100d136:	f04f 0340 	mov.w	r3, #64	; 0x40
 100d13a:	f3ef 8611 	mrs	r6, BASEPRI
 100d13e:	f383 8811 	msr	BASEPRI, r3
 100d142:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 100d146:	f06f 0201 	mvn.w	r2, #1
 100d14a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 100d14e:	1b53      	subs	r3, r2, r5
 100d150:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 100d154:	2b00      	cmp	r3, #0
 100d156:	db1b      	blt.n	100d190 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 100d158:	4b2b      	ldr	r3, [pc, #172]	; (100d208 <z_add_timeout+0xe8>)
 100d15a:	e9d3 1300 	ldrd	r1, r3, [r3]
 100d15e:	1a52      	subs	r2, r2, r1
 100d160:	eb6c 0303 	sbc.w	r3, ip, r3
 100d164:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 100d166:	eb63 0307 	sbc.w	r3, r3, r7
 100d16a:	2d01      	cmp	r5, #1
 100d16c:	f173 0200 	sbcs.w	r2, r3, #0
 100d170:	bfbc      	itt	lt
 100d172:	2501      	movlt	r5, #1
 100d174:	2300      	movlt	r3, #0
 100d176:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 100d17a:	4824      	ldr	r0, [pc, #144]	; (100d20c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 100d17c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100d180:	4283      	cmp	r3, r0
 100d182:	d118      	bne.n	100d1b6 <z_add_timeout+0x96>
	node->prev = tail;
 100d184:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 100d188:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 100d18c:	6044      	str	r4, [r0, #4]
}
 100d18e:	e026      	b.n	100d1de <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 100d190:	f7ff ff7a 	bl	100d088 <elapsed>
 100d194:	3501      	adds	r5, #1
 100d196:	f147 0700 	adc.w	r7, r7, #0
 100d19a:	182d      	adds	r5, r5, r0
 100d19c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 100d1a0:	e9c4 5704 	strd	r5, r7, [r4, #16]
 100d1a4:	e7e9      	b.n	100d17a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 100d1a6:	1a52      	subs	r2, r2, r1
 100d1a8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 100d1ac:	459c      	cmp	ip, r3
 100d1ae:	e9c4 2504 	strd	r2, r5, [r4, #16]
 100d1b2:	d0e7      	beq.n	100d184 <z_add_timeout+0x64>
 100d1b4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 100d1b6:	2b00      	cmp	r3, #0
 100d1b8:	d0e4      	beq.n	100d184 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 100d1ba:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 100d1be:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 100d1c2:	428a      	cmp	r2, r1
 100d1c4:	eb75 0e07 	sbcs.w	lr, r5, r7
 100d1c8:	daed      	bge.n	100d1a6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 100d1ca:	1a8a      	subs	r2, r1, r2
 100d1cc:	eb67 0505 	sbc.w	r5, r7, r5
 100d1d0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 100d1d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 100d1d6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 100d1da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 100d1dc:	605c      	str	r4, [r3, #4]
	return list->head == list;
 100d1de:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100d1e0:	4283      	cmp	r3, r0
 100d1e2:	d00b      	beq.n	100d1fc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 100d1e4:	429c      	cmp	r4, r3
 100d1e6:	d109      	bne.n	100d1fc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 100d1e8:	f7ff ff58 	bl	100d09c <next_timeout>

			if (next_time == 0 ||
 100d1ec:	b118      	cbz	r0, 100d1f6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 100d1ee:	4b08      	ldr	r3, [pc, #32]	; (100d210 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 100d1f0:	691b      	ldr	r3, [r3, #16]
 100d1f2:	4283      	cmp	r3, r0
 100d1f4:	d002      	beq.n	100d1fc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 100d1f6:	2100      	movs	r1, #0
 100d1f8:	f7f8 fba6 	bl	1005948 <sys_clock_set_timeout>
	__asm__ volatile(
 100d1fc:	f386 8811 	msr	BASEPRI, r6
 100d200:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 100d204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100d206:	bf00      	nop
 100d208:	21000a88 	.word	0x21000a88
 100d20c:	21000108 	.word	0x21000108
 100d210:	21003d78 	.word	0x21003d78

0100d214 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 100d214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100d218:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 100d21a:	f7ff fd17 	bl	100cc4c <z_time_slice>
	__asm__ volatile(
 100d21e:	f04f 0340 	mov.w	r3, #64	; 0x40
 100d222:	f3ef 8411 	mrs	r4, BASEPRI
 100d226:	f383 8811 	msr	BASEPRI, r3
 100d22a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 100d22e:	4e24      	ldr	r6, [pc, #144]	; (100d2c0 <sys_clock_announce+0xac>)
	return list->head == list;
 100d230:	f8df 8090 	ldr.w	r8, [pc, #144]	; 100d2c4 <sys_clock_announce+0xb0>
 100d234:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 100d236:	4d24      	ldr	r5, [pc, #144]	; (100d2c8 <sys_clock_announce+0xb4>)
 100d238:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 100d23c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100d23e:	4540      	cmp	r0, r8
 100d240:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
 100d244:	e9d5 1e00 	ldrd	r1, lr, [r5]
 100d248:	d00b      	beq.n	100d262 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 100d24a:	b150      	cbz	r0, 100d262 <sys_clock_announce+0x4e>
 100d24c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 100d250:	429a      	cmp	r2, r3
 100d252:	eb77 090c 	sbcs.w	r9, r7, ip
 100d256:	da16      	bge.n	100d286 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 100d258:	1a9b      	subs	r3, r3, r2
 100d25a:	eb6c 0c07 	sbc.w	ip, ip, r7
 100d25e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 100d262:	1852      	adds	r2, r2, r1
 100d264:	eb4e 0707 	adc.w	r7, lr, r7
 100d268:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 100d26c:	2500      	movs	r5, #0
 100d26e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 100d270:	f7ff ff14 	bl	100d09c <next_timeout>
 100d274:	4629      	mov	r1, r5
 100d276:	f7f8 fb67 	bl	1005948 <sys_clock_set_timeout>
	__asm__ volatile(
 100d27a:	f384 8811 	msr	BASEPRI, r4
 100d27e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 100d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 100d286:	1859      	adds	r1, r3, r1
 100d288:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 100d28c:	1ad3      	subs	r3, r2, r3
 100d28e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 100d290:	2200      	movs	r2, #0
 100d292:	2300      	movs	r3, #0
 100d294:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 100d298:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 100d29c:	f7ff ff26 	bl	100d0ec <remove_timeout>
 100d2a0:	f384 8811 	msr	BASEPRI, r4
 100d2a4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 100d2a8:	6883      	ldr	r3, [r0, #8]
 100d2aa:	4798      	blx	r3
	__asm__ volatile(
 100d2ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 100d2b0:	f3ef 8411 	mrs	r4, BASEPRI
 100d2b4:	f383 8811 	msr	BASEPRI, r3
 100d2b8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 100d2bc:	e7bc      	b.n	100d238 <sys_clock_announce+0x24>
 100d2be:	bf00      	nop
 100d2c0:	21003db8 	.word	0x21003db8
 100d2c4:	21000108 	.word	0x21000108
 100d2c8:	21000a88 	.word	0x21000a88

0100d2cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 100d2cc:	b510      	push	{r4, lr}
 100d2ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 100d2d2:	f3ef 8411 	mrs	r4, BASEPRI
 100d2d6:	f383 8811 	msr	BASEPRI, r3
 100d2da:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 100d2de:	f7f8 fb65 	bl	10059ac <sys_clock_elapsed>
 100d2e2:	4a05      	ldr	r2, [pc, #20]	; (100d2f8 <sys_clock_tick_get+0x2c>)
 100d2e4:	e9d2 3100 	ldrd	r3, r1, [r2]
 100d2e8:	18c0      	adds	r0, r0, r3
 100d2ea:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 100d2ee:	f384 8811 	msr	BASEPRI, r4
 100d2f2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 100d2f6:	bd10      	pop	{r4, pc}
 100d2f8:	21000a88 	.word	0x21000a88

0100d2fc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 100d2fc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 100d2fe:	4601      	mov	r1, r0
 100d300:	4801      	ldr	r0, [pc, #4]	; (100d308 <k_aligned_alloc+0xc>)
 100d302:	f002 bdb4 	b.w	100fe6e <z_heap_aligned_alloc>
 100d306:	bf00      	nop
 100d308:	21000230 	.word	0x21000230

0100d30c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 100d30c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 100d30e:	4c06      	ldr	r4, [pc, #24]	; (100d328 <statics_init+0x1c>)
 100d310:	4d06      	ldr	r5, [pc, #24]	; (100d32c <statics_init+0x20>)
 100d312:	42ac      	cmp	r4, r5
 100d314:	d301      	bcc.n	100d31a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 100d316:	2000      	movs	r0, #0
 100d318:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 100d31a:	4620      	mov	r0, r4
 100d31c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 100d320:	f002 fdbd 	bl	100fe9e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 100d324:	3414      	adds	r4, #20
 100d326:	e7f4      	b.n	100d312 <statics_init+0x6>
 100d328:	21000230 	.word	0x21000230
 100d32c:	21000244 	.word	0x21000244

0100d330 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 100d330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 100d332:	2400      	movs	r4, #0
 100d334:	4b08      	ldr	r3, [pc, #32]	; (100d358 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 100d336:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
 100d33a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 100d33c:	ab02      	add	r3, sp, #8
 100d33e:	9300      	str	r3, [sp, #0]
 100d340:	4906      	ldr	r1, [pc, #24]	; (100d35c <k_sys_work_q_init+0x2c>)
 100d342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100d346:	4806      	ldr	r0, [pc, #24]	; (100d360 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 100d348:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 100d34c:	f7ff fa7c 	bl	100c848 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 100d350:	4620      	mov	r0, r4
 100d352:	b004      	add	sp, #16
 100d354:	bd10      	pop	{r4, pc}
 100d356:	bf00      	nop
 100d358:	01010718 	.word	0x01010718
 100d35c:	210064e8 	.word	0x210064e8
 100d360:	21001a90 	.word	0x21001a90

0100d364 <dly_ts_by_id_search>:
 100d364:	4602      	mov	r2, r0
 100d366:	2300      	movs	r3, #0
 100d368:	b510      	push	{r4, lr}
 100d36a:	4905      	ldr	r1, [pc, #20]	; (100d380 <dly_ts_by_id_search+0x1c>)
 100d36c:	f851 0b04 	ldr.w	r0, [r1], #4
 100d370:	6a44      	ldr	r4, [r0, #36]	; 0x24
 100d372:	4294      	cmp	r4, r2
 100d374:	d003      	beq.n	100d37e <dly_ts_by_id_search+0x1a>
 100d376:	3301      	adds	r3, #1
 100d378:	2b04      	cmp	r3, #4
 100d37a:	d1f7      	bne.n	100d36c <dly_ts_by_id_search+0x8>
 100d37c:	2000      	movs	r0, #0
 100d37e:	bd10      	pop	{r4, pc}
 100d380:	21003e5c 	.word	0x21003e5c

0100d384 <all_prec_update>:
 100d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100d388:	4d39      	ldr	r5, [pc, #228]	; (100d470 <all_prec_update+0xec>)
 100d38a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 100d474 <all_prec_update+0xf0>
 100d38e:	b087      	sub	sp, #28
 100d390:	2301      	movs	r3, #1
 100d392:	e8d5 2f4f 	ldrexb	r2, [r5]
 100d396:	f012 0fff 	tst.w	r2, #255	; 0xff
 100d39a:	d009      	beq.n	100d3b0 <all_prec_update+0x2c>
 100d39c:	f3bf 8f2f 	clrex
 100d3a0:	4a34      	ldr	r2, [pc, #208]	; (100d474 <all_prec_update+0xf0>)
 100d3a2:	7813      	ldrb	r3, [r2, #0]
 100d3a4:	3301      	adds	r3, #1
 100d3a6:	b2db      	uxtb	r3, r3
 100d3a8:	7013      	strb	r3, [r2, #0]
 100d3aa:	b007      	add	sp, #28
 100d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100d3b0:	e8c5 3f44 	strexb	r4, r3, [r5]
 100d3b4:	2c00      	cmp	r4, #0
 100d3b6:	d1ec      	bne.n	100d392 <all_prec_update+0xe>
 100d3b8:	f3bf 8f5f 	dmb	sy
 100d3bc:	f898 3000 	ldrb.w	r3, [r8]
 100d3c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 100d484 <all_prec_update+0x100>
 100d3c4:	b2db      	uxtb	r3, r3
 100d3c6:	f89a 9000 	ldrb.w	r9, [sl]
 100d3ca:	9301      	str	r3, [sp, #4]
 100d3cc:	f002 fe4b 	bl	1010066 <nrf_802154_timer_sched_time_get>
 100d3d0:	4626      	mov	r6, r4
 100d3d2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 100d488 <all_prec_update+0x104>
 100d3d6:	9002      	str	r0, [sp, #8]
 100d3d8:	f85b 2b04 	ldr.w	r2, [fp], #4
 100d3dc:	6951      	ldr	r1, [r2, #20]
 100d3de:	6993      	ldr	r3, [r2, #24]
 100d3e0:	7f17      	ldrb	r7, [r2, #28]
 100d3e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 100d3e6:	9105      	str	r1, [sp, #20]
 100d3e8:	f002 fe3f 	bl	101006a <nrf_802154_timer_sched_granularity_get>
 100d3ec:	9a04      	ldr	r2, [sp, #16]
 100d3ee:	9905      	ldr	r1, [sp, #20]
 100d3f0:	7f92      	ldrb	r2, [r2, #30]
 100d3f2:	2a01      	cmp	r2, #1
 100d3f4:	d10a      	bne.n	100d40c <all_prec_update+0x88>
 100d3f6:	4b20      	ldr	r3, [pc, #128]	; (100d478 <all_prec_update+0xf4>)
 100d3f8:	eba3 0240 	sub.w	r2, r3, r0, lsl #1
 100d3fc:	9b03      	ldr	r3, [sp, #12]
 100d3fe:	9802      	ldr	r0, [sp, #8]
 100d400:	441a      	add	r2, r3
 100d402:	f002 fe34 	bl	101006e <nrf_802154_timer_sched_time_is_in_future>
 100d406:	2800      	cmp	r0, #0
 100d408:	bf18      	it	ne
 100d40a:	2700      	movne	r7, #0
 100d40c:	42be      	cmp	r6, r7
 100d40e:	f104 0401 	add.w	r4, r4, #1
 100d412:	bf38      	it	cc
 100d414:	463e      	movcc	r6, r7
 100d416:	2c04      	cmp	r4, #4
 100d418:	d1de      	bne.n	100d3d8 <all_prec_update+0x54>
 100d41a:	4b18      	ldr	r3, [pc, #96]	; (100d47c <all_prec_update+0xf8>)
 100d41c:	7818      	ldrb	r0, [r3, #0]
 100d41e:	4286      	cmp	r6, r0
 100d420:	bf38      	it	cc
 100d422:	4606      	movcc	r6, r0
 100d424:	b2f6      	uxtb	r6, r6
 100d426:	45b1      	cmp	r9, r6
 100d428:	d00c      	beq.n	100d444 <all_prec_update+0xc0>
 100d42a:	f88a 6000 	strb.w	r6, [sl]
 100d42e:	b9a6      	cbnz	r6, 100d45a <all_prec_update+0xd6>
 100d430:	4c13      	ldr	r4, [pc, #76]	; (100d480 <all_prec_update+0xfc>)
 100d432:	f7fd fa01 	bl	100a838 <nrf_802154_rsch_prio_drop_hfclk_stop>
 100d436:	7026      	strb	r6, [r4, #0]
 100d438:	f7f6 fce0 	bl	1003dfc <nrf_raal_continuous_mode_exit>
 100d43c:	7066      	strb	r6, [r4, #1]
 100d43e:	4630      	mov	r0, r6
 100d440:	f000 fb6a 	bl	100db18 <nrf_802154_wifi_coex_prio_request>
 100d444:	f3bf 8f5f 	dmb	sy
 100d448:	2300      	movs	r3, #0
 100d44a:	4a09      	ldr	r2, [pc, #36]	; (100d470 <all_prec_update+0xec>)
 100d44c:	7013      	strb	r3, [r2, #0]
 100d44e:	f898 3000 	ldrb.w	r3, [r8]
 100d452:	9a01      	ldr	r2, [sp, #4]
 100d454:	4293      	cmp	r3, r2
 100d456:	d19b      	bne.n	100d390 <all_prec_update+0xc>
 100d458:	e7a7      	b.n	100d3aa <all_prec_update+0x26>
 100d45a:	f1b9 0f00 	cmp.w	r9, #0
 100d45e:	d1ee      	bne.n	100d43e <all_prec_update+0xba>
 100d460:	f7fd f9f0 	bl	100a844 <nrf_802154_rsch_prio_drop_hfclk_stop_terminate>
 100d464:	f7f9 fbcc 	bl	1006c00 <nrf_802154_clock_hfclk_start>
 100d468:	f7f6 fd34 	bl	1003ed4 <nrf_raal_continuous_mode_enter>
 100d46c:	e7e7      	b.n	100d43e <all_prec_update+0xba>
 100d46e:	bf00      	nop
 100d470:	210047d8 	.word	0x210047d8
 100d474:	210047d9 	.word	0x210047d9
 100d478:	fffffe20 	.word	0xfffffe20
 100d47c:	210047d4 	.word	0x210047d4
 100d480:	210047d1 	.word	0x210047d1
 100d484:	210047da 	.word	0x210047da
 100d488:	21003e5c 	.word	0x21003e5c

0100d48c <delayed_timeslot_prec_request>:
 100d48c:	b510      	push	{r4, lr}
 100d48e:	4604      	mov	r4, r0
 100d490:	f7ff ff78 	bl	100d384 <all_prec_update>
 100d494:	6963      	ldr	r3, [r4, #20]
 100d496:	4620      	mov	r0, r4
 100d498:	6023      	str	r3, [r4, #0]
 100d49a:	69a3      	ldr	r3, [r4, #24]
 100d49c:	2101      	movs	r1, #1
 100d49e:	6063      	str	r3, [r4, #4]
 100d4a0:	4b03      	ldr	r3, [pc, #12]	; (100d4b0 <delayed_timeslot_prec_request+0x24>)
 100d4a2:	e9c4 3402 	strd	r3, r4, [r4, #8]
 100d4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100d4aa:	f000 baab 	b.w	100da04 <nrf_802154_timer_sched_add>
 100d4ae:	bf00      	nop
 100d4b0:	0100ffa7 	.word	0x0100ffa7

0100d4b4 <nrf_802154_rsch_init>:
 100d4b4:	b508      	push	{r3, lr}
 100d4b6:	f7f6 fc6b 	bl	1003d90 <nrf_raal_init>
 100d4ba:	2300      	movs	r3, #0
 100d4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100d4c0:	4a11      	ldr	r2, [pc, #68]	; (100d508 <nrf_802154_rsch_init+0x54>)
 100d4c2:	4912      	ldr	r1, [pc, #72]	; (100d50c <nrf_802154_rsch_init+0x58>)
 100d4c4:	7013      	strb	r3, [r2, #0]
 100d4c6:	4a12      	ldr	r2, [pc, #72]	; (100d510 <nrf_802154_rsch_init+0x5c>)
 100d4c8:	7013      	strb	r3, [r2, #0]
 100d4ca:	4a12      	ldr	r2, [pc, #72]	; (100d514 <nrf_802154_rsch_init+0x60>)
 100d4cc:	7013      	strb	r3, [r2, #0]
 100d4ce:	4a12      	ldr	r2, [pc, #72]	; (100d518 <nrf_802154_rsch_init+0x64>)
 100d4d0:	7013      	strb	r3, [r2, #0]
 100d4d2:	4a12      	ldr	r2, [pc, #72]	; (100d51c <nrf_802154_rsch_init+0x68>)
 100d4d4:	7013      	strb	r3, [r2, #0]
 100d4d6:	4a12      	ldr	r2, [pc, #72]	; (100d520 <nrf_802154_rsch_init+0x6c>)
 100d4d8:	7013      	strb	r3, [r2, #0]
 100d4da:	7053      	strb	r3, [r2, #1]
 100d4dc:	7093      	strb	r3, [r2, #2]
 100d4de:	4a11      	ldr	r2, [pc, #68]	; (100d524 <nrf_802154_rsch_init+0x70>)
 100d4e0:	7713      	strb	r3, [r2, #28]
 100d4e2:	6250      	str	r0, [r2, #36]	; 0x24
 100d4e4:	600a      	str	r2, [r1, #0]
 100d4e6:	4a10      	ldr	r2, [pc, #64]	; (100d528 <nrf_802154_rsch_init+0x74>)
 100d4e8:	7713      	strb	r3, [r2, #28]
 100d4ea:	6250      	str	r0, [r2, #36]	; 0x24
 100d4ec:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
 100d4f0:	64d0      	str	r0, [r2, #76]	; 0x4c
 100d4f2:	604a      	str	r2, [r1, #4]
 100d4f4:	3228      	adds	r2, #40	; 0x28
 100d4f6:	608a      	str	r2, [r1, #8]
 100d4f8:	4a0c      	ldr	r2, [pc, #48]	; (100d52c <nrf_802154_rsch_init+0x78>)
 100d4fa:	7713      	strb	r3, [r2, #28]
 100d4fc:	6250      	str	r0, [r2, #36]	; 0x24
 100d4fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100d502:	60ca      	str	r2, [r1, #12]
 100d504:	f000 bb00 	b.w	100db08 <nrf_802154_wifi_coex_init>
 100d508:	210047d6 	.word	0x210047d6
 100d50c:	21003e5c 	.word	0x21003e5c
 100d510:	210047d8 	.word	0x210047d8
 100d514:	210047d5 	.word	0x210047d5
 100d518:	210047d4 	.word	0x210047d4
 100d51c:	210047da 	.word	0x210047da
 100d520:	210047d1 	.word	0x210047d1
 100d524:	21003e34 	.word	0x21003e34
 100d528:	21003de4 	.word	0x21003de4
 100d52c:	21003dbc 	.word	0x21003dbc

0100d530 <nrf_802154_rsch_continuous_ended>:
 100d530:	2200      	movs	r2, #0
 100d532:	4b04      	ldr	r3, [pc, #16]	; (100d544 <nrf_802154_rsch_continuous_ended+0x14>)
 100d534:	701a      	strb	r2, [r3, #0]
 100d536:	4b04      	ldr	r3, [pc, #16]	; (100d548 <nrf_802154_rsch_continuous_ended+0x18>)
 100d538:	7819      	ldrb	r1, [r3, #0]
 100d53a:	b111      	cbz	r1, 100d542 <nrf_802154_rsch_continuous_ended+0x12>
 100d53c:	701a      	strb	r2, [r3, #0]
 100d53e:	f7f6 bc83 	b.w	1003e48 <nrf_raal_continuous_ended>
 100d542:	4770      	bx	lr
 100d544:	210047dc 	.word	0x210047dc
 100d548:	210047db 	.word	0x210047db

0100d54c <notify_core>:
 100d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100d54e:	4f27      	ldr	r7, [pc, #156]	; (100d5ec <notify_core+0xa0>)
 100d550:	4d27      	ldr	r5, [pc, #156]	; (100d5f0 <notify_core+0xa4>)
 100d552:	463e      	mov	r6, r7
 100d554:	2301      	movs	r3, #1
 100d556:	e8d7 2f4f 	ldrexb	r2, [r7]
 100d55a:	f012 0fff 	tst.w	r2, #255	; 0xff
 100d55e:	d007      	beq.n	100d570 <notify_core+0x24>
 100d560:	f3bf 8f2f 	clrex
 100d564:	4a22      	ldr	r2, [pc, #136]	; (100d5f0 <notify_core+0xa4>)
 100d566:	7813      	ldrb	r3, [r2, #0]
 100d568:	3301      	adds	r3, #1
 100d56a:	b2db      	uxtb	r3, r3
 100d56c:	7013      	strb	r3, [r2, #0]
 100d56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100d570:	e8c7 3f42 	strexb	r2, r3, [r7]
 100d574:	2a00      	cmp	r2, #0
 100d576:	d1ee      	bne.n	100d556 <notify_core+0xa>
 100d578:	f3bf 8f5f 	dmb	sy
 100d57c:	4b1d      	ldr	r3, [pc, #116]	; (100d5f4 <notify_core+0xa8>)
 100d57e:	782c      	ldrb	r4, [r5, #0]
 100d580:	781a      	ldrb	r2, [r3, #0]
 100d582:	b2e4      	uxtb	r4, r4
 100d584:	2a03      	cmp	r2, #3
 100d586:	bf8c      	ite	hi
 100d588:	2004      	movhi	r0, #4
 100d58a:	7818      	ldrbls	r0, [r3, #0]
 100d58c:	785a      	ldrb	r2, [r3, #1]
 100d58e:	bf98      	it	ls
 100d590:	b2c0      	uxtbls	r0, r0
 100d592:	4290      	cmp	r0, r2
 100d594:	bf88      	it	hi
 100d596:	7858      	ldrbhi	r0, [r3, #1]
 100d598:	789a      	ldrb	r2, [r3, #2]
 100d59a:	bf88      	it	hi
 100d59c:	b2c0      	uxtbhi	r0, r0
 100d59e:	4282      	cmp	r2, r0
 100d5a0:	bf38      	it	cc
 100d5a2:	7898      	ldrbcc	r0, [r3, #2]
 100d5a4:	4b14      	ldr	r3, [pc, #80]	; (100d5f8 <notify_core+0xac>)
 100d5a6:	bf38      	it	cc
 100d5a8:	b2c0      	uxtbcc	r0, r0
 100d5aa:	781a      	ldrb	r2, [r3, #0]
 100d5ac:	4282      	cmp	r2, r0
 100d5ae:	d00f      	beq.n	100d5d0 <notify_core+0x84>
 100d5b0:	7018      	strb	r0, [r3, #0]
 100d5b2:	fab0 f380 	clz	r3, r0
 100d5b6:	4a11      	ldr	r2, [pc, #68]	; (100d5fc <notify_core+0xb0>)
 100d5b8:	095b      	lsrs	r3, r3, #5
 100d5ba:	7013      	strb	r3, [r2, #0]
 100d5bc:	f000 f904 	bl	100d7c8 <nrf_802154_rsch_continuous_prio_changed>
 100d5c0:	f3bf 8f5f 	dmb	sy
 100d5c4:	2300      	movs	r3, #0
 100d5c6:	7033      	strb	r3, [r6, #0]
 100d5c8:	782b      	ldrb	r3, [r5, #0]
 100d5ca:	42a3      	cmp	r3, r4
 100d5cc:	d1c2      	bne.n	100d554 <notify_core+0x8>
 100d5ce:	e7ce      	b.n	100d56e <notify_core+0x22>
 100d5d0:	781b      	ldrb	r3, [r3, #0]
 100d5d2:	2b00      	cmp	r3, #0
 100d5d4:	d1f4      	bne.n	100d5c0 <notify_core+0x74>
 100d5d6:	4b09      	ldr	r3, [pc, #36]	; (100d5fc <notify_core+0xb0>)
 100d5d8:	781b      	ldrb	r3, [r3, #0]
 100d5da:	2b00      	cmp	r3, #0
 100d5dc:	d1f0      	bne.n	100d5c0 <notify_core+0x74>
 100d5de:	4b08      	ldr	r3, [pc, #32]	; (100d600 <notify_core+0xb4>)
 100d5e0:	781b      	ldrb	r3, [r3, #0]
 100d5e2:	2b00      	cmp	r3, #0
 100d5e4:	d0ec      	beq.n	100d5c0 <notify_core+0x74>
 100d5e6:	f7ff ffa3 	bl	100d530 <nrf_802154_rsch_continuous_ended>
 100d5ea:	e7e9      	b.n	100d5c0 <notify_core+0x74>
 100d5ec:	210047d6 	.word	0x210047d6
 100d5f0:	210047d7 	.word	0x210047d7
 100d5f4:	210047d1 	.word	0x210047d1
 100d5f8:	210047d5 	.word	0x210047d5
 100d5fc:	210047dc 	.word	0x210047dc
 100d600:	210047db 	.word	0x210047db

0100d604 <nrf_802154_rsch_continuous_mode_priority_set>:
 100d604:	b508      	push	{r3, lr}
 100d606:	4b05      	ldr	r3, [pc, #20]	; (100d61c <nrf_802154_rsch_continuous_mode_priority_set+0x18>)
 100d608:	7018      	strb	r0, [r3, #0]
 100d60a:	f3bf 8f5f 	dmb	sy
 100d60e:	f7ff feb9 	bl	100d384 <all_prec_update>
 100d612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100d616:	f7ff bf99 	b.w	100d54c <notify_core>
 100d61a:	bf00      	nop
 100d61c:	210047d4 	.word	0x210047d4

0100d620 <nrf_802154_rsch_delayed_timeslot_request>:
 100d620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100d624:	7a43      	ldrb	r3, [r0, #9]
 100d626:	4605      	mov	r5, r0
 100d628:	2b01      	cmp	r3, #1
 100d62a:	6902      	ldr	r2, [r0, #16]
 100d62c:	d034      	beq.n	100d698 <nrf_802154_rsch_delayed_timeslot_request+0x78>
 100d62e:	2b02      	cmp	r3, #2
 100d630:	d035      	beq.n	100d69e <nrf_802154_rsch_delayed_timeslot_request+0x7e>
 100d632:	2b00      	cmp	r3, #0
 100d634:	d173      	bne.n	100d71e <nrf_802154_rsch_delayed_timeslot_request+0xfe>
 100d636:	2101      	movs	r1, #1
 100d638:	483b      	ldr	r0, [pc, #236]	; (100d728 <nrf_802154_rsch_delayed_timeslot_request+0x108>)
 100d63a:	f002 fc8e 	bl	100ff5a <dly_ts_from_pool_alloc>
 100d63e:	4604      	mov	r4, r0
 100d640:	2800      	cmp	r0, #0
 100d642:	d06e      	beq.n	100d722 <nrf_802154_rsch_delayed_timeslot_request+0x102>
 100d644:	f895 800a 	ldrb.w	r8, [r5, #10]
 100d648:	f1b8 0f00 	cmp.w	r8, #0
 100d64c:	d049      	beq.n	100d6e2 <nrf_802154_rsch_delayed_timeslot_request+0xc2>
 100d64e:	f1b8 0f01 	cmp.w	r8, #1
 100d652:	d15c      	bne.n	100d70e <nrf_802154_rsch_delayed_timeslot_request+0xee>
 100d654:	f002 fd07 	bl	1010066 <nrf_802154_timer_sched_time_get>
 100d658:	686b      	ldr	r3, [r5, #4]
 100d65a:	6829      	ldr	r1, [r5, #0]
 100d65c:	f5a3 79f0 	sub.w	r9, r3, #480	; 0x1e0
 100d660:	464a      	mov	r2, r9
 100d662:	4607      	mov	r7, r0
 100d664:	f002 fd03 	bl	101006e <nrf_802154_timer_sched_time_is_in_future>
 100d668:	4606      	mov	r6, r0
 100d66a:	b1d8      	cbz	r0, 100d6a4 <nrf_802154_rsch_delayed_timeslot_request+0x84>
 100d66c:	46ac      	mov	ip, r5
 100d66e:	f104 0714 	add.w	r7, r4, #20
 100d672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 100d676:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 100d678:	2100      	movs	r1, #0
 100d67a:	f8dc 3000 	ldr.w	r3, [ip]
 100d67e:	603b      	str	r3, [r7, #0]
 100d680:	682b      	ldr	r3, [r5, #0]
 100d682:	e9c4 3900 	strd	r3, r9, [r4]
 100d686:	4b29      	ldr	r3, [pc, #164]	; (100d72c <nrf_802154_rsch_delayed_timeslot_request+0x10c>)
 100d688:	e9c4 3402 	strd	r3, r4, [r4, #8]
 100d68c:	4620      	mov	r0, r4
 100d68e:	f000 f9b9 	bl	100da04 <nrf_802154_timer_sched_add>
 100d692:	4630      	mov	r0, r6
 100d694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100d698:	2102      	movs	r1, #2
 100d69a:	4825      	ldr	r0, [pc, #148]	; (100d730 <nrf_802154_rsch_delayed_timeslot_request+0x110>)
 100d69c:	e7cd      	b.n	100d63a <nrf_802154_rsch_delayed_timeslot_request+0x1a>
 100d69e:	2101      	movs	r1, #1
 100d6a0:	4824      	ldr	r0, [pc, #144]	; (100d734 <nrf_802154_rsch_delayed_timeslot_request+0x114>)
 100d6a2:	e7ca      	b.n	100d63a <nrf_802154_rsch_delayed_timeslot_request+0x1a>
 100d6a4:	4b24      	ldr	r3, [pc, #144]	; (100d738 <nrf_802154_rsch_delayed_timeslot_request+0x118>)
 100d6a6:	781b      	ldrb	r3, [r3, #0]
 100d6a8:	2b00      	cmp	r3, #0
 100d6aa:	d030      	beq.n	100d70e <nrf_802154_rsch_delayed_timeslot_request+0xee>
 100d6ac:	e9d5 1200 	ldrd	r1, r2, [r5]
 100d6b0:	4638      	mov	r0, r7
 100d6b2:	f002 fcdc 	bl	101006e <nrf_802154_timer_sched_time_is_in_future>
 100d6b6:	4606      	mov	r6, r0
 100d6b8:	b348      	cbz	r0, 100d70e <nrf_802154_rsch_delayed_timeslot_request+0xee>
 100d6ba:	46ac      	mov	ip, r5
 100d6bc:	f104 0714 	add.w	r7, r4, #20
 100d6c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 100d6c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 100d6c6:	f8dc 3000 	ldr.w	r3, [ip]
 100d6ca:	603b      	str	r3, [r7, #0]
 100d6cc:	682b      	ldr	r3, [r5, #0]
 100d6ce:	6023      	str	r3, [r4, #0]
 100d6d0:	686b      	ldr	r3, [r5, #4]
 100d6d2:	6063      	str	r3, [r4, #4]
 100d6d4:	4b19      	ldr	r3, [pc, #100]	; (100d73c <nrf_802154_rsch_delayed_timeslot_request+0x11c>)
 100d6d6:	e9c4 3402 	strd	r3, r4, [r4, #8]
 100d6da:	f7ff fe53 	bl	100d384 <all_prec_update>
 100d6de:	4641      	mov	r1, r8
 100d6e0:	e7d4      	b.n	100d68c <nrf_802154_rsch_delayed_timeslot_request+0x6c>
 100d6e2:	462f      	mov	r7, r5
 100d6e4:	f100 0614 	add.w	r6, r0, #20
 100d6e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 100d6ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 100d6ec:	683b      	ldr	r3, [r7, #0]
 100d6ee:	6033      	str	r3, [r6, #0]
 100d6f0:	682b      	ldr	r3, [r5, #0]
 100d6f2:	2601      	movs	r6, #1
 100d6f4:	6023      	str	r3, [r4, #0]
 100d6f6:	686b      	ldr	r3, [r5, #4]
 100d6f8:	6063      	str	r3, [r4, #4]
 100d6fa:	4b10      	ldr	r3, [pc, #64]	; (100d73c <nrf_802154_rsch_delayed_timeslot_request+0x11c>)
 100d6fc:	e9c4 3402 	strd	r3, r4, [r4, #8]
 100d700:	f7ff fe40 	bl	100d384 <all_prec_update>
 100d704:	4641      	mov	r1, r8
 100d706:	4620      	mov	r0, r4
 100d708:	f000 f97c 	bl	100da04 <nrf_802154_timer_sched_add>
 100d70c:	e7c1      	b.n	100d692 <nrf_802154_rsch_delayed_timeslot_request+0x72>
 100d70e:	2600      	movs	r6, #0
 100d710:	7726      	strb	r6, [r4, #28]
 100d712:	f3bf 8f5f 	dmb	sy
 100d716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100d71a:	6263      	str	r3, [r4, #36]	; 0x24
 100d71c:	e7b9      	b.n	100d692 <nrf_802154_rsch_delayed_timeslot_request+0x72>
 100d71e:	2600      	movs	r6, #0
 100d720:	e7b7      	b.n	100d692 <nrf_802154_rsch_delayed_timeslot_request+0x72>
 100d722:	4606      	mov	r6, r0
 100d724:	e7b5      	b.n	100d692 <nrf_802154_rsch_delayed_timeslot_request+0x72>
 100d726:	bf00      	nop
 100d728:	21003e34 	.word	0x21003e34
 100d72c:	0100d48d 	.word	0x0100d48d
 100d730:	21003de4 	.word	0x21003de4
 100d734:	21003dbc 	.word	0x21003dbc
 100d738:	210047da 	.word	0x210047da
 100d73c:	0100ffa7 	.word	0x0100ffa7

0100d740 <nrf_802154_rsch_prec_is_approved>:
 100d740:	4b03      	ldr	r3, [pc, #12]	; (100d750 <nrf_802154_rsch_prec_is_approved+0x10>)
 100d742:	5c18      	ldrb	r0, [r3, r0]
 100d744:	4288      	cmp	r0, r1
 100d746:	bf34      	ite	cc
 100d748:	2000      	movcc	r0, #0
 100d74a:	2001      	movcs	r0, #1
 100d74c:	4770      	bx	lr
 100d74e:	bf00      	nop
 100d750:	210047d1 	.word	0x210047d1

0100d754 <nrf_raal_timeslot_started>:
 100d754:	2204      	movs	r2, #4
 100d756:	4b02      	ldr	r3, [pc, #8]	; (100d760 <nrf_raal_timeslot_started+0xc>)
 100d758:	705a      	strb	r2, [r3, #1]
 100d75a:	f7ff bef7 	b.w	100d54c <notify_core>
 100d75e:	bf00      	nop
 100d760:	210047d1 	.word	0x210047d1

0100d764 <nrf_raal_timeslot_ended>:
 100d764:	2201      	movs	r2, #1
 100d766:	4b03      	ldr	r3, [pc, #12]	; (100d774 <nrf_raal_timeslot_ended+0x10>)
 100d768:	701a      	strb	r2, [r3, #0]
 100d76a:	2200      	movs	r2, #0
 100d76c:	4b02      	ldr	r3, [pc, #8]	; (100d778 <nrf_raal_timeslot_ended+0x14>)
 100d76e:	705a      	strb	r2, [r3, #1]
 100d770:	f7ff beec 	b.w	100d54c <notify_core>
 100d774:	210047db 	.word	0x210047db
 100d778:	210047d1 	.word	0x210047d1

0100d77c <nrf_802154_clock_hfclk_ready>:
 100d77c:	2204      	movs	r2, #4
 100d77e:	4b02      	ldr	r3, [pc, #8]	; (100d788 <nrf_802154_clock_hfclk_ready+0xc>)
 100d780:	701a      	strb	r2, [r3, #0]
 100d782:	f7ff bee3 	b.w	100d54c <notify_core>
 100d786:	bf00      	nop
 100d788:	210047d1 	.word	0x210047d1

0100d78c <nrf_802154_wifi_coex_granted>:
 100d78c:	2204      	movs	r2, #4
 100d78e:	4b02      	ldr	r3, [pc, #8]	; (100d798 <nrf_802154_wifi_coex_granted+0xc>)
 100d790:	709a      	strb	r2, [r3, #2]
 100d792:	f7ff bedb 	b.w	100d54c <notify_core>
 100d796:	bf00      	nop
 100d798:	210047d1 	.word	0x210047d1

0100d79c <nrf_802154_wifi_coex_denied>:
 100d79c:	2202      	movs	r2, #2
 100d79e:	4b02      	ldr	r3, [pc, #8]	; (100d7a8 <nrf_802154_wifi_coex_denied+0xc>)
 100d7a0:	709a      	strb	r2, [r3, #2]
 100d7a2:	f7ff bed3 	b.w	100d54c <notify_core>
 100d7a6:	bf00      	nop
 100d7a8:	210047d1 	.word	0x210047d1

0100d7ac <nrf_802154_rsch_crit_sect_init>:
 100d7ac:	21ff      	movs	r1, #255	; 0xff
 100d7ae:	4602      	mov	r2, r0
 100d7b0:	4b03      	ldr	r3, [pc, #12]	; (100d7c0 <nrf_802154_rsch_crit_sect_init+0x14>)
 100d7b2:	7019      	strb	r1, [r3, #0]
 100d7b4:	6800      	ldr	r0, [r0, #0]
 100d7b6:	4b03      	ldr	r3, [pc, #12]	; (100d7c4 <nrf_802154_rsch_crit_sect_init+0x18>)
 100d7b8:	6851      	ldr	r1, [r2, #4]
 100d7ba:	c303      	stmia	r3!, {r0, r1}
 100d7bc:	4770      	bx	lr
 100d7be:	bf00      	nop
 100d7c0:	210047dd 	.word	0x210047dd
 100d7c4:	21003e6c 	.word	0x21003e6c

0100d7c8 <nrf_802154_rsch_continuous_prio_changed>:
 100d7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100d7ca:	4d10      	ldr	r5, [pc, #64]	; (100d80c <nrf_802154_rsch_continuous_prio_changed+0x44>)
 100d7cc:	4604      	mov	r4, r0
 100d7ce:	682b      	ldr	r3, [r5, #0]
 100d7d0:	4798      	blx	r3
 100d7d2:	4b0f      	ldr	r3, [pc, #60]	; (100d810 <nrf_802154_rsch_continuous_prio_changed+0x48>)
 100d7d4:	b150      	cbz	r0, 100d7ec <nrf_802154_rsch_continuous_prio_changed+0x24>
 100d7d6:	781a      	ldrb	r2, [r3, #0]
 100d7d8:	2aff      	cmp	r2, #255	; 0xff
 100d7da:	d107      	bne.n	100d7ec <nrf_802154_rsch_continuous_prio_changed+0x24>
 100d7dc:	4620      	mov	r0, r4
 100d7de:	f7f9 fea9 	bl	1007534 <nrf_802154_rsch_crit_sect_prio_changed>
 100d7e2:	686b      	ldr	r3, [r5, #4]
 100d7e4:	b003      	add	sp, #12
 100d7e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 100d7ea:	4718      	bx	r3
 100d7ec:	e8d3 2f4f 	ldrexb	r2, [r3]
 100d7f0:	b2d2      	uxtb	r2, r2
 100d7f2:	f88d 2007 	strb.w	r2, [sp, #7]
 100d7f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 100d7fa:	e8c3 4f42 	strexb	r2, r4, [r3]
 100d7fe:	2a00      	cmp	r2, #0
 100d800:	d1f4      	bne.n	100d7ec <nrf_802154_rsch_continuous_prio_changed+0x24>
 100d802:	2800      	cmp	r0, #0
 100d804:	d1ed      	bne.n	100d7e2 <nrf_802154_rsch_continuous_prio_changed+0x1a>
 100d806:	b003      	add	sp, #12
 100d808:	bd30      	pop	{r4, r5, pc}
 100d80a:	bf00      	nop
 100d80c:	21003e6c 	.word	0x21003e6c
 100d810:	210047dd 	.word	0x210047dd

0100d814 <nrf_802154_critical_section_rsch_exit>:
 100d814:	23ff      	movs	r3, #255	; 0xff
 100d816:	4a06      	ldr	r2, [pc, #24]	; (100d830 <nrf_802154_critical_section_rsch_exit+0x1c>)
 100d818:	e8d2 0f4f 	ldrexb	r0, [r2]
 100d81c:	e8c2 3f41 	strexb	r1, r3, [r2]
 100d820:	2900      	cmp	r1, #0
 100d822:	d1f9      	bne.n	100d818 <nrf_802154_critical_section_rsch_exit+0x4>
 100d824:	b2c0      	uxtb	r0, r0
 100d826:	28ff      	cmp	r0, #255	; 0xff
 100d828:	d001      	beq.n	100d82e <nrf_802154_critical_section_rsch_exit+0x1a>
 100d82a:	f7f9 be83 	b.w	1007534 <nrf_802154_rsch_crit_sect_prio_changed>
 100d82e:	4770      	bx	lr
 100d830:	210047dd 	.word	0x210047dd

0100d834 <nrf_802154_critical_section_rsch_event_is_pending>:
 100d834:	4b02      	ldr	r3, [pc, #8]	; (100d840 <nrf_802154_critical_section_rsch_event_is_pending+0xc>)
 100d836:	7818      	ldrb	r0, [r3, #0]
 100d838:	38ff      	subs	r0, #255	; 0xff
 100d83a:	bf18      	it	ne
 100d83c:	2001      	movne	r0, #1
 100d83e:	4770      	bx	lr
 100d840:	210047dd 	.word	0x210047dd

0100d844 <NRF_802154_SL_US_TO_RTC_TICKS>:
 100d844:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 100d848:	f643 5709 	movw	r7, #15625	; 0x3d09
 100d84c:	4b18      	ldr	r3, [pc, #96]	; (100d8b0 <NRF_802154_SL_US_TO_RTC_TICKS+0x6c>)
 100d84e:	0b44      	lsrs	r4, r0, #13
 100d850:	ea44 44c1 	orr.w	r4, r4, r1, lsl #19
 100d854:	fba4 4503 	umull	r4, r5, r4, r3
 100d858:	0b4a      	lsrs	r2, r1, #13
 100d85a:	fb03 5502 	mla	r5, r3, r2, r5
 100d85e:	0f22      	lsrs	r2, r4, #28
 100d860:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 100d864:	fba2 bc07 	umull	fp, ip, r2, r7
 100d868:	0f2c      	lsrs	r4, r5, #28
 100d86a:	fb07 cc04 	mla	ip, r7, r4, ip
 100d86e:	0265      	lsls	r5, r4, #9
 100d870:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 100d874:	0256      	lsls	r6, r2, #9
 100d876:	ebb0 020b 	subs.w	r2, r0, fp
 100d87a:	eb61 040c 	sbc.w	r4, r1, ip
 100d87e:	f240 4131 	movw	r1, #1073	; 0x431
 100d882:	4351      	muls	r1, r2
 100d884:	480b      	ldr	r0, [pc, #44]	; (100d8b4 <NRF_802154_SL_US_TO_RTC_TICKS+0x70>)
 100d886:	fb00 1404 	mla	r4, r0, r4, r1
 100d88a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 100d88e:	fba2 bc00 	umull	fp, ip, r2, r0
 100d892:	f647 72ff 	movw	r2, #32767	; 0x7fff
 100d896:	eb1b 0101 	adds.w	r1, fp, r1
 100d89a:	f04f 0100 	mov.w	r1, #0
 100d89e:	44a4      	add	ip, r4
 100d8a0:	eb4c 0202 	adc.w	r2, ip, r2
 100d8a4:	0bd0      	lsrs	r0, r2, #15
 100d8a6:	1980      	adds	r0, r0, r6
 100d8a8:	eb45 0101 	adc.w	r1, r5, r1
 100d8ac:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 100d8b0:	08637bd0 	.word	0x08637bd0
 100d8b4:	bde82d7b 	.word	0xbde82d7b

0100d8b8 <queue_cntr_bump>:
 100d8b8:	4a09      	ldr	r2, [pc, #36]	; (100d8e0 <queue_cntr_bump+0x28>)
 100d8ba:	b082      	sub	sp, #8
 100d8bc:	e8d2 3f4f 	ldrexb	r3, [r2]
 100d8c0:	b2db      	uxtb	r3, r3
 100d8c2:	f88d 3007 	strb.w	r3, [sp, #7]
 100d8c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100d8ca:	3301      	adds	r3, #1
 100d8cc:	b2db      	uxtb	r3, r3
 100d8ce:	e8c2 3f41 	strexb	r1, r3, [r2]
 100d8d2:	2900      	cmp	r1, #0
 100d8d4:	d1f2      	bne.n	100d8bc <queue_cntr_bump+0x4>
 100d8d6:	f3bf 8f5f 	dmb	sy
 100d8da:	b002      	add	sp, #8
 100d8dc:	4770      	bx	lr
 100d8de:	bf00      	nop
 100d8e0:	210047df 	.word	0x210047df

0100d8e4 <timer_remove>:
 100d8e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 100d8e8:	460f      	mov	r7, r1
 100d8ea:	4927      	ldr	r1, [pc, #156]	; (100d988 <timer_remove+0xa4>)
 100d8ec:	f04f 0e00 	mov.w	lr, #0
 100d8f0:	4689      	mov	r9, r1
 100d8f2:	f8df c098 	ldr.w	ip, [pc, #152]	; 100d98c <timer_remove+0xa8>
 100d8f6:	4663      	mov	r3, ip
 100d8f8:	780a      	ldrb	r2, [r1, #0]
 100d8fa:	f8cd e004 	str.w	lr, [sp, #4]
 100d8fe:	b2d2      	uxtb	r2, r2
 100d900:	e853 4f00 	ldrex	r4, [r3]
 100d904:	b124      	cbz	r4, 100d910 <timer_remove+0x2c>
 100d906:	4284      	cmp	r4, r0
 100d908:	d01f      	beq.n	100d94a <timer_remove+0x66>
 100d90a:	f104 0310 	add.w	r3, r4, #16
 100d90e:	e7f7      	b.n	100d900 <timer_remove+0x1c>
 100d910:	46a0      	mov	r8, r4
 100d912:	f899 5000 	ldrb.w	r5, [r9]
 100d916:	4295      	cmp	r5, r2
 100d918:	d1ed      	bne.n	100d8f6 <timer_remove+0x12>
 100d91a:	4540      	cmp	r0, r8
 100d91c:	d117      	bne.n	100d94e <timer_remove+0x6a>
 100d91e:	6902      	ldr	r2, [r0, #16]
 100d920:	9201      	str	r2, [sp, #4]
 100d922:	f8dc 2000 	ldr.w	r2, [ip]
 100d926:	4282      	cmp	r2, r0
 100d928:	d12a      	bne.n	100d980 <timer_remove+0x9c>
 100d92a:	9a01      	ldr	r2, [sp, #4]
 100d92c:	2a00      	cmp	r2, #0
 100d92e:	bf15      	itete	ne
 100d930:	2500      	movne	r5, #0
 100d932:	2501      	moveq	r5, #1
 100d934:	2601      	movne	r6, #1
 100d936:	2600      	moveq	r6, #0
 100d938:	9a01      	ldr	r2, [sp, #4]
 100d93a:	e843 2a00 	strex	sl, r2, [r3]
 100d93e:	f1ba 0f00 	cmp.w	sl, #0
 100d942:	d1d8      	bne.n	100d8f6 <timer_remove+0x12>
 100d944:	f7ff ffb8 	bl	100d8b8 <queue_cntr_bump>
 100d948:	e005      	b.n	100d956 <timer_remove+0x72>
 100d94a:	4680      	mov	r8, r0
 100d94c:	e7e1      	b.n	100d912 <timer_remove+0x2e>
 100d94e:	f3bf 8f2f 	clrex
 100d952:	2500      	movs	r5, #0
 100d954:	462e      	mov	r6, r5
 100d956:	b154      	cbz	r4, 100d96e <timer_remove+0x8a>
 100d958:	f108 0310 	add.w	r3, r8, #16
 100d95c:	e853 3f00 	ldrex	r3, [r3]
 100d960:	f108 0110 	add.w	r1, r8, #16
 100d964:	e841 3200 	strex	r2, r3, [r1]
 100d968:	2a00      	cmp	r2, #0
 100d96a:	d1f5      	bne.n	100d958 <timer_remove+0x74>
 100d96c:	2401      	movs	r4, #1
 100d96e:	b107      	cbz	r7, 100d972 <timer_remove+0x8e>
 100d970:	703c      	strb	r4, [r7, #0]
 100d972:	2e00      	cmp	r6, #0
 100d974:	bf14      	ite	ne
 100d976:	4630      	movne	r0, r6
 100d978:	4628      	moveq	r0, r5
 100d97a:	b002      	add	sp, #8
 100d97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100d980:	2500      	movs	r5, #0
 100d982:	462e      	mov	r6, r5
 100d984:	e7d8      	b.n	100d938 <timer_remove+0x54>
 100d986:	bf00      	nop
 100d988:	210047df 	.word	0x210047df
 100d98c:	21003e74 	.word	0x21003e74

0100d990 <handle_timer>:
 100d990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100d994:	4e0f      	ldr	r6, [pc, #60]	; (100d9d4 <handle_timer+0x44>)
 100d996:	4f10      	ldr	r7, [pc, #64]	; (100d9d8 <handle_timer+0x48>)
 100d998:	46b0      	mov	r8, r6
 100d99a:	7835      	ldrb	r5, [r6, #0]
 100d99c:	480f      	ldr	r0, [pc, #60]	; (100d9dc <handle_timer+0x4c>)
 100d99e:	683c      	ldr	r4, [r7, #0]
 100d9a0:	b2ed      	uxtb	r5, r5
 100d9a2:	f002 fb49 	bl	1010038 <mutex_trylock>
 100d9a6:	b138      	cbz	r0, 100d9b8 <handle_timer+0x28>
 100d9a8:	b964      	cbnz	r4, 100d9c4 <handle_timer+0x34>
 100d9aa:	f7f9 fa73 	bl	1006e94 <nrf_802154_lp_timer_stop>
 100d9ae:	f3bf 8f5f 	dmb	sy
 100d9b2:	2200      	movs	r2, #0
 100d9b4:	4b09      	ldr	r3, [pc, #36]	; (100d9dc <handle_timer+0x4c>)
 100d9b6:	701a      	strb	r2, [r3, #0]
 100d9b8:	f898 3000 	ldrb.w	r3, [r8]
 100d9bc:	42ab      	cmp	r3, r5
 100d9be:	d1ec      	bne.n	100d99a <handle_timer+0xa>
 100d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100d9c4:	683b      	ldr	r3, [r7, #0]
 100d9c6:	6820      	ldr	r0, [r4, #0]
 100d9c8:	42a3      	cmp	r3, r4
 100d9ca:	6861      	ldr	r1, [r4, #4]
 100d9cc:	d1ef      	bne.n	100d9ae <handle_timer+0x1e>
 100d9ce:	f7f9 fa3d 	bl	1006e4c <nrf_802154_lp_timer_start>
 100d9d2:	e7ec      	b.n	100d9ae <handle_timer+0x1e>
 100d9d4:	210047df 	.word	0x210047df
 100d9d8:	21003e74 	.word	0x21003e74
 100d9dc:	210047e0 	.word	0x210047e0

0100d9e0 <nrf_802154_timer_sched_init>:
 100d9e0:	2300      	movs	r3, #0
 100d9e2:	4a04      	ldr	r2, [pc, #16]	; (100d9f4 <nrf_802154_timer_sched_init+0x14>)
 100d9e4:	6013      	str	r3, [r2, #0]
 100d9e6:	4a04      	ldr	r2, [pc, #16]	; (100d9f8 <nrf_802154_timer_sched_init+0x18>)
 100d9e8:	7013      	strb	r3, [r2, #0]
 100d9ea:	4a04      	ldr	r2, [pc, #16]	; (100d9fc <nrf_802154_timer_sched_init+0x1c>)
 100d9ec:	7013      	strb	r3, [r2, #0]
 100d9ee:	4a04      	ldr	r2, [pc, #16]	; (100da00 <nrf_802154_timer_sched_init+0x20>)
 100d9f0:	7013      	strb	r3, [r2, #0]
 100d9f2:	4770      	bx	lr
 100d9f4:	21003e74 	.word	0x21003e74
 100d9f8:	210047e0 	.word	0x210047e0
 100d9fc:	210047de 	.word	0x210047de
 100da00:	210047df 	.word	0x210047df

0100da04 <nrf_802154_timer_sched_add>:
 100da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100da06:	4604      	mov	r4, r0
 100da08:	b129      	cbz	r1, 100da16 <nrf_802154_timer_sched_add+0x12>
 100da0a:	f000 fee7 	bl	100e7dc <nrf_802154_lp_timer_granularity_get>
 100da0e:	6863      	ldr	r3, [r4, #4]
 100da10:	3b01      	subs	r3, #1
 100da12:	4403      	add	r3, r0
 100da14:	6063      	str	r3, [r4, #4]
 100da16:	2100      	movs	r1, #0
 100da18:	4620      	mov	r0, r4
 100da1a:	f7ff ff63 	bl	100d8e4 <timer_remove>
 100da1e:	b108      	cbz	r0, 100da24 <nrf_802154_timer_sched_add+0x20>
 100da20:	f7ff ffb6 	bl	100d990 <handle_timer>
 100da24:	4e13      	ldr	r6, [pc, #76]	; (100da74 <nrf_802154_timer_sched_add+0x70>)
 100da26:	4d14      	ldr	r5, [pc, #80]	; (100da78 <nrf_802154_timer_sched_add+0x74>)
 100da28:	46b4      	mov	ip, r6
 100da2a:	4629      	mov	r1, r5
 100da2c:	7830      	ldrb	r0, [r6, #0]
 100da2e:	b2c0      	uxtb	r0, r0
 100da30:	e851 2f00 	ldrex	r2, [r1]
 100da34:	b15a      	cbz	r2, 100da4e <nrf_802154_timer_sched_add+0x4a>
 100da36:	e9d4 3700 	ldrd	r3, r7, [r4]
 100da3a:	443b      	add	r3, r7
 100da3c:	6817      	ldr	r7, [r2, #0]
 100da3e:	1bdb      	subs	r3, r3, r7
 100da40:	6857      	ldr	r7, [r2, #4]
 100da42:	1bdb      	subs	r3, r3, r7
 100da44:	2b00      	cmp	r3, #0
 100da46:	db02      	blt.n	100da4e <nrf_802154_timer_sched_add+0x4a>
 100da48:	f102 0110 	add.w	r1, r2, #16
 100da4c:	e7f0      	b.n	100da30 <nrf_802154_timer_sched_add+0x2c>
 100da4e:	f89c 3000 	ldrb.w	r3, [ip]
 100da52:	4283      	cmp	r3, r0
 100da54:	d1e9      	bne.n	100da2a <nrf_802154_timer_sched_add+0x26>
 100da56:	6122      	str	r2, [r4, #16]
 100da58:	e841 4300 	strex	r3, r4, [r1]
 100da5c:	2b00      	cmp	r3, #0
 100da5e:	d1e4      	bne.n	100da2a <nrf_802154_timer_sched_add+0x26>
 100da60:	f7ff ff2a 	bl	100d8b8 <queue_cntr_bump>
 100da64:	682b      	ldr	r3, [r5, #0]
 100da66:	42a3      	cmp	r3, r4
 100da68:	d103      	bne.n	100da72 <nrf_802154_timer_sched_add+0x6e>
 100da6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100da6e:	f7ff bf8f 	b.w	100d990 <handle_timer>
 100da72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100da74:	210047df 	.word	0x210047df
 100da78:	21003e74 	.word	0x21003e74

0100da7c <nrf_802154_timer_sched_is_running>:
 100da7c:	4909      	ldr	r1, [pc, #36]	; (100daa4 <nrf_802154_timer_sched_is_running+0x28>)
 100da7e:	b570      	push	{r4, r5, r6, lr}
 100da80:	4602      	mov	r2, r0
 100da82:	460d      	mov	r5, r1
 100da84:	4b08      	ldr	r3, [pc, #32]	; (100daa8 <nrf_802154_timer_sched_is_running+0x2c>)
 100da86:	681e      	ldr	r6, [r3, #0]
 100da88:	4630      	mov	r0, r6
 100da8a:	780b      	ldrb	r3, [r1, #0]
 100da8c:	b2db      	uxtb	r3, r3
 100da8e:	b918      	cbnz	r0, 100da98 <nrf_802154_timer_sched_is_running+0x1c>
 100da90:	782c      	ldrb	r4, [r5, #0]
 100da92:	429c      	cmp	r4, r3
 100da94:	d1f8      	bne.n	100da88 <nrf_802154_timer_sched_is_running+0xc>
 100da96:	bd70      	pop	{r4, r5, r6, pc}
 100da98:	4290      	cmp	r0, r2
 100da9a:	d001      	beq.n	100daa0 <nrf_802154_timer_sched_is_running+0x24>
 100da9c:	6900      	ldr	r0, [r0, #16]
 100da9e:	e7f6      	b.n	100da8e <nrf_802154_timer_sched_is_running+0x12>
 100daa0:	2001      	movs	r0, #1
 100daa2:	e7f5      	b.n	100da90 <nrf_802154_timer_sched_is_running+0x14>
 100daa4:	210047df 	.word	0x210047df
 100daa8:	21003e74 	.word	0x21003e74

0100daac <nrf_802154_lp_timer_fired>:
 100daac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100daae:	480e      	ldr	r0, [pc, #56]	; (100dae8 <nrf_802154_lp_timer_fired+0x3c>)
 100dab0:	f002 fac2 	bl	1010038 <mutex_trylock>
 100dab4:	b198      	cbz	r0, 100dade <nrf_802154_lp_timer_fired+0x32>
 100dab6:	4b0d      	ldr	r3, [pc, #52]	; (100daec <nrf_802154_lp_timer_fired+0x40>)
 100dab8:	6818      	ldr	r0, [r3, #0]
 100daba:	b158      	cbz	r0, 100dad4 <nrf_802154_lp_timer_fired+0x28>
 100dabc:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 100dac0:	f10d 0107 	add.w	r1, sp, #7
 100dac4:	f7ff ff0e 	bl	100d8e4 <timer_remove>
 100dac8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100dacc:	b113      	cbz	r3, 100dad4 <nrf_802154_lp_timer_fired+0x28>
 100dace:	b10c      	cbz	r4, 100dad4 <nrf_802154_lp_timer_fired+0x28>
 100dad0:	4628      	mov	r0, r5
 100dad2:	47a0      	blx	r4
 100dad4:	f3bf 8f5f 	dmb	sy
 100dad8:	2200      	movs	r2, #0
 100dada:	4b03      	ldr	r3, [pc, #12]	; (100dae8 <nrf_802154_lp_timer_fired+0x3c>)
 100dadc:	701a      	strb	r2, [r3, #0]
 100dade:	f7ff ff57 	bl	100d990 <handle_timer>
 100dae2:	b003      	add	sp, #12
 100dae4:	bd30      	pop	{r4, r5, pc}
 100dae6:	bf00      	nop
 100dae8:	210047de 	.word	0x210047de
 100daec:	21003e74 	.word	0x21003e74

0100daf0 <cb>:
 100daf0:	4603      	mov	r3, r0
 100daf2:	4a04      	ldr	r2, [pc, #16]	; (100db04 <cb+0x14>)
 100daf4:	075b      	lsls	r3, r3, #29
 100daf6:	7810      	ldrb	r0, [r2, #0]
 100daf8:	d501      	bpl.n	100dafe <cb+0xe>
 100dafa:	f7ff be47 	b.w	100d78c <nrf_802154_wifi_coex_granted>
 100dafe:	f7ff be4d 	b.w	100d79c <nrf_802154_wifi_coex_denied>
 100db02:	bf00      	nop
 100db04:	210047e1 	.word	0x210047e1

0100db08 <nrf_802154_wifi_coex_init>:
 100db08:	b508      	push	{r3, lr}
 100db0a:	4802      	ldr	r0, [pc, #8]	; (100db14 <nrf_802154_wifi_coex_init+0xc>)
 100db0c:	f7f6 f876 	bl	1003bfc <mpsl_cx_register_callback>
 100db10:	2000      	movs	r0, #0
 100db12:	bd08      	pop	{r3, pc}
 100db14:	0100daf1 	.word	0x0100daf1

0100db18 <nrf_802154_wifi_coex_prio_request>:
 100db18:	2300      	movs	r3, #0
 100db1a:	b507      	push	{r0, r1, r2, lr}
 100db1c:	2803      	cmp	r0, #3
 100db1e:	f88d 3003 	strb.w	r3, [sp, #3]
 100db22:	4b1a      	ldr	r3, [pc, #104]	; (100db8c <nrf_802154_wifi_coex_prio_request+0x74>)
 100db24:	d805      	bhi.n	100db32 <nrf_802154_wifi_coex_prio_request+0x1a>
 100db26:	2801      	cmp	r0, #1
 100db28:	d828      	bhi.n	100db7c <nrf_802154_wifi_coex_prio_request+0x64>
 100db2a:	d008      	beq.n	100db3e <nrf_802154_wifi_coex_prio_request+0x26>
 100db2c:	2200      	movs	r2, #0
 100db2e:	701a      	strb	r2, [r3, #0]
 100db30:	e008      	b.n	100db44 <nrf_802154_wifi_coex_prio_request+0x2c>
 100db32:	2804      	cmp	r0, #4
 100db34:	d1fa      	bne.n	100db2c <nrf_802154_wifi_coex_prio_request+0x14>
 100db36:	2202      	movs	r2, #2
 100db38:	f88d 0003 	strb.w	r0, [sp, #3]
 100db3c:	e7f7      	b.n	100db2e <nrf_802154_wifi_coex_prio_request+0x16>
 100db3e:	f88d 0003 	strb.w	r0, [sp, #3]
 100db42:	7018      	strb	r0, [r3, #0]
 100db44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 100db48:	b1eb      	cbz	r3, 100db86 <nrf_802154_wifi_coex_prio_request+0x6e>
 100db4a:	f88d 3004 	strb.w	r3, [sp, #4]
 100db4e:	2301      	movs	r3, #1
 100db50:	f88d 3005 	strb.w	r3, [sp, #5]
 100db54:	2300      	movs	r3, #0
 100db56:	a801      	add	r0, sp, #4
 100db58:	f88d 3006 	strb.w	r3, [sp, #6]
 100db5c:	f7f6 f83c 	bl	1003bd8 <mpsl_cx_request>
 100db60:	2300      	movs	r3, #0
 100db62:	f10d 0003 	add.w	r0, sp, #3
 100db66:	f88d 3003 	strb.w	r3, [sp, #3]
 100db6a:	f7f6 f841 	bl	1003bf0 <mpsl_cx_granted_ops_get>
 100db6e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 100db72:	f7ff ffbd 	bl	100daf0 <cb>
 100db76:	b003      	add	sp, #12
 100db78:	f85d fb04 	ldr.w	pc, [sp], #4
 100db7c:	2202      	movs	r2, #2
 100db7e:	f88d 2003 	strb.w	r2, [sp, #3]
 100db82:	2201      	movs	r2, #1
 100db84:	e7d3      	b.n	100db2e <nrf_802154_wifi_coex_prio_request+0x16>
 100db86:	f7f6 f82d 	bl	1003be4 <mpsl_cx_release>
 100db8a:	e7e9      	b.n	100db60 <nrf_802154_wifi_coex_prio_request+0x48>
 100db8c:	210047e1 	.word	0x210047e1

0100db90 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 100db90:	4770      	bx	lr

0100db92 <nrf_802154_serialization_error>:

void nrf_802154_serialization_error(const nrf_802154_ser_err_data_t *err)
{
	(void)err;
	__ASSERT(false, "802.15.4 serialization error");
}
 100db92:	4770      	bx	lr

0100db94 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
 100db94:	4603      	mov	r3, r0
 100db96:	b158      	cbz	r0, 100dbb0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 100db98:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 100db9a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
 100db9e:	2a01      	cmp	r2, #1
 100dba0:	d003      	beq.n	100dbaa <sys_notify_validate+0x16>
 100dba2:	2a03      	cmp	r2, #3
 100dba4:	d104      	bne.n	100dbb0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
 100dba6:	6802      	ldr	r2, [r0, #0]
 100dba8:	b112      	cbz	r2, 100dbb0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
 100dbaa:	2000      	movs	r0, #0
 100dbac:	6098      	str	r0, [r3, #8]
 100dbae:	4770      	bx	lr
		return -EINVAL;
 100dbb0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
 100dbb4:	4770      	bx	lr

0100dbb6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 100dbb6:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 100dbb8:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
 100dbba:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 100dbbe:	2a03      	cmp	r2, #3
 100dbc0:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
 100dbc4:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
 100dbc6:	bf14      	ite	ne
 100dbc8:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 100dbca:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 100dbcc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 100dbce:	4770      	bx	lr

0100dbd0 <arch_printk_char_out>:
}
 100dbd0:	2000      	movs	r0, #0
 100dbd2:	4770      	bx	lr

0100dbd4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 100dbd4:	b40f      	push	{r0, r1, r2, r3}
 100dbd6:	b507      	push	{r0, r1, r2, lr}
 100dbd8:	a904      	add	r1, sp, #16
 100dbda:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 100dbde:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 100dbe0:	f7f6 fde8 	bl	10047b4 <vprintk>
	}
	va_end(ap);
}
 100dbe4:	b003      	add	sp, #12
 100dbe6:	f85d eb04 	ldr.w	lr, [sp], #4
 100dbea:	b004      	add	sp, #16
 100dbec:	4770      	bx	lr

0100dbee <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100dbee:	2200      	movs	r2, #0
 100dbf0:	b510      	push	{r4, lr}
 100dbf2:	4603      	mov	r3, r0
	return list->head;
 100dbf4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100dbf6:	b158      	cbz	r0, 100dc10 <sys_slist_find_and_remove+0x22>
 100dbf8:	4288      	cmp	r0, r1
 100dbfa:	d10f      	bne.n	100dc1c <sys_slist_find_and_remove+0x2e>
	return node->next;
 100dbfc:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 100dbfe:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 100dc00:	b93a      	cbnz	r2, 100dc12 <sys_slist_find_and_remove+0x24>
 100dc02:	42a1      	cmp	r1, r4
	list->head = node;
 100dc04:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 100dc06:	d100      	bne.n	100dc0a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
 100dc08:	6058      	str	r0, [r3, #4]
	parent->next = child;
 100dc0a:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100dc0c:	2001      	movs	r0, #1
	parent->next = child;
 100dc0e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100dc10:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
 100dc12:	42a1      	cmp	r1, r4
	parent->next = child;
 100dc14:	6010      	str	r0, [r2, #0]
	list->tail = node;
 100dc16:	bf08      	it	eq
 100dc18:	605a      	streq	r2, [r3, #4]
}
 100dc1a:	e7f6      	b.n	100dc0a <sys_slist_find_and_remove+0x1c>
	return node->next;
 100dc1c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100dc1e:	6800      	ldr	r0, [r0, #0]
 100dc20:	e7e9      	b.n	100dbf6 <sys_slist_find_and_remove+0x8>

0100dc22 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100dc22:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
 100dc24:	f013 0307 	ands.w	r3, r3, #7
 100dc28:	d105      	bne.n	100dc36 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 100dc2a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 100dc2c:	2b00      	cmp	r3, #0
 100dc2e:	bf0c      	ite	eq
 100dc30:	2000      	moveq	r0, #0
 100dc32:	2003      	movne	r0, #3
 100dc34:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 100dc36:	2b02      	cmp	r3, #2
 100dc38:	d105      	bne.n	100dc46 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 100dc3a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
 100dc3c:	2b00      	cmp	r3, #0
 100dc3e:	bf14      	ite	ne
 100dc40:	2000      	movne	r0, #0
 100dc42:	2004      	moveq	r0, #4
 100dc44:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 100dc46:	2b01      	cmp	r3, #1
 100dc48:	d105      	bne.n	100dc56 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 100dc4a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 100dc4c:	2b00      	cmp	r3, #0
 100dc4e:	bf0c      	ite	eq
 100dc50:	2000      	moveq	r0, #0
 100dc52:	2005      	movne	r0, #5
 100dc54:	4770      	bx	lr
	int evt = EVT_NOP;
 100dc56:	2000      	movs	r0, #0
}
 100dc58:	4770      	bx	lr

0100dc5a <notify_one>:
{
 100dc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100dc5e:	460d      	mov	r5, r1
 100dc60:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 100dc62:	4619      	mov	r1, r3
 100dc64:	1d28      	adds	r0, r5, #4
{
 100dc66:	4690      	mov	r8, r2
 100dc68:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 100dc6a:	f7ff ffa4 	bl	100dbb6 <sys_notify_finalize>
	if (cb) {
 100dc6e:	4604      	mov	r4, r0
 100dc70:	b138      	cbz	r0, 100dc82 <notify_one+0x28>
		cb(mgr, cli, state, res);
 100dc72:	4633      	mov	r3, r6
 100dc74:	4642      	mov	r2, r8
 100dc76:	4629      	mov	r1, r5
 100dc78:	4638      	mov	r0, r7
 100dc7a:	46a4      	mov	ip, r4
}
 100dc7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 100dc80:	4760      	bx	ip
}
 100dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100dc86 <transition_complete>:
{
 100dc86:	b410      	push	{r4}
	__asm__ volatile(
 100dc88:	f04f 0440 	mov.w	r4, #64	; 0x40
 100dc8c:	f3ef 8211 	mrs	r2, BASEPRI
 100dc90:	f384 8811 	msr	BASEPRI, r4
 100dc94:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
 100dc98:	6141      	str	r1, [r0, #20]
}
 100dc9a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
 100dc9c:	2101      	movs	r1, #1
 100dc9e:	f7f6 bd97 	b.w	10047d0 <process_event>

0100dca2 <validate_args>:
{
 100dca2:	b510      	push	{r4, lr}
 100dca4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 100dca6:	b140      	cbz	r0, 100dcba <validate_args+0x18>
 100dca8:	b139      	cbz	r1, 100dcba <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
 100dcaa:	1d08      	adds	r0, r1, #4
 100dcac:	f7ff ff72 	bl	100db94 <sys_notify_validate>
	if ((rv == 0)
 100dcb0:	b928      	cbnz	r0, 100dcbe <validate_args+0x1c>
	    && ((cli->notify.flags
 100dcb2:	68a3      	ldr	r3, [r4, #8]
 100dcb4:	f033 0303 	bics.w	r3, r3, #3
 100dcb8:	d001      	beq.n	100dcbe <validate_args+0x1c>
		rv = -EINVAL;
 100dcba:	f06f 0015 	mvn.w	r0, #21
}
 100dcbe:	bd10      	pop	{r4, pc}

0100dcc0 <onoff_manager_init>:
{
 100dcc0:	b538      	push	{r3, r4, r5, lr}
 100dcc2:	460c      	mov	r4, r1
	if ((mgr == NULL)
 100dcc4:	4605      	mov	r5, r0
 100dcc6:	b158      	cbz	r0, 100dce0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 100dcc8:	b151      	cbz	r1, 100dce0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 100dcca:	680b      	ldr	r3, [r1, #0]
 100dccc:	b143      	cbz	r3, 100dce0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 100dcce:	684b      	ldr	r3, [r1, #4]
 100dcd0:	b133      	cbz	r3, 100dce0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 100dcd2:	221c      	movs	r2, #28
 100dcd4:	2100      	movs	r1, #0
 100dcd6:	f000 fc69 	bl	100e5ac <memset>
	return 0;
 100dcda:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 100dcdc:	612c      	str	r4, [r5, #16]
}
 100dcde:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 100dce0:	f06f 0015 	mvn.w	r0, #21
 100dce4:	e7fb      	b.n	100dcde <onoff_manager_init+0x1e>

0100dce6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 100dce6:	b570      	push	{r4, r5, r6, lr}
 100dce8:	4604      	mov	r4, r0
 100dcea:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 100dcec:	f7ff ffd9 	bl	100dca2 <validate_args>

	if (rv < 0) {
 100dcf0:	1e05      	subs	r5, r0, #0
 100dcf2:	db31      	blt.n	100dd58 <onoff_request+0x72>
 100dcf4:	f04f 0340 	mov.w	r3, #64	; 0x40
 100dcf8:	f3ef 8111 	mrs	r1, BASEPRI
 100dcfc:	f383 8811 	msr	BASEPRI, r3
 100dd00:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 100dd04:	f64f 75ff 	movw	r5, #65535	; 0xffff
 100dd08:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100dd0a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
 100dd0c:	42ab      	cmp	r3, r5
 100dd0e:	f000 0207 	and.w	r2, r0, #7
 100dd12:	d02e      	beq.n	100dd72 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
 100dd14:	2a02      	cmp	r2, #2
 100dd16:	d10e      	bne.n	100dd36 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
 100dd18:	3301      	adds	r3, #1
 100dd1a:	8363      	strh	r3, [r4, #26]
	rv = state;
 100dd1c:	4615      	mov	r5, r2
		notify = true;
 100dd1e:	2301      	movs	r3, #1
	__asm__ volatile(
 100dd20:	f381 8811 	msr	BASEPRI, r1
 100dd24:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
 100dd28:	b1b3      	cbz	r3, 100dd58 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
 100dd2a:	2300      	movs	r3, #0
 100dd2c:	4631      	mov	r1, r6
 100dd2e:	4620      	mov	r0, r4
 100dd30:	f7ff ff93 	bl	100dc5a <notify_one>
 100dd34:	e010      	b.n	100dd58 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
 100dd36:	0783      	lsls	r3, r0, #30
 100dd38:	d001      	beq.n	100dd3e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
 100dd3a:	2a06      	cmp	r2, #6
 100dd3c:	d10e      	bne.n	100dd5c <onoff_request+0x76>
	parent->next = child;
 100dd3e:	2300      	movs	r3, #0
 100dd40:	6033      	str	r3, [r6, #0]
	return list->tail;
 100dd42:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
 100dd44:	b993      	cbnz	r3, 100dd6c <onoff_request+0x86>
	list->head = node;
 100dd46:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
 100dd4a:	4615      	mov	r5, r2
 100dd4c:	b962      	cbnz	r2, 100dd68 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
 100dd4e:	460a      	mov	r2, r1
 100dd50:	4620      	mov	r0, r4
 100dd52:	2102      	movs	r1, #2
 100dd54:	f7f6 fd3c 	bl	10047d0 <process_event>
		}
	}

	return rv;
}
 100dd58:	4628      	mov	r0, r5
 100dd5a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
 100dd5c:	2a05      	cmp	r2, #5
 100dd5e:	bf0c      	ite	eq
 100dd60:	f06f 0585 	mvneq.w	r5, #133	; 0x85
 100dd64:	f06f 0504 	mvnne.w	r5, #4
 100dd68:	2300      	movs	r3, #0
 100dd6a:	e7d9      	b.n	100dd20 <onoff_request+0x3a>
	parent->next = child;
 100dd6c:	601e      	str	r6, [r3, #0]
	list->tail = node;
 100dd6e:	6066      	str	r6, [r4, #4]
}
 100dd70:	e7eb      	b.n	100dd4a <onoff_request+0x64>
		rv = -EAGAIN;
 100dd72:	f06f 050a 	mvn.w	r5, #10
 100dd76:	e7f7      	b.n	100dd68 <onoff_request+0x82>

0100dd78 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
 100dd78:	b510      	push	{r4, lr}
	__asm__ volatile(
 100dd7a:	f04f 0340 	mov.w	r3, #64	; 0x40
 100dd7e:	f3ef 8211 	mrs	r2, BASEPRI
 100dd82:	f383 8811 	msr	BASEPRI, r3
 100dd86:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100dd8a:	8b04      	ldrh	r4, [r0, #24]
 100dd8c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
 100dd90:	2c02      	cmp	r4, #2
 100dd92:	d00a      	beq.n	100ddaa <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
 100dd94:	2c01      	cmp	r4, #1
 100dd96:	bf0c      	ite	eq
 100dd98:	f06f 0004 	mvneq.w	r0, #4
 100dd9c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
 100dda0:	f382 8811 	msr	BASEPRI, r2
 100dda4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
 100dda8:	e008      	b.n	100ddbc <onoff_release+0x44>
	mgr->refs -= 1U;
 100ddaa:	8b43      	ldrh	r3, [r0, #26]
 100ddac:	3b01      	subs	r3, #1
 100ddae:	b29b      	uxth	r3, r3
 100ddb0:	8343      	strh	r3, [r0, #26]
	if (stop) {
 100ddb2:	b923      	cbnz	r3, 100ddbe <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
 100ddb4:	4621      	mov	r1, r4
 100ddb6:	f7f6 fd0b 	bl	10047d0 <process_event>
	int rv = state;
 100ddba:	4620      	mov	r0, r4
}
 100ddbc:	bd10      	pop	{r4, pc}
	int rv = state;
 100ddbe:	4620      	mov	r0, r4
 100ddc0:	e7ee      	b.n	100dda0 <onoff_release+0x28>

0100ddc2 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
 100ddc2:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
 100ddc4:	b1b0      	cbz	r0, 100ddf4 <onoff_cancel+0x32>
 100ddc6:	b1a9      	cbz	r1, 100ddf4 <onoff_cancel+0x32>
	__asm__ volatile(
 100ddc8:	f04f 0240 	mov.w	r2, #64	; 0x40
 100ddcc:	f3ef 8511 	mrs	r5, BASEPRI
 100ddd0:	f382 8811 	msr	BASEPRI, r2
 100ddd4:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100ddd8:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
 100ddda:	f7ff ff08 	bl	100dbee <sys_slist_find_and_remove>
 100ddde:	b130      	cbz	r0, 100ddee <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
 100dde0:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
 100dde4:	f385 8811 	msr	BASEPRI, r5
 100dde8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
 100ddec:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
 100ddee:	f06f 0077 	mvn.w	r0, #119	; 0x77
 100ddf2:	e7f7      	b.n	100dde4 <onoff_cancel+0x22>
		return -EINVAL;
 100ddf4:	f06f 0015 	mvn.w	r0, #21
 100ddf8:	e7f8      	b.n	100ddec <onoff_cancel+0x2a>

0100ddfa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 100ddfa:	4604      	mov	r4, r0
 100ddfc:	b508      	push	{r3, lr}
 100ddfe:	4608      	mov	r0, r1
 100de00:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 100de02:	461a      	mov	r2, r3
 100de04:	47a0      	blx	r4
	return z_impl_k_current_get();
 100de06:	f7ff f8ab 	bl	100cf60 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 100de0a:	f7f8 f87b 	bl	1005f04 <z_impl_k_thread_abort>

0100de0e <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 100de0e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 100de10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 100de14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 100de18:	bf2c      	ite	cs
 100de1a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 100de1e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 100de22:	4770      	bx	lr

0100de24 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 100de24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 100de28:	6880      	ldr	r0, [r0, #8]
 100de2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 100de2e:	bf2c      	ite	cs
 100de30:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 100de34:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 100de38:	4770      	bx	lr

0100de3a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 100de3a:	2201      	movs	r2, #1
{
 100de3c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 100de3e:	f7ff ffe6 	bl	100de0e <chunk_field>
}
 100de42:	40d0      	lsrs	r0, r2
 100de44:	bd08      	pop	{r3, pc}

0100de46 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 100de46:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 100de48:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 100de4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 100de50:	d308      	bcc.n	100de64 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 100de52:	684b      	ldr	r3, [r1, #4]
		if (used) {
 100de54:	b11a      	cbz	r2, 100de5e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 100de56:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 100de5a:	604b      	str	r3, [r1, #4]
 100de5c:	4770      	bx	lr
 100de5e:	f023 0301 	bic.w	r3, r3, #1
 100de62:	e7fa      	b.n	100de5a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 100de64:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 100de66:	b11a      	cbz	r2, 100de70 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 100de68:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 100de6c:	804b      	strh	r3, [r1, #2]
		}
	}
}
 100de6e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 100de70:	f023 0301 	bic.w	r3, r3, #1
 100de74:	e7fa      	b.n	100de6c <set_chunk_used+0x26>

0100de76 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 100de76:	0053      	lsls	r3, r2, #1
 100de78:	2201      	movs	r2, #1
 100de7a:	f7ff bfd3 	b.w	100de24 <chunk_set>

0100de7e <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 100de7e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 100de82:	bf2c      	ite	cs
 100de84:	2008      	movcs	r0, #8
 100de86:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 100de88:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 100de8a:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 100de8c:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 100de90:	fab0 f080 	clz	r0, r0
}
 100de94:	f1c0 001f 	rsb	r0, r0, #31
 100de98:	4770      	bx	lr

0100de9a <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 100de9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100de9e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 100dea0:	2203      	movs	r2, #3
 100dea2:	460e      	mov	r6, r1
 100dea4:	4604      	mov	r4, r0
 100dea6:	f7ff ffb2 	bl	100de0e <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 100deaa:	4286      	cmp	r6, r0
 100deac:	4605      	mov	r5, r0
 100deae:	f107 0804 	add.w	r8, r7, #4
 100deb2:	d10b      	bne.n	100decc <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
 100deb4:	2301      	movs	r3, #1
 100deb6:	fa03 f707 	lsl.w	r7, r3, r7
 100deba:	68e3      	ldr	r3, [r4, #12]
 100debc:	ea23 0307 	bic.w	r3, r3, r7
 100dec0:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 100dec2:	2300      	movs	r3, #0
 100dec4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 100dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 100decc:	4631      	mov	r1, r6
 100dece:	2202      	movs	r2, #2
 100ded0:	4620      	mov	r0, r4
 100ded2:	f7ff ff9c 	bl	100de0e <chunk_field>
 100ded6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 100ded8:	462b      	mov	r3, r5
 100deda:	4601      	mov	r1, r0
 100dedc:	2203      	movs	r2, #3
 100dede:	4620      	mov	r0, r4
		b->next = second;
 100dee0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 100dee4:	f7ff ff9e 	bl	100de24 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 100dee8:	4633      	mov	r3, r6
 100deea:	4629      	mov	r1, r5
 100deec:	4620      	mov	r0, r4
}
 100deee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100def2:	2202      	movs	r2, #2
 100def4:	f7ff bf96 	b.w	100de24 <chunk_set>

0100def8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 100def8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100defc:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
 100defe:	6880      	ldr	r0, [r0, #8]
{
 100df00:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
 100df02:	f7ff ffbc 	bl	100de7e <bucket_idx.isra.0>
 100df06:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 100df0a:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
 100df0e:	4606      	mov	r6, r0
	if (b->next) {
 100df10:	f1b9 0f00 	cmp.w	r9, #0
 100df14:	d01b      	beq.n	100df4e <alloc_chunk+0x56>
 100df16:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 100df18:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
 100df1c:	4628      	mov	r0, r5
 100df1e:	4621      	mov	r1, r4
 100df20:	f7ff ff8b 	bl	100de3a <chunk_size>
 100df24:	4540      	cmp	r0, r8
 100df26:	d307      	bcc.n	100df38 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
 100df28:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 100df2a:	4621      	mov	r1, r4
 100df2c:	4628      	mov	r0, r5
 100df2e:	f7ff ffb4 	bl	100de9a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 100df32:	4620      	mov	r0, r4
 100df34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
 100df38:	2203      	movs	r2, #3
 100df3a:	4621      	mov	r1, r4
 100df3c:	4628      	mov	r0, r5
 100df3e:	f7ff ff66 	bl	100de0e <chunk_field>
		} while (--i && b->next != first);
 100df42:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
 100df44:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
 100df48:	d001      	beq.n	100df4e <alloc_chunk+0x56>
 100df4a:	4581      	cmp	r9, r0
 100df4c:	d1e4      	bne.n	100df18 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 100df4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 100df52:	68e9      	ldr	r1, [r5, #12]
 100df54:	3601      	adds	r6, #1
 100df56:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
 100df58:	400c      	ands	r4, r1
 100df5a:	d0ea      	beq.n	100df32 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
 100df5c:	fa94 f2a4 	rbit	r2, r4
 100df60:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 100df64:	1d13      	adds	r3, r2, #4
 100df66:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 100df6a:	e7de      	b.n	100df2a <alloc_chunk+0x32>

0100df6c <split_chunks>:
{
 100df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100df70:	4614      	mov	r4, r2
 100df72:	460e      	mov	r6, r1
 100df74:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
 100df76:	f7ff ff60 	bl	100de3a <chunk_size>
	chunksz_t lsz = rc - lc;
 100df7a:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
 100df7e:	1b37      	subs	r7, r6, r4
 100df80:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
 100df82:	4642      	mov	r2, r8
 100df84:	4631      	mov	r1, r6
 100df86:	4628      	mov	r0, r5
 100df88:	f7ff ff75 	bl	100de76 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 100df8c:	463a      	mov	r2, r7
 100df8e:	4621      	mov	r1, r4
 100df90:	4628      	mov	r0, r5
 100df92:	f7ff ff70 	bl	100de76 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 100df96:	4643      	mov	r3, r8
 100df98:	2200      	movs	r2, #0
 100df9a:	4621      	mov	r1, r4
 100df9c:	4628      	mov	r0, r5
 100df9e:	f7ff ff41 	bl	100de24 <chunk_set>
	return c + chunk_size(h, c);
 100dfa2:	4621      	mov	r1, r4
 100dfa4:	4628      	mov	r0, r5
 100dfa6:	f7ff ff48 	bl	100de3a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 100dfaa:	463b      	mov	r3, r7
 100dfac:	1821      	adds	r1, r4, r0
 100dfae:	2200      	movs	r2, #0
 100dfb0:	4628      	mov	r0, r5
}
 100dfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100dfb6:	f7ff bf35 	b.w	100de24 <chunk_set>

0100dfba <free_list_add>:
{
 100dfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100dfbe:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
 100dfc0:	6886      	ldr	r6, [r0, #8]
 100dfc2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 100dfc4:	f7ff ff39 	bl	100de3a <chunk_size>
 100dfc8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 100dfcc:	4601      	mov	r1, r0
 100dfce:	d301      	bcc.n	100dfd4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 100dfd0:	2801      	cmp	r0, #1
 100dfd2:	d033      	beq.n	100e03c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 100dfd4:	4630      	mov	r0, r6
 100dfd6:	f7ff ff52 	bl	100de7e <bucket_idx.isra.0>
	if (b->next == 0U) {
 100dfda:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 100dfde:	6916      	ldr	r6, [r2, #16]
 100dfe0:	b99e      	cbnz	r6, 100e00a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 100dfe2:	2301      	movs	r3, #1
 100dfe4:	fa03 f000 	lsl.w	r0, r3, r0
 100dfe8:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 100dfea:	4629      	mov	r1, r5
 100dfec:	4303      	orrs	r3, r0
 100dfee:	60e3      	str	r3, [r4, #12]
 100dff0:	4620      	mov	r0, r4
		b->next = c;
 100dff2:	6115      	str	r5, [r2, #16]
 100dff4:	462b      	mov	r3, r5
 100dff6:	2202      	movs	r2, #2
 100dff8:	f7ff ff14 	bl	100de24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 100dffc:	2203      	movs	r2, #3
 100dffe:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 100e000:	4620      	mov	r0, r4
}
 100e002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100e006:	f7ff bf0d 	b.w	100de24 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 100e00a:	2202      	movs	r2, #2
 100e00c:	4631      	mov	r1, r6
 100e00e:	4620      	mov	r0, r4
 100e010:	f7ff fefd 	bl	100de0e <chunk_field>
 100e014:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 100e016:	4603      	mov	r3, r0
 100e018:	4629      	mov	r1, r5
 100e01a:	4620      	mov	r0, r4
 100e01c:	f7ff ff02 	bl	100de24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 100e020:	2203      	movs	r2, #3
 100e022:	4633      	mov	r3, r6
 100e024:	4629      	mov	r1, r5
 100e026:	4620      	mov	r0, r4
 100e028:	f7ff fefc 	bl	100de24 <chunk_set>
 100e02c:	4639      	mov	r1, r7
 100e02e:	462b      	mov	r3, r5
 100e030:	4620      	mov	r0, r4
 100e032:	f7ff fef7 	bl	100de24 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 100e036:	2202      	movs	r2, #2
 100e038:	4631      	mov	r1, r6
 100e03a:	e7e1      	b.n	100e000 <free_list_add+0x46>
 100e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100e040 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 100e040:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 100e042:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 100e044:	b909      	cbnz	r1, 100e04a <sys_heap_alloc+0xa>
		return NULL;
 100e046:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
 100e048:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 100e04a:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 100e04c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 100e050:	d9f9      	bls.n	100e046 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 100e052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 100e056:	bf2c      	ite	cs
 100e058:	2208      	movcs	r2, #8
 100e05a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 100e05c:	1dcc      	adds	r4, r1, #7
 100e05e:	4414      	add	r4, r2
 100e060:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 100e062:	4621      	mov	r1, r4
 100e064:	4630      	mov	r0, r6
 100e066:	f7ff ff47 	bl	100def8 <alloc_chunk>
	if (c == 0U) {
 100e06a:	4605      	mov	r5, r0
 100e06c:	2800      	cmp	r0, #0
 100e06e:	d0ea      	beq.n	100e046 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 100e070:	4601      	mov	r1, r0
 100e072:	4630      	mov	r0, r6
 100e074:	f7ff fee1 	bl	100de3a <chunk_size>
 100e078:	42a0      	cmp	r0, r4
 100e07a:	d909      	bls.n	100e090 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
 100e07c:	442c      	add	r4, r5
 100e07e:	4629      	mov	r1, r5
 100e080:	4630      	mov	r0, r6
 100e082:	4622      	mov	r2, r4
 100e084:	f7ff ff72 	bl	100df6c <split_chunks>
		free_list_add(h, c + chunk_sz);
 100e088:	4621      	mov	r1, r4
 100e08a:	4630      	mov	r0, r6
 100e08c:	f7ff ff95 	bl	100dfba <free_list_add>
	set_chunk_used(h, c, true);
 100e090:	4629      	mov	r1, r5
 100e092:	4630      	mov	r0, r6
 100e094:	2201      	movs	r2, #1
 100e096:	f7ff fed6 	bl	100de46 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 100e09a:	68b3      	ldr	r3, [r6, #8]
 100e09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 100e0a0:	bf2c      	ite	cs
 100e0a2:	2308      	movcs	r3, #8
 100e0a4:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 100e0a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 100e0aa:	4428      	add	r0, r5
	return chunk_mem(h, c);
 100e0ac:	e7cc      	b.n	100e048 <sys_heap_alloc+0x8>

0100e0ae <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 100e0ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100e0b2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
 100e0b4:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 100e0b6:	424a      	negs	r2, r1
 100e0b8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
 100e0bc:	ea31 0202 	bics.w	r2, r1, r2
{
 100e0c0:	460b      	mov	r3, r1
	return big_heap_chunks(h->end_chunk);
 100e0c2:	68b5      	ldr	r5, [r6, #8]
	if (align != rew) {
 100e0c4:	d00f      	beq.n	100e0e6 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
 100e0c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 100e0ca:	bf34      	ite	cc
 100e0cc:	2104      	movcc	r1, #4
 100e0ce:	2108      	movcs	r1, #8
 100e0d0:	42b9      	cmp	r1, r7
 100e0d2:	460a      	mov	r2, r1
 100e0d4:	46b9      	mov	r9, r7
 100e0d6:	bf28      	it	cs
 100e0d8:	463a      	movcs	r2, r7
		align -= rew;
 100e0da:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 100e0dc:	b994      	cbnz	r4, 100e104 <sys_heap_aligned_alloc+0x56>
		return NULL;
 100e0de:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 100e0e0:	4628      	mov	r0, r5
 100e0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100e0e6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 100e0ea:	bf34      	ite	cc
 100e0ec:	2204      	movcc	r2, #4
 100e0ee:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
 100e0f0:	4291      	cmp	r1, r2
 100e0f2:	d804      	bhi.n	100e0fe <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
 100e0f4:	4621      	mov	r1, r4
}
 100e0f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 100e0fa:	f7ff bfa1 	b.w	100e040 <sys_heap_alloc>
		rew = 0;
 100e0fe:	f04f 0900 	mov.w	r9, #0
 100e102:	e7eb      	b.n	100e0dc <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
 100e104:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
 100e108:	d9e9      	bls.n	100e0de <sys_heap_aligned_alloc+0x30>
 100e10a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 100e10e:	bf2c      	ite	cs
 100e110:	2308      	movcs	r3, #8
 100e112:	2304      	movcc	r3, #4
 100e114:	1de1      	adds	r1, r4, #7
 100e116:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 100e118:	1a89      	subs	r1, r1, r2
 100e11a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 100e11c:	4630      	mov	r0, r6
 100e11e:	08c9      	lsrs	r1, r1, #3
 100e120:	f7ff feea 	bl	100def8 <alloc_chunk>
	if (c0 == 0) {
 100e124:	4680      	mov	r8, r0
 100e126:	2800      	cmp	r0, #0
 100e128:	d0d9      	beq.n	100e0de <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
 100e12a:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 100e12c:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
 100e130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 100e134:	bf2c      	ite	cs
 100e136:	2308      	movcs	r3, #8
 100e138:	2304      	movcc	r3, #4
 100e13a:	441d      	add	r5, r3
 100e13c:	1e7a      	subs	r2, r7, #1
 100e13e:	4435      	add	r5, r6
 100e140:	427f      	negs	r7, r7
 100e142:	4415      	add	r5, r2
 100e144:	403d      	ands	r5, r7
 100e146:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 100e14a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 100e14c:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 100e14e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 100e150:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 100e152:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 100e156:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 100e158:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 100e15c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 100e160:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 100e164:	d208      	bcs.n	100e178 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
 100e166:	4601      	mov	r1, r0
 100e168:	463a      	mov	r2, r7
 100e16a:	4630      	mov	r0, r6
 100e16c:	f7ff fefe 	bl	100df6c <split_chunks>
		free_list_add(h, c0);
 100e170:	4641      	mov	r1, r8
 100e172:	4630      	mov	r0, r6
 100e174:	f7ff ff21 	bl	100dfba <free_list_add>
	return c + chunk_size(h, c);
 100e178:	4639      	mov	r1, r7
 100e17a:	4630      	mov	r0, r6
 100e17c:	f7ff fe5d 	bl	100de3a <chunk_size>
 100e180:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 100e182:	4284      	cmp	r4, r0
 100e184:	d208      	bcs.n	100e198 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
 100e186:	4639      	mov	r1, r7
 100e188:	4630      	mov	r0, r6
 100e18a:	4622      	mov	r2, r4
 100e18c:	f7ff feee 	bl	100df6c <split_chunks>
		free_list_add(h, c_end);
 100e190:	4621      	mov	r1, r4
 100e192:	4630      	mov	r0, r6
 100e194:	f7ff ff11 	bl	100dfba <free_list_add>
	set_chunk_used(h, c, true);
 100e198:	2201      	movs	r2, #1
 100e19a:	4639      	mov	r1, r7
 100e19c:	4630      	mov	r0, r6
 100e19e:	f7ff fe52 	bl	100de46 <set_chunk_used>
	return mem;
 100e1a2:	e79d      	b.n	100e0e0 <sys_heap_aligned_alloc+0x32>

0100e1a4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 100e1a4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 100e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100e1aa:	bf2c      	ite	cs
 100e1ac:	2408      	movcs	r4, #8
 100e1ae:	2404      	movcc	r4, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 100e1b0:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
 100e1b2:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 100e1b4:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 100e1b6:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 100e1b8:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 100e1bc:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 100e1c0:	1ba4      	subs	r4, r4, r6
 100e1c2:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
 100e1c4:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 100e1c6:	4621      	mov	r1, r4
 100e1c8:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
 100e1ca:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
 100e1cc:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 100e1ce:	f7ff fe56 	bl	100de7e <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 100e1d2:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 100e1d4:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 100e1d6:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 100e1d8:	351b      	adds	r5, #27
 100e1da:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
 100e1dc:	f106 0210 	add.w	r2, r6, #16
 100e1e0:	428b      	cmp	r3, r1
 100e1e2:	db2e      	blt.n	100e242 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 100e1e4:	462a      	mov	r2, r5
 100e1e6:	4630      	mov	r0, r6
 100e1e8:	2100      	movs	r1, #0
 100e1ea:	f7ff fe44 	bl	100de76 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 100e1ee:	2300      	movs	r3, #0
 100e1f0:	4630      	mov	r0, r6
 100e1f2:	461a      	mov	r2, r3
 100e1f4:	4619      	mov	r1, r3
 100e1f6:	f7ff fe15 	bl	100de24 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 100e1fa:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
 100e1fc:	4619      	mov	r1, r3
 100e1fe:	4630      	mov	r0, r6
 100e200:	2201      	movs	r2, #1
 100e202:	f7ff fe20 	bl	100de46 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 100e206:	463a      	mov	r2, r7
 100e208:	4629      	mov	r1, r5
 100e20a:	f7ff fe34 	bl	100de76 <set_chunk_size>
 100e20e:	462b      	mov	r3, r5
 100e210:	2200      	movs	r2, #0
 100e212:	4629      	mov	r1, r5
 100e214:	4630      	mov	r0, r6
 100e216:	f7ff fe05 	bl	100de24 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 100e21a:	4621      	mov	r1, r4
 100e21c:	4630      	mov	r0, r6
 100e21e:	f7ff fe2a 	bl	100de76 <set_chunk_size>
 100e222:	463b      	mov	r3, r7
 100e224:	4621      	mov	r1, r4
 100e226:	4630      	mov	r0, r6
 100e228:	2200      	movs	r2, #0
 100e22a:	f7ff fdfb 	bl	100de24 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 100e22e:	4621      	mov	r1, r4
 100e230:	4630      	mov	r0, r6
 100e232:	2201      	movs	r2, #1
 100e234:	f7ff fe07 	bl	100de46 <set_chunk_used>

	free_list_add(h, chunk0_size);
 100e238:	4629      	mov	r1, r5
}
 100e23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 100e23e:	f7ff bebc 	b.w	100dfba <free_list_add>
		h->buckets[i].next = 0;
 100e242:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 100e246:	3301      	adds	r3, #1
 100e248:	e7ca      	b.n	100e1e0 <sys_heap_init+0x3c>

0100e24a <encode_uint>:
{
 100e24a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100e24e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 100e250:	78d3      	ldrb	r3, [r2, #3]
{
 100e252:	4680      	mov	r8, r0
	switch (specifier) {
 100e254:	2b6f      	cmp	r3, #111	; 0x6f
{
 100e256:	460f      	mov	r7, r1
 100e258:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 100e25a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 100e25e:	d029      	beq.n	100e2b4 <encode_uint+0x6a>
 100e260:	d824      	bhi.n	100e2ac <encode_uint+0x62>
		return 16;
 100e262:	2b58      	cmp	r3, #88	; 0x58
 100e264:	bf14      	ite	ne
 100e266:	260a      	movne	r6, #10
 100e268:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 100e26a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 100e26e:	4632      	mov	r2, r6
 100e270:	2300      	movs	r3, #0
 100e272:	4640      	mov	r0, r8
 100e274:	4639      	mov	r1, r7
 100e276:	f7f1 ff1f 	bl	10000b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100e27a:	2a09      	cmp	r2, #9
 100e27c:	b2d4      	uxtb	r4, r2
 100e27e:	d81e      	bhi.n	100e2be <encode_uint+0x74>
 100e280:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 100e282:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100e284:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 100e286:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100e28a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 100e28e:	d301      	bcc.n	100e294 <encode_uint+0x4a>
 100e290:	45d1      	cmp	r9, sl
 100e292:	d811      	bhi.n	100e2b8 <encode_uint+0x6e>
	if (conv->flag_hash) {
 100e294:	782b      	ldrb	r3, [r5, #0]
 100e296:	069b      	lsls	r3, r3, #26
 100e298:	d505      	bpl.n	100e2a6 <encode_uint+0x5c>
		if (radix == 8) {
 100e29a:	2e08      	cmp	r6, #8
 100e29c:	d115      	bne.n	100e2ca <encode_uint+0x80>
			conv->altform_0 = true;
 100e29e:	78ab      	ldrb	r3, [r5, #2]
 100e2a0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 100e2a4:	70ab      	strb	r3, [r5, #2]
}
 100e2a6:	4648      	mov	r0, r9
 100e2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 100e2ac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 100e2b0:	2b70      	cmp	r3, #112	; 0x70
 100e2b2:	e7d7      	b.n	100e264 <encode_uint+0x1a>
	switch (specifier) {
 100e2b4:	2608      	movs	r6, #8
 100e2b6:	e7d8      	b.n	100e26a <encode_uint+0x20>
		value /= radix;
 100e2b8:	4680      	mov	r8, r0
 100e2ba:	460f      	mov	r7, r1
 100e2bc:	e7d7      	b.n	100e26e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100e2be:	f1bb 0f19 	cmp.w	fp, #25
 100e2c2:	bf94      	ite	ls
 100e2c4:	3437      	addls	r4, #55	; 0x37
 100e2c6:	3457      	addhi	r4, #87	; 0x57
 100e2c8:	e7db      	b.n	100e282 <encode_uint+0x38>
		} else if (radix == 16) {
 100e2ca:	2e10      	cmp	r6, #16
 100e2cc:	d1eb      	bne.n	100e2a6 <encode_uint+0x5c>
			conv->altform_0c = true;
 100e2ce:	78ab      	ldrb	r3, [r5, #2]
 100e2d0:	f043 0310 	orr.w	r3, r3, #16
 100e2d4:	e7e6      	b.n	100e2a4 <encode_uint+0x5a>

0100e2d6 <outs>:
{
 100e2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100e2da:	4607      	mov	r7, r0
 100e2dc:	4688      	mov	r8, r1
 100e2de:	4615      	mov	r5, r2
 100e2e0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 100e2e2:	4614      	mov	r4, r2
 100e2e4:	42b4      	cmp	r4, r6
 100e2e6:	eba4 0005 	sub.w	r0, r4, r5
 100e2ea:	d302      	bcc.n	100e2f2 <outs+0x1c>
 100e2ec:	b93e      	cbnz	r6, 100e2fe <outs+0x28>
 100e2ee:	7823      	ldrb	r3, [r4, #0]
 100e2f0:	b12b      	cbz	r3, 100e2fe <outs+0x28>
		int rc = out((int)*sp++, ctx);
 100e2f2:	4641      	mov	r1, r8
 100e2f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 100e2f8:	47b8      	blx	r7
		if (rc < 0) {
 100e2fa:	2800      	cmp	r0, #0
 100e2fc:	daf2      	bge.n	100e2e4 <outs+0xe>
}
 100e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100e302 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 100e302:	4770      	bx	lr

0100e304 <virtio_get_features>:
}
 100e304:	2001      	movs	r0, #1
 100e306:	4770      	bx	lr

0100e308 <virtio_set_features>:
}
 100e308:	4770      	bx	lr

0100e30a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
 100e30a:	f001 ba5b 	b.w	100f7c4 <rpmsg_destroy_ept>

0100e30e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
 100e30e:	220c      	movs	r2, #12
 100e310:	6903      	ldr	r3, [r0, #16]
 100e312:	b2c9      	uxtb	r1, r1
 100e314:	fb01 3302 	mla	r3, r1, r2, r3
 100e318:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 100e31a:	f000 0007 	and.w	r0, r0, #7
 100e31e:	4770      	bx	lr

0100e320 <set_on_state>:
	__asm__ volatile(
 100e320:	f04f 0340 	mov.w	r3, #64	; 0x40
 100e324:	f3ef 8211 	mrs	r2, BASEPRI
 100e328:	f383 8811 	msr	BASEPRI, r3
 100e32c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 100e330:	6803      	ldr	r3, [r0, #0]
 100e332:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 100e336:	f043 0302 	orr.w	r3, r3, #2
 100e33a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 100e33c:	f382 8811 	msr	BASEPRI, r2
 100e340:	f3bf 8f6f 	isb	sy
}
 100e344:	4770      	bx	lr

0100e346 <stop>:
{
 100e346:	4603      	mov	r3, r0
 100e348:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
 100e34a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
 100e34c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 100e34e:	f04f 0440 	mov.w	r4, #64	; 0x40
 100e352:	f3ef 8611 	mrs	r6, BASEPRI
 100e356:	f384 8811 	msr	BASEPRI, r4
 100e35a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 100e35e:	250c      	movs	r5, #12
 100e360:	fb05 0401 	mla	r4, r5, r1, r0
 100e364:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 100e366:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 100e36a:	d001      	beq.n	100e370 <stop+0x2a>
 100e36c:	42a2      	cmp	r2, r4
 100e36e:	d110      	bne.n	100e392 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
 100e370:	2201      	movs	r2, #1
 100e372:	fb05 0001 	mla	r0, r5, r1, r0
 100e376:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
 100e378:	2000      	movs	r0, #0
	__asm__ volatile(
 100e37a:	f386 8811 	msr	BASEPRI, r6
 100e37e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 100e382:	b928      	cbnz	r0, 100e390 <stop+0x4a>
	get_sub_config(dev, type)->stop();
 100e384:	685b      	ldr	r3, [r3, #4]
 100e386:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 100e38a:	684b      	ldr	r3, [r1, #4]
 100e38c:	4798      	blx	r3
	return 0;
 100e38e:	2000      	movs	r0, #0
}
 100e390:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
 100e392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100e396:	e7f0      	b.n	100e37a <stop+0x34>

0100e398 <api_stop>:
	return stop(dev, subsys, CTX_API);
 100e398:	2280      	movs	r2, #128	; 0x80
 100e39a:	f7ff bfd4 	b.w	100e346 <stop>

0100e39e <async_start>:
{
 100e39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100e3a0:	9f06      	ldr	r7, [sp, #24]
 100e3a2:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
 100e3a4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 100e3a6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 100e3a8:	f04f 0040 	mov.w	r0, #64	; 0x40
 100e3ac:	f3ef 8c11 	mrs	ip, BASEPRI
 100e3b0:	f380 8811 	msr	BASEPRI, r0
 100e3b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 100e3b8:	260c      	movs	r6, #12
 100e3ba:	fb06 4601 	mla	r6, r6, r1, r4
 100e3be:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 100e3c0:	f000 0e07 	and.w	lr, r0, #7
 100e3c4:	f1be 0f01 	cmp.w	lr, #1
 100e3c8:	d111      	bne.n	100e3ee <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 100e3ca:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
 100e3cc:	2600      	movs	r6, #0
	__asm__ volatile(
 100e3ce:	f38c 8811 	msr	BASEPRI, ip
 100e3d2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 100e3d6:	b946      	cbnz	r6, 100e3ea <async_start+0x4c>
	subdata->cb = cb;
 100e3d8:	200c      	movs	r0, #12
 100e3da:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
 100e3de:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
 100e3e2:	686b      	ldr	r3, [r5, #4]
 100e3e4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 100e3e8:	4798      	blx	r3
}
 100e3ea:	4630      	mov	r0, r6
 100e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 100e3ee:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
 100e3f2:	4287      	cmp	r7, r0
 100e3f4:	bf14      	ite	ne
 100e3f6:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
 100e3fa:	f06f 0677 	mvneq.w	r6, #119	; 0x77
 100e3fe:	e7e6      	b.n	100e3ce <async_start+0x30>

0100e400 <api_start>:
{
 100e400:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 100e402:	2480      	movs	r4, #128	; 0x80
 100e404:	9400      	str	r4, [sp, #0]
 100e406:	f7ff ffca 	bl	100e39e <async_start>
}
 100e40a:	b002      	add	sp, #8
 100e40c:	bd10      	pop	{r4, pc}

0100e40e <onoff_started_callback>:
{
 100e40e:	b410      	push	{r4}
	notify(mgr, 0);
 100e410:	241c      	movs	r4, #28
	return &data->mgr[type];
 100e412:	6900      	ldr	r0, [r0, #16]
 100e414:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 100e416:	fb03 0004 	mla	r0, r3, r4, r0
 100e41a:	2100      	movs	r1, #0
}
 100e41c:	bc10      	pop	{r4}
	notify(mgr, 0);
 100e41e:	4710      	bx	r2

0100e420 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 100e420:	2000      	movs	r0, #0
 100e422:	f7f8 bb93 	b.w	1006b4c <nrfx_clock_start>

0100e426 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 100e426:	2000      	movs	r0, #0
 100e428:	f000 b9a4 	b.w	100e774 <nrfx_clock_stop>

0100e42c <blocking_start_callback>:
{
 100e42c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
 100e42e:	f7fe b8dd 	b.w	100c5ec <z_impl_k_sem_give>

0100e432 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
 100e432:	4770      	bx	lr

0100e434 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 100e434:	2100      	movs	r1, #0
 100e436:	2001      	movs	r0, #1
 100e438:	f000 b812 	b.w	100e460 <z_arm_fatal_error>

0100e43c <arch_irq_connect_dynamic>:

#ifdef CONFIG_DYNAMIC_INTERRUPTS
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
			     void (*routine)(const void *parameter),
			     const void *parameter, uint32_t flags)
{
 100e43c:	b538      	push	{r3, r4, r5, lr}
 100e43e:	4604      	mov	r4, r0
 100e440:	460d      	mov	r5, r1
 100e442:	4611      	mov	r1, r2
	z_isr_install(irq, routine, parameter);
 100e444:	461a      	mov	r2, r3
 100e446:	f7f7 fabf 	bl	10059c8 <z_isr_install>
	z_arm_irq_priority_set(irq, priority, flags);
 100e44a:	4620      	mov	r0, r4
 100e44c:	4629      	mov	r1, r5
 100e44e:	9a04      	ldr	r2, [sp, #16]
 100e450:	f7f7 fb4c 	bl	1005aec <z_arm_irq_priority_set>
	return irq;
}
 100e454:	4620      	mov	r0, r4
 100e456:	bd38      	pop	{r3, r4, r5, pc}

0100e458 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 100e458:	6e43      	ldr	r3, [r0, #100]	; 0x64
 100e45a:	f383 880b 	msr	PSPLIM, r3
}
 100e45e:	4770      	bx	lr

0100e460 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 100e460:	f001 bb23 	b.w	100faaa <z_fatal_error>

0100e464 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 100e464:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 100e466:	6800      	ldr	r0, [r0, #0]
 100e468:	f001 bb1f 	b.w	100faaa <z_fatal_error>

0100e46c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 100e46c:	b508      	push	{r3, lr}
	handler();
 100e46e:	f7f7 fba5 	bl	1005bbc <z_SysNmiOnReset>
	z_arm_int_exit();
}
 100e472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 100e476:	f7f7 bce3 	b.w	1005e40 <z_arm_exc_exit>

0100e47a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
 100e47a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
 100e47e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 100e482:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
 100e484:	bf08      	it	eq
 100e486:	f06f 0015 	mvneq.w	r0, #21
 100e48a:	4770      	bx	lr

0100e48c <mpu_configure_region>:
{
 100e48c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
 100e48e:	890a      	ldrh	r2, [r1, #8]
 100e490:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
 100e492:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 100e494:	684d      	ldr	r5, [r1, #4]
 100e496:	f002 021f 	and.w	r2, r2, #31
 100e49a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
 100e49e:	9300      	str	r3, [sp, #0]
 100e4a0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 100e4a4:	f023 031f 	bic.w	r3, r3, #31
 100e4a8:	1e6a      	subs	r2, r5, #1
 100e4aa:	4413      	add	r3, r2
 100e4ac:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 100e4b0:	2807      	cmp	r0, #7
 100e4b2:	9303      	str	r3, [sp, #12]
 100e4b4:	d804      	bhi.n	100e4c0 <mpu_configure_region+0x34>
	region_init(index, region_conf);
 100e4b6:	4669      	mov	r1, sp
 100e4b8:	f7f7 fd90 	bl	1005fdc <region_init>
}
 100e4bc:	b004      	add	sp, #16
 100e4be:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 100e4c0:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
 100e4c4:	e7fa      	b.n	100e4bc <mpu_configure_region+0x30>

0100e4c6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
 100e4c6:	b570      	push	{r4, r5, r6, lr}
 100e4c8:	4605      	mov	r5, r0
 100e4ca:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 100e4cc:	b142      	cbz	r2, 100e4e0 <strncpy+0x1a>
 100e4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
 100e4d2:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
 100e4d4:	b92c      	cbnz	r4, 100e4e2 <strncpy+0x1c>
 100e4d6:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
 100e4d8:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
 100e4dc:	429a      	cmp	r2, r3
 100e4de:	d1fb      	bne.n	100e4d8 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
 100e4e0:	bd70      	pop	{r4, r5, r6, pc}
		n--;
 100e4e2:	4632      	mov	r2, r6
		*d = *s;
 100e4e4:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
 100e4e8:	e7ef      	b.n	100e4ca <strncpy+0x4>

0100e4ea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 100e4ea:	4603      	mov	r3, r0
	size_t n = 0;
 100e4ec:	2000      	movs	r0, #0

	while (*s != '\0') {
 100e4ee:	5c1a      	ldrb	r2, [r3, r0]
 100e4f0:	b902      	cbnz	r2, 100e4f4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 100e4f2:	4770      	bx	lr
		n++;
 100e4f4:	3001      	adds	r0, #1
 100e4f6:	e7fa      	b.n	100e4ee <strlen+0x4>

0100e4f8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 100e4f8:	4603      	mov	r3, r0
	size_t n = 0;
 100e4fa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 100e4fc:	5c1a      	ldrb	r2, [r3, r0]
 100e4fe:	b10a      	cbz	r2, 100e504 <strnlen+0xc>
 100e500:	4288      	cmp	r0, r1
 100e502:	d100      	bne.n	100e506 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 100e504:	4770      	bx	lr
		n++;
 100e506:	3001      	adds	r0, #1
 100e508:	e7f8      	b.n	100e4fc <strnlen+0x4>

0100e50a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 100e50a:	1e43      	subs	r3, r0, #1
 100e50c:	3901      	subs	r1, #1
 100e50e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 100e512:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 100e516:	4282      	cmp	r2, r0
 100e518:	d101      	bne.n	100e51e <strcmp+0x14>
 100e51a:	2a00      	cmp	r2, #0
 100e51c:	d1f7      	bne.n	100e50e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 100e51e:	1a10      	subs	r0, r2, r0
 100e520:	4770      	bx	lr

0100e522 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 100e522:	b510      	push	{r4, lr}
 100e524:	3901      	subs	r1, #1
 100e526:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 100e528:	4282      	cmp	r2, r0
 100e52a:	d009      	beq.n	100e540 <strncmp+0x1e>
 100e52c:	7803      	ldrb	r3, [r0, #0]
 100e52e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 100e532:	42a3      	cmp	r3, r4
 100e534:	d100      	bne.n	100e538 <strncmp+0x16>
 100e536:	b90b      	cbnz	r3, 100e53c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 100e538:	1b18      	subs	r0, r3, r4
 100e53a:	e002      	b.n	100e542 <strncmp+0x20>
		s1++;
 100e53c:	3001      	adds	r0, #1
		n--;
 100e53e:	e7f3      	b.n	100e528 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
 100e540:	2000      	movs	r0, #0
}
 100e542:	bd10      	pop	{r4, pc}

0100e544 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 100e544:	4603      	mov	r3, r0
 100e546:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 100e548:	b15a      	cbz	r2, 100e562 <memcmp+0x1e>
 100e54a:	3901      	subs	r1, #1
 100e54c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 100e54e:	f813 0b01 	ldrb.w	r0, [r3], #1
 100e552:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 100e556:	42a3      	cmp	r3, r4
 100e558:	d001      	beq.n	100e55e <memcmp+0x1a>
 100e55a:	4290      	cmp	r0, r2
 100e55c:	d0f7      	beq.n	100e54e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 100e55e:	1a80      	subs	r0, r0, r2
}
 100e560:	bd10      	pop	{r4, pc}
		return 0;
 100e562:	4610      	mov	r0, r2
 100e564:	e7fc      	b.n	100e560 <memcmp+0x1c>

0100e566 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 100e566:	1a43      	subs	r3, r0, r1
 100e568:	4293      	cmp	r3, r2
{
 100e56a:	b510      	push	{r4, lr}
 100e56c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
 100e570:	d308      	bcc.n	100e584 <memmove+0x1e>
	char *dest = d;
 100e572:	4602      	mov	r2, r0
 100e574:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 100e576:	429a      	cmp	r2, r3
 100e578:	d007      	beq.n	100e58a <memmove+0x24>
			*dest = *src;
 100e57a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 100e57e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 100e582:	e7f8      	b.n	100e576 <memmove+0x10>
 100e584:	440a      	add	r2, r1
		while (n > 0) {
 100e586:	428a      	cmp	r2, r1
 100e588:	d100      	bne.n	100e58c <memmove+0x26>
		}
	}

	return d;
}
 100e58a:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
 100e58c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 100e590:	f803 4d01 	strb.w	r4, [r3, #-1]!
 100e594:	e7f7      	b.n	100e586 <memmove+0x20>

0100e596 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 100e596:	b510      	push	{r4, lr}
 100e598:	1e43      	subs	r3, r0, #1
 100e59a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 100e59c:	4291      	cmp	r1, r2
 100e59e:	d100      	bne.n	100e5a2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 100e5a0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 100e5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 100e5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 100e5aa:	e7f7      	b.n	100e59c <memcpy+0x6>

0100e5ac <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 100e5ac:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 100e5ae:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 100e5b0:	4402      	add	r2, r0
 100e5b2:	4293      	cmp	r3, r2
 100e5b4:	d100      	bne.n	100e5b8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 100e5b6:	4770      	bx	lr
		*(d_byte++) = c_byte;
 100e5b8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 100e5bc:	e7f9      	b.n	100e5b2 <memset+0x6>

0100e5be <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5be:	6843      	ldr	r3, [r0, #4]
}
 100e5c0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5c2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
 100e5c4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
 100e5c6:	600b      	str	r3, [r1, #0]
}
 100e5c8:	4770      	bx	lr

0100e5ca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5ca:	6843      	ldr	r3, [r0, #4]
 100e5cc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
 100e5ce:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
 100e5d0:	4042      	eors	r2, r0
 100e5d2:	400a      	ands	r2, r1
 100e5d4:	4042      	eors	r2, r0
    p_reg->OUT = value;
 100e5d6:	605a      	str	r2, [r3, #4]
}
 100e5d8:	2000      	movs	r0, #0
 100e5da:	4770      	bx	lr

0100e5dc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5dc:	6843      	ldr	r3, [r0, #4]
}
 100e5de:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5e0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
 100e5e2:	6099      	str	r1, [r3, #8]
}
 100e5e4:	4770      	bx	lr

0100e5e6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5e6:	6843      	ldr	r3, [r0, #4]
}
 100e5e8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5ea:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
 100e5ec:	60d9      	str	r1, [r3, #12]
}
 100e5ee:	4770      	bx	lr

0100e5f0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5f0:	6843      	ldr	r3, [r0, #4]
}
 100e5f2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100e5f4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
 100e5f6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
 100e5f8:	404b      	eors	r3, r1
    p_reg->OUT = value;
 100e5fa:	6053      	str	r3, [r2, #4]
}
 100e5fc:	4770      	bx	lr

0100e5fe <gpio_nrfx_manage_callback>:
	return port->data;
 100e5fe:	6903      	ldr	r3, [r0, #16]
{
 100e600:	b530      	push	{r4, r5, lr}
	return list->head;
 100e602:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 100e604:	b158      	cbz	r0, 100e61e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100e606:	2400      	movs	r4, #0
 100e608:	4281      	cmp	r1, r0
 100e60a:	d112      	bne.n	100e632 <gpio_nrfx_manage_callback+0x34>
	return node->next;
 100e60c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 100e60e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 100e610:	b954      	cbnz	r4, 100e628 <gpio_nrfx_manage_callback+0x2a>
 100e612:	428d      	cmp	r5, r1
	list->head = node;
 100e614:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 100e616:	d100      	bne.n	100e61a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
 100e618:	6098      	str	r0, [r3, #8]
	parent->next = child;
 100e61a:	2000      	movs	r0, #0
 100e61c:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 100e61e:	b96a      	cbnz	r2, 100e63c <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 100e620:	2000      	movs	r0, #0
}
 100e622:	bd30      	pop	{r4, r5, pc}
 100e624:	4628      	mov	r0, r5
 100e626:	e7ef      	b.n	100e608 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 100e628:	428d      	cmp	r5, r1
	parent->next = child;
 100e62a:	6020      	str	r0, [r4, #0]
	list->tail = node;
 100e62c:	bf08      	it	eq
 100e62e:	609c      	streq	r4, [r3, #8]
}
 100e630:	e7f3      	b.n	100e61a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
 100e632:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100e634:	4604      	mov	r4, r0
 100e636:	2d00      	cmp	r5, #0
 100e638:	d1f4      	bne.n	100e624 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
 100e63a:	b13a      	cbz	r2, 100e64c <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
 100e63c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 100e63e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
 100e640:	600a      	str	r2, [r1, #0]
	list->head = node;
 100e642:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 100e644:	2800      	cmp	r0, #0
 100e646:	d1eb      	bne.n	100e620 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
 100e648:	6099      	str	r1, [r3, #8]
}
 100e64a:	e7ea      	b.n	100e622 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
 100e64c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 100e650:	e7e7      	b.n	100e622 <gpio_nrfx_manage_callback+0x24>

0100e652 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
 100e652:	b570      	push	{r4, r5, r6, lr}
 100e654:	460e      	mov	r6, r1
 100e656:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 100e658:	4601      	mov	r1, r0
 100e65a:	b150      	cbz	r0, 100e672 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
 100e65c:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
 100e65e:	688a      	ldr	r2, [r1, #8]
 100e660:	402a      	ands	r2, r5
 100e662:	d002      	beq.n	100e66a <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 100e664:	4630      	mov	r0, r6
 100e666:	684b      	ldr	r3, [r1, #4]
 100e668:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 100e66a:	b114      	cbz	r4, 100e672 <gpio_fire_callbacks.isra.0+0x20>
 100e66c:	4621      	mov	r1, r4
 100e66e:	6824      	ldr	r4, [r4, #0]
 100e670:	e7f5      	b.n	100e65e <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
 100e672:	bd70      	pop	{r4, r5, r6, pc}

0100e674 <cfg_level_pins>:
{
 100e674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
 100e678:	2601      	movs	r6, #1
	uint32_t pin = 0U;
 100e67a:	2500      	movs	r5, #0
	return port->data;
 100e67c:	6907      	ldr	r7, [r0, #16]
	return port->config;
 100e67e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
 100e682:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
 100e684:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
 100e688:	4313      	orrs	r3, r2
 100e68a:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
 100e68e:	b90c      	cbnz	r4, 100e694 <cfg_level_pins+0x20>
}
 100e690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
 100e694:	4226      	tst	r6, r4
 100e696:	d010      	beq.n	100e6ba <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
 100e698:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 100e69a:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
 100e69e:	40e9      	lsrs	r1, r5
 100e6a0:	f001 0101 	and.w	r1, r1, #1
 100e6a4:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 100e6a8:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
 100e6ac:	b2c9      	uxtb	r1, r1
 100e6ae:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
 100e6b2:	f7f7 fe7b 	bl	10063ac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
 100e6b6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
 100e6ba:	3501      	adds	r5, #1
		bit <<= 1;
 100e6bc:	0076      	lsls	r6, r6, #1
 100e6be:	e7e6      	b.n	100e68e <cfg_level_pins+0x1a>

0100e6c0 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
 100e6c0:	6883      	ldr	r3, [r0, #8]
 100e6c2:	689b      	ldr	r3, [r3, #8]
 100e6c4:	4718      	bx	r3

0100e6c6 <vipm_nrf_max_id_val_get>:
}
 100e6c6:	2000      	movs	r0, #0
 100e6c8:	4770      	bx	lr

0100e6ca <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
 100e6ca:	f06f 0015 	mvn.w	r0, #21
 100e6ce:	4770      	bx	lr

0100e6d0 <vipm_nrf_1_register_callback>:
 100e6d0:	4770      	bx	lr

0100e6d2 <vipm_nrf_1_set_enabled>:
 100e6d2:	f06f 0015 	mvn.w	r0, #21
 100e6d6:	4770      	bx	lr

0100e6d8 <vipm_nrf_0_set_enabled>:
 100e6d8:	4608      	mov	r0, r1
 100e6da:	b508      	push	{r3, lr}
 100e6dc:	b139      	cbz	r1, 100e6ee <vipm_nrf_0_set_enabled+0x16>
 100e6de:	2012      	movs	r0, #18
 100e6e0:	f7f7 f9d2 	bl	1005a88 <arch_irq_enable>
 100e6e4:	2000      	movs	r0, #0
 100e6e6:	f7fd fa6d 	bl	100bbc4 <nrfx_ipc_receive_event_enable>
 100e6ea:	2000      	movs	r0, #0
 100e6ec:	bd08      	pop	{r3, pc}
 100e6ee:	f7fd fa71 	bl	100bbd4 <nrfx_ipc_receive_event_disable>
 100e6f2:	e7fa      	b.n	100e6ea <vipm_nrf_0_set_enabled+0x12>

0100e6f4 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
 100e6f4:	2000      	movs	r0, #0
{
 100e6f6:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
 100e6f8:	f7f7 fbb0 	bl	1005e5c <sys_arch_reboot>

0100e6fc <m_assert_handler>:
	k_oops();
 100e6fc:	4040      	eors	r0, r0
 100e6fe:	f380 8811 	msr	BASEPRI, r0
 100e702:	f04f 0003 	mov.w	r0, #3
 100e706:	df02      	svc	2
}
 100e708:	4770      	bx	lr

0100e70a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
 100e70a:	4668      	mov	r0, sp
 100e70c:	f020 0107 	bic.w	r1, r0, #7
 100e710:	468d      	mov	sp, r1
 100e712:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
 100e714:	f7f4 fae2 	bl	1002cdc <MPSL_IRQ_TIMER0_Handler>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
 100e718:	f7f7 fb92 	bl	1005e40 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
 100e71c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 100e720:	4685      	mov	sp, r0
 100e722:	4770      	bx	lr

0100e724 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
 100e724:	4668      	mov	r0, sp
 100e726:	f020 0107 	bic.w	r1, r0, #7
 100e72a:	468d      	mov	sp, r1
 100e72c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
 100e72e:	f7f4 fa5f 	bl	1002bf0 <MPSL_IRQ_RTC0_Handler>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
 100e732:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 100e736:	4685      	mov	sp, r0
 100e738:	4770      	bx	lr

0100e73a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
 100e73a:	4668      	mov	r0, sp
 100e73c:	f020 0107 	bic.w	r1, r0, #7
 100e740:	468d      	mov	sp, r1
 100e742:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
 100e744:	f7f4 fb8c 	bl	1002e60 <MPSL_IRQ_RADIO_Handler>
 100e748:	f7f7 fb7a 	bl	1005e40 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
 100e74c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 100e750:	4685      	mov	sp, r0
 100e752:	4770      	bx	lr

0100e754 <nrf_802154_configure>:

	nrf_802154_cca_cfg_set(&cca_cfg);
}

static int nrf_802154_configure(const struct device *dev)
{
 100e754:	b507      	push	{r0, r1, r2, lr}
	nrf_802154_cca_cfg_get(&cca_cfg);
 100e756:	a801      	add	r0, sp, #4
 100e758:	f000 f8c6 	bl	100e8e8 <nrf_802154_cca_cfg_get>
	cca_cfg.ed_threshold = NRF_802154_CCA_ED_THRESHOLD_DEFAULT + LNA_GAIN;
 100e75c:	232d      	movs	r3, #45	; 0x2d
	nrf_802154_cca_cfg_set(&cca_cfg);
 100e75e:	a801      	add	r0, sp, #4
	cca_cfg.ed_threshold = NRF_802154_CCA_ED_THRESHOLD_DEFAULT + LNA_GAIN;
 100e760:	f88d 3005 	strb.w	r3, [sp, #5]
	cca_cfg.corr_threshold = NRF_802154_CCA_CORR_THRESHOLD_DEFAULT + LNA_GAIN;
 100e764:	f88d 3006 	strb.w	r3, [sp, #6]
	nrf_802154_cca_cfg_set(&cca_cfg);
 100e768:	f000 f8b7 	bl	100e8da <nrf_802154_cca_cfg_set>
	ARG_UNUSED(dev);

	ccaed_threshold_configure();

	return 0;
}
 100e76c:	2000      	movs	r0, #0
 100e76e:	b003      	add	sp, #12
 100e770:	f85d fb04 	ldr.w	pc, [sp], #4

0100e774 <nrfx_clock_stop>:
	switch (domain) {
 100e774:	2801      	cmp	r0, #1
 100e776:	d101      	bne.n	100e77c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
 100e778:	f7f4 bc12 	b.w	1002fa0 <mpsl_clock_hfclk_release>
}
 100e77c:	4770      	bx	lr

0100e77e <nrfx_clock_enable>:
}
 100e77e:	4770      	bx	lr

0100e780 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
 100e780:	f7f4 bc86 	b.w	1003090 <MPSL_IRQ_CLOCK_Handler>

0100e784 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
 100e784:	2000      	movs	r0, #0
 100e786:	4770      	bx	lr

0100e788 <temp_nrf5_mpsl_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
 100e788:	2938      	cmp	r1, #56	; 0x38
{
 100e78a:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
 100e78c:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
 100e78e:	d001      	beq.n	100e794 <temp_nrf5_mpsl_sample_fetch+0xc>
 100e790:	290c      	cmp	r1, #12
 100e792:	d104      	bne.n	100e79e <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
 100e794:	f7f5 f904 	bl	10039a0 <mpsl_temperature_get>
 100e798:	6020      	str	r0, [r4, #0]
	return 0;
 100e79a:	2000      	movs	r0, #0
}
 100e79c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 100e79e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 100e7a2:	e7fb      	b.n	100e79c <temp_nrf5_mpsl_sample_fetch+0x14>

0100e7a4 <nrf_802154_clock_init>:
}
 100e7a4:	4770      	bx	lr

0100e7a6 <nrf_802154_irq_init>:
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
		    void (*routine)(const void *parameter),
		    const void *parameter, uint32_t flags)
{
	return arch_irq_connect_dynamic(irq, priority, routine, parameter,
 100e7a6:	2300      	movs	r3, #0
{
 100e7a8:	b507      	push	{r0, r1, r2, lr}
 100e7aa:	9300      	str	r3, [sp, #0]
 100e7ac:	f7ff fe46 	bl	100e43c <arch_irq_connect_dynamic>
}
 100e7b0:	b003      	add	sp, #12
 100e7b2:	f85d fb04 	ldr.w	pc, [sp], #4

0100e7b6 <nrf_802154_irq_enable>:
	irq_enable(irqn);
 100e7b6:	f7f7 b967 	b.w	1005a88 <arch_irq_enable>

0100e7ba <nrf_802154_irq_disable>:
	irq_disable(irqn);
 100e7ba:	f7f7 b975 	b.w	1005aa8 <arch_irq_disable>

0100e7be <nrf_802154_temperature_init>:
}
 100e7be:	4770      	bx	lr

0100e7c0 <nrf_802154_lp_timer_time_get>:
{
 100e7c0:	b508      	push	{r3, lr}
	return NRF_802154_SL_RTC_TICKS_TO_US(z_nrf_rtc_timer_read());
 100e7c2:	f7f7 f817 	bl	10057f4 <z_nrf_rtc_timer_read>
 100e7c6:	f643 5109 	movw	r1, #15625	; 0x3d09
 100e7ca:	f240 13ff 	movw	r3, #511	; 0x1ff
 100e7ce:	2200      	movs	r2, #0
 100e7d0:	fbe0 3201 	umlal	r3, r2, r0, r1
 100e7d4:	0a5b      	lsrs	r3, r3, #9
}
 100e7d6:	ea43 50c2 	orr.w	r0, r3, r2, lsl #23
 100e7da:	bd08      	pop	{r3, pc}

0100e7dc <nrf_802154_lp_timer_granularity_get>:
}
 100e7dc:	201f      	movs	r0, #31
 100e7de:	4770      	bx	lr

0100e7e0 <nrf_802154_serialization_crit_sect_enter>:
	__asm__ volatile(
 100e7e0:	f04f 0240 	mov.w	r2, #64	; 0x40
 100e7e4:	f3ef 8311 	mrs	r3, BASEPRI
 100e7e8:	f382 8811 	msr	BASEPRI, r2
 100e7ec:	f3bf 8f6f 	isb	sy
#endif

void nrf_802154_serialization_crit_sect_enter(uint32_t *p_critical_section)
{
#ifndef TEST
	*p_critical_section = irq_lock();
 100e7f0:	6003      	str	r3, [r0, #0]
#else
	(void)p_critical_section;
#endif
}
 100e7f2:	4770      	bx	lr

0100e7f4 <nrf_802154_serialization_crit_sect_exit>:
	__asm__ volatile(
 100e7f4:	f380 8811 	msr	BASEPRI, r0
 100e7f8:	f3bf 8f6f 	isb	sy
#ifndef TEST
	irq_unlock(critical_section);
#else
	(void)critical_section;
#endif
}
 100e7fc:	4770      	bx	lr

0100e7fe <endpoint_cb>:
{
 100e7fe:	4608      	mov	r0, r1
 100e800:	b508      	push	{r3, lr}
	if (len) {
 100e802:	4611      	mov	r1, r2
 100e804:	b10a      	cbz	r2, 100e80a <endpoint_cb+0xc>
		nrf_802154_spinel_encoded_packet_received(data, len);
 100e806:	f000 fdba 	bl	100f37e <nrf_802154_spinel_encoded_packet_received>
}
 100e80a:	2000      	movs	r0, #0
 100e80c:	bd08      	pop	{r3, pc}

0100e80e <nrf_802154_backend_init>:
}
 100e80e:	2000      	movs	r0, #0
 100e810:	4770      	bx	lr

0100e812 <serialization_init>:

#include "nrf_802154.h"
#include "nrf_802154_serialization.h"

static int serialization_init(const struct device *dev)
{
 100e812:	b508      	push	{r3, lr}
	/* On NET core we don't use Zephyr's shim layer so we have to call inits manually */
	nrf_802154_init();
 100e814:	f7f8 fbd2 	bl	1006fbc <nrf_802154_init>

	nrf_802154_serialization_init();
 100e818:	f7fc fcfc 	bl	100b214 <nrf_802154_serialization_init>

	return 0;
}
 100e81c:	2000      	movs	r0, #0
 100e81e:	bd08      	pop	{r3, pc}

0100e820 <nrf_802154_channel_set>:
{
 100e820:	b538      	push	{r3, r4, r5, lr}
 100e822:	4604      	mov	r4, r0
    bool changed = nrf_802154_pib_channel_get() != channel;
 100e824:	f7f9 fd5e 	bl	10082e4 <nrf_802154_pib_channel_get>
 100e828:	4605      	mov	r5, r0
    nrf_802154_pib_channel_set(channel);
 100e82a:	4620      	mov	r0, r4
 100e82c:	f7f9 fd60 	bl	10082f0 <nrf_802154_pib_channel_set>
    if (changed)
 100e830:	42a5      	cmp	r5, r4
 100e832:	d004      	beq.n	100e83e <nrf_802154_channel_set+0x1e>
}
 100e834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void)nrf_802154_request_channel_update(REQ_ORIG_HIGHER_LAYER);
 100e838:	2000      	movs	r0, #0
 100e83a:	f000 bb68 	b.w	100ef0e <nrf_802154_request_channel_update>
}
 100e83e:	bd38      	pop	{r3, r4, r5, pc}

0100e840 <nrf_802154_channel_get>:
    return nrf_802154_pib_channel_get();
 100e840:	f7f9 bd50 	b.w	10082e4 <nrf_802154_pib_channel_get>

0100e844 <nrf_802154_tx_power_set>:
    nrf_802154_pib_tx_power_set(power);
 100e844:	f7f9 bd8c 	b.w	1008360 <nrf_802154_pib_tx_power_set>

0100e848 <nrf_802154_tx_power_get>:
{
 100e848:	b508      	push	{r3, lr}
    return nrf_802154_pib_tx_power_get();
 100e84a:	f7f9 fd59 	bl	1008300 <nrf_802154_pib_tx_power_get>
}
 100e84e:	b240      	sxtb	r0, r0
 100e850:	bd08      	pop	{r3, pc}

0100e852 <nrf_802154_temperature_changed>:
    nrf_802154_request_cca_cfg_update();
 100e852:	f000 bb78 	b.w	100ef46 <nrf_802154_request_cca_cfg_update>

0100e856 <nrf_802154_pan_id_set>:
    nrf_802154_pib_pan_id_set(p_pan_id);
 100e856:	f7f9 bd8d 	b.w	1008374 <nrf_802154_pib_pan_id_set>

0100e85a <nrf_802154_extended_address_set>:
    nrf_802154_pib_extended_address_set(p_extended_address);
 100e85a:	f7f9 bd97 	b.w	100838c <nrf_802154_pib_extended_address_set>

0100e85e <nrf_802154_short_address_set>:
    nrf_802154_pib_short_address_set(p_short_address);
 100e85e:	f7f9 bda1 	b.w	10083a4 <nrf_802154_pib_short_address_set>

0100e862 <nrf_802154_sleep>:
    result = nrf_802154_request_sleep(NRF_802154_TERM_802154);
 100e862:	2001      	movs	r0, #1
 100e864:	f000 ba87 	b.w	100ed76 <nrf_802154_request_sleep>

0100e868 <nrf_802154_receive>:
    result = nrf_802154_request_receive(NRF_802154_TERM_802154,
 100e868:	f06f 0301 	mvn.w	r3, #1
{
 100e86c:	b507      	push	{r0, r1, r2, lr}
    result = nrf_802154_request_receive(NRF_802154_TERM_802154,
 100e86e:	2200      	movs	r2, #0
 100e870:	9300      	str	r3, [sp, #0]
 100e872:	2301      	movs	r3, #1
 100e874:	4611      	mov	r1, r2
 100e876:	4618      	mov	r0, r3
 100e878:	f000 fa99 	bl	100edae <nrf_802154_request_receive>
}
 100e87c:	b003      	add	sp, #12
 100e87e:	f85d fb04 	ldr.w	pc, [sp], #4

0100e882 <nrf_802154_energy_detection>:
{
 100e882:	4601      	mov	r1, r0
    result = nrf_802154_request_energy_detection(NRF_802154_TERM_NONE, time_us);
 100e884:	2000      	movs	r0, #0
 100e886:	f000 baec 	b.w	100ee62 <nrf_802154_request_energy_detection>

0100e88a <nrf_802154_cca>:
    result = nrf_802154_request_cca(NRF_802154_TERM_NONE);
 100e88a:	2000      	movs	r0, #0
 100e88c:	f000 bb08 	b.w	100eea0 <nrf_802154_request_cca>

0100e890 <nrf_802154_buffer_free_raw>:
    result = nrf_802154_request_buffer_free(p_data);
 100e890:	f000 bb22 	b.w	100eed8 <nrf_802154_request_buffer_free>

0100e894 <nrf_802154_promiscuous_set>:
    nrf_802154_pib_promiscuous_set(enabled);
 100e894:	f7f9 bd06 	b.w	10082a4 <nrf_802154_pib_promiscuous_set>

0100e898 <nrf_802154_pan_coord_set>:
    nrf_802154_pib_pan_coord_set(enabled);
 100e898:	f7f9 bd1c 	b.w	10082d4 <nrf_802154_pib_pan_coord_set>

0100e89c <nrf_802154_src_addr_matching_method_set>:
    nrf_802154_ack_data_src_addr_matching_method_set(match_method);
 100e89c:	f7fb bc52 	b.w	100a144 <nrf_802154_ack_data_src_addr_matching_method_set>

0100e8a0 <nrf_802154_ack_data_set>:
{
 100e8a0:	b410      	push	{r4}
 100e8a2:	4614      	mov	r4, r2
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 100e8a4:	b2db      	uxtb	r3, r3
{
 100e8a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 100e8aa:	9301      	str	r3, [sp, #4]
 100e8ac:	4623      	mov	r3, r4
}
 100e8ae:	bc10      	pop	{r4}
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 100e8b0:	f7fb bb74 	b.w	1009f9c <nrf_802154_ack_data_for_addr_set>

0100e8b4 <nrf_802154_ack_data_clear>:
    return nrf_802154_ack_data_for_addr_clear(p_addr, extended, data_type);
 100e8b4:	f7fb bbea 	b.w	100a08c <nrf_802154_ack_data_for_addr_clear>

0100e8b8 <nrf_802154_auto_pending_bit_set>:
    nrf_802154_ack_data_enable(enabled);
 100e8b8:	f7fb bb6a 	b.w	1009f90 <nrf_802154_ack_data_enable>

0100e8bc <nrf_802154_pending_bit_for_addr_set>:
    return nrf_802154_ack_data_for_addr_set(p_addr,
 100e8bc:	2300      	movs	r3, #0
{
 100e8be:	b507      	push	{r0, r1, r2, lr}
    return nrf_802154_ack_data_for_addr_set(p_addr,
 100e8c0:	461a      	mov	r2, r3
 100e8c2:	9300      	str	r3, [sp, #0]
 100e8c4:	f7fb fb6a 	bl	1009f9c <nrf_802154_ack_data_for_addr_set>
}
 100e8c8:	b003      	add	sp, #12
 100e8ca:	f85d fb04 	ldr.w	pc, [sp], #4

0100e8ce <nrf_802154_pending_bit_for_addr_clear>:
    return nrf_802154_ack_data_for_addr_clear(p_addr, extended, NRF_802154_ACK_DATA_PENDING_BIT);
 100e8ce:	2200      	movs	r2, #0
 100e8d0:	f7fb bbdc 	b.w	100a08c <nrf_802154_ack_data_for_addr_clear>

0100e8d4 <nrf_802154_pending_bit_for_addr_reset>:
    nrf_802154_ack_data_reset(extended, NRF_802154_ACK_DATA_PENDING_BIT);
 100e8d4:	2100      	movs	r1, #0
 100e8d6:	f7fb bc1b 	b.w	100a110 <nrf_802154_ack_data_reset>

0100e8da <nrf_802154_cca_cfg_set>:
{
 100e8da:	b508      	push	{r3, lr}
    nrf_802154_pib_cca_cfg_set(p_cca_cfg);
 100e8dc:	f7f9 fd6a 	bl	10083b4 <nrf_802154_pib_cca_cfg_set>
}
 100e8e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_request_cca_cfg_update();
 100e8e4:	f000 bb2f 	b.w	100ef46 <nrf_802154_request_cca_cfg_update>

0100e8e8 <nrf_802154_cca_cfg_get>:
    nrf_802154_pib_cca_cfg_get(p_cca_cfg);
 100e8e8:	f7f9 bd82 	b.w	10083f0 <nrf_802154_pib_cca_cfg_get>

0100e8ec <nrf_802154_capabilities_get>:
{
 100e8ec:	b508      	push	{r3, lr}
    nrf_802154_sl_capabilities_t caps_sl  = nrf_802154_sl_capabilities_get();
 100e8ee:	f001 fb31 	bl	100ff54 <nrf_802154_sl_capabilities_get>
    caps_drv |= (NRF_802154_SL_CAPABILITY_DELAYED_RX & caps_sl) ?
 100e8f2:	f000 0307 	and.w	r3, r0, #7
                NRF_802154_CAPABILITY_ANT_DIVERSITY : 0UL;
 100e8f6:	0040      	lsls	r0, r0, #1
    caps_drv |= (NRF_802154_SL_CAPABILITY_TIMESTAMP & caps_sl) ?
 100e8f8:	f000 0050 	and.w	r0, r0, #80	; 0x50
 100e8fc:	4318      	orrs	r0, r3
}
 100e8fe:	f040 0008 	orr.w	r0, r0, #8
 100e902:	bd08      	pop	{r3, pc}

0100e904 <nrf_802154_time_get>:
    return nrf_802154_timer_sched_time_get();
 100e904:	f001 bbaf 	b.w	1010066 <nrf_802154_timer_sched_time_get>

0100e908 <nrf_802154_custom_part_of_radio_init>:
}
 100e908:	4770      	bx	lr

0100e90a <nrf_802154_tx_started>:
 100e90a:	4770      	bx	lr

0100e90c <transmit_failed_notify>:
{
 100e90c:	b538      	push	{r3, r4, r5, lr}
 100e90e:	4604      	mov	r4, r0
 100e910:	460d      	mov	r5, r1
    if (nrf_802154_core_hooks_tx_failed(p_frame, error))
 100e912:	f7f9 fbdf 	bl	10080d4 <nrf_802154_core_hooks_tx_failed>
 100e916:	b128      	cbz	r0, 100e924 <transmit_failed_notify+0x18>
        nrf_802154_notify_transmit_failed(p_frame, error);
 100e918:	4629      	mov	r1, r5
 100e91a:	4620      	mov	r0, r4
}
 100e91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        nrf_802154_notify_transmit_failed(p_frame, error);
 100e920:	f000 ba01 	b.w	100ed26 <nrf_802154_notify_transmit_failed>
}
 100e924:	bd38      	pop	{r3, r4, r5, pc}

0100e926 <ack_is_requested>:
{
 100e926:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
 100e928:	7801      	ldrb	r1, [r0, #0]
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100e92a:	466b      	mov	r3, sp
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
 100e92c:	3101      	adds	r1, #1
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100e92e:	2201      	movs	r2, #1
 100e930:	b2c9      	uxtb	r1, r1
 100e932:	f000 f90d 	bl	100eb50 <nrf_802154_frame_parser_data_init>
    return result && nrf_802154_frame_parser_ar_bit_is_set(&frame_data);
 100e936:	b118      	cbz	r0, 100e940 <ack_is_requested+0x1a>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 100e938:	9b00      	ldr	r3, [sp, #0]
 100e93a:	7858      	ldrb	r0, [r3, #1]
 100e93c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
 100e940:	b007      	add	sp, #28
 100e942:	f85d fb04 	ldr.w	pc, [sp], #4

0100e946 <rssi_last_measurement_get>:
{
 100e946:	b508      	push	{r3, lr}
    uint8_t rssi_sample = nrf_802154_trx_rssi_last_sample_get();
 100e948:	f7fa f98c 	bl	1008c64 <nrf_802154_trx_rssi_last_sample_get>
    rssi_sample = nrf_802154_rssi_sample_corrected_get(rssi_sample);
 100e94c:	f000 f8a3 	bl	100ea96 <nrf_802154_rssi_sample_corrected_get>
    return -((int8_t)rssi_sample);
 100e950:	4240      	negs	r0, r0
}
 100e952:	b240      	sxtb	r0, r0
 100e954:	bd08      	pop	{r3, pc}

0100e956 <request_preconditions_for_state>:
{
 100e956:	b508      	push	{r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
 100e958:	f7f8 fc22 	bl	10071a0 <min_required_rsch_prio>
}
 100e95c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
 100e960:	f001 bb64 	b.w	101002c <nrf_802154_rsch_crit_sect_prio_request>

0100e964 <critical_section_enter_and_verify_timeslot_length>:
{
 100e964:	b510      	push	{r4, lr}
    bool result = nrf_802154_critical_section_enter();
 100e966:	f000 f867 	bl	100ea38 <nrf_802154_critical_section_enter>
    if (result)
 100e96a:	4604      	mov	r4, r0
 100e96c:	b128      	cbz	r0, 100e97a <critical_section_enter_and_verify_timeslot_length+0x16>
        if (!critical_section_can_be_processed_now())
 100e96e:	f7f8 fbe1 	bl	1007134 <critical_section_can_be_processed_now>
 100e972:	4604      	mov	r4, r0
 100e974:	b908      	cbnz	r0, 100e97a <critical_section_enter_and_verify_timeslot_length+0x16>
            nrf_802154_critical_section_exit();
 100e976:	f7f9 fc2d 	bl	10081d4 <nrf_802154_critical_section_exit>
}
 100e97a:	4620      	mov	r0, r4
 100e97c:	bd10      	pop	{r4, pc}

0100e97e <nrf_802154_trx_receive_ack_started>:
    nrf_802154_core_hooks_rx_ack_started();
 100e97e:	f000 b858 	b.w	100ea32 <nrf_802154_core_hooks_rx_ack_started>

0100e982 <nrf_802154_trx_go_idle_finished>:
{
 100e982:	b508      	push	{r3, lr}
    nrf_802154_timer_coord_stop();
 100e984:	f001 fb57 	bl	1010036 <nrf_802154_timer_coord_stop>
}
 100e988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    state_set(RADIO_STATE_SLEEP);
 100e98c:	2000      	movs	r0, #0
 100e98e:	f7f8 bc35 	b.w	10071fc <state_set>

0100e992 <nrf_802154_trx_receive_ack_crcerror>:
{
 100e992:	b508      	push	{r3, lr}
    state_set(RADIO_STATE_RX);
 100e994:	2002      	movs	r0, #2
 100e996:	f7f8 fc31 	bl	10071fc <state_set>
    rx_init();
 100e99a:	f7f8 fc51 	bl	1007240 <rx_init>
}
 100e99e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_INVALID_ACK);
 100e9a2:	2002      	movs	r0, #2
 100e9a4:	f7f8 bbaa 	b.w	10070fc <transmit_failed_notify_and_nesting_allow>

0100e9a8 <nrf_802154_trx_standalone_cca_finished>:
{
 100e9a8:	b510      	push	{r4, lr}
 100e9aa:	4604      	mov	r4, r0
    state_set(RADIO_STATE_RX);
 100e9ac:	2002      	movs	r0, #2
 100e9ae:	f7f8 fc25 	bl	10071fc <state_set>
    rx_init();
 100e9b2:	f7f8 fc45 	bl	1007240 <rx_init>
    nrf_802154_critical_section_nesting_allow();
 100e9b6:	f7f9 fc3b 	bl	1008230 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_cca(result);
 100e9ba:	4620      	mov	r0, r4
 100e9bc:	f000 f9cb 	bl	100ed56 <nrf_802154_notify_cca>
}
 100e9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 100e9c4:	f7f9 bbb8 	b.w	1008138 <nrf_802154_critical_section_nesting_deny>

0100e9c8 <nrf_802154_trx_transmit_frame_ccastarted>:
}
 100e9c8:	4770      	bx	lr

0100e9ca <nrf_802154_core_cca>:
{
 100e9ca:	b538      	push	{r3, r4, r5, lr}
 100e9cc:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
 100e9ce:	f7ff ffc9 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>
    if (result)
 100e9d2:	4604      	mov	r4, r0
 100e9d4:	b168      	cbz	r0, 100e9f2 <nrf_802154_core_cca+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 100e9d6:	2201      	movs	r2, #1
 100e9d8:	4628      	mov	r0, r5
 100e9da:	4611      	mov	r1, r2
 100e9dc:	f7f8 fd62 	bl	10074a4 <current_operation_terminate>
        if (result)
 100e9e0:	4604      	mov	r4, r0
 100e9e2:	b120      	cbz	r0, 100e9ee <nrf_802154_core_cca+0x24>
            state_set(RADIO_STATE_CCA);
 100e9e4:	2008      	movs	r0, #8
 100e9e6:	f7f8 fc09 	bl	10071fc <state_set>
            cca_init();
 100e9ea:	f7f8 fc8f 	bl	100730c <cca_init>
        nrf_802154_critical_section_exit();
 100e9ee:	f7f9 fbf1 	bl	10081d4 <nrf_802154_critical_section_exit>
}
 100e9f2:	4620      	mov	r0, r4
 100e9f4:	bd38      	pop	{r3, r4, r5, pc}

0100e9f6 <nrf_802154_core_continuous_carrier>:
{
 100e9f6:	b538      	push	{r3, r4, r5, lr}
 100e9f8:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
 100e9fa:	f7ff ffb3 	bl	100e964 <critical_section_enter_and_verify_timeslot_length>
    if (result)
 100e9fe:	4604      	mov	r4, r0
 100ea00:	b168      	cbz	r0, 100ea1e <nrf_802154_core_continuous_carrier+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 100ea02:	2201      	movs	r2, #1
 100ea04:	4628      	mov	r0, r5
 100ea06:	4611      	mov	r1, r2
 100ea08:	f7f8 fd4c 	bl	10074a4 <current_operation_terminate>
        if (result)
 100ea0c:	4604      	mov	r4, r0
 100ea0e:	b120      	cbz	r0, 100ea1a <nrf_802154_core_continuous_carrier+0x24>
            state_set(RADIO_STATE_CONTINUOUS_CARRIER);
 100ea10:	2009      	movs	r0, #9
 100ea12:	f7f8 fbf3 	bl	10071fc <state_set>
            continuous_carrier_init();
 100ea16:	f7f8 fc8b 	bl	1007330 <continuous_carrier_init>
        nrf_802154_critical_section_exit();
 100ea1a:	f7f9 fbdb 	bl	10081d4 <nrf_802154_critical_section_exit>
}
 100ea1e:	4620      	mov	r0, r4
 100ea20:	bd38      	pop	{r3, r4, r5, pc}

0100ea22 <nrf_802154_core_hooks_pre_transmission>:
}
 100ea22:	2001      	movs	r0, #1
 100ea24:	4770      	bx	lr

0100ea26 <nrf_802154_core_hooks_tx_setup>:
 100ea26:	2001      	movs	r0, #1
 100ea28:	4770      	bx	lr

0100ea2a <nrf_802154_core_hooks_transmitted>:
        m_transmitted_hooks[i](p_frame);
 100ea2a:	f000 b8d5 	b.w	100ebd8 <nrf_802154_ack_timeout_transmitted_hook>

0100ea2e <nrf_802154_core_hooks_tx_ack_failed>:
}
 100ea2e:	4770      	bx	lr

0100ea30 <nrf_802154_core_hooks_rx_started>:
            break;
        }

        m_rx_started_hooks[i](p_frame);
    }
}
 100ea30:	4770      	bx	lr

0100ea32 <nrf_802154_core_hooks_rx_ack_started>:
        if (m_rx_ack_started_hooks[i] == NULL)
        {
            break;
        }

        m_rx_ack_started_hooks[i]();
 100ea32:	f000 b8d3 	b.w	100ebdc <nrf_802154_ack_timeout_rx_ack_started_hook>

0100ea36 <nrf_802154_core_hooks_tx_ack_started>:
 100ea36:	4770      	bx	lr

0100ea38 <nrf_802154_critical_section_enter>:
    result = critical_section_enter(false);
 100ea38:	2000      	movs	r0, #0
 100ea3a:	f7f9 bb91 	b.w	1008160 <critical_section_enter>

0100ea3e <nrf_802154_critical_section_forcefully_enter>:
    critical_section_entered = critical_section_enter(true);
 100ea3e:	2001      	movs	r0, #1
 100ea40:	f7f9 bb8e 	b.w	1008160 <critical_section_enter>

0100ea44 <nrf_802154_debug_init>:
#if ENABLE_DEBUG_LOG
#warning attempt to use deprecated ENABLE_DEBUG_LOG switch
// When linking with SL use NRF_802154_SL_ENABLE_DEBUG_LOG instead
#endif // ENABLE_DEBUG_LOG

    nrf_802154_sl_log_init();
 100ea44:	f001 ba88 	b.w	100ff58 <nrf_802154_sl_log_init>

0100ea48 <nrf_802154_queue_init>:
    assert(item_size != 0U);

    /* Due uint8_t type of nrf_802154_queue_t::item_size */
    assert(item_size <= UINT8_MAX);

    size_t capacity = memory_size / item_size;
 100ea48:	fbb2 f2f3 	udiv	r2, r2, r3
    /* Due uint8_t type of nrf_802154_queue_t::capacity */
    assert(capacity <= UINT8_MAX);

    p_queue->p_memory  = p_memory;
    p_queue->capacity  = capacity;
    p_queue->item_size = item_size;
 100ea4c:	7103      	strb	r3, [r0, #4]
    p_queue->wridx     = 0U;
 100ea4e:	2300      	movs	r3, #0
    p_queue->p_memory  = p_memory;
 100ea50:	6001      	str	r1, [r0, #0]
    p_queue->wridx     = 0U;
 100ea52:	7183      	strb	r3, [r0, #6]
    p_queue->capacity  = capacity;
 100ea54:	7142      	strb	r2, [r0, #5]
    p_queue->rdidx     = 0U;
 100ea56:	71c3      	strb	r3, [r0, #7]
}
 100ea58:	4770      	bx	lr

0100ea5a <nrf_802154_queue_push_begin>:

void * nrf_802154_queue_push_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->wridx);
 100ea5a:	7981      	ldrb	r1, [r0, #6]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
 100ea5c:	7902      	ldrb	r2, [r0, #4]
 100ea5e:	6800      	ldr	r0, [r0, #0]
}
 100ea60:	fb01 0002 	mla	r0, r1, r2, r0
 100ea64:	4770      	bx	lr

0100ea66 <nrf_802154_queue_push_commit>:

void nrf_802154_queue_push_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
 100ea66:	7983      	ldrb	r3, [r0, #6]
    if (v >= wrap_at_value)
 100ea68:	7942      	ldrb	r2, [r0, #5]
    v++;
 100ea6a:	3301      	adds	r3, #1
 100ea6c:	b2db      	uxtb	r3, r3
        v = 0U;
 100ea6e:	429a      	cmp	r2, r3
 100ea70:	bf98      	it	ls
 100ea72:	2300      	movls	r3, #0
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
 100ea74:	7183      	strb	r3, [r0, #6]
}
 100ea76:	4770      	bx	lr

0100ea78 <nrf_802154_queue_pop_begin>:

void * nrf_802154_queue_pop_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->rdidx);
 100ea78:	79c1      	ldrb	r1, [r0, #7]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
 100ea7a:	7902      	ldrb	r2, [r0, #4]
 100ea7c:	6800      	ldr	r0, [r0, #0]
}
 100ea7e:	fb01 0002 	mla	r0, r1, r2, r0
 100ea82:	4770      	bx	lr

0100ea84 <nrf_802154_queue_pop_commit>:

void nrf_802154_queue_pop_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
 100ea84:	79c3      	ldrb	r3, [r0, #7]
    if (v >= wrap_at_value)
 100ea86:	7942      	ldrb	r2, [r0, #5]
    v++;
 100ea88:	3301      	adds	r3, #1
 100ea8a:	b2db      	uxtb	r3, r3
        v = 0U;
 100ea8c:	429a      	cmp	r2, r3
 100ea8e:	bf98      	it	ls
 100ea90:	2300      	movls	r3, #0
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
 100ea92:	71c3      	strb	r3, [r0, #7]
}
 100ea94:	4770      	bx	lr

0100ea96 <nrf_802154_rssi_sample_corrected_get>:
#else
#error Unsupported chip family
#endif

uint8_t nrf_802154_rssi_sample_corrected_get(uint8_t rssi_sample)
{
 100ea96:	b510      	push	{r4, lr}
 100ea98:	4604      	mov	r4, r0
    return rssi_sample + nrf_802154_rssi_sample_temp_corr_value_get(rssi_sample);
 100ea9a:	f7f9 fccd 	bl	1008438 <nrf_802154_rssi_sample_temp_corr_value_get>
 100ea9e:	4420      	add	r0, r4
}
 100eaa0:	b2c0      	uxtb	r0, r0
 100eaa2:	bd10      	pop	{r4, pc}

0100eaa4 <nrf_802154_rssi_lqi_corrected_get>:

uint8_t nrf_802154_rssi_lqi_corrected_get(uint8_t lqi)
{
 100eaa4:	b510      	push	{r4, lr}
 100eaa6:	4604      	mov	r4, r0
    return lqi - nrf_802154_rssi_sample_temp_corr_value_get(lqi);
 100eaa8:	f7f9 fcc6 	bl	1008438 <nrf_802154_rssi_sample_temp_corr_value_get>
 100eaac:	1a20      	subs	r0, r4, r0
}
 100eaae:	b2c0      	uxtb	r0, r0
 100eab0:	bd10      	pop	{r4, pc}

0100eab2 <nrf_802154_rssi_ed_corrected_get>:
 100eab2:	f7ff bff7 	b.w	100eaa4 <nrf_802154_rssi_lqi_corrected_get>

0100eab6 <nrf_802154_rssi_cca_ed_threshold_corrected_get>:
 100eab6:	f7ff bff5 	b.w	100eaa4 <nrf_802154_rssi_lqi_corrected_get>

0100eaba <swi_irq_handler>:
{
 100eaba:	b508      	push	{r3, lr}
    nrf_802154_trx_swi_irq_handler();
 100eabc:	f7fa fcd6 	bl	100946c <nrf_802154_trx_swi_irq_handler>
    nrf_802154_notification_swi_irq_handler();
 100eac0:	f7fb fe66 	bl	100a790 <nrf_802154_notification_swi_irq_handler>
    nrf_802154_rsch_prio_drop_swi_irq_handler();
 100eac4:	f7fb fec8 	bl	100a858 <nrf_802154_rsch_prio_drop_swi_irq_handler>
    nrf_802154_request_swi_irq_handler();
 100eac8:	f7fb ff0a 	bl	100a8e0 <nrf_802154_request_swi_irq_handler>
}
 100eacc:	bd08      	pop	{r3, pc}

0100eace <txframe_finish_disable_ppis>:
    nrf_802154_trx_ppi_for_ramp_up_clear(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
 100eace:	2100      	movs	r1, #0
 100ead0:	2800      	cmp	r0, #0
 100ead2:	bf14      	ite	ne
 100ead4:	2004      	movne	r0, #4
 100ead6:	4608      	moveq	r0, r1
 100ead8:	f7fa bd46 	b.w	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>

0100eadc <rxframe_finish_disable_ppis>:
{
 100eadc:	b508      	push	{r3, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, true);
 100eade:	2004      	movs	r0, #4
 100eae0:	2101      	movs	r1, #1
 100eae2:	f7fa fd41 	bl	1009568 <nrf_802154_trx_ppi_for_ramp_up_clear>
}
 100eae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_radio_sync_clear(EGU_SYNC_TASK);
 100eaea:	200c      	movs	r0, #12
 100eaec:	f7fa bdc0 	b.w	1009670 <nrf_802154_trx_ppi_for_radio_sync_clear>

0100eaf0 <nrf_802154_trx_init>:
{
 100eaf0:	b508      	push	{r3, lr}
    nrf_802154_trx_module_reset();
 100eaf2:	f7f9 fe45 	bl	1008780 <nrf_802154_trx_module_reset>
    nrf_timer_init();
 100eaf6:	f7f9 fe2b 	bl	1008750 <nrf_timer_init>
}
 100eafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 100eafe:	f7f9 bce3 	b.w	10084c8 <nrf_802154_swi_init>

0100eb02 <nrf_802154_trx_channel_set>:
    channel_set(channel);
 100eb02:	f7f9 bdcf 	b.w	10086a4 <channel_set>

0100eb06 <nrf_802154_trx_cca_configuration_update>:
    cca_configuration_update();
 100eb06:	f7f9 bdb1 	b.w	100866c <cca_configuration_update>

0100eb0a <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>:
    __ASM("nop");
 100eb0a:	bf00      	nop
    __ASM("nop");
 100eb0c:	bf00      	nop
    __ASM("nop");
 100eb0e:	bf00      	nop
    __ASM("nop");
 100eb10:	bf00      	nop
    __ASM("nop");
 100eb12:	bf00      	nop
    __ASM("nop");
 100eb14:	bf00      	nop
}
 100eb16:	4770      	bx	lr

0100eb18 <nrf_802154_frame_parser_ie_iterator_end>:
 * @returns  Identifier of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_id_get(const uint8_t * p_ie_iterator)
{
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 100eb18:	7802      	ldrb	r2, [r0, #0]
 100eb1a:	7843      	ldrb	r3, [r0, #1]
{
    uint8_t ie_id = nrf_802154_frame_parser_ie_id_get(p_ie_iterator);

    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
           || (p_ie_iterator >= p_end_addr);
 100eb1c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 100eb20:	d106      	bne.n	100eb30 <nrf_802154_frame_parser_ie_iterator_end+0x18>
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 100eb22:	005b      	lsls	r3, r3, #1
 100eb24:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
 100eb28:	3b7e      	subs	r3, #126	; 0x7e
    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
 100eb2a:	b2db      	uxtb	r3, r3
 100eb2c:	2b01      	cmp	r3, #1
 100eb2e:	d904      	bls.n	100eb3a <nrf_802154_frame_parser_ie_iterator_end+0x22>
           || (p_ie_iterator >= p_end_addr);
 100eb30:	4288      	cmp	r0, r1
 100eb32:	bf34      	ite	cc
 100eb34:	2000      	movcc	r0, #0
 100eb36:	2001      	movcs	r0, #1
 100eb38:	4770      	bx	lr
 100eb3a:	2001      	movs	r0, #1
}
 100eb3c:	4770      	bx	lr

0100eb3e <key_source_size_get>:
    switch (key_id_mode)
 100eb3e:	2802      	cmp	r0, #2
 100eb40:	d004      	beq.n	100eb4c <key_source_size_get+0xe>
            return KEY_SRC_KEY_ID_MODE_3_SIZE;
 100eb42:	2803      	cmp	r0, #3
 100eb44:	bf14      	ite	ne
 100eb46:	2000      	movne	r0, #0
 100eb48:	2008      	moveq	r0, #8
 100eb4a:	4770      	bx	lr
    switch (key_id_mode)
 100eb4c:	2004      	movs	r0, #4
}
 100eb4e:	4770      	bx	lr

0100eb50 <nrf_802154_frame_parser_data_init>:

bool nrf_802154_frame_parser_data_init(const uint8_t                  * p_frame,
                                       uint8_t                          valid_data_len,
                                       nrf_802154_frame_parser_level_t  requested_parse_level,
                                       nrf_802154_frame_parser_data_t * p_parser_data)
{
 100eb50:	b538      	push	{r3, r4, r5, lr}
 100eb52:	4615      	mov	r5, r2
 100eb54:	461c      	mov	r4, r3
    if (p_frame == NULL)
 100eb56:	b1d0      	cbz	r0, 100eb8e <nrf_802154_frame_parser_data_init+0x3e>
    {
        return false;
    }

    p_parser_data->p_frame        = p_frame;
 100eb58:	6018      	str	r0, [r3, #0]
    p_parser_data->valid_data_len = valid_data_len;
 100eb5a:	7159      	strb	r1, [r3, #5]
    p_parser_data->parse_level    = PARSE_LEVEL_NONE;
 100eb5c:	2300      	movs	r3, #0

    memset(&p_parser_data->mhr, NRF_802154_FRAME_PARSER_INVALID_OFFSET, sizeof(p_parser_data->mhr));
 100eb5e:	220a      	movs	r2, #10
    p_parser_data->parse_level    = PARSE_LEVEL_NONE;
 100eb60:	7123      	strb	r3, [r4, #4]
    memset(&p_parser_data->mhr, NRF_802154_FRAME_PARSER_INVALID_OFFSET, sizeof(p_parser_data->mhr));
 100eb62:	21ff      	movs	r1, #255	; 0xff
 100eb64:	1da0      	adds	r0, r4, #6
 100eb66:	f7ff fd21 	bl	100e5ac <memset>
    memset(&p_parser_data->mac_payload,
 100eb6a:	2201      	movs	r2, #1
 100eb6c:	21ff      	movs	r1, #255	; 0xff
 100eb6e:	f104 0010 	add.w	r0, r4, #16
 100eb72:	f7ff fd1b 	bl	100e5ac <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->mac_payload));
    memset(&p_parser_data->helper,
 100eb76:	21ff      	movs	r1, #255	; 0xff
 100eb78:	f104 0011 	add.w	r0, r4, #17
 100eb7c:	2207      	movs	r2, #7
 100eb7e:	f7ff fd15 	bl	100e5ac <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->helper));

    return parse_state_advance(p_parser_data, requested_parse_level);
 100eb82:	4629      	mov	r1, r5
 100eb84:	4620      	mov	r0, r4
}
 100eb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return parse_state_advance(p_parser_data, requested_parse_level);
 100eb8a:	f7fa bfa3 	b.w	1009ad4 <parse_state_advance>
}
 100eb8e:	bd38      	pop	{r3, r4, r5, pc}

0100eb90 <nrf_802154_frame_parser_valid_data_extend>:

bool nrf_802154_frame_parser_valid_data_extend(nrf_802154_frame_parser_data_t * p_parser_data,
                                               uint8_t                          valid_data_len,
                                               nrf_802154_frame_parser_level_t  requested_parse_level)
{
 100eb90:	460b      	mov	r3, r1
 100eb92:	4611      	mov	r1, r2
    if (valid_data_len > p_parser_data->valid_data_len)
 100eb94:	7942      	ldrb	r2, [r0, #5]
 100eb96:	429a      	cmp	r2, r3
    {
        p_parser_data->valid_data_len = valid_data_len;
 100eb98:	bf38      	it	cc
 100eb9a:	7143      	strbcc	r3, [r0, #5]
    }

    return parse_state_advance(p_parser_data, requested_parse_level);
 100eb9c:	f7fa bf9a 	b.w	1009ad4 <parse_state_advance>

0100eba0 <key_matches>:
{
 100eba0:	4603      	mov	r3, r0
    if (!p_key->taken)
 100eba2:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
{
 100eba6:	b510      	push	{r4, lr}
    if (!p_key->taken)
 100eba8:	b198      	cbz	r0, 100ebd2 <key_matches+0x32>
    if (p_key->mode != p_id->mode)
 100ebaa:	780c      	ldrb	r4, [r1, #0]
 100ebac:	7e5a      	ldrb	r2, [r3, #25]
 100ebae:	42a2      	cmp	r2, r4
 100ebb0:	d110      	bne.n	100ebd4 <key_matches+0x34>
    if (p_id->mode == KEY_ID_MODE_0)
 100ebb2:	b172      	cbz	r2, 100ebd2 <key_matches+0x32>
    else if ((p_id->p_key_id == NULL) ||
 100ebb4:	6848      	ldr	r0, [r1, #4]
 100ebb6:	b160      	cbz	r0, 100ebd2 <key_matches+0x32>
             (memcmp(p_id->p_key_id, p_key->id, id_length_get(p_id->mode)) != 0))
 100ebb8:	f103 0110 	add.w	r1, r3, #16
    switch (mode)
 100ebbc:	1e53      	subs	r3, r2, #1
 100ebbe:	2b02      	cmp	r3, #2
 100ebc0:	bf96      	itet	ls
 100ebc2:	0092      	lslls	r2, r2, #2
             (memcmp(p_id->p_key_id, p_key->id, id_length_get(p_id->mode)) != 0))
 100ebc4:	2200      	movhi	r2, #0
 100ebc6:	3a03      	subls	r2, #3
 100ebc8:	f7ff fcbc 	bl	100e544 <memcmp>
    else if ((p_id->p_key_id == NULL) ||
 100ebcc:	fab0 f080 	clz	r0, r0
 100ebd0:	0940      	lsrs	r0, r0, #5
}
 100ebd2:	bd10      	pop	{r4, pc}
        return false;
 100ebd4:	2000      	movs	r0, #0
 100ebd6:	e7fc      	b.n	100ebd2 <key_matches+0x32>

0100ebd8 <nrf_802154_ack_timeout_transmitted_hook>:

void nrf_802154_ack_timeout_transmitted_hook(const uint8_t * p_frame)
{
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
 100ebd8:	f7fb b8ee 	b.w	1009db8 <timeout_timer_stop>

0100ebdc <nrf_802154_ack_timeout_rx_ack_started_hook>:

void nrf_802154_ack_timeout_rx_ack_started_hook(void)
{
    assert(m_procedure_is_active);

    timeout_timer_stop();
 100ebdc:	f7fb b8ec 	b.w	1009db8 <timeout_timer_stop>

0100ebe0 <nrf_802154_ack_timeout_tx_failed_hook>:
}

bool nrf_802154_ack_timeout_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 100ebe0:	b508      	push	{r3, lr}
    (void)error;
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
 100ebe2:	f7fb f8e9 	bl	1009db8 <timeout_timer_stop>

    return true;
}
 100ebe6:	2001      	movs	r0, #1
 100ebe8:	bd08      	pop	{r3, pc}

0100ebea <nrf_802154_ack_generator_init>:
            return FRAME_VERSION_INVALID;
    }
}

void nrf_802154_ack_generator_init(void)
{
 100ebea:	b508      	push	{r3, lr}
    // Both generators are initialized to enable sending both Imm-Acks and Enh-Acks.
    nrf_802154_imm_ack_generator_init();
 100ebec:	f7fb fd6e 	bl	100a6cc <nrf_802154_imm_ack_generator_init>
    nrf_802154_enh_ack_generator_init();
}
 100ebf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_init();
 100ebf4:	f000 b818 	b.w	100ec28 <nrf_802154_enh_ack_generator_init>

0100ebf8 <nrf_802154_ack_generator_reset>:

void nrf_802154_ack_generator_reset(void)
{
 100ebf8:	b508      	push	{r3, lr}
    // Both generators are reset to enable sending both Imm-Ack and Enh-Ack.
    nrf_802154_imm_ack_generator_reset();
 100ebfa:	f000 f816 	bl	100ec2a <nrf_802154_imm_ack_generator_reset>
    nrf_802154_enh_ack_generator_reset();
}
 100ebfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_reset();
 100ec02:	f7fb bb2b 	b.w	100a25c <nrf_802154_enh_ack_generator_reset>

0100ec06 <nrf_802154_ack_generator_create>:
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 100ec06:	6803      	ldr	r3, [r0, #0]

uint8_t * nrf_802154_ack_generator_create(const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100ec08:	4602      	mov	r2, r0
 100ec0a:	789b      	ldrb	r3, [r3, #2]
 100ec0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    switch (nrf_802154_frame_parser_frame_version_get(p_frame_data))
 100ec10:	2b10      	cmp	r3, #16
 100ec12:	d002      	beq.n	100ec1a <nrf_802154_ack_generator_create+0x14>
 100ec14:	2b20      	cmp	r3, #32
 100ec16:	d003      	beq.n	100ec20 <nrf_802154_ack_generator_create+0x1a>
 100ec18:	b923      	cbnz	r3, 100ec24 <nrf_802154_ack_generator_create+0x1e>
    assert(nrf_802154_frame_parser_ar_bit_is_set(p_frame_data));

    switch (frame_version_is_2015_or_above(p_frame_data))
    {
        case FRAME_VERSION_BELOW_2015:
            return nrf_802154_imm_ack_generator_create(p_frame_data);
 100ec1a:	4610      	mov	r0, r2
 100ec1c:	f7fb bd6a 	b.w	100a6f4 <nrf_802154_imm_ack_generator_create>

        case FRAME_VERSION_2015_OR_ABOVE:
            return nrf_802154_enh_ack_generator_create(p_frame_data);
 100ec20:	f7fb bb3c 	b.w	100a29c <nrf_802154_enh_ack_generator_create>

        default:
            return NULL;
    }
}
 100ec24:	2000      	movs	r0, #0
 100ec26:	4770      	bx	lr

0100ec28 <nrf_802154_enh_ack_generator_init>:
}
 100ec28:	4770      	bx	lr

0100ec2a <nrf_802154_imm_ack_generator_reset>:
}
 100ec2a:	4770      	bx	lr

0100ec2c <swi_notify_received>:
{
 100ec2c:	b570      	push	{r4, r5, r6, lr}
 100ec2e:	4606      	mov	r6, r0
 100ec30:	460d      	mov	r5, r1
 100ec32:	4614      	mov	r4, r2
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ec34:	f7fb fd78 	bl	100a728 <ntf_enter>
    p_slot->type                 = NTF_TYPE_RECEIVED;
 100ec38:	2300      	movs	r3, #0
 100ec3a:	7003      	strb	r3, [r0, #0]
    p_slot->data.received.p_data = p_data;
 100ec3c:	6046      	str	r6, [r0, #4]
    p_slot->data.received.power  = power;
 100ec3e:	7205      	strb	r5, [r0, #8]
    p_slot->data.received.lqi    = lqi;
 100ec40:	7244      	strb	r4, [r0, #9]
}
 100ec42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ntf_exit();
 100ec46:	f7fb bd7b 	b.w	100a740 <ntf_exit>

0100ec4a <swi_notify_receive_failed>:
{
 100ec4a:	b538      	push	{r3, r4, r5, lr}
 100ec4c:	4605      	mov	r5, r0
 100ec4e:	460c      	mov	r4, r1
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ec50:	f7fb fd6a 	bl	100a728 <ntf_enter>
    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
 100ec54:	2301      	movs	r3, #1
 100ec56:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive_failed.error = error;
 100ec58:	7105      	strb	r5, [r0, #4]
    p_slot->data.receive_failed.id    = id;
 100ec5a:	6084      	str	r4, [r0, #8]
}
 100ec5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ntf_exit();
 100ec60:	f7fb bd6e 	b.w	100a740 <ntf_exit>

0100ec64 <swi_notify_transmitted>:
{
 100ec64:	b538      	push	{r3, r4, r5, lr}
 100ec66:	4604      	mov	r4, r0
 100ec68:	460d      	mov	r5, r1
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ec6a:	f7fb fd5d 	bl	100a728 <ntf_enter>
    p_slot->type                      = NTF_TYPE_TRANSMITTED;
 100ec6e:	2302      	movs	r3, #2
    p_slot->data.transmitted.p_frame  = p_frame;
 100ec70:	6044      	str	r4, [r0, #4]
    p_slot->type                      = NTF_TYPE_TRANSMITTED;
 100ec72:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmitted.metadata = *p_metadata;
 100ec74:	f100 0408 	add.w	r4, r0, #8
 100ec78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 100ec7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 100ec80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ntf_exit();
 100ec84:	f7fb bd5c 	b.w	100a740 <ntf_exit>

0100ec88 <swi_notify_transmit_failed>:
{
 100ec88:	b570      	push	{r4, r5, r6, lr}
 100ec8a:	460c      	mov	r4, r1
 100ec8c:	4606      	mov	r6, r0
 100ec8e:	4615      	mov	r5, r2
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ec90:	f7fb fd4a 	bl	100a728 <ntf_enter>
    p_slot->type                          = NTF_TYPE_TRANSMIT_FAILED;
 100ec94:	2303      	movs	r3, #3
    p_slot->data.transmit_failed.p_frame  = p_frame;
 100ec96:	6046      	str	r6, [r0, #4]
    p_slot->type                          = NTF_TYPE_TRANSMIT_FAILED;
 100ec98:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit_failed.error    = error;
 100ec9a:	7204      	strb	r4, [r0, #8]
    p_slot->data.transmit_failed.metadata = *p_metadata;
 100ec9c:	f100 040c 	add.w	r4, r0, #12
 100eca0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 100eca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 100eca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ntf_exit();
 100ecac:	f7fb bd48 	b.w	100a740 <ntf_exit>

0100ecb0 <swi_notify_energy_detected>:
{
 100ecb0:	b510      	push	{r4, lr}
 100ecb2:	4604      	mov	r4, r0
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ecb4:	f7fb fd38 	bl	100a728 <ntf_enter>
    p_slot->type                        = NTF_TYPE_ENERGY_DETECTED;
 100ecb8:	2304      	movs	r3, #4
 100ecba:	7003      	strb	r3, [r0, #0]
    p_slot->data.energy_detected.result = result;
 100ecbc:	7104      	strb	r4, [r0, #4]
}
 100ecbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ntf_exit();
 100ecc2:	f7fb bd3d 	b.w	100a740 <ntf_exit>

0100ecc6 <swi_notify_energy_detection_failed>:
{
 100ecc6:	b510      	push	{r4, lr}
 100ecc8:	4604      	mov	r4, r0
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ecca:	f7fb fd2d 	bl	100a728 <ntf_enter>
    p_slot->type                               = NTF_TYPE_ENERGY_DETECTION_FAILED;
 100ecce:	2305      	movs	r3, #5
 100ecd0:	7003      	strb	r3, [r0, #0]
    p_slot->data.energy_detection_failed.error = error;
 100ecd2:	7104      	strb	r4, [r0, #4]
}
 100ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ntf_exit();
 100ecd8:	f7fb bd32 	b.w	100a740 <ntf_exit>

0100ecdc <swi_notify_cca>:
{
 100ecdc:	b510      	push	{r4, lr}
 100ecde:	4604      	mov	r4, r0
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ece0:	f7fb fd22 	bl	100a728 <ntf_enter>
    p_slot->type            = NTF_TYPE_CCA;
 100ece4:	2306      	movs	r3, #6
 100ece6:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca.result = channel_free;
 100ece8:	7104      	strb	r4, [r0, #4]
}
 100ecea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ntf_exit();
 100ecee:	f7fb bd27 	b.w	100a740 <ntf_exit>

0100ecf2 <swi_notify_cca_failed>:
{
 100ecf2:	b510      	push	{r4, lr}
 100ecf4:	4604      	mov	r4, r0
    nrf_802154_ntf_data_t * p_slot = ntf_enter();
 100ecf6:	f7fb fd17 	bl	100a728 <ntf_enter>
    p_slot->type                  = NTF_TYPE_CCA_FAILED;
 100ecfa:	2307      	movs	r3, #7
 100ecfc:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca_failed.error = error;
 100ecfe:	7104      	strb	r4, [r0, #4]
}
 100ed00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ntf_exit();
 100ed04:	f7fb bd1c 	b.w	100a740 <ntf_exit>

0100ed08 <nrf_802154_notify_received>:
    swi_notify_received(p_data, power, lqi);
 100ed08:	f7ff bf90 	b.w	100ec2c <swi_notify_received>

0100ed0c <nrf_802154_notify_receive_failed>:
    swi_notify_receive_failed(error, id);
 100ed0c:	f7ff bf9d 	b.w	100ec4a <swi_notify_receive_failed>

0100ed10 <nrf_802154_notify_transmitted>:
{
 100ed10:	b538      	push	{r3, r4, r5, lr}
 100ed12:	4604      	mov	r4, r0
 100ed14:	460d      	mov	r5, r1
    nrf_802154_tx_work_buffer_original_frame_update(p_frame,
 100ed16:	f7fa fce1 	bl	10096dc <nrf_802154_tx_work_buffer_original_frame_update>
    swi_notify_transmitted(p_frame, p_metadata);
 100ed1a:	4629      	mov	r1, r5
 100ed1c:	4620      	mov	r0, r4
}
 100ed1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    swi_notify_transmitted(p_frame, p_metadata);
 100ed22:	f7ff bf9f 	b.w	100ec64 <swi_notify_transmitted>

0100ed26 <nrf_802154_notify_transmit_failed>:
{
 100ed26:	b530      	push	{r4, r5, lr}
 100ed28:	4604      	mov	r4, r0
 100ed2a:	460d      	mov	r5, r1
 100ed2c:	b085      	sub	sp, #20
    nrf_802154_transmit_done_metadata_t metadata = {0};
 100ed2e:	2210      	movs	r2, #16
 100ed30:	2100      	movs	r1, #0
 100ed32:	4668      	mov	r0, sp
 100ed34:	f7ff fc3a 	bl	100e5ac <memset>
    nrf_802154_tx_work_buffer_original_frame_update(p_frame,
 100ed38:	4669      	mov	r1, sp
 100ed3a:	4620      	mov	r0, r4
 100ed3c:	f7fa fcce 	bl	10096dc <nrf_802154_tx_work_buffer_original_frame_update>
    swi_notify_transmit_failed(p_frame, error, &metadata);
 100ed40:	466a      	mov	r2, sp
 100ed42:	4629      	mov	r1, r5
 100ed44:	4620      	mov	r0, r4
 100ed46:	f7ff ff9f 	bl	100ec88 <swi_notify_transmit_failed>
}
 100ed4a:	b005      	add	sp, #20
 100ed4c:	bd30      	pop	{r4, r5, pc}

0100ed4e <nrf_802154_notify_energy_detected>:
    swi_notify_energy_detected(result);
 100ed4e:	f7ff bfaf 	b.w	100ecb0 <swi_notify_energy_detected>

0100ed52 <nrf_802154_notify_energy_detection_failed>:
    swi_notify_energy_detection_failed(error);
 100ed52:	f7ff bfb8 	b.w	100ecc6 <swi_notify_energy_detection_failed>

0100ed56 <nrf_802154_notify_cca>:
    swi_notify_cca(is_free);
 100ed56:	f7ff bfc1 	b.w	100ecdc <swi_notify_cca>

0100ed5a <nrf_802154_notify_cca_failed>:
    swi_notify_cca_failed(error);
 100ed5a:	f7ff bfca 	b.w	100ecf2 <swi_notify_cca_failed>

0100ed5e <active_vector_priority_is_high>:
{
 100ed5e:	b510      	push	{r4, lr}
    return nrf_802154_critical_section_active_vector_priority_get() <=
 100ed60:	f7f9 f9f0 	bl	1008144 <nrf_802154_critical_section_active_vector_priority_get>
 100ed64:	4604      	mov	r4, r0
           nrf_802154_irq_priority_get(NRF_802154_EGU_IRQN);
 100ed66:	2014      	movs	r0, #20
 100ed68:	f7f7 ffbc 	bl	1006ce4 <nrf_802154_irq_priority_get>
}
 100ed6c:	4284      	cmp	r4, r0
 100ed6e:	bf8c      	ite	hi
 100ed70:	2000      	movhi	r0, #0
 100ed72:	2001      	movls	r0, #1
 100ed74:	bd10      	pop	{r4, pc}

0100ed76 <nrf_802154_request_sleep>:
    REQUEST_FUNCTION(nrf_802154_core_sleep, swi_sleep, term_lvl)
 100ed76:	2300      	movs	r3, #0
{
 100ed78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100ed7a:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_sleep, swi_sleep, term_lvl)
 100ed7c:	f88d 3007 	strb.w	r3, [sp, #7]
 100ed80:	f7ff ffed 	bl	100ed5e <active_vector_priority_is_high>
 100ed84:	4605      	mov	r5, r0
 100ed86:	b140      	cbz	r0, 100ed9a <nrf_802154_request_sleep+0x24>
 100ed88:	4620      	mov	r0, r4
 100ed8a:	f7f8 ffc7 	bl	1007d1c <nrf_802154_core_sleep>
 100ed8e:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100ed92:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100ed96:	b003      	add	sp, #12
 100ed98:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100ed9a:	f7fb fd6d 	bl	100a878 <req_enter>
    p_slot->data.sleep.p_result = p_result;
 100ed9e:	f10d 0207 	add.w	r2, sp, #7
    p_slot->type                = REQ_TYPE_SLEEP;
 100eda2:	7005      	strb	r5, [r0, #0]
    p_slot->data.sleep.term_lvl = term_lvl;
 100eda4:	7104      	strb	r4, [r0, #4]
    p_slot->data.sleep.p_result = p_result;
 100eda6:	6082      	str	r2, [r0, #8]
    req_exit();
 100eda8:	f7fb fd72 	bl	100a890 <req_exit>
}
 100edac:	e7f1      	b.n	100ed92 <nrf_802154_request_sleep+0x1c>

0100edae <nrf_802154_request_receive>:
{
 100edae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 100edb2:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_receive,
 100edb4:	2300      	movs	r3, #0
{
 100edb6:	4607      	mov	r7, r0
 100edb8:	460e      	mov	r6, r1
 100edba:	4615      	mov	r5, r2
 100edbc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_receive,
 100edc0:	f88d 300f 	strb.w	r3, [sp, #15]
 100edc4:	f7ff ffcb 	bl	100ed5e <active_vector_priority_is_high>
 100edc8:	b170      	cbz	r0, 100ede8 <nrf_802154_request_receive+0x3a>
 100edca:	4623      	mov	r3, r4
 100edcc:	462a      	mov	r2, r5
 100edce:	4631      	mov	r1, r6
 100edd0:	4638      	mov	r0, r7
 100edd2:	f8cd 8000 	str.w	r8, [sp]
 100edd6:	f7f8 ffcf 	bl	1007d78 <nrf_802154_core_receive>
 100edda:	f88d 000f 	strb.w	r0, [sp, #15]
}
 100edde:	f89d 000f 	ldrb.w	r0, [sp, #15]
 100ede2:	b004      	add	sp, #16
 100ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100ede8:	f7fb fd46 	bl	100a878 <req_enter>
    p_slot->type                     = REQ_TYPE_RECEIVE;
 100edec:	2301      	movs	r3, #1
 100edee:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive.p_result    = p_result;
 100edf0:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.receive.term_lvl    = term_lvl;
 100edf4:	7207      	strb	r7, [r0, #8]
    p_slot->data.receive.req_orig    = req_orig;
 100edf6:	7246      	strb	r6, [r0, #9]
    p_slot->data.receive.notif_func  = notify_function;
 100edf8:	6045      	str	r5, [r0, #4]
    p_slot->data.receive.notif_abort = notify_abort;
 100edfa:	7284      	strb	r4, [r0, #10]
    p_slot->data.receive.id          = id;
 100edfc:	f8c0 800c 	str.w	r8, [r0, #12]
    p_slot->data.receive.p_result    = p_result;
 100ee00:	6103      	str	r3, [r0, #16]
    req_exit();
 100ee02:	f7fb fd45 	bl	100a890 <req_exit>
}
 100ee06:	e7ea      	b.n	100edde <nrf_802154_request_receive+0x30>

0100ee08 <nrf_802154_request_transmit>:
{
 100ee08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 100ee0c:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_transmit,
 100ee0e:	2300      	movs	r3, #0
{
 100ee10:	4607      	mov	r7, r0
 100ee12:	460e      	mov	r6, r1
 100ee14:	4615      	mov	r5, r2
 100ee16:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_transmit,
 100ee1a:	f88d 300f 	strb.w	r3, [sp, #15]
 100ee1e:	f7ff ff9e 	bl	100ed5e <active_vector_priority_is_high>
 100ee22:	b170      	cbz	r0, 100ee42 <nrf_802154_request_transmit+0x3a>
 100ee24:	4623      	mov	r3, r4
 100ee26:	462a      	mov	r2, r5
 100ee28:	4631      	mov	r1, r6
 100ee2a:	4638      	mov	r0, r7
 100ee2c:	f8cd 8000 	str.w	r8, [sp]
 100ee30:	f7f8 ffe2 	bl	1007df8 <nrf_802154_core_transmit>
 100ee34:	f88d 000f 	strb.w	r0, [sp, #15]
}
 100ee38:	f89d 000f 	ldrb.w	r0, [sp, #15]
 100ee3c:	b004      	add	sp, #16
 100ee3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100ee42:	f7fb fd19 	bl	100a878 <req_enter>
    p_slot->type                     = REQ_TYPE_TRANSMIT;
 100ee46:	2302      	movs	r3, #2
 100ee48:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit.p_result   = p_result;
 100ee4a:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.transmit.p_params   = p_params;
 100ee4e:	e9c0 5403 	strd	r5, r4, [r0, #12]
    p_slot->data.transmit.term_lvl   = term_lvl;
 100ee52:	7207      	strb	r7, [r0, #8]
    p_slot->data.transmit.req_orig   = req_orig;
 100ee54:	7246      	strb	r6, [r0, #9]
    p_slot->data.transmit.notif_func = notify_function;
 100ee56:	f8c0 8004 	str.w	r8, [r0, #4]
    p_slot->data.transmit.p_result   = p_result;
 100ee5a:	6143      	str	r3, [r0, #20]
    req_exit();
 100ee5c:	f7fb fd18 	bl	100a890 <req_exit>
}
 100ee60:	e7ea      	b.n	100ee38 <nrf_802154_request_transmit+0x30>

0100ee62 <nrf_802154_request_energy_detection>:
    REQUEST_FUNCTION(nrf_802154_core_energy_detection,
 100ee62:	2300      	movs	r3, #0
{
 100ee64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100ee66:	4605      	mov	r5, r0
 100ee68:	460c      	mov	r4, r1
    REQUEST_FUNCTION(nrf_802154_core_energy_detection,
 100ee6a:	f88d 3007 	strb.w	r3, [sp, #7]
 100ee6e:	f7ff ff76 	bl	100ed5e <active_vector_priority_is_high>
 100ee72:	b148      	cbz	r0, 100ee88 <nrf_802154_request_energy_detection+0x26>
 100ee74:	4621      	mov	r1, r4
 100ee76:	4628      	mov	r0, r5
 100ee78:	f7f9 f82e 	bl	1007ed8 <nrf_802154_core_energy_detection>
 100ee7c:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100ee80:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100ee84:	b003      	add	sp, #12
 100ee86:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100ee88:	f7fb fcf6 	bl	100a878 <req_enter>
    p_slot->type                           = REQ_TYPE_ENERGY_DETECTION;
 100ee8c:	2303      	movs	r3, #3
 100ee8e:	7003      	strb	r3, [r0, #0]
    p_slot->data.energy_detection.p_result = p_result;
 100ee90:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.energy_detection.term_lvl = term_lvl;
 100ee94:	7105      	strb	r5, [r0, #4]
    p_slot->data.energy_detection.time_us  = time_us;
 100ee96:	60c4      	str	r4, [r0, #12]
    p_slot->data.energy_detection.p_result = p_result;
 100ee98:	6083      	str	r3, [r0, #8]
    req_exit();
 100ee9a:	f7fb fcf9 	bl	100a890 <req_exit>
}
 100ee9e:	e7ef      	b.n	100ee80 <nrf_802154_request_energy_detection+0x1e>

0100eea0 <nrf_802154_request_cca>:
    REQUEST_FUNCTION(nrf_802154_core_cca, swi_cca, term_lvl)
 100eea0:	2300      	movs	r3, #0
{
 100eea2:	b513      	push	{r0, r1, r4, lr}
 100eea4:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_cca, swi_cca, term_lvl)
 100eea6:	f88d 3007 	strb.w	r3, [sp, #7]
 100eeaa:	f7ff ff58 	bl	100ed5e <active_vector_priority_is_high>
 100eeae:	b140      	cbz	r0, 100eec2 <nrf_802154_request_cca+0x22>
 100eeb0:	4620      	mov	r0, r4
 100eeb2:	f7ff fd8a 	bl	100e9ca <nrf_802154_core_cca>
 100eeb6:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100eeba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100eebe:	b002      	add	sp, #8
 100eec0:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100eec2:	f7fb fcd9 	bl	100a878 <req_enter>
    p_slot->type              = REQ_TYPE_CCA;
 100eec6:	2304      	movs	r3, #4
 100eec8:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca.p_result = p_result;
 100eeca:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.cca.term_lvl = term_lvl;
 100eece:	7104      	strb	r4, [r0, #4]
    p_slot->data.cca.p_result = p_result;
 100eed0:	6083      	str	r3, [r0, #8]
    req_exit();
 100eed2:	f7fb fcdd 	bl	100a890 <req_exit>
}
 100eed6:	e7f0      	b.n	100eeba <nrf_802154_request_cca+0x1a>

0100eed8 <nrf_802154_request_buffer_free>:
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
 100eed8:	2300      	movs	r3, #0
{
 100eeda:	b513      	push	{r0, r1, r4, lr}
 100eedc:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
 100eede:	f88d 3007 	strb.w	r3, [sp, #7]
 100eee2:	f7ff ff3c 	bl	100ed5e <active_vector_priority_is_high>
 100eee6:	b140      	cbz	r0, 100eefa <nrf_802154_request_buffer_free+0x22>
 100eee8:	4620      	mov	r0, r4
 100eeea:	f7f9 f835 	bl	1007f58 <nrf_802154_core_notify_buffer_free>
 100eeee:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100eef2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100eef6:	b002      	add	sp, #8
 100eef8:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100eefa:	f7fb fcbd 	bl	100a878 <req_enter>
    p_slot->type                      = REQ_TYPE_BUFFER_FREE;
 100eefe:	2307      	movs	r3, #7
 100ef00:	7003      	strb	r3, [r0, #0]
    p_slot->data.buffer_free.p_result = p_result;
 100ef02:	446b      	add	r3, sp
    p_slot->data.buffer_free.p_data   = p_data;
 100ef04:	6044      	str	r4, [r0, #4]
    p_slot->data.buffer_free.p_result = p_result;
 100ef06:	6083      	str	r3, [r0, #8]
    req_exit();
 100ef08:	f7fb fcc2 	bl	100a890 <req_exit>
}
 100ef0c:	e7f1      	b.n	100eef2 <nrf_802154_request_buffer_free+0x1a>

0100ef0e <nrf_802154_request_channel_update>:
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
 100ef0e:	2300      	movs	r3, #0
{
 100ef10:	b513      	push	{r0, r1, r4, lr}
 100ef12:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
 100ef14:	f88d 3007 	strb.w	r3, [sp, #7]
 100ef18:	f7ff ff21 	bl	100ed5e <active_vector_priority_is_high>
 100ef1c:	b140      	cbz	r0, 100ef30 <nrf_802154_request_channel_update+0x22>
 100ef1e:	4620      	mov	r0, r4
 100ef20:	f7f9 f836 	bl	1007f90 <nrf_802154_core_channel_update>
 100ef24:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100ef28:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100ef2c:	b002      	add	sp, #8
 100ef2e:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 100ef30:	f7fb fca2 	bl	100a878 <req_enter>
    p_slot->type                         = REQ_TYPE_CHANNEL_UPDATE;
 100ef34:	2308      	movs	r3, #8
 100ef36:	7003      	strb	r3, [r0, #0]
    p_slot->data.channel_update.p_result = p_result;
 100ef38:	f10d 0307 	add.w	r3, sp, #7
 100ef3c:	6083      	str	r3, [r0, #8]
    p_slot->data.channel_update.req_orig = req_orig;
 100ef3e:	7104      	strb	r4, [r0, #4]
    req_exit();
 100ef40:	f7fb fca6 	bl	100a890 <req_exit>
}
 100ef44:	e7f0      	b.n	100ef28 <nrf_802154_request_channel_update+0x1a>

0100ef46 <nrf_802154_request_cca_cfg_update>:
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_core_cca_cfg_update, swi_cca_cfg_update)
 100ef46:	2300      	movs	r3, #0
{
 100ef48:	b507      	push	{r0, r1, r2, lr}
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_core_cca_cfg_update, swi_cca_cfg_update)
 100ef4a:	f88d 3007 	strb.w	r3, [sp, #7]
 100ef4e:	f7ff ff06 	bl	100ed5e <active_vector_priority_is_high>
 100ef52:	b140      	cbz	r0, 100ef66 <nrf_802154_request_cca_cfg_update+0x20>
 100ef54:	f7f9 f84e 	bl	1007ff4 <nrf_802154_core_cca_cfg_update>
 100ef58:	f88d 0007 	strb.w	r0, [sp, #7]
}
 100ef5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 100ef60:	b003      	add	sp, #12
 100ef62:	f85d fb04 	ldr.w	pc, [sp], #4
    nrf_802154_req_data_t * p_slot = req_enter();
 100ef66:	f7fb fc87 	bl	100a878 <req_enter>
    p_slot->type                         = REQ_TYPE_CCA_CFG_UPDATE;
 100ef6a:	2309      	movs	r3, #9
 100ef6c:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca_cfg_update.p_result = p_result;
 100ef6e:	f10d 0307 	add.w	r3, sp, #7
 100ef72:	6043      	str	r3, [r0, #4]
    req_exit();
 100ef74:	f7fb fc8c 	bl	100a890 <req_exit>
}
 100ef78:	e7f0      	b.n	100ef5c <nrf_802154_request_cca_cfg_update+0x16>

0100ef7a <z_errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 100ef7a:	f7fd b913 	b.w	100c1a4 <z_impl_z_errno>

0100ef7e <spinel_packed_uint_decode>:
    unsigned int   value = 0;
 100ef7e:	2300      	movs	r3, #0
{
 100ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 100ef82:	4605      	mov	r5, r0
    spinel_ssize_t ret   = 0;
 100ef84:	4618      	mov	r0, r3
        if ((len < sizeof(uint8_t)) || (i >= sizeof(unsigned int) * CHAR_BIT))
 100ef86:	4288      	cmp	r0, r1
 100ef88:	ebc0 07c0 	rsb	r7, r0, r0, lsl #3
 100ef8c:	d00c      	beq.n	100efa8 <spinel_packed_uint_decode+0x2a>
 100ef8e:	2805      	cmp	r0, #5
 100ef90:	d00a      	beq.n	100efa8 <spinel_packed_uint_decode+0x2a>
        value |= (unsigned int)(bytes[0] & 0x7F) << i;
 100ef92:	5c2e      	ldrb	r6, [r5, r0]
 100ef94:	3001      	adds	r0, #1
 100ef96:	f006 047f 	and.w	r4, r6, #127	; 0x7f
 100ef9a:	40bc      	lsls	r4, r7
 100ef9c:	4323      	orrs	r3, r4
    } while ((bytes[-1] & 0x80) == 0x80);
 100ef9e:	0634      	lsls	r4, r6, #24
 100efa0:	d4f1      	bmi.n	100ef86 <spinel_packed_uint_decode+0x8>
    if ((ret > 0) && (value_ptr != NULL))
 100efa2:	b102      	cbz	r2, 100efa6 <spinel_packed_uint_decode+0x28>
        *value_ptr = value;
 100efa4:	6013      	str	r3, [r2, #0]
}
 100efa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100efa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 100efac:	e7fb      	b.n	100efa6 <spinel_packed_uint_decode+0x28>

0100efae <spinel_packed_uint_size>:
    if (value < (1 << 7))
 100efae:	287f      	cmp	r0, #127	; 0x7f
 100efb0:	d90b      	bls.n	100efca <spinel_packed_uint_size+0x1c>
    else if (value < (1 << 14))
 100efb2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 100efb6:	d30a      	bcc.n	100efce <spinel_packed_uint_size+0x20>
    else if (value < (1 << 21))
 100efb8:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 100efbc:	d309      	bcc.n	100efd2 <spinel_packed_uint_size+0x24>
        ret = 5;
 100efbe:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 100efc2:	bf34      	ite	cc
 100efc4:	2004      	movcc	r0, #4
 100efc6:	2005      	movcs	r0, #5
 100efc8:	4770      	bx	lr
        ret = 1;
 100efca:	2001      	movs	r0, #1
 100efcc:	4770      	bx	lr
        ret = 2;
 100efce:	2002      	movs	r0, #2
 100efd0:	4770      	bx	lr
        ret = 3;
 100efd2:	2003      	movs	r0, #3
}
 100efd4:	4770      	bx	lr

0100efd6 <spinel_packed_uint_encode>:
{
 100efd6:	4603      	mov	r3, r0
 100efd8:	b510      	push	{r4, lr}
    const spinel_ssize_t encoded_size = spinel_packed_uint_size(value);
 100efda:	4610      	mov	r0, r2
 100efdc:	f7ff ffe7 	bl	100efae <spinel_packed_uint_size>
    if ((spinel_ssize_t)len >= encoded_size)
 100efe0:	4281      	cmp	r1, r0
 100efe2:	db07      	blt.n	100eff4 <spinel_packed_uint_encode+0x1e>
 100efe4:	1e44      	subs	r4, r0, #1
 100efe6:	441c      	add	r4, r3
        for (i = 0; i != encoded_size - 1; ++i)
 100efe8:	42a3      	cmp	r3, r4
            *bytes++ = (value & 0x7F) | 0x80;
 100efea:	b2d1      	uxtb	r1, r2
        for (i = 0; i != encoded_size - 1; ++i)
 100efec:	d103      	bne.n	100eff6 <spinel_packed_uint_encode+0x20>
        *bytes++ = (value & 0x7F);
 100efee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 100eff2:	7019      	strb	r1, [r3, #0]
}
 100eff4:	bd10      	pop	{r4, pc}
            *bytes++ = (value & 0x7F) | 0x80;
 100eff6:	f061 017f 	orn	r1, r1, #127	; 0x7f
 100effa:	f803 1b01 	strb.w	r1, [r3], #1
            value    = (value >> 7);
 100effe:	09d2      	lsrs	r2, r2, #7
        for (i = 0; i != encoded_size - 1; ++i)
 100f000:	e7f2      	b.n	100efe8 <spinel_packed_uint_encode+0x12>

0100f002 <spinel_next_packed_datatype>:
{
 100f002:	4602      	mov	r2, r0
    int depth = 0;
 100f004:	2300      	movs	r3, #0
        switch (*++pack_format)
 100f006:	7851      	ldrb	r1, [r2, #1]
 100f008:	1c50      	adds	r0, r2, #1
 100f00a:	2928      	cmp	r1, #40	; 0x28
 100f00c:	d005      	beq.n	100f01a <spinel_next_packed_datatype+0x18>
 100f00e:	2929      	cmp	r1, #41	; 0x29
 100f010:	d007      	beq.n	100f022 <spinel_next_packed_datatype+0x20>
    } while ((depth > 0) && *pack_format != 0);
 100f012:	b12b      	cbz	r3, 100f020 <spinel_next_packed_datatype+0x1e>
 100f014:	b121      	cbz	r1, 100f020 <spinel_next_packed_datatype+0x1e>
    int depth = 0;
 100f016:	4602      	mov	r2, r0
 100f018:	e7f5      	b.n	100f006 <spinel_next_packed_datatype+0x4>
            depth++;
 100f01a:	3301      	adds	r3, #1
    } while ((depth > 0) && *pack_format != 0);
 100f01c:	2b00      	cmp	r3, #0
 100f01e:	dcfa      	bgt.n	100f016 <spinel_next_packed_datatype+0x14>
}
 100f020:	4770      	bx	lr
            if (depth == 0)
 100f022:	3b01      	subs	r3, #1
 100f024:	d1fa      	bne.n	100f01c <spinel_next_packed_datatype+0x1a>
                pack_format++;
 100f026:	1c90      	adds	r0, r2, #2
    } while ((depth > 0) && *pack_format != 0);
 100f028:	4770      	bx	lr

0100f02a <spinel_datatype_unpack>:
{
 100f02a:	b40c      	push	{r2, r3}
 100f02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 100f02e:	ac06      	add	r4, sp, #24
 100f030:	f854 3b04 	ldr.w	r3, [r4], #4
 100f034:	460a      	mov	r2, r1
    ret = spinel_datatype_vunpack_(false, data_in, data_len, pack_format, &args);
 100f036:	a903      	add	r1, sp, #12
 100f038:	9100      	str	r1, [sp, #0]
 100f03a:	4601      	mov	r1, r0
 100f03c:	2000      	movs	r0, #0
    va_start(args.obj, pack_format);
 100f03e:	9403      	str	r4, [sp, #12]
    ret = spinel_datatype_vunpack_(false, data_in, data_len, pack_format, &args);
 100f040:	f7fb fcc2 	bl	100a9c8 <spinel_datatype_vunpack_>
}
 100f044:	b004      	add	sp, #16
 100f046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100f04a:	b002      	add	sp, #8
 100f04c:	4770      	bx	lr

0100f04e <spinel_datatype_pack>:

spinel_ssize_t spinel_datatype_pack(uint8_t *data_out, spinel_size_t data_len_max, const char *pack_format, ...)
{
 100f04e:	b40c      	push	{r2, r3}
 100f050:	b507      	push	{r0, r1, r2, lr}
 100f052:	ab04      	add	r3, sp, #16
 100f054:	f853 2b04 	ldr.w	r2, [r3], #4
    int         ret;
    va_list_obj args;
    va_start(args.obj, pack_format);
 100f058:	9301      	str	r3, [sp, #4]

    ret = spinel_datatype_vpack_(data_out, data_len_max, pack_format, &args);
 100f05a:	ab01      	add	r3, sp, #4
 100f05c:	f7fb fef2 	bl	100ae44 <spinel_datatype_vpack_>

    va_end(args.obj);
    return ret;
}
 100f060:	b003      	add	sp, #12
 100f062:	f85d eb04 	ldr.w	lr, [sp], #4
 100f066:	b002      	add	sp, #8
 100f068:	4770      	bx	lr

0100f06a <spinel_datatype_vpack>:

spinel_ssize_t spinel_datatype_vpack(uint8_t *     data_out,
                                     spinel_size_t data_len_max,
                                     const char *  pack_format,
                                     va_list       args)
{
 100f06a:	b507      	push	{r0, r1, r2, lr}
    int         ret;
    va_list_obj args_obj;
    va_copy(args_obj.obj, args);
 100f06c:	9301      	str	r3, [sp, #4]

    ret = spinel_datatype_vpack_(data_out, data_len_max, pack_format, &args_obj);
 100f06e:	ab01      	add	r3, sp, #4
 100f070:	f7fb fee8 	bl	100ae44 <spinel_datatype_vpack_>

    va_end(args_obj.obj);
    return ret;
}
 100f074:	b003      	add	sp, #12
 100f076:	f85d fb04 	ldr.w	pc, [sp], #4

0100f07a <nrf_802154_buffer_allocator_init>:

void nrf_802154_buffer_allocator_init(nrf_802154_buffer_allocator_t * p_obj,
                                      void                          * p_memory,
                                      size_t                          memsize)
{
    size_t capacity = memsize / sizeof(nrf_802154_buffer_t);
 100f07a:	2381      	movs	r3, #129	; 0x81
 100f07c:	fbb2 f2f3 	udiv	r2, r2, r3
    p_obj->p_memory = p_memory;
    p_obj->capacity = capacity;

    nrf_802154_buffer_t * p_buffer = (nrf_802154_buffer_t *)p_obj->p_memory;

    for (size_t i = 0; i < p_obj->capacity; i++)
 100f080:	2300      	movs	r3, #0
{
 100f082:	b510      	push	{r4, lr}
    {
        p_buffer[i].taken = false;
 100f084:	461c      	mov	r4, r3
    p_obj->capacity = capacity;
 100f086:	e9c0 1200 	strd	r1, r2, [r0]
    for (size_t i = 0; i < p_obj->capacity; i++)
 100f08a:	4293      	cmp	r3, r2
 100f08c:	d100      	bne.n	100f090 <nrf_802154_buffer_allocator_init+0x16>
    }
}
 100f08e:	bd10      	pop	{r4, pc}
        p_buffer[i].taken = false;
 100f090:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 100f094:	4408      	add	r0, r1
 100f096:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    for (size_t i = 0; i < p_obj->capacity; i++)
 100f09a:	3301      	adds	r3, #1
 100f09c:	e7f5      	b.n	100f08a <nrf_802154_buffer_allocator_init+0x10>

0100f09e <nrf_802154_buffer_allocator_alloc>:

void * nrf_802154_buffer_allocator_alloc(const nrf_802154_buffer_allocator_t * p_obj)
{
 100f09e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return buffer_alloc((nrf_802154_buffer_t *)p_obj->p_memory, p_obj->capacity);
 100f0a2:	e9d0 6700 	ldrd	r6, r7, [r0]
    uint32_t              crit_sect = 0UL;
 100f0a6:	2500      	movs	r5, #0
                    p_buffer->taken = true;
 100f0a8:	f04f 0801 	mov.w	r8, #1
    nrf_802154_buffer_t * p_buffer  = NULL;
 100f0ac:	462c      	mov	r4, r5
    uint32_t              crit_sect = 0UL;
 100f0ae:	9501      	str	r5, [sp, #4]
        for (uint32_t i = 0; i < buffer_pool_len; i++)
 100f0b0:	2300      	movs	r3, #0
 100f0b2:	429f      	cmp	r7, r3
 100f0b4:	d016      	beq.n	100f0e4 <nrf_802154_buffer_allocator_alloc+0x46>
            p_buffer = &p_buffer_pool[i];
 100f0b6:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 100f0ba:	4434      	add	r4, r6
            if (!p_buffer->taken)
 100f0bc:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 100f0c0:	b9ba      	cbnz	r2, 100f0f2 <nrf_802154_buffer_allocator_alloc+0x54>
                nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f0c2:	a801      	add	r0, sp, #4
 100f0c4:	f7ff fb8c 	bl	100e7e0 <nrf_802154_serialization_crit_sect_enter>
                if (p_buffer->taken)
 100f0c8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 100f0cc:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 100f0d0:	b913      	cbnz	r3, 100f0d8 <nrf_802154_buffer_allocator_alloc+0x3a>
                    success         = true;
 100f0d2:	2501      	movs	r5, #1
                    p_buffer->taken = true;
 100f0d4:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
                nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f0d8:	9801      	ldr	r0, [sp, #4]
 100f0da:	f7ff fb8b 	bl	100e7f4 <nrf_802154_serialization_crit_sect_exit>
    while (retry);
 100f0de:	f1b9 0f00 	cmp.w	r9, #0
 100f0e2:	d1e5      	bne.n	100f0b0 <nrf_802154_buffer_allocator_alloc+0x12>
    return success ? p_buffer->data : NULL;
 100f0e4:	2d00      	cmp	r5, #0
}
 100f0e6:	bf14      	ite	ne
 100f0e8:	4620      	movne	r0, r4
 100f0ea:	2000      	moveq	r0, #0
 100f0ec:	b003      	add	sp, #12
 100f0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (uint32_t i = 0; i < buffer_pool_len; i++)
 100f0f2:	3301      	adds	r3, #1
 100f0f4:	e7dd      	b.n	100f0b2 <nrf_802154_buffer_allocator_alloc+0x14>

0100f0f6 <nrf_802154_buffer_allocator_free>:

void nrf_802154_buffer_allocator_free(const nrf_802154_buffer_allocator_t * p_obj,
                                      void                                * p_buffer)
{
 100f0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t crit_sect = 0UL;
 100f0f8:	2600      	movs	r6, #0
    buffer_free(p_buffer, (nrf_802154_buffer_t *)p_obj->p_memory, p_obj->capacity);
 100f0fa:	6805      	ldr	r5, [r0, #0]
{
 100f0fc:	460c      	mov	r4, r1
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f0fe:	a801      	add	r0, sp, #4
    uint32_t crit_sect = 0UL;
 100f100:	9601      	str	r6, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f102:	f7ff fb6d 	bl	100e7e0 <nrf_802154_serialization_crit_sect_enter>
    size_t   idx       =
 100f106:	2381      	movs	r3, #129	; 0x81
        ((uintptr_t)p_buffer_to_free - (uintptr_t)p_buffer_pool) / sizeof(nrf_802154_buffer_t);
 100f108:	1b61      	subs	r1, r4, r5
    size_t   idx       =
 100f10a:	fbb1 f1f3 	udiv	r1, r1, r3
    p_buffer_pool[idx].taken = false;
 100f10e:	eb01 11c1 	add.w	r1, r1, r1, lsl #7
 100f112:	4429      	add	r1, r5
    nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f114:	9801      	ldr	r0, [sp, #4]
    p_buffer_pool[idx].taken = false;
 100f116:	f881 6080 	strb.w	r6, [r1, #128]	; 0x80
    nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f11a:	f7ff fb6b 	bl	100e7f4 <nrf_802154_serialization_crit_sect_exit>
}
 100f11e:	b002      	add	sp, #8
 100f120:	bd70      	pop	{r4, r5, r6, pc}

0100f122 <nrf_802154_buffer_mgr_dst_init>:
void nrf_802154_buffer_mgr_dst_init(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_map_memory,
    void                        * p_allocator_memory,
    size_t                        buffers_count)
{
 100f122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100f124:	461c      	mov	r4, r3
    nrf_802154_kvmap_init(&p_obj->map,
 100f126:	2304      	movs	r3, #4
{
 100f128:	4616      	mov	r6, r2
 100f12a:	4605      	mov	r5, r0
    nrf_802154_kvmap_init(&p_obj->map,
 100f12c:	00e2      	lsls	r2, r4, #3
 100f12e:	9300      	str	r3, [sp, #0]
 100f130:	f000 f87f 	bl	100f232 <nrf_802154_kvmap_init>
                          p_map_memory,
                          NRF_802154_BUFFER_MGR_DST_MAP_MEMSIZE(buffers_count),
                          sizeof(void *),
                          sizeof(uint32_t));

    nrf_802154_buffer_allocator_init(&p_obj->allocator,
 100f134:	4631      	mov	r1, r6
 100f136:	eb04 12c4 	add.w	r2, r4, r4, lsl #7
 100f13a:	f105 0014 	add.w	r0, r5, #20
                                     p_allocator_memory,
                                     NRF_802154_BUFFER_ALLOCATOR_MEMORY_SIZE(buffers_count));
}
 100f13e:	b002      	add	sp, #8
 100f140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    nrf_802154_buffer_allocator_init(&p_obj->allocator,
 100f144:	f7ff bf99 	b.w	100f07a <nrf_802154_buffer_allocator_init>

0100f148 <nrf_802154_buffer_mgr_dst_add>:
    nrf_802154_buffer_mgr_dst_t * p_obj,
    uint32_t                      buffer_handle,
    const void                  * p_data,
    size_t                        data_size,
    void                       ** pp_local_pointer)
{
 100f148:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 100f14c:	4605      	mov	r5, r0
    bool result = false;

    *pp_local_pointer = nrf_802154_buffer_allocator_alloc(&p_obj->allocator);
 100f14e:	3014      	adds	r0, #20
{
 100f150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 100f154:	4616      	mov	r6, r2
 100f156:	461f      	mov	r7, r3
 100f158:	9101      	str	r1, [sp, #4]
    *pp_local_pointer = nrf_802154_buffer_allocator_alloc(&p_obj->allocator);
 100f15a:	f7ff ffa0 	bl	100f09e <nrf_802154_buffer_allocator_alloc>
 100f15e:	f8c8 0000 	str.w	r0, [r8]

    if (*pp_local_pointer != NULL)
 100f162:	b140      	cbz	r0, 100f176 <nrf_802154_buffer_mgr_dst_add+0x2e>
    {
        memcpy(*pp_local_pointer, p_data, data_size);
 100f164:	463a      	mov	r2, r7
 100f166:	4631      	mov	r1, r6
 100f168:	f7ff fa15 	bl	100e596 <memcpy>
        result = nrf_802154_kvmap_add(&p_obj->map, pp_local_pointer, &buffer_handle);
 100f16c:	4641      	mov	r1, r8
 100f16e:	4628      	mov	r0, r5
 100f170:	aa01      	add	r2, sp, #4
 100f172:	f000 f86a 	bl	100f24a <nrf_802154_kvmap_add>
         */
        assert(result);
    }

    return result;
}
 100f176:	b002      	add	sp, #8
 100f178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100f17c <nrf_802154_buffer_mgr_dst_search_by_local_pointer>:

bool nrf_802154_buffer_mgr_dst_search_by_local_pointer(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_local_pointer,
    uint32_t                    * p_buffer_handle)
{
 100f17c:	b507      	push	{r0, r1, r2, lr}
 100f17e:	9101      	str	r1, [sp, #4]
    return nrf_802154_kvmap_search(&p_obj->map, &p_local_pointer, p_buffer_handle);
 100f180:	a901      	add	r1, sp, #4
 100f182:	f000 f8c0 	bl	100f306 <nrf_802154_kvmap_search>
}
 100f186:	b003      	add	sp, #12
 100f188:	f85d fb04 	ldr.w	pc, [sp], #4

0100f18c <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>:

bool nrf_802154_buffer_mgr_dst_remove_by_local_pointer(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_local_pointer)
{
 100f18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100f18e:	9101      	str	r1, [sp, #4]
    bool result;

    result = nrf_802154_kvmap_remove(&p_obj->map, &p_local_pointer);
 100f190:	a901      	add	r1, sp, #4
{
 100f192:	4605      	mov	r5, r0
    result = nrf_802154_kvmap_remove(&p_obj->map, &p_local_pointer);
 100f194:	f000 f893 	bl	100f2be <nrf_802154_kvmap_remove>
    if (result)
 100f198:	4604      	mov	r4, r0
 100f19a:	b120      	cbz	r0, 100f1a6 <nrf_802154_buffer_mgr_dst_remove_by_local_pointer+0x1a>
    {
        nrf_802154_buffer_allocator_free(&p_obj->allocator, p_local_pointer);
 100f19c:	9901      	ldr	r1, [sp, #4]
 100f19e:	f105 0014 	add.w	r0, r5, #20
 100f1a2:	f7ff ffa8 	bl	100f0f6 <nrf_802154_buffer_allocator_free>
    }

    return result;
}
 100f1a6:	4620      	mov	r0, r4
 100f1a8:	b003      	add	sp, #12
 100f1aa:	bd30      	pop	{r4, r5, pc}

0100f1ac <nrf_802154_buffer_mgr_src_init>:
    /* Implementation is for 32-bit architectures only
     * When this is not true we need mapping uint32->void*
     * When this is true only presence of buffer handle can be checked */
    assert(sizeof(void *) == sizeof(uint32_t) );

    nrf_802154_kvmap_init(&p_obj->map,
 100f1ac:	2300      	movs	r3, #0
{
 100f1ae:	b507      	push	{r0, r1, r2, lr}
    nrf_802154_kvmap_init(&p_obj->map,
 100f1b0:	0092      	lsls	r2, r2, #2
 100f1b2:	9300      	str	r3, [sp, #0]
 100f1b4:	2304      	movs	r3, #4
 100f1b6:	f000 f83c 	bl	100f232 <nrf_802154_kvmap_init>
                          p_map_memory,
                          NRF_802154_BUFFER_MGR_SRC_MAP_MEMSIZE(buffers_count),
                          sizeof(uint32_t),
                          0U);
}
 100f1ba:	b003      	add	sp, #12
 100f1bc:	f85d fb04 	ldr.w	pc, [sp], #4

0100f1c0 <nrf_802154_buffer_mgr_src_add>:

bool nrf_802154_buffer_mgr_src_add(
    nrf_802154_buffer_mgr_src_t * p_obj,
    const void                  * p_buffer,
    uint32_t                    * p_buffer_handle)
{
 100f1c0:	b513      	push	{r0, r1, r4, lr}
 100f1c2:	4614      	mov	r4, r2
    bool     result;
    uint32_t buffer_handle = (uintptr_t)p_buffer;
 100f1c4:	9101      	str	r1, [sp, #4]

    result = nrf_802154_kvmap_add(&p_obj->map, &buffer_handle, NULL);
 100f1c6:	2200      	movs	r2, #0
 100f1c8:	a901      	add	r1, sp, #4
 100f1ca:	f000 f83e 	bl	100f24a <nrf_802154_kvmap_add>
    if (result)
 100f1ce:	b108      	cbz	r0, 100f1d4 <nrf_802154_buffer_mgr_src_add+0x14>
    {
        *p_buffer_handle = buffer_handle;
 100f1d0:	9b01      	ldr	r3, [sp, #4]
 100f1d2:	6023      	str	r3, [r4, #0]
    }

    return result;
}
 100f1d4:	b002      	add	sp, #8
 100f1d6:	bd10      	pop	{r4, pc}

0100f1d8 <nrf_802154_buffer_mgr_src_search_by_buffer_handle>:

bool nrf_802154_buffer_mgr_src_search_by_buffer_handle(
    nrf_802154_buffer_mgr_src_t * p_obj,
    uint32_t                      buffer_handle,
    void                       ** pp_buffer)
{
 100f1d8:	b513      	push	{r0, r1, r4, lr}
 100f1da:	4614      	mov	r4, r2
 100f1dc:	9101      	str	r1, [sp, #4]
    bool result = false;

    if (nrf_802154_kvmap_search(&p_obj->map, &buffer_handle, NULL))
 100f1de:	2200      	movs	r2, #0
 100f1e0:	a901      	add	r1, sp, #4
 100f1e2:	f000 f890 	bl	100f306 <nrf_802154_kvmap_search>
 100f1e6:	b108      	cbz	r0, 100f1ec <nrf_802154_buffer_mgr_src_search_by_buffer_handle+0x14>
    {
        *pp_buffer = (void *)buffer_handle;
 100f1e8:	9b01      	ldr	r3, [sp, #4]
 100f1ea:	6023      	str	r3, [r4, #0]
        result     = true;
    }
    return result;
}
 100f1ec:	b002      	add	sp, #8
 100f1ee:	bd10      	pop	{r4, pc}

0100f1f0 <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>:

bool nrf_802154_buffer_mgr_src_remove_by_buffer_handle(
    nrf_802154_buffer_mgr_src_t * p_obj,
    uint32_t                      buffer_handle)
{
 100f1f0:	b507      	push	{r0, r1, r2, lr}
 100f1f2:	9101      	str	r1, [sp, #4]
    return nrf_802154_kvmap_remove(&p_obj->map, &buffer_handle);
 100f1f4:	a901      	add	r1, sp, #4
 100f1f6:	f000 f862 	bl	100f2be <nrf_802154_kvmap_remove>
}
 100f1fa:	b003      	add	sp, #12
 100f1fc:	f85d fb04 	ldr.w	pc, [sp], #4

0100f200 <item_idx_by_key_search>:
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
    }
}

static size_t item_idx_by_key_search(const nrf_802154_kvmap_t * p_kvmap, const void * p_key)
{
 100f200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t    item_size = NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size);
 100f204:	e9d0 3703 	ldrd	r3, r7, [r0, #12]
{
 100f208:	4604      	mov	r4, r0
 100f20a:	4688      	mov	r8, r1
    uint8_t * p_item    = p_kvmap->p_memory;
    size_t    idx;

    /* Linear search */
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 100f20c:	2500      	movs	r5, #0
    uint8_t * p_item    = p_kvmap->p_memory;
 100f20e:	6806      	ldr	r6, [r0, #0]
    size_t    item_size = NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size);
 100f210:	441f      	add	r7, r3
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 100f212:	68a3      	ldr	r3, [r4, #8]
 100f214:	42ab      	cmp	r3, r5
 100f216:	d802      	bhi.n	100f21e <item_idx_by_key_search+0x1e>
            break;
        }
    }

    return idx;
}
 100f218:	4628      	mov	r0, r5
 100f21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (memcmp(p_item, p_key, p_kvmap->key_size) == 0)
 100f21e:	4641      	mov	r1, r8
 100f220:	4630      	mov	r0, r6
 100f222:	68e2      	ldr	r2, [r4, #12]
 100f224:	f7ff f98e 	bl	100e544 <memcmp>
 100f228:	2800      	cmp	r0, #0
 100f22a:	d0f5      	beq.n	100f218 <item_idx_by_key_search+0x18>
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 100f22c:	3501      	adds	r5, #1
 100f22e:	443e      	add	r6, r7
 100f230:	e7ef      	b.n	100f212 <item_idx_by_key_search+0x12>

0100f232 <nrf_802154_kvmap_init>:
void nrf_802154_kvmap_init(nrf_802154_kvmap_t * p_kvmap,
                           void               * p_memory,
                           size_t               memsize,
                           size_t               key_size,
                           size_t               val_size)
{
 100f232:	b510      	push	{r4, lr}
 100f234:	9c02      	ldr	r4, [sp, #8]
    p_kvmap->p_memory = p_memory;
 100f236:	6001      	str	r1, [r0, #0]
    p_kvmap->capacity = memsize / NRF_802154_KVMAP_ITEMSIZE(key_size, val_size);
 100f238:	1919      	adds	r1, r3, r4
 100f23a:	fbb2 f2f1 	udiv	r2, r2, r1
    p_kvmap->key_size = key_size;
    p_kvmap->val_size = val_size;
 100f23e:	e9c0 3403 	strd	r3, r4, [r0, #12]
    p_kvmap->count    = 0U;
 100f242:	2300      	movs	r3, #0
    p_kvmap->capacity = memsize / NRF_802154_KVMAP_ITEMSIZE(key_size, val_size);
 100f244:	6042      	str	r2, [r0, #4]
    p_kvmap->count    = 0U;
 100f246:	6083      	str	r3, [r0, #8]
}
 100f248:	bd10      	pop	{r4, pc}

0100f24a <nrf_802154_kvmap_add>:

bool nrf_802154_kvmap_add(nrf_802154_kvmap_t * p_kvmap, const void * p_key, const void * p_value)
{
 100f24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100f24c:	4604      	mov	r4, r0
 100f24e:	460f      	mov	r7, r1
    uint32_t crit_sect = 0UL;
 100f250:	2500      	movs	r5, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f252:	a801      	add	r0, sp, #4
{
 100f254:	4616      	mov	r6, r2
    uint32_t crit_sect = 0UL;
 100f256:	9501      	str	r5, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f258:	f7ff fac2 	bl	100e7e0 <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 100f25c:	4639      	mov	r1, r7
 100f25e:	4620      	mov	r0, r4
 100f260:	f7ff ffce 	bl	100f200 <item_idx_by_key_search>
    if (idx < p_kvmap->count)
 100f264:	68a1      	ldr	r1, [r4, #8]
 100f266:	4281      	cmp	r1, r0
 100f268:	d911      	bls.n	100f28e <nrf_802154_kvmap_add+0x44>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f26a:	6922      	ldr	r2, [r4, #16]
    if (p_kvmap->val_size != 0U)
 100f26c:	b142      	cbz	r2, 100f280 <nrf_802154_kvmap_add+0x36>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f26e:	68e3      	ldr	r3, [r4, #12]
 100f270:	1899      	adds	r1, r3, r2
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
 100f272:	fb00 3301 	mla	r3, r0, r1, r3
 100f276:	6820      	ldr	r0, [r4, #0]
 100f278:	4631      	mov	r1, r6
 100f27a:	4418      	add	r0, r3
 100f27c:	f7ff f98b 	bl	100e596 <memcpy>
    bool     success = true;
 100f280:	2501      	movs	r5, #1
        item_value_write(p_kvmap, p_item, p_value);

        p_kvmap->count++;
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f282:	9801      	ldr	r0, [sp, #4]
 100f284:	f7ff fab6 	bl	100e7f4 <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 100f288:	4628      	mov	r0, r5
 100f28a:	b003      	add	sp, #12
 100f28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (p_kvmap->count >= p_kvmap->capacity)
 100f28e:	6863      	ldr	r3, [r4, #4]
 100f290:	4299      	cmp	r1, r3
 100f292:	d2f6      	bcs.n	100f282 <nrf_802154_kvmap_add+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f294:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    return ((uint8_t *)(p_kvmap->p_memory)) +
 100f298:	6825      	ldr	r5, [r4, #0]
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f29a:	4413      	add	r3, r2
    return ((uint8_t *)(p_kvmap->p_memory)) +
 100f29c:	fb01 5503 	mla	r5, r1, r3, r5
        memcpy(p_item, p_key, p_kvmap->key_size);
 100f2a0:	4639      	mov	r1, r7
 100f2a2:	4628      	mov	r0, r5
 100f2a4:	f7ff f977 	bl	100e596 <memcpy>
    if (p_kvmap->val_size != 0U)
 100f2a8:	6922      	ldr	r2, [r4, #16]
 100f2aa:	b122      	cbz	r2, 100f2b6 <nrf_802154_kvmap_add+0x6c>
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
 100f2ac:	68e0      	ldr	r0, [r4, #12]
 100f2ae:	4631      	mov	r1, r6
 100f2b0:	4428      	add	r0, r5
 100f2b2:	f7ff f970 	bl	100e596 <memcpy>
        p_kvmap->count++;
 100f2b6:	68a3      	ldr	r3, [r4, #8]
 100f2b8:	3301      	adds	r3, #1
 100f2ba:	60a3      	str	r3, [r4, #8]
 100f2bc:	e7e0      	b.n	100f280 <nrf_802154_kvmap_add+0x36>

0100f2be <nrf_802154_kvmap_remove>:

bool nrf_802154_kvmap_remove(nrf_802154_kvmap_t * p_kvmap, const void * p_key)
{
 100f2be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100f2c0:	4604      	mov	r4, r0
 100f2c2:	460e      	mov	r6, r1
    uint32_t crit_sect = 0UL;
 100f2c4:	2500      	movs	r5, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f2c6:	a801      	add	r0, sp, #4
    uint32_t crit_sect = 0UL;
 100f2c8:	9501      	str	r5, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f2ca:	f7ff fa89 	bl	100e7e0 <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 100f2ce:	4631      	mov	r1, r6
 100f2d0:	4620      	mov	r0, r4
 100f2d2:	f7ff ff95 	bl	100f200 <item_idx_by_key_search>
    if (idx >= p_kvmap->count)
 100f2d6:	68a1      	ldr	r1, [r4, #8]
 100f2d8:	4281      	cmp	r1, r0
 100f2da:	d90e      	bls.n	100f2fa <nrf_802154_kvmap_remove+0x3c>
        /* Key not found */
        success = false;
    }
    else
    {
        p_kvmap->count--;
 100f2dc:	3901      	subs	r1, #1
        if (idx < p_kvmap->count)
 100f2de:	4281      	cmp	r1, r0
        p_kvmap->count--;
 100f2e0:	60a1      	str	r1, [r4, #8]
        if (idx < p_kvmap->count)
 100f2e2:	d909      	bls.n	100f2f8 <nrf_802154_kvmap_remove+0x3a>
    return ((uint8_t *)(p_kvmap->p_memory)) +
 100f2e4:	6823      	ldr	r3, [r4, #0]
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f2e6:	e9d4 2403 	ldrd	r2, r4, [r4, #12]
 100f2ea:	4422      	add	r2, r4
        {
            const uint8_t * p_last_item = item_ptr_by_idx_get(p_kvmap, p_kvmap->count);
            uint8_t       * p_item      = item_ptr_by_idx_get(p_kvmap, idx);

            memcpy(p_item,
 100f2ec:	fb02 3101 	mla	r1, r2, r1, r3
 100f2f0:	fb02 3000 	mla	r0, r2, r0, r3
 100f2f4:	f7ff f94f 	bl	100e596 <memcpy>
    bool     success = true;
 100f2f8:	2501      	movs	r5, #1
        {
            /* We hit last item, no item move necessary */
        }
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f2fa:	9801      	ldr	r0, [sp, #4]
 100f2fc:	f7ff fa7a 	bl	100e7f4 <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 100f300:	4628      	mov	r0, r5
 100f302:	b002      	add	sp, #8
 100f304:	bd70      	pop	{r4, r5, r6, pc}

0100f306 <nrf_802154_kvmap_search>:

bool nrf_802154_kvmap_search(const nrf_802154_kvmap_t * p_kvmap,
                             const void               * p_key,
                             void                     * p_value)
{
 100f306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100f308:	4605      	mov	r5, r0
 100f30a:	460f      	mov	r7, r1
    uint32_t crit_sect = 0UL;
 100f30c:	2400      	movs	r4, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f30e:	a801      	add	r0, sp, #4
{
 100f310:	4616      	mov	r6, r2
    uint32_t crit_sect = 0UL;
 100f312:	9401      	str	r4, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 100f314:	f7ff fa64 	bl	100e7e0 <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 100f318:	4639      	mov	r1, r7
 100f31a:	4628      	mov	r0, r5
 100f31c:	f7ff ff70 	bl	100f200 <item_idx_by_key_search>
    if (idx >= p_kvmap->count)
 100f320:	68ab      	ldr	r3, [r5, #8]
 100f322:	4283      	cmp	r3, r0
 100f324:	d90c      	bls.n	100f340 <nrf_802154_kvmap_search+0x3a>
    else
    {
        const uint8_t * p_item = item_ptr_by_idx_get(p_kvmap, idx);

        /* Copy value associated with the key if requested and values are present */
        if ((p_value != NULL) && (p_kvmap->val_size != 0U))
 100f326:	b156      	cbz	r6, 100f33e <nrf_802154_kvmap_search+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f328:	692a      	ldr	r2, [r5, #16]
        if ((p_value != NULL) && (p_kvmap->val_size != 0U))
 100f32a:	b142      	cbz	r2, 100f33e <nrf_802154_kvmap_search+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 100f32c:	68e9      	ldr	r1, [r5, #12]
 100f32e:	188b      	adds	r3, r1, r2
        {
            memcpy(p_value, p_item + p_kvmap->key_size, p_kvmap->val_size);
 100f330:	fb00 1103 	mla	r1, r0, r3, r1
 100f334:	682b      	ldr	r3, [r5, #0]
 100f336:	4630      	mov	r0, r6
 100f338:	4419      	add	r1, r3
 100f33a:	f7ff f92c 	bl	100e596 <memcpy>
    bool     success = true;
 100f33e:	2401      	movs	r4, #1
        }
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 100f340:	9801      	ldr	r0, [sp, #4]
 100f342:	f7ff fa57 	bl	100e7f4 <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 100f346:	4620      	mov	r0, r4
 100f348:	b003      	add	sp, #12
 100f34a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0100f34c <nrf_802154_spinel_send>:

nrf_802154_ser_err_t nrf_802154_spinel_send(const char * p_fmt, ...)
{
 100f34c:	b40f      	push	{r0, r1, r2, r3}
 100f34e:	b500      	push	{lr}
 100f350:	b0c3      	sub	sp, #268	; 0x10c
 100f352:	ab44      	add	r3, sp, #272	; 0x110
 100f354:	f853 2b04 	ldr.w	r2, [r3], #4

    va_list args;

    va_start(args, p_fmt);

    siz = spinel_datatype_vpack(command_buff, sizeof(command_buff), p_fmt, args);
 100f358:	f44f 7180 	mov.w	r1, #256	; 0x100
 100f35c:	a802      	add	r0, sp, #8
    va_start(args, p_fmt);
 100f35e:	9301      	str	r3, [sp, #4]
    siz = spinel_datatype_vpack(command_buff, sizeof(command_buff), p_fmt, args);
 100f360:	f7ff fe83 	bl	100f06a <spinel_datatype_vpack>

    va_end(args);

    if (siz < 0)
 100f364:	1e01      	subs	r1, r0, #0
 100f366:	db07      	blt.n	100f378 <nrf_802154_spinel_send+0x2c>
    }

    NRF_802154_SPINEL_LOG_RAW("Sending spinel frame\n");
    NRF_802154_SPINEL_LOG_BUFF_NAMED(command_buff, siz, "data");

    return nrf_802154_spinel_encoded_packet_send(command_buff, (size_t)siz);
 100f368:	a802      	add	r0, sp, #8
 100f36a:	f7f7 fde5 	bl	1006f38 <nrf_802154_spinel_encoded_packet_send>
}
 100f36e:	b043      	add	sp, #268	; 0x10c
 100f370:	f85d eb04 	ldr.w	lr, [sp], #4
 100f374:	b004      	add	sp, #16
 100f376:	4770      	bx	lr
        return NRF_802154_SERIALIZATION_ERROR_ENCODING_FAILURE;
 100f378:	f06f 0001 	mvn.w	r0, #1
 100f37c:	e7f7      	b.n	100f36e <nrf_802154_spinel_send+0x22>

0100f37e <nrf_802154_spinel_encoded_packet_received>:

void nrf_802154_spinel_encoded_packet_received(const void * p_data, size_t data_len)
{
 100f37e:	b507      	push	{r0, r1, r2, lr}
    NRF_802154_SPINEL_LOG_RAW("Received spinel frame\n");
    NRF_802154_SPINEL_LOG_BUFF_NAMED(p_data, data_len, "data");

    SERIALIZATION_ERROR_INIT(error);

    nrf_802154_ser_err_t err = nrf_802154_spinel_decode_cmd(p_data, data_len);
 100f380:	f7fb ff6c 	bl	100b25c <nrf_802154_spinel_decode_cmd>

    SERIALIZATION_ERROR_CHECK(err, error, bail);
 100f384:	2800      	cmp	r0, #0
 100f386:	da03      	bge.n	100f390 <nrf_802154_spinel_encoded_packet_received+0x12>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100f388:	9001      	str	r0, [sp, #4]
 100f38a:	a801      	add	r0, sp, #4
 100f38c:	f7fe fc01 	bl	100db92 <nrf_802154_serialization_error>

    return;
}
 100f390:	b003      	add	sp, #12
 100f392:	f85d fb04 	ldr.w	pc, [sp], #4

0100f396 <local_transmitted_frame_ptr_free>:
{
 100f396:	b513      	push	{r0, r1, r4, lr}
 100f398:	4604      	mov	r4, r0
    bool frame_found = nrf_802154_buffer_mgr_dst_remove_by_local_pointer(
 100f39a:	f7fb ff33 	bl	100b204 <nrf_802154_spinel_dst_buffer_mgr_get>
 100f39e:	4621      	mov	r1, r4
 100f3a0:	f7ff fef4 	bl	100f18c <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    SERIALIZATION_ERROR_IF(!frame_found,
 100f3a4:	b928      	cbnz	r0, 100f3b2 <local_transmitted_frame_ptr_free+0x1c>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100f3a6:	f06f 0307 	mvn.w	r3, #7
 100f3aa:	a801      	add	r0, sp, #4
 100f3ac:	9301      	str	r3, [sp, #4]
 100f3ae:	f7fe fbf0 	bl	100db92 <nrf_802154_serialization_error>
}
 100f3b2:	b002      	add	sp, #8
 100f3b4:	bd10      	pop	{r4, pc}

0100f3b6 <nrf_802154_spinel_dispatch_cmd>:

nrf_802154_ser_err_t nrf_802154_spinel_dispatch_cmd(spinel_command_t cmd,
                                                    const void     * p_cmd_data,
                                                    size_t           cmd_data_len)
{
 100f3b6:	4603      	mov	r3, r0
    switch (cmd)
 100f3b8:	2b03      	cmp	r3, #3
{
 100f3ba:	4608      	mov	r0, r1
 100f3bc:	4611      	mov	r1, r2
    switch (cmd)
 100f3be:	d101      	bne.n	100f3c4 <nrf_802154_spinel_dispatch_cmd+0xe>
    {
        case SPINEL_CMD_PROP_VALUE_SET:
            return nrf_802154_spinel_decode_cmd_prop_value_set(p_cmd_data, cmd_data_len);
 100f3c0:	f7fc b8b0 	b.w	100b524 <nrf_802154_spinel_decode_cmd_prop_value_set>
            NRF_802154_SPINEL_LOG_RAW("Unsupported command: %s(%u)\n",
                                      spinel_command_to_cstr(cmd),
                                      cmd);
            return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }
}
 100f3c4:	f06f 0002 	mvn.w	r0, #2
 100f3c8:	4770      	bx	lr

0100f3ca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 100f3ca:	4700      	bx	r0

0100f3cc <metal_device_open>:
{
 100f3cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100f3ce:	460c      	mov	r4, r1
 100f3d0:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
 100f3d2:	4606      	mov	r6, r0
 100f3d4:	b918      	cbnz	r0, 100f3de <metal_device_open+0x12>
		return -EINVAL;
 100f3d6:	f06f 0015 	mvn.w	r0, #21
}
 100f3da:	b002      	add	sp, #8
 100f3dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
 100f3de:	f7ff f884 	bl	100e4ea <strlen>
 100f3e2:	2800      	cmp	r0, #0
 100f3e4:	d0f7      	beq.n	100f3d6 <metal_device_open+0xa>
 100f3e6:	2c00      	cmp	r4, #0
 100f3e8:	d0f5      	beq.n	100f3d6 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
 100f3ea:	4620      	mov	r0, r4
 100f3ec:	f7ff f87d 	bl	100e4ea <strlen>
 100f3f0:	2800      	cmp	r0, #0
 100f3f2:	d0f0      	beq.n	100f3d6 <metal_device_open+0xa>
 100f3f4:	2d00      	cmp	r5, #0
 100f3f6:	d0ee      	beq.n	100f3d6 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
 100f3f8:	4630      	mov	r0, r6
 100f3fa:	a901      	add	r1, sp, #4
 100f3fc:	f7fc fc32 	bl	100bc64 <metal_bus_find>
	if (error)
 100f400:	2800      	cmp	r0, #0
 100f402:	d1ea      	bne.n	100f3da <metal_device_open+0xe>
	if (!bus->ops.dev_open)
 100f404:	9801      	ldr	r0, [sp, #4]
 100f406:	6883      	ldr	r3, [r0, #8]
 100f408:	b11b      	cbz	r3, 100f412 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
 100f40a:	462a      	mov	r2, r5
 100f40c:	4621      	mov	r1, r4
 100f40e:	4798      	blx	r3
	if (error)
 100f410:	e7e3      	b.n	100f3da <metal_device_open+0xe>
		return -ENODEV;
 100f412:	f06f 0012 	mvn.w	r0, #18
 100f416:	e7e0      	b.n	100f3da <metal_device_open+0xe>

0100f418 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 100f418:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f41a:	6804      	ldr	r4, [r0, #0]
 100f41c:	6885      	ldr	r5, [r0, #8]
		: NULL);
 100f41e:	1c66      	adds	r6, r4, #1
 100f420:	d00f      	beq.n	100f442 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f422:	42a9      	cmp	r1, r5
 100f424:	d232      	bcs.n	100f48c <metal_io_block_read+0x74>
		: NULL);
 100f426:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
 100f428:	185e      	adds	r6, r3, r1
 100f42a:	42ae      	cmp	r6, r5
		len = io->size - offset;
 100f42c:	bf88      	it	hi
 100f42e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
 100f430:	6a05      	ldr	r5, [r0, #32]
 100f432:	b155      	cbz	r5, 100f44a <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
 100f434:	9300      	str	r3, [sp, #0]
 100f436:	2305      	movs	r3, #5
 100f438:	47a8      	blx	r5
 100f43a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
 100f43c:	4618      	mov	r0, r3
 100f43e:	b002      	add	sp, #8
 100f440:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
 100f442:	42a9      	cmp	r1, r5
 100f444:	d222      	bcs.n	100f48c <metal_io_block_read+0x74>
 100f446:	2400      	movs	r4, #0
 100f448:	e7ee      	b.n	100f428 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
 100f44a:	f3bf 8f5b 	dmb	ish
		while ( len && (
 100f44e:	4621      	mov	r1, r4
 100f450:	4618      	mov	r0, r3
 100f452:	2800      	cmp	r0, #0
 100f454:	d0f2      	beq.n	100f43c <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
 100f456:	ea42 0401 	orr.w	r4, r2, r1
 100f45a:	07a4      	lsls	r4, r4, #30
 100f45c:	d10a      	bne.n	100f474 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 100f45e:	2803      	cmp	r0, #3
 100f460:	dc0e      	bgt.n	100f480 <metal_io_block_read+0x68>
 100f462:	3901      	subs	r1, #1
 100f464:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
 100f466:	4282      	cmp	r2, r0
 100f468:	d0e8      	beq.n	100f43c <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
 100f46a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
 100f46e:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
 100f472:	e7f8      	b.n	100f466 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
 100f474:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
 100f478:	3801      	subs	r0, #1
			*(unsigned char *)dest =
 100f47a:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
 100f47e:	e7e8      	b.n	100f452 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 100f480:	f851 4b04 	ldr.w	r4, [r1], #4
 100f484:	3804      	subs	r0, #4
 100f486:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 100f48a:	e7e8      	b.n	100f45e <metal_io_block_read+0x46>
		return -ERANGE;
 100f48c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 100f490:	e7d4      	b.n	100f43c <metal_io_block_read+0x24>

0100f492 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 100f492:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f494:	6804      	ldr	r4, [r0, #0]
 100f496:	6885      	ldr	r5, [r0, #8]
		: NULL);
 100f498:	1c66      	adds	r6, r4, #1
 100f49a:	d00e      	beq.n	100f4ba <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f49c:	42a9      	cmp	r1, r5
 100f49e:	d230      	bcs.n	100f502 <metal_io_block_write+0x70>
		: NULL);
 100f4a0:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
 100f4a2:	185e      	adds	r6, r3, r1
 100f4a4:	42ae      	cmp	r6, r5
		len = io->size - offset;
 100f4a6:	bf88      	it	hi
 100f4a8:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
 100f4aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 100f4ac:	b94d      	cbnz	r5, 100f4c2 <metal_io_block_write+0x30>
 100f4ae:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 100f4b0:	b991      	cbnz	r1, 100f4d8 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
 100f4b2:	f3bf 8f5b 	dmb	ish
	retlen = len;
 100f4b6:	4618      	mov	r0, r3
 100f4b8:	e006      	b.n	100f4c8 <metal_io_block_write+0x36>
	if (offset >= io->size)
 100f4ba:	42a9      	cmp	r1, r5
 100f4bc:	d221      	bcs.n	100f502 <metal_io_block_write+0x70>
 100f4be:	2400      	movs	r4, #0
 100f4c0:	e7ef      	b.n	100f4a2 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
 100f4c2:	9300      	str	r3, [sp, #0]
 100f4c4:	2305      	movs	r3, #5
 100f4c6:	47a8      	blx	r5
	}
	return retlen;
}
 100f4c8:	b002      	add	sp, #8
 100f4ca:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
 100f4cc:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
 100f4d0:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
 100f4d2:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
 100f4d6:	e7eb      	b.n	100f4b0 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
 100f4d8:	ea44 0002 	orr.w	r0, r4, r2
 100f4dc:	0780      	lsls	r0, r0, #30
 100f4de:	d1f5      	bne.n	100f4cc <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100f4e0:	2903      	cmp	r1, #3
 100f4e2:	dc08      	bgt.n	100f4f6 <metal_io_block_write+0x64>
 100f4e4:	3a01      	subs	r2, #1
 100f4e6:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
 100f4e8:	428c      	cmp	r4, r1
 100f4ea:	d0e2      	beq.n	100f4b2 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
 100f4ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
 100f4f0:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
 100f4f4:	e7f8      	b.n	100f4e8 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
 100f4f6:	f852 0b04 	ldr.w	r0, [r2], #4
 100f4fa:	3904      	subs	r1, #4
 100f4fc:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100f500:	e7ee      	b.n	100f4e0 <metal_io_block_write+0x4e>
		return -ERANGE;
 100f502:	f06f 0021 	mvn.w	r0, #33	; 0x21
 100f506:	e7df      	b.n	100f4c8 <metal_io_block_write+0x36>

0100f508 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
 100f508:	2000      	movs	r0, #0
 100f50a:	4770      	bx	lr

0100f50c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 100f50c:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
 100f50e:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
 100f510:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
 100f512:	b984      	cbnz	r4, 100f536 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
 100f514:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
 100f516:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
 100f518:	291f      	cmp	r1, #31
 100f51a:	bf98      	it	ls
 100f51c:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 100f520:	b165      	cbz	r5, 100f53c <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
 100f522:	6881      	ldr	r1, [r0, #8]
 100f524:	428b      	cmp	r3, r1
 100f526:	d209      	bcs.n	100f53c <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
 100f528:	6900      	ldr	r0, [r0, #16]
 100f52a:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
 100f52c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 100f530:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
 100f532:	bc30      	pop	{r4, r5}
 100f534:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
 100f536:	4623      	mov	r3, r4
}
 100f538:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
 100f53a:	4718      	bx	r3
			: METAL_BAD_PHYS);
 100f53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100f540:	e7f7      	b.n	100f532 <metal_io_phys+0x26>

0100f542 <virtqueue_create>:
{
 100f542:	b510      	push	{r4, lr}
 100f544:	9c04      	ldr	r4, [sp, #16]
		vq->vq_name = name;
 100f546:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
 100f54a:	9a02      	ldr	r2, [sp, #8]
		vq->vq_queue_index = id;
 100f54c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
 100f54e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
 100f550:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
 100f552:	9a03      	ldr	r2, [sp, #12]
		vq->vq_nentries = ring->num_descs;
 100f554:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 100f556:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
 100f558:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
 100f55a:	e9d3 2000 	ldrd	r2, r0, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 100f55e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
 100f562:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 100f566:	3102      	adds	r1, #2
	      align - 1) & ~(align - 1));
 100f568:	1c42      	adds	r2, r0, #1
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 100f56a:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 100f56c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	      align - 1) & ~(align - 1));
 100f570:	4413      	add	r3, r2
 100f572:	4240      	negs	r0, r0
 100f574:	4003      	ands	r3, r0
	vr->used = (struct vring_used *)
 100f576:	6223      	str	r3, [r4, #32]
}
 100f578:	2000      	movs	r0, #0
 100f57a:	bd10      	pop	{r4, pc}

0100f57c <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
 100f57c:	6983      	ldr	r3, [r0, #24]
 100f57e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
 100f582:	6898      	ldr	r0, [r3, #8]
 100f584:	4770      	bx	lr

0100f586 <virtqueue_get_available_buffer>:
{
 100f586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
 100f58a:	f3bf 8f5b 	dmb	ish
{
 100f58e:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 100f590:	69c2      	ldr	r2, [r0, #28]
{
 100f592:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 100f594:	8853      	ldrh	r3, [r2, #2]
 100f596:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
 100f598:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 100f59a:	428b      	cmp	r3, r1
 100f59c:	d045      	beq.n	100f62a <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 100f59e:	1c4b      	adds	r3, r1, #1
 100f5a0:	8603      	strh	r3, [r0, #48]	; 0x30
 100f5a2:	8943      	ldrh	r3, [r0, #10]
 100f5a4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 100f5a8:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 100f5aa:	400b      	ands	r3, r1
 100f5ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 100f5b0:	889a      	ldrh	r2, [r3, #4]
 100f5b2:	b293      	uxth	r3, r2
 100f5b4:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 100f5b6:	6982      	ldr	r2, [r0, #24]
 100f5b8:	011b      	lsls	r3, r3, #4
 100f5ba:	f852 9003 	ldr.w	r9, [r2, r3]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
 100f5be:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 100f5c2:	bb5b      	cbnz	r3, 100f61c <virtqueue_get_available_buffer+0x96>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 100f5c4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
 100f5c8:	1c62      	adds	r2, r4, #1
 100f5ca:	bf09      	itett	eq
 100f5cc:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 100f5d0:	ea09 0404 	andne.w	r4, r9, r4
 100f5d4:	681c      	ldreq	r4, [r3, #0]
 100f5d6:	eba9 0404 	subeq.w	r4, r9, r4
		do {
			if (metal_io_phys(io, offset) == phys)
 100f5da:	4621      	mov	r1, r4
 100f5dc:	4640      	mov	r0, r8
 100f5de:	f7ff ff95 	bl	100f50c <metal_io_phys>
 100f5e2:	4581      	cmp	r9, r0
 100f5e4:	d009      	beq.n	100f5fa <virtqueue_get_available_buffer+0x74>
				return offset;
			offset += io->page_mask + 1;
 100f5e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 100f5ea:	3301      	adds	r3, #1
 100f5ec:	441c      	add	r4, r3
		} while (offset < io->size);
 100f5ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 100f5f2:	429c      	cmp	r4, r3
 100f5f4:	d3f1      	bcc.n	100f5da <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
 100f5f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f5fa:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
 100f5fe:	1c43      	adds	r3, r0, #1
 100f600:	d011      	beq.n	100f626 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
 100f602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 100f606:	42a3      	cmp	r3, r4
 100f608:	d90d      	bls.n	100f626 <virtqueue_get_available_buffer+0xa0>
		: NULL);
 100f60a:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
 100f60c:	8832      	ldrh	r2, [r6, #0]
 100f60e:	69ab      	ldr	r3, [r5, #24]
 100f610:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 100f614:	689b      	ldr	r3, [r3, #8]
 100f616:	603b      	str	r3, [r7, #0]
}
 100f618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	return (*io->ops.phys_to_offset)(io, phys);
 100f61c:	4649      	mov	r1, r9
 100f61e:	4640      	mov	r0, r8
 100f620:	4798      	blx	r3
 100f622:	4604      	mov	r4, r0
 100f624:	e7e9      	b.n	100f5fa <virtqueue_get_available_buffer+0x74>
		: NULL);
 100f626:	2000      	movs	r0, #0
 100f628:	e7f0      	b.n	100f60c <virtqueue_get_available_buffer+0x86>
		return NULL;
 100f62a:	2000      	movs	r0, #0
 100f62c:	e7f4      	b.n	100f618 <virtqueue_get_available_buffer+0x92>

0100f62e <virtqueue_disable_cb>:
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 100f62e:	6802      	ldr	r2, [r0, #0]
			vring_used_event(&vq->vq_ring) =
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 100f630:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 100f632:	6912      	ldr	r2, [r2, #16]
 100f634:	0092      	lsls	r2, r2, #2
 100f636:	d50b      	bpl.n	100f650 <virtqueue_disable_cb+0x22>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 100f638:	2b01      	cmp	r3, #1
 100f63a:	d110      	bne.n	100f65e <virtqueue_disable_cb+0x30>
			vring_avail_event(&vq->vq_ring) =
 100f63c:	6a02      	ldr	r2, [r0, #32]
 100f63e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
 100f640:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 100f642:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
 100f644:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
 100f648:	1a1b      	subs	r3, r3, r0
 100f64a:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
 100f64c:	8093      	strh	r3, [r2, #4]
 100f64e:	4770      	bx	lr
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 100f650:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
 100f652:	bf01      	itttt	eq
 100f654:	6a02      	ldreq	r2, [r0, #32]
 100f656:	8813      	ldrheq	r3, [r2, #0]
 100f658:	f043 0301 	orreq.w	r3, r3, #1
 100f65c:	8013      	strheq	r3, [r2, #0]
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
 100f65e:	4770      	bx	lr

0100f660 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 100f660:	b510      	push	{r4, lr}
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 100f662:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 100f666:	6803      	ldr	r3, [r0, #0]
{
 100f668:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 100f66a:	691a      	ldr	r2, [r3, #16]
 100f66c:	699b      	ldr	r3, [r3, #24]
 100f66e:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 100f672:	d011      	beq.n	100f698 <virtqueue_kick+0x38>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 100f674:	2b01      	cmp	r3, #1
 100f676:	d10c      	bne.n	100f692 <virtqueue_kick+0x32>
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
 100f678:	69c2      	ldr	r2, [r0, #28]
 100f67a:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
 100f67c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
 100f67e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 100f682:	8892      	ldrh	r2, [r2, #4]
			new_idx = vq->vq_ring.used->idx;
 100f684:	885b      	ldrh	r3, [r3, #2]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
 100f686:	1a9b      	subs	r3, r3, r2
 100f688:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
 100f68a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 100f68c:	b29b      	uxth	r3, r3
 100f68e:	429a      	cmp	r2, r3
 100f690:	d808      	bhi.n	100f6a4 <virtqueue_kick+0x44>
	vq->vq_queued_cnt = 0;
 100f692:	2300      	movs	r3, #0
 100f694:	84e3      	strh	r3, [r4, #38]	; 0x26
}
 100f696:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 100f698:	2b01      	cmp	r3, #1
 100f69a:	d1fa      	bne.n	100f692 <virtqueue_kick+0x32>
			return (vq->vq_ring.avail->flags &
 100f69c:	69c3      	ldr	r3, [r0, #28]
 100f69e:	881b      	ldrh	r3, [r3, #0]
	if (vq_ring_must_notify(vq))
 100f6a0:	07db      	lsls	r3, r3, #31
 100f6a2:	d4f6      	bmi.n	100f692 <virtqueue_kick+0x32>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
 100f6a4:	6923      	ldr	r3, [r4, #16]
 100f6a6:	2b00      	cmp	r3, #0
 100f6a8:	d0f3      	beq.n	100f692 <virtqueue_kick+0x32>
		vq->notify(vq);
 100f6aa:	4620      	mov	r0, r4
 100f6ac:	4798      	blx	r3
 100f6ae:	e7f0      	b.n	100f692 <virtqueue_kick+0x32>

0100f6b0 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
 100f6b0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 100f6b4:	68c3      	ldr	r3, [r0, #12]
 100f6b6:	b103      	cbz	r3, 100f6ba <virtqueue_notification+0xa>
		vq->callback(vq);
 100f6b8:	4718      	bx	r3
}
 100f6ba:	4770      	bx	lr

0100f6bc <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 100f6bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100f6c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100f6c4:	f7fc bfb2 	b.w	100c62c <z_impl_k_sem_take>

0100f6c8 <rpmsg_unregister_endpoint>:
{
 100f6c8:	b570      	push	{r4, r5, r6, lr}
 100f6ca:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
 100f6cc:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
 100f6ce:	f105 0658 	add.w	r6, r5, #88	; 0x58
 100f6d2:	4630      	mov	r0, r6
 100f6d4:	f7ff fff2 	bl	100f6bc <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
 100f6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 100f6da:	1c5a      	adds	r2, r3, #1
 100f6dc:	d010      	beq.n	100f700 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
 100f6de:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
 100f6e2:	2b7f      	cmp	r3, #127	; 0x7f
 100f6e4:	d80c      	bhi.n	100f700 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100f6e6:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 100f6e8:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 100f6ea:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100f6ec:	f003 031f 	and.w	r3, r3, #31
 100f6f0:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 100f6f4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 100f6f8:	ea22 0203 	bic.w	r2, r2, r3
 100f6fc:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
 100f700:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
 100f704:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 100f708:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
 100f70a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
 100f70c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
 100f710:	2300      	movs	r3, #0
 100f712:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
 100f714:	4630      	mov	r0, r6
}
 100f716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100f71a:	f7fc bf67 	b.w	100c5ec <z_impl_k_sem_give>

0100f71e <rpmsg_send_ns_message>:
{
 100f71e:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
 100f720:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 100f722:	b08c      	sub	sp, #48	; 0x30
 100f724:	4604      	mov	r4, r0
	ns_msg.flags = flags;
 100f726:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 100f728:	2220      	movs	r2, #32
 100f72a:	4601      	mov	r1, r0
 100f72c:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
 100f72e:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 100f730:	f7fe fec9 	bl	100e4c6 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 100f734:	2328      	movs	r3, #40	; 0x28
 100f736:	2201      	movs	r2, #1
 100f738:	4620      	mov	r0, r4
 100f73a:	e9cd 3200 	strd	r3, r2, [sp]
 100f73e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 100f740:	2235      	movs	r2, #53	; 0x35
 100f742:	ab02      	add	r3, sp, #8
 100f744:	f7fc fb92 	bl	100be6c <rpmsg_send_offchannel_raw>
}
 100f748:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 100f74c:	b00c      	add	sp, #48	; 0x30
 100f74e:	bd10      	pop	{r4, pc}

0100f750 <rpmsg_get_endpoint>:
{
 100f750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100f754:	4680      	mov	r8, r0
 100f756:	4689      	mov	r9, r1
 100f758:	4615      	mov	r5, r2
 100f75a:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
 100f75c:	6807      	ldr	r7, [r0, #0]
 100f75e:	45b8      	cmp	r8, r7
 100f760:	d101      	bne.n	100f766 <rpmsg_get_endpoint+0x16>
	return NULL;
 100f762:	2400      	movs	r4, #0
 100f764:	e021      	b.n	100f7aa <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 100f766:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 100f768:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 100f76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 100f76e:	d006      	beq.n	100f77e <rpmsg_get_endpoint+0x2e>
 100f770:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 100f772:	d01a      	beq.n	100f7aa <rpmsg_get_endpoint+0x5a>
		if (name)
 100f774:	f1b9 0f00 	cmp.w	r9, #0
 100f778:	d106      	bne.n	100f788 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
 100f77a:	683f      	ldr	r7, [r7, #0]
 100f77c:	e7ef      	b.n	100f75e <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 100f77e:	3301      	adds	r3, #1
 100f780:	d1f8      	bne.n	100f774 <rpmsg_get_endpoint+0x24>
 100f782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100f784:	42b3      	cmp	r3, r6
 100f786:	e7f4      	b.n	100f772 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
 100f788:	2220      	movs	r2, #32
 100f78a:	4649      	mov	r1, r9
 100f78c:	4620      	mov	r0, r4
 100f78e:	f7fe fec8 	bl	100e522 <strncmp>
		if (!name || !name_match)
 100f792:	2800      	cmp	r0, #0
 100f794:	d1f1      	bne.n	100f77a <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 100f796:	1c72      	adds	r2, r6, #1
 100f798:	d002      	beq.n	100f7a0 <rpmsg_get_endpoint+0x50>
 100f79a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100f79c:	42b3      	cmp	r3, r6
 100f79e:	d004      	beq.n	100f7aa <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 100f7a0:	1c6b      	adds	r3, r5, #1
 100f7a2:	d1ea      	bne.n	100f77a <rpmsg_get_endpoint+0x2a>
 100f7a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100f7a6:	3301      	adds	r3, #1
 100f7a8:	d1e7      	bne.n	100f77a <rpmsg_get_endpoint+0x2a>
}
 100f7aa:	4620      	mov	r0, r4
 100f7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0100f7b0 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
 100f7b0:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
 100f7b2:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
 100f7b6:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
 100f7ba:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
 100f7bc:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
 100f7be:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 100f7c0:	6013      	str	r3, [r2, #0]
}
 100f7c2:	4770      	bx	lr

0100f7c4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 100f7c4:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
 100f7c6:	4604      	mov	r4, r0
 100f7c8:	b190      	cbz	r0, 100f7f0 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
 100f7ca:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
 100f7cc:	b183      	cbz	r3, 100f7f0 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
 100f7ce:	7802      	ldrb	r2, [r0, #0]
 100f7d0:	b14a      	cbz	r2, 100f7e6 <rpmsg_destroy_ept+0x22>
 100f7d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 100f7d6:	b133      	cbz	r3, 100f7e6 <rpmsg_destroy_ept+0x22>
 100f7d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 100f7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 100f7de:	d302      	bcc.n	100f7e6 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 100f7e0:	2101      	movs	r1, #1
 100f7e2:	f7ff ff9c 	bl	100f71e <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
 100f7e6:	4620      	mov	r0, r4
}
 100f7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
 100f7ec:	f7ff bf6c 	b.w	100f6c8 <rpmsg_unregister_endpoint>
}
 100f7f0:	bd10      	pop	{r4, pc}

0100f7f2 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
 100f7f2:	f851 3c08 	ldr.w	r3, [r1, #-8]
 100f7f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 100f7fa:	f841 3c08 	str.w	r3, [r1, #-8]
}
 100f7fe:	4770      	bx	lr

0100f800 <rpmsg_virtio_tx_callback>:
}
 100f800:	4770      	bx	lr

0100f802 <k_sem_give>:
 100f802:	f7fc bef3 	b.w	100c5ec <z_impl_k_sem_give>

0100f806 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 100f806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100f80a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100f80e:	f7fc bf0d 	b.w	100c62c <z_impl_k_sem_take>

0100f812 <rpmsg_virtio_ns_callback>:
{
 100f812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (len != sizeof(*ns_msg))
 100f816:	2a28      	cmp	r2, #40	; 0x28
{
 100f818:	460e      	mov	r6, r1
 100f81a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
 100f81c:	d12b      	bne.n	100f876 <rpmsg_virtio_ns_callback+0x64>
	struct rpmsg_device *rdev = ept->rdev;
 100f81e:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
 100f820:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
 100f822:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
	metal_io_block_read(io,
 100f826:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100f828:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100f82a:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100f82c:	1a71      	subs	r1, r6, r1
 100f82e:	42a1      	cmp	r1, r4
 100f830:	bf28      	it	cs
 100f832:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 100f836:	f7ff fdef 	bl	100f418 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
 100f83a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
 100f83e:	f8d6 8020 	ldr.w	r8, [r6, #32]
 100f842:	4638      	mov	r0, r7
 100f844:	f7ff ffdf 	bl	100f806 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 100f848:	4643      	mov	r3, r8
 100f84a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100f84e:	4669      	mov	r1, sp
 100f850:	4628      	mov	r0, r5
 100f852:	f7ff ff7d 	bl	100f750 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 100f856:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 100f858:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 100f85a:	07db      	lsls	r3, r3, #31
 100f85c:	d50f      	bpl.n	100f87e <rpmsg_virtio_ns_callback+0x6c>
		if (_ept)
 100f85e:	b110      	cbz	r0, 100f866 <rpmsg_virtio_ns_callback+0x54>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 100f860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100f864:	6283      	str	r3, [r0, #40]	; 0x28
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
 100f866:	4638      	mov	r0, r7
 100f868:	f7ff ffcb 	bl	100f802 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
 100f86c:	b11c      	cbz	r4, 100f876 <rpmsg_virtio_ns_callback+0x64>
 100f86e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 100f870:	b10b      	cbz	r3, 100f876 <rpmsg_virtio_ns_callback+0x64>
			_ept->ns_unbind_cb(_ept);
 100f872:	4620      	mov	r0, r4
 100f874:	4798      	blx	r3
}
 100f876:	2000      	movs	r0, #0
 100f878:	b008      	add	sp, #32
 100f87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
 100f87e:	b950      	cbnz	r0, 100f896 <rpmsg_virtio_ns_callback+0x84>
 100f880:	4638      	mov	r0, r7
 100f882:	f7ff ffbe 	bl	100f802 <k_sem_give>
			if (rdev->ns_bind_cb)
 100f886:	6eab      	ldr	r3, [r5, #104]	; 0x68
 100f888:	2b00      	cmp	r3, #0
 100f88a:	d0f4      	beq.n	100f876 <rpmsg_virtio_ns_callback+0x64>
				rdev->ns_bind_cb(rdev, name, dest);
 100f88c:	4642      	mov	r2, r8
 100f88e:	4669      	mov	r1, sp
 100f890:	4628      	mov	r0, r5
 100f892:	4798      	blx	r3
 100f894:	e7ef      	b.n	100f876 <rpmsg_virtio_ns_callback+0x64>
			_ept->dest_addr = dest;
 100f896:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
 100f89a:	4638      	mov	r0, r7
 100f89c:	f7ff ffb1 	bl	100f802 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
 100f8a0:	e7e9      	b.n	100f876 <rpmsg_virtio_ns_callback+0x64>

0100f8a2 <rpmsg_virtio_send_offchannel_nocopy>:
{
 100f8a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 100f8a4:	b085      	sub	sp, #20
	idx = hdr->reserved;
 100f8a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
{
 100f8aa:	4604      	mov	r4, r0
	rp_hdr.src = src;
 100f8ac:	e9cd 1200 	strd	r1, r2, [sp]
	rp_hdr.reserved = 0;
 100f8b0:	2200      	movs	r2, #0
	io = rvdev->shbuf_io;
 100f8b2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
	hdr = RPMSG_LOCATE_HDR(data);
 100f8b6:	3b10      	subs	r3, #16
 100f8b8:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100f8ba:	6887      	ldr	r7, [r0, #8]
{
 100f8bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100f8be:	1a59      	subs	r1, r3, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 100f8c0:	42b9      	cmp	r1, r7
 100f8c2:	bf28      	it	cs
 100f8c4:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 100f8c8:	2310      	movs	r3, #16
	rp_hdr.reserved = 0;
 100f8ca:	9202      	str	r2, [sp, #8]
	rp_hdr.flags = 0;
 100f8cc:	f8ad 200e 	strh.w	r2, [sp, #14]
	metal_mutex_acquire(&rdev->lock);
 100f8d0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 100f8d4:	466a      	mov	r2, sp
	idx = hdr->reserved;
 100f8d6:	b2ad      	uxth	r5, r5
	rp_hdr.len = len;
 100f8d8:	f8ad 600c 	strh.w	r6, [sp, #12]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 100f8dc:	f7ff fdd9 	bl	100f492 <metal_io_block_write>
	__metal_mutex_acquire(mutex);
 100f8e0:	4638      	mov	r0, r7
 100f8e2:	f7ff ff90 	bl	100f806 <__metal_mutex_acquire>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
 100f8e6:	4629      	mov	r1, r5
 100f8e8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 100f8ec:	f7ff fe46 	bl	100f57c <virtqueue_get_buffer_length>
	return rvdev->vdev->role;
 100f8f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 100f8f4:	4602      	mov	r2, r0
	if (role == RPMSG_REMOTE) {
 100f8f6:	699b      	ldr	r3, [r3, #24]
 100f8f8:	2b01      	cmp	r3, #1
 100f8fa:	d104      	bne.n	100f906 <rpmsg_virtio_send_offchannel_nocopy+0x64>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 100f8fc:	4629      	mov	r1, r5
 100f8fe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 100f902:	f7fc fa97 	bl	100be34 <virtqueue_add_consumed_buffer>
	virtqueue_kick(rvdev->svq);
 100f906:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 100f90a:	f7ff fea9 	bl	100f660 <virtqueue_kick>
 100f90e:	4638      	mov	r0, r7
 100f910:	f7ff ff77 	bl	100f802 <k_sem_give>
}
 100f914:	4630      	mov	r0, r6
 100f916:	b005      	add	sp, #20
 100f918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0100f91a <rpmsg_virtio_rx_callback>:
{
 100f91a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 100f91e:	6803      	ldr	r3, [r0, #0]
 100f920:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
 100f922:	f106 0758 	add.w	r7, r6, #88	; 0x58
 100f926:	4638      	mov	r0, r7
 100f928:	f7ff ff6d 	bl	100f806 <__metal_mutex_acquire>
 100f92c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
	if (role == RPMSG_REMOTE) {
 100f930:	699b      	ldr	r3, [r3, #24]
 100f932:	2b01      	cmp	r3, #1
 100f934:	d13d      	bne.n	100f9b2 <rpmsg_virtio_rx_callback+0x98>
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
 100f936:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 100f93a:	aa03      	add	r2, sp, #12
 100f93c:	f10d 010a 	add.w	r1, sp, #10
 100f940:	f7ff fe21 	bl	100f586 <virtqueue_get_available_buffer>
 100f944:	4604      	mov	r4, r0
 100f946:	4638      	mov	r0, r7
 100f948:	f7ff ff5b 	bl	100f802 <k_sem_give>
	while (rp_hdr) {
 100f94c:	b914      	cbnz	r4, 100f954 <rpmsg_virtio_rx_callback+0x3a>
}
 100f94e:	b004      	add	sp, #16
 100f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rp_hdr->reserved = idx;
 100f954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 100f958:	4638      	mov	r0, r7
 100f95a:	60a3      	str	r3, [r4, #8]
 100f95c:	f7ff ff53 	bl	100f806 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 100f960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100f964:	2100      	movs	r1, #0
 100f966:	4630      	mov	r0, r6
 100f968:	6862      	ldr	r2, [r4, #4]
 100f96a:	f7ff fef1 	bl	100f750 <rpmsg_get_endpoint>
 100f96e:	4605      	mov	r5, r0
 100f970:	4638      	mov	r0, r7
 100f972:	f7ff ff46 	bl	100f802 <k_sem_give>
		if (ept) {
 100f976:	b16d      	cbz	r5, 100f994 <rpmsg_virtio_rx_callback+0x7a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 100f978:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
 100f97a:	6823      	ldr	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 100f97c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 100f97e:	3201      	adds	r2, #1
				ept->dest_addr = rp_hdr->src;
 100f980:	bf08      	it	eq
 100f982:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 100f984:	89a2      	ldrh	r2, [r4, #12]
 100f986:	9100      	str	r1, [sp, #0]
 100f988:	4628      	mov	r0, r5
 100f98a:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
 100f98e:	f104 0110 	add.w	r1, r4, #16
 100f992:	47c0      	blx	r8
 100f994:	4638      	mov	r0, r7
 100f996:	f7ff ff36 	bl	100f806 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
 100f99a:	68a3      	ldr	r3, [r4, #8]
 100f99c:	2b00      	cmp	r3, #0
 100f99e:	db11      	blt.n	100f9c4 <rpmsg_virtio_rx_callback+0xaa>
 100f9a0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
	if (role == RPMSG_REMOTE) {
 100f9a4:	699b      	ldr	r3, [r3, #24]
 100f9a6:	2b01      	cmp	r3, #1
 100f9a8:	d005      	beq.n	100f9b6 <rpmsg_virtio_rx_callback+0x9c>
			virtqueue_kick(rvdev->rvq);
 100f9aa:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 100f9ae:	f7ff fe57 	bl	100f660 <virtqueue_kick>
 100f9b2:	2400      	movs	r4, #0
 100f9b4:	e7c7      	b.n	100f946 <rpmsg_virtio_rx_callback+0x2c>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 100f9b6:	9a03      	ldr	r2, [sp, #12]
 100f9b8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 100f9bc:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 100f9c0:	f7fc fa38 	bl	100be34 <virtqueue_add_consumed_buffer>
 100f9c4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
	if (role == RPMSG_REMOTE) {
 100f9c8:	699b      	ldr	r3, [r3, #24]
 100f9ca:	2b01      	cmp	r3, #1
 100f9cc:	d1ed      	bne.n	100f9aa <rpmsg_virtio_rx_callback+0x90>
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
 100f9ce:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 100f9d2:	aa03      	add	r2, sp, #12
 100f9d4:	f10d 010a 	add.w	r1, sp, #10
 100f9d8:	f7ff fdd5 	bl	100f586 <virtqueue_get_available_buffer>
		if (!rp_hdr) {
 100f9dc:	4604      	mov	r4, r0
 100f9de:	2800      	cmp	r0, #0
 100f9e0:	d1b1      	bne.n	100f946 <rpmsg_virtio_rx_callback+0x2c>
 100f9e2:	e7e2      	b.n	100f9aa <rpmsg_virtio_rx_callback+0x90>

0100f9e4 <rpmsg_virtio_release_rx_buffer>:
{
 100f9e4:	b570      	push	{r4, r5, r6, lr}
 100f9e6:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
 100f9e8:	f851 5c08 	ldr.w	r5, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
 100f9ec:	f100 0658 	add.w	r6, r0, #88	; 0x58
 100f9f0:	4630      	mov	r0, r6
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
 100f9f2:	b2ad      	uxth	r5, r5
 100f9f4:	f7ff ff07 	bl	100f806 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
 100f9f8:	4629      	mov	r1, r5
 100f9fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 100f9fe:	f7ff fdbd 	bl	100f57c <virtqueue_get_buffer_length>
 100fa02:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 100fa06:	4602      	mov	r2, r0
	if (role == RPMSG_REMOTE) {
 100fa08:	699b      	ldr	r3, [r3, #24]
 100fa0a:	2b01      	cmp	r3, #1
 100fa0c:	d104      	bne.n	100fa18 <rpmsg_virtio_release_rx_buffer+0x34>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 100fa0e:	4629      	mov	r1, r5
 100fa10:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 100fa14:	f7fc fa0e 	bl	100be34 <virtqueue_add_consumed_buffer>
 100fa18:	4630      	mov	r0, r6
}
 100fa1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100fa1e:	f7ff bef0 	b.w	100f802 <k_sem_give>

0100fa22 <rpmsg_virtio_get_tx_payload_buffer>:
{
 100fa22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 100fa26:	4606      	mov	r6, r0
 100fa28:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 100fa2c:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
 100fa2e:	6a03      	ldr	r3, [r0, #32]
 100fa30:	4615      	mov	r5, r2
 100fa32:	681b      	ldr	r3, [r3, #0]
 100fa34:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
 100fa36:	0743      	lsls	r3, r0, #29
 100fa38:	d51f      	bpl.n	100fa7a <rpmsg_virtio_get_tx_payload_buffer+0x58>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 100fa3a:	f643 2398 	movw	r3, #15000	; 0x3a98
 100fa3e:	2d00      	cmp	r5, #0
 100fa40:	bf18      	it	ne
 100fa42:	461d      	movne	r5, r3
		metal_mutex_acquire(&rdev->lock);
 100fa44:	f106 0858 	add.w	r8, r6, #88	; 0x58
 100fa48:	4640      	mov	r0, r8
 100fa4a:	f7ff fedc 	bl	100f806 <__metal_mutex_acquire>
	return rvdev->vdev->role;
 100fa4e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
	if (role == RPMSG_REMOTE) {
 100fa52:	699b      	ldr	r3, [r3, #24]
 100fa54:	2b01      	cmp	r3, #1
 100fa56:	d10e      	bne.n	100fa76 <rpmsg_virtio_get_tx_payload_buffer+0x54>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
 100fa58:	463a      	mov	r2, r7
 100fa5a:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 100fa5e:	f10d 0106 	add.w	r1, sp, #6
 100fa62:	f7ff fd90 	bl	100f586 <virtqueue_get_available_buffer>
 100fa66:	4604      	mov	r4, r0
 100fa68:	4640      	mov	r0, r8
 100fa6a:	f7ff feca 	bl	100f802 <k_sem_give>
		if (rp_hdr || !tick_count)
 100fa6e:	b944      	cbnz	r4, 100fa82 <rpmsg_virtio_get_tx_payload_buffer+0x60>
 100fa70:	b11d      	cbz	r5, 100fa7a <rpmsg_virtio_get_tx_payload_buffer+0x58>
		tick_count--;
 100fa72:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
 100fa74:	e7e8      	b.n	100fa48 <rpmsg_virtio_get_tx_payload_buffer+0x26>
	void *data = NULL;
 100fa76:	2400      	movs	r4, #0
 100fa78:	e7f6      	b.n	100fa68 <rpmsg_virtio_get_tx_payload_buffer+0x46>
		return NULL;
 100fa7a:	2000      	movs	r0, #0
}
 100fa7c:	b002      	add	sp, #8
 100fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp_hdr->reserved = idx;
 100fa82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
 100fa86:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
 100fa8a:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
 100fa8c:	683b      	ldr	r3, [r7, #0]
 100fa8e:	3b10      	subs	r3, #16
 100fa90:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
 100fa92:	e7f3      	b.n	100fa7c <rpmsg_virtio_get_tx_payload_buffer+0x5a>

0100fa94 <z_device_state_init>:
}
 100fa94:	4770      	bx	lr

0100fa96 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 100fa96:	b138      	cbz	r0, 100faa8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 100fa98:	68c3      	ldr	r3, [r0, #12]
 100fa9a:	8818      	ldrh	r0, [r3, #0]
 100fa9c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 100faa0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 100faa4:	4258      	negs	r0, r3
 100faa6:	4158      	adcs	r0, r3
}
 100faa8:	4770      	bx	lr

0100faaa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 100faaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100faac:	4605      	mov	r5, r0
 100faae:	460e      	mov	r6, r1
	__asm__ volatile(
 100fab0:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fab4:	f3ef 8711 	mrs	r7, BASEPRI
 100fab8:	f383 8811 	msr	BASEPRI, r3
 100fabc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 100fac0:	f7fd fa4e 	bl	100cf60 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 100fac4:	4631      	mov	r1, r6
 100fac6:	4604      	mov	r4, r0
 100fac8:	4628      	mov	r0, r5
 100faca:	f7fe fe13 	bl	100e6f4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 100face:	f387 8811 	msr	BASEPRI, r7
 100fad2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 100fad6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 100fad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 100fadc:	f7f6 ba12 	b.w	1005f04 <z_impl_k_thread_abort>

0100fae0 <main>:
	return sys_clock_cycle_get_32();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 100fae0:	bf00      	nop
}
 100fae2:	4770      	bx	lr

0100fae4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100fae4:	f3ef 8005 	mrs	r0, IPSR
}
 100fae8:	3800      	subs	r0, #0
 100faea:	bf18      	it	ne
 100faec:	2001      	movne	r0, #1
 100faee:	4770      	bx	lr

0100faf0 <z_impl_k_thread_name_set>:
}
 100faf0:	f06f 0057 	mvn.w	r0, #87	; 0x57
 100faf4:	4770      	bx	lr

0100faf6 <z_impl_k_thread_start>:
	z_sched_start(thread);
 100faf6:	f7fd b91f 	b.w	100cd38 <z_sched_start>

0100fafa <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 100fafa:	b508      	push	{r3, lr}
	__asm__ volatile(
 100fafc:	f04f 0240 	mov.w	r2, #64	; 0x40
 100fb00:	f3ef 8311 	mrs	r3, BASEPRI
 100fb04:	f382 8811 	msr	BASEPRI, r2
 100fb08:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 100fb0c:	f7f6 f83e 	bl	1005b8c <arch_cpu_idle>
 100fb10:	e7f4      	b.n	100fafc <idle+0x2>

0100fb12 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 100fb12:	f990 300e 	ldrsb.w	r3, [r0, #14]
 100fb16:	428b      	cmp	r3, r1
 100fb18:	d001      	beq.n	100fb1e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 100fb1a:	f7fd b92b 	b.w	100cd74 <z_set_prio>
}
 100fb1e:	2000      	movs	r0, #0
 100fb20:	4770      	bx	lr

0100fb22 <z_impl_k_mutex_init>:
{
 100fb22:	4603      	mov	r3, r0
	mutex->owner = NULL;
 100fb24:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 100fb26:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 100fb2a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 100fb2e:	4770      	bx	lr

0100fb30 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 100fb30:	b13a      	cbz	r2, 100fb42 <z_impl_k_sem_init+0x12>
 100fb32:	428a      	cmp	r2, r1
 100fb34:	d305      	bcc.n	100fb42 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 100fb36:	e9c0 1202 	strd	r1, r2, [r0, #8]
 100fb3a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 100fb3e:	2000      	movs	r0, #0
 100fb40:	4770      	bx	lr
		return -EINVAL;
 100fb42:	f06f 0015 	mvn.w	r0, #21
}
 100fb46:	4770      	bx	lr

0100fb48 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
 100fb48:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
 100fb4a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 100fb4c:	408b      	lsls	r3, r1
 100fb4e:	ea22 0303 	bic.w	r3, r2, r3
 100fb52:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 100fb54:	fa22 f001 	lsr.w	r0, r2, r1
}
 100fb58:	f000 0001 	and.w	r0, r0, #1
 100fb5c:	4770      	bx	lr

0100fb5e <unschedule_locked>:
{
 100fb5e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 100fb60:	2103      	movs	r1, #3
{
 100fb62:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 100fb64:	300c      	adds	r0, #12
 100fb66:	f7ff ffef 	bl	100fb48 <flag_test_and_clear>
 100fb6a:	4604      	mov	r4, r0
 100fb6c:	b118      	cbz	r0, 100fb76 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
 100fb6e:	f105 0010 	add.w	r0, r5, #16
 100fb72:	f000 f919 	bl	100fda8 <z_abort_timeout>
}
 100fb76:	4620      	mov	r0, r4
 100fb78:	bd38      	pop	{r3, r4, r5, pc}

0100fb7a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 100fb7a:	b120      	cbz	r0, 100fb86 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 100fb7c:	2200      	movs	r2, #0
 100fb7e:	3088      	adds	r0, #136	; 0x88
 100fb80:	4611      	mov	r1, r2
 100fb82:	f000 b8f4 	b.w	100fd6e <z_sched_wake>
}
 100fb86:	4770      	bx	lr

0100fb88 <work_timeout>:
{
 100fb88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100fb8a:	4604      	mov	r4, r0
 100fb8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fb90:	f3ef 8511 	mrs	r5, BASEPRI
 100fb94:	f383 8811 	msr	BASEPRI, r3
 100fb98:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 100fb9c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 100fb9e:	f1a0 0610 	sub.w	r6, r0, #16
 100fba2:	2103      	movs	r1, #3
 100fba4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
 100fba6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 100fba8:	f7ff ffce 	bl	100fb48 <flag_test_and_clear>
 100fbac:	b128      	cbz	r0, 100fbba <work_timeout+0x32>
		queue = dw->queue;
 100fbae:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
 100fbb0:	4630      	mov	r0, r6
 100fbb2:	a901      	add	r1, sp, #4
		queue = dw->queue;
 100fbb4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 100fbb6:	f7fc fdf7 	bl	100c7a8 <submit_to_queue_locked>
	__asm__ volatile(
 100fbba:	f385 8811 	msr	BASEPRI, r5
 100fbbe:	f3bf 8f6f 	isb	sy
}
 100fbc2:	b002      	add	sp, #8
 100fbc4:	bd70      	pop	{r4, r5, r6, pc}

0100fbc6 <k_work_init>:
{
 100fbc6:	b538      	push	{r3, r4, r5, lr}
 100fbc8:	4604      	mov	r4, r0
 100fbca:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 100fbcc:	2210      	movs	r2, #16
 100fbce:	2100      	movs	r1, #0
 100fbd0:	f7fe fcec 	bl	100e5ac <memset>
 100fbd4:	6065      	str	r5, [r4, #4]
}
 100fbd6:	bd38      	pop	{r3, r4, r5, pc}

0100fbd8 <k_work_submit_to_queue>:
{
 100fbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100fbda:	9001      	str	r0, [sp, #4]
 100fbdc:	4608      	mov	r0, r1
	__asm__ volatile(
 100fbde:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fbe2:	f3ef 8511 	mrs	r5, BASEPRI
 100fbe6:	f383 8811 	msr	BASEPRI, r3
 100fbea:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 100fbee:	a901      	add	r1, sp, #4
 100fbf0:	f7fc fdda 	bl	100c7a8 <submit_to_queue_locked>
 100fbf4:	4604      	mov	r4, r0
	__asm__ volatile(
 100fbf6:	f385 8811 	msr	BASEPRI, r5
 100fbfa:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 100fbfe:	2800      	cmp	r0, #0
 100fc00:	dd04      	ble.n	100fc0c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 100fc02:	f7fd f9b3 	bl	100cf6c <z_impl_k_is_preempt_thread>
 100fc06:	b108      	cbz	r0, 100fc0c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 100fc08:	f7fd f908 	bl	100ce1c <z_impl_k_yield>
}
 100fc0c:	4620      	mov	r0, r4
 100fc0e:	b003      	add	sp, #12
 100fc10:	bd30      	pop	{r4, r5, pc}

0100fc12 <k_work_init_delayable>:
{
 100fc12:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
 100fc14:	2230      	movs	r2, #48	; 0x30
{
 100fc16:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 100fc18:	2100      	movs	r1, #0
{
 100fc1a:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
 100fc1c:	f7fe fcc6 	bl	100e5ac <memset>
 100fc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 100fc24:	6065      	str	r5, [r4, #4]
 100fc26:	60e3      	str	r3, [r4, #12]
}
 100fc28:	bd38      	pop	{r3, r4, r5, pc}

0100fc2a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 100fc2a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 100fc2e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 100fc30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 100fc32:	2300      	movs	r3, #0
	node->prev = NULL;
 100fc34:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 100fc38:	4770      	bx	lr

0100fc3a <unpend_thread_no_timeout>:
{
 100fc3a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 100fc3c:	f7ff fff5 	bl	100fc2a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 100fc40:	7b43      	ldrb	r3, [r0, #13]
 100fc42:	f023 0302 	bic.w	r3, r3, #2
 100fc46:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 100fc48:	2300      	movs	r3, #0
 100fc4a:	6083      	str	r3, [r0, #8]
}
 100fc4c:	bd08      	pop	{r3, pc}

0100fc4e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 100fc4e:	4603      	mov	r3, r0
 100fc50:	b920      	cbnz	r0, 100fc5c <z_reschedule_irqlock+0xe>
 100fc52:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 100fc56:	b90a      	cbnz	r2, 100fc5c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 100fc58:	f7f5 bec0 	b.w	10059dc <arch_swap>
 100fc5c:	f383 8811 	msr	BASEPRI, r3
 100fc60:	f3bf 8f6f 	isb	sy
}
 100fc64:	4770      	bx	lr

0100fc66 <z_reschedule_unlocked>:
	__asm__ volatile(
 100fc66:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fc6a:	f3ef 8011 	mrs	r0, BASEPRI
 100fc6e:	f383 8811 	msr	BASEPRI, r3
 100fc72:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 100fc76:	f7ff bfea 	b.w	100fc4e <z_reschedule_irqlock>

0100fc7a <z_priq_dumb_best>:
{
 100fc7a:	4603      	mov	r3, r0
	return list->head == list;
 100fc7c:	6800      	ldr	r0, [r0, #0]
}
 100fc7e:	4283      	cmp	r3, r0
 100fc80:	bf08      	it	eq
 100fc82:	2000      	moveq	r0, #0
 100fc84:	4770      	bx	lr

0100fc86 <add_to_waitq_locked>:
{
 100fc86:	b538      	push	{r3, r4, r5, lr}
 100fc88:	4604      	mov	r4, r0
 100fc8a:	460d      	mov	r5, r1
	unready_thread(thread);
 100fc8c:	f7fc ff04 	bl	100ca98 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 100fc90:	7b63      	ldrb	r3, [r4, #13]
 100fc92:	f043 0302 	orr.w	r3, r3, #2
 100fc96:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 100fc98:	b195      	cbz	r5, 100fcc0 <add_to_waitq_locked+0x3a>
 100fc9a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 100fc9c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100fc9e:	429d      	cmp	r5, r3
 100fca0:	d015      	beq.n	100fcce <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100fca2:	b1a3      	cbz	r3, 100fcce <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 100fca4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 100fca8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 100fcac:	4291      	cmp	r1, r2
 100fcae:	d008      	beq.n	100fcc2 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 100fcb0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 100fcb2:	2a00      	cmp	r2, #0
 100fcb4:	dd05      	ble.n	100fcc2 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 100fcb6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 100fcb8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 100fcbc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 100fcbe:	605c      	str	r4, [r3, #4]
}
 100fcc0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 100fcc2:	686a      	ldr	r2, [r5, #4]
 100fcc4:	4293      	cmp	r3, r2
 100fcc6:	d002      	beq.n	100fcce <add_to_waitq_locked+0x48>
 100fcc8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100fcca:	2b00      	cmp	r3, #0
 100fccc:	d1ec      	bne.n	100fca8 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 100fcce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 100fcd0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 100fcd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 100fcd6:	606c      	str	r4, [r5, #4]
}
 100fcd8:	e7f2      	b.n	100fcc0 <add_to_waitq_locked+0x3a>

0100fcda <z_ready_thread>:
{
 100fcda:	b510      	push	{r4, lr}
 100fcdc:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fce0:	f3ef 8411 	mrs	r4, BASEPRI
 100fce4:	f383 8811 	msr	BASEPRI, r3
 100fce8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 100fcec:	f7fc ffee 	bl	100cccc <ready_thread>
	__asm__ volatile(
 100fcf0:	f384 8811 	msr	BASEPRI, r4
 100fcf4:	f3bf 8f6f 	isb	sy
}
 100fcf8:	bd10      	pop	{r4, pc}

0100fcfa <z_thread_timeout>:
{
 100fcfa:	4601      	mov	r1, r0
 100fcfc:	b510      	push	{r4, lr}
	__asm__ volatile(
 100fcfe:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fd02:	f3ef 8411 	mrs	r4, BASEPRI
 100fd06:	f383 8811 	msr	BASEPRI, r3
 100fd0a:	f3bf 8f6f 	isb	sy
		if (!killed) {
 100fd0e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 100fd12:	f013 0f28 	tst.w	r3, #40	; 0x28
 100fd16:	d10d      	bne.n	100fd34 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 100fd18:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 100fd1c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 100fd1e:	b10b      	cbz	r3, 100fd24 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 100fd20:	f7ff ff8b 	bl	100fc3a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 100fd24:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 100fd28:	f023 0314 	bic.w	r3, r3, #20
 100fd2c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 100fd30:	f7fc ffcc 	bl	100cccc <ready_thread>
	__asm__ volatile(
 100fd34:	f384 8811 	msr	BASEPRI, r4
 100fd38:	f3bf 8f6f 	isb	sy
}
 100fd3c:	bd10      	pop	{r4, pc}

0100fd3e <z_unpend_first_thread>:
{
 100fd3e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100fd40:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fd44:	f3ef 8511 	mrs	r5, BASEPRI
 100fd48:	f383 8811 	msr	BASEPRI, r3
 100fd4c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 100fd50:	f7ff ff93 	bl	100fc7a <z_priq_dumb_best>
		if (thread != NULL) {
 100fd54:	4604      	mov	r4, r0
 100fd56:	b120      	cbz	r0, 100fd62 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 100fd58:	f7ff ff6f 	bl	100fc3a <unpend_thread_no_timeout>
 100fd5c:	3018      	adds	r0, #24
 100fd5e:	f000 f823 	bl	100fda8 <z_abort_timeout>
	__asm__ volatile(
 100fd62:	f385 8811 	msr	BASEPRI, r5
 100fd66:	f3bf 8f6f 	isb	sy
}
 100fd6a:	4620      	mov	r0, r4
 100fd6c:	bd38      	pop	{r3, r4, r5, pc}

0100fd6e <z_sched_wake>:
{
 100fd6e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100fd70:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fd74:	f3ef 8511 	mrs	r5, BASEPRI
 100fd78:	f383 8811 	msr	BASEPRI, r3
 100fd7c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 100fd80:	f7ff ff7b 	bl	100fc7a <z_priq_dumb_best>
		if (thread != NULL) {
 100fd84:	4604      	mov	r4, r0
 100fd86:	b150      	cbz	r0, 100fd9e <z_sched_wake+0x30>
 100fd88:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 100fd8a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 100fd8c:	f7ff ff55 	bl	100fc3a <unpend_thread_no_timeout>
 100fd90:	3018      	adds	r0, #24
 100fd92:	f000 f809 	bl	100fda8 <z_abort_timeout>
			ready_thread(thread);
 100fd96:	4620      	mov	r0, r4
 100fd98:	f7fc ff98 	bl	100cccc <ready_thread>
			ret = true;
 100fd9c:	2001      	movs	r0, #1
	__asm__ volatile(
 100fd9e:	f385 8811 	msr	BASEPRI, r5
 100fda2:	f3bf 8f6f 	isb	sy
}
 100fda6:	bd38      	pop	{r3, r4, r5, pc}

0100fda8 <z_abort_timeout>:
{
 100fda8:	b510      	push	{r4, lr}
	__asm__ volatile(
 100fdaa:	f04f 0240 	mov.w	r2, #64	; 0x40
 100fdae:	f3ef 8411 	mrs	r4, BASEPRI
 100fdb2:	f382 8811 	msr	BASEPRI, r2
 100fdb6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 100fdba:	6803      	ldr	r3, [r0, #0]
 100fdbc:	b13b      	cbz	r3, 100fdce <z_abort_timeout+0x26>
			remove_timeout(to);
 100fdbe:	f7fd f995 	bl	100d0ec <remove_timeout>
			ret = 0;
 100fdc2:	2000      	movs	r0, #0
	__asm__ volatile(
 100fdc4:	f384 8811 	msr	BASEPRI, r4
 100fdc8:	f3bf 8f6f 	isb	sy
}
 100fdcc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 100fdce:	f06f 0015 	mvn.w	r0, #21
 100fdd2:	e7f7      	b.n	100fdc4 <z_abort_timeout+0x1c>

0100fdd4 <z_set_timeout_expiry>:
{
 100fdd4:	b570      	push	{r4, r5, r6, lr}
 100fdd6:	4604      	mov	r4, r0
 100fdd8:	460d      	mov	r5, r1
	__asm__ volatile(
 100fdda:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fdde:	f3ef 8611 	mrs	r6, BASEPRI
 100fde2:	f383 8811 	msr	BASEPRI, r3
 100fde6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 100fdea:	f7fd f957 	bl	100d09c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 100fdee:	2801      	cmp	r0, #1
 100fdf0:	dd05      	ble.n	100fdfe <z_set_timeout_expiry+0x2a>
 100fdf2:	42a0      	cmp	r0, r4
 100fdf4:	db03      	blt.n	100fdfe <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 100fdf6:	4629      	mov	r1, r5
 100fdf8:	4620      	mov	r0, r4
 100fdfa:	f7f5 fda5 	bl	1005948 <sys_clock_set_timeout>
	__asm__ volatile(
 100fdfe:	f386 8811 	msr	BASEPRI, r6
 100fe02:	f3bf 8f6f 	isb	sy
}
 100fe06:	bd70      	pop	{r4, r5, r6, pc}

0100fe08 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 100fe08:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 100fe0a:	f7fd fa5f 	bl	100d2cc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 100fe0e:	bd08      	pop	{r3, pc}

0100fe10 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 100fe10:	b108      	cbz	r0, 100fe16 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
 100fe12:	f7f5 b993 	b.w	100513c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 100fe16:	4770      	bx	lr

0100fe18 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100fe18:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 100fe1c:	bf08      	it	eq
 100fe1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 100fe22:	b538      	push	{r3, r4, r5, lr}
 100fe24:	4605      	mov	r5, r0
 100fe26:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 100fe28:	d01d      	beq.n	100fe66 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 100fe2a:	ea51 0300 	orrs.w	r3, r1, r0
 100fe2e:	d103      	bne.n	100fe38 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 100fe30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 100fe34:	f7fd ba4a 	b.w	100d2cc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 100fe38:	f06f 0301 	mvn.w	r3, #1
 100fe3c:	1a18      	subs	r0, r3, r0
 100fe3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100fe42:	eb63 0101 	sbc.w	r1, r3, r1
 100fe46:	2900      	cmp	r1, #0
 100fe48:	da0c      	bge.n	100fe64 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
 100fe4a:	f7fd fa3f 	bl	100d2cc <sys_clock_tick_get>
 100fe4e:	2d01      	cmp	r5, #1
 100fe50:	4622      	mov	r2, r4
 100fe52:	f174 0400 	sbcs.w	r4, r4, #0
 100fe56:	462b      	mov	r3, r5
 100fe58:	bfbc      	itt	lt
 100fe5a:	2301      	movlt	r3, #1
 100fe5c:	2200      	movlt	r2, #0
 100fe5e:	1818      	adds	r0, r3, r0
 100fe60:	eb41 0102 	adc.w	r1, r1, r2
}
 100fe64:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 100fe66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100fe6a:	4601      	mov	r1, r0
 100fe6c:	e7fa      	b.n	100fe64 <sys_clock_timeout_end_calc+0x4c>

0100fe6e <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 100fe6e:	3204      	adds	r2, #4
{
 100fe70:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 100fe72:	4604      	mov	r4, r0
 100fe74:	d208      	bcs.n	100fe88 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 100fe76:	2600      	movs	r6, #0
 100fe78:	2700      	movs	r7, #0
 100fe7a:	f041 0104 	orr.w	r1, r1, #4
 100fe7e:	e9cd 6700 	strd	r6, r7, [sp]
 100fe82:	f000 f814 	bl	100feae <k_heap_aligned_alloc>
	if (mem == NULL) {
 100fe86:	b910      	cbnz	r0, 100fe8e <z_heap_aligned_alloc+0x20>
		return NULL;
 100fe88:	2000      	movs	r0, #0
}
 100fe8a:	b002      	add	sp, #8
 100fe8c:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 100fe8e:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 100fe92:	e7fa      	b.n	100fe8a <z_heap_aligned_alloc+0x1c>

0100fe94 <k_malloc>:

	return ret;
}

void *k_malloc(size_t size)
{
 100fe94:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
 100fe96:	2004      	movs	r0, #4
 100fe98:	f7fd ba30 	b.w	100d2fc <k_aligned_alloc>

0100fe9c <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 100fe9c:	4770      	bx	lr

0100fe9e <k_heap_init>:
{
 100fe9e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 100fea0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 100fea4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 100fea8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 100feaa:	f7fe b97b 	b.w	100e1a4 <sys_heap_init>

0100feae <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 100feae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100feb2:	b085      	sub	sp, #20
 100feb4:	4606      	mov	r6, r0
 100feb6:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 100feb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
 100febc:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 100febe:	f7ff ffab 	bl	100fe18 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 100fec2:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 100fec6:	4605      	mov	r5, r0
 100fec8:	460f      	mov	r7, r1
	__asm__ volatile(
 100feca:	f04f 0340 	mov.w	r3, #64	; 0x40
 100fece:	f3ef 8411 	mrs	r4, BASEPRI
 100fed2:	f383 8811 	msr	BASEPRI, r3
 100fed6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 100feda:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 100fede:	464a      	mov	r2, r9
 100fee0:	4641      	mov	r1, r8
 100fee2:	4630      	mov	r0, r6
 100fee4:	f7fe f8e3 	bl	100e0ae <sys_heap_aligned_alloc>
 100fee8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 100feea:	f7fd f9ef 	bl	100d2cc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 100feee:	9b03      	ldr	r3, [sp, #12]
 100fef0:	b13b      	cbz	r3, 100ff02 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 100fef2:	f384 8811 	msr	BASEPRI, r4
 100fef6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 100fefa:	4618      	mov	r0, r3
 100fefc:	b005      	add	sp, #20
 100fefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 100ff02:	1a28      	subs	r0, r5, r0
 100ff04:	eb67 0101 	sbc.w	r1, r7, r1
 100ff08:	2801      	cmp	r0, #1
 100ff0a:	f171 0200 	sbcs.w	r2, r1, #0
 100ff0e:	dbf0      	blt.n	100fef2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 100ff10:	e9cd 0100 	strd	r0, r1, [sp]
 100ff14:	465a      	mov	r2, fp
 100ff16:	4621      	mov	r1, r4
 100ff18:	4650      	mov	r0, sl
 100ff1a:	f7fc fdfb 	bl	100cb14 <z_pend_curr>
	__asm__ volatile(
 100ff1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 100ff22:	f3ef 8411 	mrs	r4, BASEPRI
 100ff26:	f383 8811 	msr	BASEPRI, r3
 100ff2a:	f3bf 8f6f 	isb	sy
 100ff2e:	e7d6      	b.n	100fede <k_heap_aligned_alloc+0x30>

0100ff30 <nrf_802154_sl_ant_div_antenna_set>:
 100ff30:	2000      	movs	r0, #0
 100ff32:	4770      	bx	lr

0100ff34 <nrf_802154_sl_ant_div_rx_frame_started_notify>:
 100ff34:	2000      	movs	r0, #0
 100ff36:	4770      	bx	lr

0100ff38 <nrf_802154_sl_ant_div_rx_frame_received_notify>:
 100ff38:	4770      	bx	lr

0100ff3a <nrf_802154_sl_ant_div_rx_aborted_notify>:
 100ff3a:	4770      	bx	lr

0100ff3c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>:
 100ff3c:	4770      	bx	lr

0100ff3e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>:
 100ff3e:	4770      	bx	lr

0100ff40 <nrf_802154_sl_ant_div_energy_detection_requested_notify>:
 100ff40:	4770      	bx	lr

0100ff42 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>:
 100ff42:	4770      	bx	lr

0100ff44 <nrf_802154_sl_ant_div_energy_detection_finished_notify>:
 100ff44:	2000      	movs	r0, #0
 100ff46:	4770      	bx	lr

0100ff48 <nrf_802154_sl_ant_div_rx_started_notify>:
 100ff48:	4770      	bx	lr

0100ff4a <nrf_802154_sl_ant_div_txack_notify>:
 100ff4a:	4770      	bx	lr

0100ff4c <nrf_802154_sl_ant_div_cfg_mode_get>:
 100ff4c:	2000      	movs	r0, #0
 100ff4e:	4770      	bx	lr

0100ff50 <nrf_802154_sl_ant_div_cfg_antenna_get>:
 100ff50:	2002      	movs	r0, #2
 100ff52:	4770      	bx	lr

0100ff54 <nrf_802154_sl_capabilities_get>:
 100ff54:	2011      	movs	r0, #17
 100ff56:	4770      	bx	lr

0100ff58 <nrf_802154_sl_log_init>:
 100ff58:	4770      	bx	lr

0100ff5a <dly_ts_from_pool_alloc>:
 100ff5a:	b510      	push	{r4, lr}
 100ff5c:	4603      	mov	r3, r0
 100ff5e:	3024      	adds	r0, #36	; 0x24
 100ff60:	e850 4f00 	ldrex	r4, [r0]
 100ff64:	3401      	adds	r4, #1
 100ff66:	d11a      	bne.n	100ff9e <dly_ts_from_pool_alloc+0x44>
 100ff68:	e840 2400 	strex	r4, r2, [r0]
 100ff6c:	2c00      	cmp	r4, #0
 100ff6e:	d1f7      	bne.n	100ff60 <dly_ts_from_pool_alloc+0x6>
 100ff70:	2401      	movs	r4, #1
 100ff72:	f3bf 8f5f 	dmb	sy
 100ff76:	b9a4      	cbnz	r4, 100ffa2 <dly_ts_from_pool_alloc+0x48>
 100ff78:	2902      	cmp	r1, #2
 100ff7a:	d10e      	bne.n	100ff9a <dly_ts_from_pool_alloc+0x40>
 100ff7c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 100ff80:	334c      	adds	r3, #76	; 0x4c
 100ff82:	e853 1f00 	ldrex	r1, [r3]
 100ff86:	3101      	adds	r1, #1
 100ff88:	d104      	bne.n	100ff94 <dly_ts_from_pool_alloc+0x3a>
 100ff8a:	e843 2100 	strex	r1, r2, [r3]
 100ff8e:	2900      	cmp	r1, #0
 100ff90:	d1f7      	bne.n	100ff82 <dly_ts_from_pool_alloc+0x28>
 100ff92:	2401      	movs	r4, #1
 100ff94:	f3bf 8f5f 	dmb	sy
 100ff98:	b904      	cbnz	r4, 100ff9c <dly_ts_from_pool_alloc+0x42>
 100ff9a:	2000      	movs	r0, #0
 100ff9c:	bd10      	pop	{r4, pc}
 100ff9e:	2400      	movs	r4, #0
 100ffa0:	e7e7      	b.n	100ff72 <dly_ts_from_pool_alloc+0x18>
 100ffa2:	4618      	mov	r0, r3
 100ffa4:	e7fa      	b.n	100ff9c <dly_ts_from_pool_alloc+0x42>

0100ffa6 <delayed_timeslot_start>:
 100ffa6:	b510      	push	{r4, lr}
 100ffa8:	4604      	mov	r4, r0
 100ffaa:	e9d0 3008 	ldrd	r3, r0, [r0, #32]
 100ffae:	4798      	blx	r3
 100ffb0:	7fa3      	ldrb	r3, [r4, #30]
 100ffb2:	2b01      	cmp	r3, #1
 100ffb4:	d107      	bne.n	100ffc6 <delayed_timeslot_start+0x20>
 100ffb6:	2300      	movs	r3, #0
 100ffb8:	7723      	strb	r3, [r4, #28]
 100ffba:	f7fd f9e3 	bl	100d384 <all_prec_update>
 100ffbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100ffc2:	f7fd bac3 	b.w	100d54c <notify_core>
 100ffc6:	bd10      	pop	{r4, pc}

0100ffc8 <nrf_802154_rsch_timeslot_request>:
 100ffc8:	f7f4 bb91 	b.w	10046ee <nrf_raal_timeslot_request>

0100ffcc <nrf_802154_rsch_delayed_timeslot_cancel>:
 100ffcc:	b513      	push	{r0, r1, r4, lr}
 100ffce:	f7fd f9c9 	bl	100d364 <dly_ts_by_id_search>
 100ffd2:	4604      	mov	r4, r0
 100ffd4:	b1d8      	cbz	r0, 101000e <nrf_802154_rsch_delayed_timeslot_cancel+0x42>
 100ffd6:	f10d 0107 	add.w	r1, sp, #7
 100ffda:	f000 f84f 	bl	101007c <nrf_802154_timer_sched_remove>
 100ffde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 100ffe0:	3301      	adds	r3, #1
 100ffe2:	d00a      	beq.n	100fffa <nrf_802154_rsch_delayed_timeslot_cancel+0x2e>
 100ffe4:	2300      	movs	r3, #0
 100ffe6:	7723      	strb	r3, [r4, #28]
 100ffe8:	f3bf 8f5f 	dmb	sy
 100ffec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100fff0:	6263      	str	r3, [r4, #36]	; 0x24
 100fff2:	f7fd f9c7 	bl	100d384 <all_prec_update>
 100fff6:	f7fd faa9 	bl	100d54c <notify_core>
 100fffa:	7fa3      	ldrb	r3, [r4, #30]
 100fffc:	b12b      	cbz	r3, 101000a <nrf_802154_rsch_delayed_timeslot_cancel+0x3e>
 100fffe:	2b01      	cmp	r3, #1
 1010000:	d105      	bne.n	101000e <nrf_802154_rsch_delayed_timeslot_cancel+0x42>
 1010002:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1010006:	b002      	add	sp, #8
 1010008:	bd10      	pop	{r4, pc}
 101000a:	2001      	movs	r0, #1
 101000c:	e7fb      	b.n	1010006 <nrf_802154_rsch_delayed_timeslot_cancel+0x3a>
 101000e:	2000      	movs	r0, #0
 1010010:	e7f9      	b.n	1010006 <nrf_802154_rsch_delayed_timeslot_cancel+0x3a>

01010012 <nrf_802154_rsch_delayed_timeslot_priority_update>:
 1010012:	b510      	push	{r4, lr}
 1010014:	460c      	mov	r4, r1
 1010016:	f7fd f9a5 	bl	100d364 <dly_ts_by_id_search>
 101001a:	4603      	mov	r3, r0
 101001c:	b118      	cbz	r0, 1010026 <nrf_802154_rsch_delayed_timeslot_priority_update+0x14>
 101001e:	7f00      	ldrb	r0, [r0, #28]
 1010020:	b108      	cbz	r0, 1010026 <nrf_802154_rsch_delayed_timeslot_priority_update+0x14>
 1010022:	2001      	movs	r0, #1
 1010024:	771c      	strb	r4, [r3, #28]
 1010026:	bd10      	pop	{r4, pc}

01010028 <nrf_802154_rsch_timeslot_us_left_get>:
 1010028:	f7f3 bf2a 	b.w	1003e80 <nrf_raal_timeslot_us_left_get>

0101002c <nrf_802154_rsch_crit_sect_prio_request>:
 101002c:	f7fd baea 	b.w	100d604 <nrf_802154_rsch_continuous_mode_priority_set>

01010030 <nrf_802154_critical_section_rsch_enter>:
 1010030:	4770      	bx	lr

01010032 <nrf_802154_timer_coord_init>:
 1010032:	4770      	bx	lr

01010034 <nrf_802154_timer_coord_start>:
 1010034:	4770      	bx	lr

01010036 <nrf_802154_timer_coord_stop>:
 1010036:	4770      	bx	lr

01010038 <mutex_trylock>:
 1010038:	2201      	movs	r2, #1
 101003a:	b082      	sub	sp, #8
 101003c:	e8d0 3f4f 	ldrexb	r3, [r0]
 1010040:	b2db      	uxtb	r3, r3
 1010042:	f88d 3007 	strb.w	r3, [sp, #7]
 1010046:	f89d 3007 	ldrb.w	r3, [sp, #7]
 101004a:	b123      	cbz	r3, 1010056 <mutex_trylock+0x1e>
 101004c:	f3bf 8f2f 	clrex
 1010050:	2000      	movs	r0, #0
 1010052:	b002      	add	sp, #8
 1010054:	4770      	bx	lr
 1010056:	e8c0 2f43 	strexb	r3, r2, [r0]
 101005a:	2b00      	cmp	r3, #0
 101005c:	d1ee      	bne.n	101003c <mutex_trylock+0x4>
 101005e:	f3bf 8f5f 	dmb	sy
 1010062:	2001      	movs	r0, #1
 1010064:	e7f5      	b.n	1010052 <mutex_trylock+0x1a>

01010066 <nrf_802154_timer_sched_time_get>:
 1010066:	f7fe bbab 	b.w	100e7c0 <nrf_802154_lp_timer_time_get>

0101006a <nrf_802154_timer_sched_granularity_get>:
 101006a:	f7fe bbb7 	b.w	100e7dc <nrf_802154_lp_timer_granularity_get>

0101006e <nrf_802154_timer_sched_time_is_in_future>:
 101006e:	1a12      	subs	r2, r2, r0
 1010070:	440a      	add	r2, r1
 1010072:	2a00      	cmp	r2, #0
 1010074:	bfd4      	ite	le
 1010076:	2000      	movle	r0, #0
 1010078:	2001      	movgt	r0, #1
 101007a:	4770      	bx	lr

0101007c <nrf_802154_timer_sched_remove>:
 101007c:	b508      	push	{r3, lr}
 101007e:	f7fd fc31 	bl	100d8e4 <timer_remove>
 1010082:	b118      	cbz	r0, 101008c <nrf_802154_timer_sched_remove+0x10>
 1010084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1010088:	f7fd bc82 	b.w	100d990 <handle_timer>
 101008c:	bd08      	pop	{r3, pc}

0101008e <nrf_802154_wifi_coex_is_enabled>:
 101008e:	2001      	movs	r0, #1
 1010090:	4770      	bx	lr
	...

01010094 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 1010094:	f7fb bcbc 	b.w	100ba10 <SystemInit>
